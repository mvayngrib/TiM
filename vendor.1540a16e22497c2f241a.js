webpackJsonp([2,7],Array(293).concat([
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };
	
	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value instanceof AwaitArgument) {
	          return Promise.resolve(value.arg).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(294)))

/***/ },
/* 294 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 308 */,
/* 309 */,
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(311);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (true) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;

/***/ },
/* 311 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (true) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;

/***/ },
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(307);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function keyMirror(obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ?  true ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;

/***/ },
/* 323 */,
/* 324 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ },
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var builtinStyle = __webpack_require__(336);
	var prefixes = ['Moz', 'Webkit', 'O', 'ms'];
	var domVendorPrefix;
	
	// Helper function to get the proper vendor property name. (transition => WebkitTransition)
	module.exports = function(prop, isSupportTest) {
	
	  var vendorProp;
	  if (prop in builtinStyle) return prop;
	
	  var UpperProp = prop.charAt(0).toUpperCase() + prop.substr(1);
	
	  if (domVendorPrefix) {
	
	    vendorProp = domVendorPrefix + UpperProp;
	    if (vendorProp in builtinStyle) {
	      return vendorProp;
	    }
	  } else {
	
	    for (var i = 0; i < prefixes.length; ++i) {
	      vendorProp = prefixes[i] + UpperProp;
	      if (vendorProp in builtinStyle) {
	        domVendorPrefix = prefixes[i];
	        return vendorProp;
	      }
	    }
	  }
	
	  // if support test, not fallback to origin prop name
	  if (!isSupportTest) {
	    return prop;
	  }
	
	}


/***/ },
/* 336 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = document.createElement('div').style;


/***/ },
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(379);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(360);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(360);
	
	var createArrayFromMixed = __webpack_require__(401);
	var getMarkupWrap = __webpack_require__(402);
	var invariant = __webpack_require__(307);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(307);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(360);
	
	var invariant = __webpack_require__(307);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;

/***/ },
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 408 */,
/* 409 */,
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(411);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 411 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 412 */,
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(414);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 414 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 415 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(311);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (true) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;

/***/ },
/* 450 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(457);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(458);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 458 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 459 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getVendorPropertyName = __webpack_require__(335);
	
	module.exports = function(target, sources) {
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  var prefixed = {};
	  for (var key in to) {
	    prefixed[getVendorPropertyName(key)] = to[key]
	  }
	
	  return prefixed
	}


/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var insertRule = __webpack_require__(489);
	var vendorPrefix = __webpack_require__(490)();
	var index = 0;
	
	module.exports = function(keyframes) {
	  // random name
	  var name = 'anim_' + (++index) + (+new Date);
	  var css = "@" + vendorPrefix + "keyframes " + name + " {";
	
	  for (var key in keyframes) {
	    css += key + " {";
	
	    for (var property in keyframes[key]) {
	      var part = ":" + keyframes[key][property] + ";";
	      // We do vendor prefix for every property
	      css += vendorPrefix + property + part;
	      css += property + part;
	    }
	
	    css += "}";
	  }
	
	  css += "}";
	
	  insertRule(css);
	
	  return name
	}


/***/ },
/* 489 */
/***/ function(module, exports) {

	'use strict';
	
	var extraSheet;
	
	module.exports = function(css) {
	
	  if (!extraSheet) {
	    // First time, create an extra stylesheet for adding rules
	    extraSheet = document.createElement('style');
	    document.getElementsByTagName('head')[0].appendChild(extraSheet);
	    // Keep reference to actual StyleSheet object (`styleSheet` for IE < 9)
	    extraSheet = extraSheet.sheet || extraSheet.styleSheet;
	  }
	
	  var index = (extraSheet.cssRules || extraSheet.rules).length;
	  extraSheet.insertRule(css, index);
	
	  return extraSheet;
	}


/***/ },
/* 490 */
/***/ function(module, exports) {

	'use strict';
	
	var cssVendorPrefix;
	
	module.exports = function() {
	
	  if (cssVendorPrefix) return cssVendorPrefix;
	
	  var styles = window.getComputedStyle(document.documentElement, '');
	  var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o']))[1];
	
	  return cssVendorPrefix = '-' + pre + '-';
	}


/***/ },
/* 491 */,
/* 492 */
/***/ function(module, exports) {

	var objToStr = function(x){ return Object.prototype.toString.call(x); };
	
	var thrower = function(error){
	    throw error;
	};
	
	var mixins = module.exports = function makeMixinFunction(rules, _opts){
	    var opts = _opts || {};
	    if (!opts.unknownFunction) {
	        opts.unknownFunction = mixins.ONCE;
	    }
	
	    if (!opts.nonFunctionProperty) {
	        opts.nonFunctionProperty = function(left, right, key){
	            if (left !== undefined && right !== undefined) {
	                var getTypeName = function(obj){
	                    if (obj && obj.constructor && obj.constructor.name) {
	                        return obj.constructor.name;
	                    }
	                    else {
	                        return objToStr(obj).slice(8, -1);
	                    }
	                };
	                throw new TypeError('Cannot mixin key ' + key + ' because it is provided by multiple sources, '
	                        + 'and the types are ' + getTypeName(left) + ' and ' + getTypeName(right));
	            }
	            return left === undefined ? right : left;
	        };
	    }
	
	    function setNonEnumerable(target, key, value){
	        if (key in target){
	            target[key] = value;
	        }
	        else {
	            Object.defineProperty(target, key, {
	                value: value,
	                writable: true,
	                configurable: true
	            });
	        }
	    }
	
	    return function applyMixin(source, mixin){
	        Object.keys(mixin).forEach(function(key){
	            var left = source[key], right = mixin[key], rule = rules[key];
	
	            // this is just a weird case where the key was defined, but there's no value
	            // behave like the key wasn't defined
	            if (left === undefined && right === undefined) return;
	
	            var wrapIfFunction = function(thing){
	                return typeof thing !== "function" ? thing
	                : function(){
	                    return thing.call(this, arguments);
	                };
	            };
	
	            // do we have a rule for this key?
	            if (rule) {
	                // may throw here
	                var fn = rule(left, right, key);
	                setNonEnumerable(source, key, wrapIfFunction(fn));
	                return;
	            }
	
	            var leftIsFn = typeof left === "function";
	            var rightIsFn = typeof right === "function";
	
	            // check to see if they're some combination of functions or undefined
	            // we already know there's no rule, so use the unknown function behavior
	            if (leftIsFn && right === undefined
	             || rightIsFn && left === undefined
	             || leftIsFn && rightIsFn) {
	                // may throw, the default is ONCE so if both are functions
	                // the default is to throw
	                setNonEnumerable(source, key, wrapIfFunction(opts.unknownFunction(left, right, key)));
	                return;
	            }
	
	            // we have no rule for them, one may be a function but one or both aren't
	            // our default is MANY_MERGED_LOOSE which will merge objects, concat arrays
	            // and throw if there's a type mismatch or both are primitives (how do you merge 3, and "foo"?)
	            source[key] = opts.nonFunctionProperty(left, right, key);
	        });
	    };
	};
	
	mixins._mergeObjects = function(obj1, obj2) {
	    var assertObject = function(obj, obj2){
	        var type = objToStr(obj);
	        if (type !== '[object Object]') {
	            var displayType = obj.constructor ? obj.constructor.name : 'Unknown';
	            var displayType2 = obj2.constructor ? obj2.constructor.name : 'Unknown';
	            thrower('cannot merge returned value of type ' + displayType + ' with an ' + displayType2);
	        }
	    };
	
	    if (Array.isArray(obj1) && Array.isArray(obj2)) {
	        return obj1.concat(obj2);
	    }
	
	    assertObject(obj1, obj2);
	    assertObject(obj2, obj1);
	
	    var result = {};
	    Object.keys(obj1).forEach(function(k){
	        if (Object.prototype.hasOwnProperty.call(obj2, k)) {
	            thrower('cannot merge returns because both have the ' + JSON.stringify(k) + ' key');
	        }
	        result[k] = obj1[k];
	    });
	
	    Object.keys(obj2).forEach(function(k){
	        // we can skip the conflict check because all conflicts would already be found
	        result[k] = obj2[k];
	    });
	    return result;
	
	}
	
	// define our built-in mixin types
	mixins.ONCE = function(left, right, key){
	    if (left && right) {
	        throw new TypeError('Cannot mixin ' + key + ' because it has a unique constraint.');
	    }
	
	    var fn = left || right;
	
	    return function(args){
	        return fn.apply(this, args);
	    };
	};
	
	mixins.MANY = function(left, right, key){
	    return function(args){
	        if (right) right.apply(this, args);
	        return left ? left.apply(this, args) : undefined;
	    };
	};
	
	mixins.MANY_MERGED_LOOSE = function(left, right, key) {
	    if(left && right) {
	        return mixins._mergeObjects(left, right);
	    }
	
	    return left || right;
	}
	
	mixins.MANY_MERGED = function(left, right, key){
	    return function(args){
	        var res1 = right && right.apply(this, args);
	        var res2 = left && left.apply(this, args);
	        if (res1 && res2) {
	            return mixins._mergeObjects(res1, res2)
	        }
	        return res2 || res1;
	    };
	};
	
	
	mixins.REDUCE_LEFT = function(_left, _right, key){
	    var left = _left || function(x){ return x };
	    var right = _right || function(x){ return x };
	    return function(args){
	        return right.call(this, left.apply(this, args));
	    };
	};
	
	mixins.REDUCE_RIGHT = function(_left, _right, key){
	    var left = _left || function(x){ return x };
	    var right = _right || function(x){ return x };
	    return function(args){
	        return left.call(this, right.apply(this, args));
	    };
	};
	


/***/ },
/* 493 */,
/* 494 */
/***/ function(module, exports) {

	/**
	 * @copyright 2015, Andrey Popp <8mayday@gmail.com>
	 *
	 * The decorator may be used on classes or methods
	 * ```
	 * @autobind
	 * class FullBound {}
	 *
	 * class PartBound {
	 *   @autobind
	 *   method () {}
	 * }
	 * ```
	 */
	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = autobind;
	
	function autobind() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  if (args.length === 1) {
	    return boundClass.apply(undefined, args);
	  } else {
	    return boundMethod.apply(undefined, args);
	  }
	}
	
	/**
	 * Use boundMethod to bind all methods on the target.prototype
	 */
	function boundClass(target) {
	  // (Using reflect to get all keys including symbols)
	  var keys = undefined;
	  // Use Reflect if exists
	  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
	    keys = Reflect.ownKeys(target.prototype);
	  } else {
	    keys = Object.getOwnPropertyNames(target.prototype);
	    // use symbols if support is provided
	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
	    }
	  }
	
	  keys.forEach(function (key) {
	    // Ignore special case target method
	    if (key === 'constructor') {
	      return;
	    }
	
	    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);
	
	    // Only methods need binding
	    if (typeof descriptor.value === 'function') {
	      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
	    }
	  });
	  return target;
	}
	
	/**
	 * Return a descriptor removing the value and returning a getter
	 * The getter will return a .bind version of the function
	 * and memoize the result against a symbol on the instance
	 */
	function boundMethod(target, key, descriptor) {
	  var fn = descriptor.value;
	
	  if (typeof fn !== 'function') {
	    throw new Error('@autobind decorator can only be applied to methods not: ' + typeof fn);
	  }
	
	  return {
	    configurable: true,
	    get: function get() {
	      if (this === target.prototype || this.hasOwnProperty(key)) {
	        return fn;
	      }
	
	      var boundFn = fn.bind(this);
	      Object.defineProperty(this, key, {
	        value: boundFn,
	        configurable: true,
	        writable: true
	      });
	      return boundFn;
	    }
	  };
	}
	module.exports = exports['default'];


/***/ },
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (true) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;


/***/ },
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(509)() ? Set : __webpack_require__(510);


/***/ },
/* 509 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function () {
		var set, iterator, result;
		if (typeof Set !== 'function') return false;
		set = new Set(['raz', 'dwa', 'trzy']);
		if (String(set) !== '[object Set]') return false;
		if (set.size !== 3) return false;
		if (typeof set.add !== 'function') return false;
		if (typeof set.clear !== 'function') return false;
		if (typeof set.delete !== 'function') return false;
		if (typeof set.entries !== 'function') return false;
		if (typeof set.forEach !== 'function') return false;
		if (typeof set.has !== 'function') return false;
		if (typeof set.keys !== 'function') return false;
		if (typeof set.values !== 'function') return false;
	
		iterator = set.values();
		result = iterator.next();
		if (result.done !== false) return false;
		if (result.value !== 'raz') return false;
	
		return true;
	};


/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var clear          = __webpack_require__(511)
	  , eIndexOf       = __webpack_require__(513)
	  , setPrototypeOf = __webpack_require__(519)
	  , callable       = __webpack_require__(524)
	  , d              = __webpack_require__(525)
	  , ee             = __webpack_require__(537)
	  , Symbol         = __webpack_require__(538)
	  , iterator       = __webpack_require__(543)
	  , forOf          = __webpack_require__(547)
	  , Iterator       = __webpack_require__(557)
	  , isNative       = __webpack_require__(558)
	
	  , call = Function.prototype.call
	  , defineProperty = Object.defineProperty, getPrototypeOf = Object.getPrototypeOf
	  , SetPoly, getValues, NativeSet;
	
	if (isNative) NativeSet = Set;
	
	module.exports = SetPoly = function Set(/*iterable*/) {
		var iterable = arguments[0], self;
		if (!(this instanceof SetPoly)) throw new TypeError('Constructor requires \'new\'');
		if (isNative && setPrototypeOf) self = setPrototypeOf(new NativeSet(), getPrototypeOf(this));
		else self = this;
		if (iterable != null) iterator(iterable);
		defineProperty(self, '__setData__', d('c', []));
		if (!iterable) return self;
		forOf(iterable, function (value) {
			if (eIndexOf.call(this, value) !== -1) return;
			this.push(value);
		}, self.__setData__);
		return self;
	};
	
	if (isNative) {
		if (setPrototypeOf) setPrototypeOf(SetPoly, NativeSet);
		SetPoly.prototype = Object.create(NativeSet.prototype, { constructor: d(SetPoly) });
	}
	
	ee(Object.defineProperties(SetPoly.prototype, {
		add: d(function (value) {
			if (this.has(value)) return this;
			this.emit('_add', this.__setData__.push(value) - 1, value);
			return this;
		}),
		clear: d(function () {
			if (!this.__setData__.length) return;
			clear.call(this.__setData__);
			this.emit('_clear');
		}),
		delete: d(function (value) {
			var index = eIndexOf.call(this.__setData__, value);
			if (index === -1) return false;
			this.__setData__.splice(index, 1);
			this.emit('_delete', index, value);
			return true;
		}),
		entries: d(function () { return new Iterator(this, 'key+value'); }),
		forEach: d(function (cb/*, thisArg*/) {
			var thisArg = arguments[1], iterator, result, value;
			callable(cb);
			iterator = this.values();
			result = iterator._next();
			while (result !== undefined) {
				value = iterator._resolve(result);
				call.call(cb, thisArg, value, value, this);
				result = iterator._next();
			}
		}),
		has: d(function (value) {
			return (eIndexOf.call(this.__setData__, value) !== -1);
		}),
		keys: d(getValues = function () { return this.values(); }),
		size: d.gs(function () { return this.__setData__.length; }),
		values: d(function () { return new Iterator(this); }),
		toString: d(function () { return '[object Set]'; })
	}));
	defineProperty(SetPoly.prototype, Symbol.iterator, d(getValues));
	defineProperty(SetPoly.prototype, Symbol.toStringTag, d('c', 'Set'));


/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	// Inspired by Google Closure:
	// http://closure-library.googlecode.com/svn/docs/
	// closure_goog_array_array.js.html#goog.array.clear
	
	'use strict';
	
	var value = __webpack_require__(512);
	
	module.exports = function () {
		value(this).length = 0;
		return this;
	};


/***/ },
/* 512 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (value) {
		if (value == null) throw new TypeError("Cannot use null or undefined");
		return value;
	};


/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toPosInt = __webpack_require__(514)
	  , value    = __webpack_require__(512)
	
	  , indexOf = Array.prototype.indexOf
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , abs = Math.abs, floor = Math.floor;
	
	module.exports = function (searchElement/*, fromIndex*/) {
		var i, l, fromIndex, val;
		if (searchElement === searchElement) { //jslint: ignore
			return indexOf.apply(this, arguments);
		}
	
		l = toPosInt(value(this).length);
		fromIndex = arguments[1];
		if (isNaN(fromIndex)) fromIndex = 0;
		else if (fromIndex >= 0) fromIndex = floor(fromIndex);
		else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));
	
		for (i = fromIndex; i < l; ++i) {
			if (hasOwnProperty.call(this, i)) {
				val = this[i];
				if (val !== val) return i; //jslint: ignore
			}
		}
		return -1;
	};


/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(515)
	
	  , max = Math.max;
	
	module.exports = function (value) { return max(0, toInteger(value)); };


/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var sign = __webpack_require__(516)
	
	  , abs = Math.abs, floor = Math.floor;
	
	module.exports = function (value) {
		if (isNaN(value)) return 0;
		value = Number(value);
		if ((value === 0) || !isFinite(value)) return value;
		return sign(value) * floor(abs(value));
	};


/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(517)()
		? Math.sign
		: __webpack_require__(518);


/***/ },
/* 517 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function () {
		var sign = Math.sign;
		if (typeof sign !== 'function') return false;
		return ((sign(10) === 1) && (sign(-20) === -1));
	};


/***/ },
/* 518 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (value) {
		value = Number(value);
		if (isNaN(value) || (value === 0)) return value;
		return (value > 0) ? 1 : -1;
	};


/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(520)()
		? Object.setPrototypeOf
		: __webpack_require__(521);


/***/ },
/* 520 */
/***/ function(module, exports) {

	'use strict';
	
	var create = Object.create, getPrototypeOf = Object.getPrototypeOf
	  , x = {};
	
	module.exports = function (/*customCreate*/) {
		var setPrototypeOf = Object.setPrototypeOf
		  , customCreate = arguments[0] || create;
		if (typeof setPrototypeOf !== 'function') return false;
		return getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;
	};


/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	// Big thanks to @WebReflection for sorting this out
	// https://gist.github.com/WebReflection/5593554
	
	'use strict';
	
	var isObject      = __webpack_require__(522)
	  , value         = __webpack_require__(512)
	
	  , isPrototypeOf = Object.prototype.isPrototypeOf
	  , defineProperty = Object.defineProperty
	  , nullDesc = { configurable: true, enumerable: false, writable: true,
			value: undefined }
	  , validate;
	
	validate = function (obj, prototype) {
		value(obj);
		if ((prototype === null) || isObject(prototype)) return obj;
		throw new TypeError('Prototype must be null or an object');
	};
	
	module.exports = (function (status) {
		var fn, set;
		if (!status) return null;
		if (status.level === 2) {
			if (status.set) {
				set = status.set;
				fn = function (obj, prototype) {
					set.call(validate(obj, prototype), prototype);
					return obj;
				};
			} else {
				fn = function (obj, prototype) {
					validate(obj, prototype).__proto__ = prototype;
					return obj;
				};
			}
		} else {
			fn = function self(obj, prototype) {
				var isNullBase;
				validate(obj, prototype);
				isNullBase = isPrototypeOf.call(self.nullPolyfill, obj);
				if (isNullBase) delete self.nullPolyfill.__proto__;
				if (prototype === null) prototype = self.nullPolyfill;
				obj.__proto__ = prototype;
				if (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);
				return obj;
			};
		}
		return Object.defineProperty(fn, 'level', { configurable: false,
			enumerable: false, writable: false, value: status.level });
	}((function () {
		var x = Object.create(null), y = {}, set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');
	
		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(x, y);
			} catch (ignore) { }
			if (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };
		}
	
		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 2 };
	
		x = {};
		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 1 };
	
		return false;
	}())));
	
	__webpack_require__(523);


/***/ },
/* 522 */
/***/ function(module, exports) {

	'use strict';
	
	var map = { function: true, object: true };
	
	module.exports = function (x) {
		return ((x != null) && map[typeof x]) || false;
	};


/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	// Workaround for http://code.google.com/p/v8/issues/detail?id=2804
	
	'use strict';
	
	var create = Object.create, shim;
	
	if (!__webpack_require__(520)()) {
		shim = __webpack_require__(521);
	}
	
	module.exports = (function () {
		var nullObject, props, desc;
		if (!shim) return create;
		if (shim.level !== 1) return create;
	
		nullObject = {};
		props = {};
		desc = { configurable: false, enumerable: false, writable: true,
			value: undefined };
		Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
			if (name === '__proto__') {
				props[name] = { configurable: true, enumerable: false, writable: true,
					value: undefined };
				return;
			}
			props[name] = desc;
		});
		Object.defineProperties(nullObject, props);
	
		Object.defineProperty(shim, 'nullPolyfill', { configurable: false,
			enumerable: false, writable: false, value: nullObject });
	
		return function (prototype, props) {
			return create((prototype === null) ? nullObject : prototype, props);
		};
	}());


/***/ },
/* 524 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (fn) {
		if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
		return fn;
	};


/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assign        = __webpack_require__(526)
	  , normalizeOpts = __webpack_require__(532)
	  , isCallable    = __webpack_require__(533)
	  , contains      = __webpack_require__(534)
	
	  , d;
	
	d = module.exports = function (dscr, value/*, options*/) {
		var c, e, w, options, desc;
		if ((arguments.length < 2) || (typeof dscr !== 'string')) {
			options = value;
			value = dscr;
			dscr = null;
		} else {
			options = arguments[2];
		}
		if (dscr == null) {
			c = w = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
			w = contains.call(dscr, 'w');
		}
	
		desc = { value: value, configurable: c, enumerable: e, writable: w };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};
	
	d.gs = function (dscr, get, set/*, options*/) {
		var c, e, options, desc;
		if (typeof dscr !== 'string') {
			options = set;
			set = get;
			get = dscr;
			dscr = null;
		} else {
			options = arguments[3];
		}
		if (get == null) {
			get = undefined;
		} else if (!isCallable(get)) {
			options = get;
			get = set = undefined;
		} else if (set == null) {
			set = undefined;
		} else if (!isCallable(set)) {
			options = set;
			set = undefined;
		}
		if (dscr == null) {
			c = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
		}
	
		desc = { get: get, set: set, configurable: c, enumerable: e };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};


/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(527)()
		? Object.assign
		: __webpack_require__(528);


/***/ },
/* 527 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function () {
		var assign = Object.assign, obj;
		if (typeof assign !== 'function') return false;
		obj = { foo: 'raz' };
		assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
		return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
	};


/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var keys  = __webpack_require__(529)
	  , value = __webpack_require__(512)
	
	  , max = Math.max;
	
	module.exports = function (dest, src/*, …srcn*/) {
		var error, i, l = max(arguments.length, 2), assign;
		dest = Object(value(dest));
		assign = function (key) {
			try { dest[key] = src[key]; } catch (e) {
				if (!error) error = e;
			}
		};
		for (i = 1; i < l; ++i) {
			src = arguments[i];
			keys(src).forEach(assign);
		}
		if (error !== undefined) throw error;
		return dest;
	};


/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(530)()
		? Object.keys
		: __webpack_require__(531);


/***/ },
/* 530 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function () {
		try {
			Object.keys('primitive');
			return true;
		} catch (e) { return false; }
	};


/***/ },
/* 531 */
/***/ function(module, exports) {

	'use strict';
	
	var keys = Object.keys;
	
	module.exports = function (object) {
		return keys(object == null ? object : Object(object));
	};


/***/ },
/* 532 */
/***/ function(module, exports) {

	'use strict';
	
	var forEach = Array.prototype.forEach, create = Object.create;
	
	var process = function (src, obj) {
		var key;
		for (key in src) obj[key] = src[key];
	};
	
	module.exports = function (options/*, …options*/) {
		var result = create(null);
		forEach.call(arguments, function (options) {
			if (options == null) return;
			process(Object(options), result);
		});
		return result;
	};


/***/ },
/* 533 */
/***/ function(module, exports) {

	// Deprecated
	
	'use strict';
	
	module.exports = function (obj) { return typeof obj === 'function'; };


/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(535)()
		? String.prototype.contains
		: __webpack_require__(536);


/***/ },
/* 535 */
/***/ function(module, exports) {

	'use strict';
	
	var str = 'razdwatrzy';
	
	module.exports = function () {
		if (typeof str.contains !== 'function') return false;
		return ((str.contains('dwa') === true) && (str.contains('foo') === false));
	};


/***/ },
/* 536 */
/***/ function(module, exports) {

	'use strict';
	
	var indexOf = String.prototype.indexOf;
	
	module.exports = function (searchString/*, position*/) {
		return indexOf.call(this, searchString, arguments[1]) > -1;
	};


/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var d        = __webpack_require__(525)
	  , callable = __webpack_require__(524)
	
	  , apply = Function.prototype.apply, call = Function.prototype.call
	  , create = Object.create, defineProperty = Object.defineProperty
	  , defineProperties = Object.defineProperties
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , descriptor = { configurable: true, enumerable: false, writable: true }
	
	  , on, once, off, emit, methods, descriptors, base;
	
	on = function (type, listener) {
		var data;
	
		callable(listener);
	
		if (!hasOwnProperty.call(this, '__ee__')) {
			data = descriptor.value = create(null);
			defineProperty(this, '__ee__', descriptor);
			descriptor.value = null;
		} else {
			data = this.__ee__;
		}
		if (!data[type]) data[type] = listener;
		else if (typeof data[type] === 'object') data[type].push(listener);
		else data[type] = [data[type], listener];
	
		return this;
	};
	
	once = function (type, listener) {
		var once, self;
	
		callable(listener);
		self = this;
		on.call(this, type, once = function () {
			off.call(self, type, once);
			apply.call(listener, this, arguments);
		});
	
		once.__eeOnceListener__ = listener;
		return this;
	};
	
	off = function (type, listener) {
		var data, listeners, candidate, i;
	
		callable(listener);
	
		if (!hasOwnProperty.call(this, '__ee__')) return this;
		data = this.__ee__;
		if (!data[type]) return this;
		listeners = data[type];
	
		if (typeof listeners === 'object') {
			for (i = 0; (candidate = listeners[i]); ++i) {
				if ((candidate === listener) ||
						(candidate.__eeOnceListener__ === listener)) {
					if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
					else listeners.splice(i, 1);
				}
			}
		} else {
			if ((listeners === listener) ||
					(listeners.__eeOnceListener__ === listener)) {
				delete data[type];
			}
		}
	
		return this;
	};
	
	emit = function (type) {
		var i, l, listener, listeners, args;
	
		if (!hasOwnProperty.call(this, '__ee__')) return;
		listeners = this.__ee__[type];
		if (!listeners) return;
	
		if (typeof listeners === 'object') {
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) args[i - 1] = arguments[i];
	
			listeners = listeners.slice();
			for (i = 0; (listener = listeners[i]); ++i) {
				apply.call(listener, this, args);
			}
		} else {
			switch (arguments.length) {
			case 1:
				call.call(listeners, this);
				break;
			case 2:
				call.call(listeners, this, arguments[1]);
				break;
			case 3:
				call.call(listeners, this, arguments[1], arguments[2]);
				break;
			default:
				l = arguments.length;
				args = new Array(l - 1);
				for (i = 1; i < l; ++i) {
					args[i - 1] = arguments[i];
				}
				apply.call(listeners, this, args);
			}
		}
	};
	
	methods = {
		on: on,
		once: once,
		off: off,
		emit: emit
	};
	
	descriptors = {
		on: d(on),
		once: d(once),
		off: d(off),
		emit: d(emit)
	};
	
	base = defineProperties({}, descriptors);
	
	module.exports = exports = function (o) {
		return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
	};
	exports.methods = methods;


/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(539)() ? Symbol : __webpack_require__(540);


/***/ },
/* 539 */
/***/ function(module, exports) {

	'use strict';
	
	var validTypes = { object: true, symbol: true };
	
	module.exports = function () {
		var symbol;
		if (typeof Symbol !== 'function') return false;
		symbol = Symbol('test symbol');
		try { String(symbol); } catch (e) { return false; }
	
		// Return 'true' also for polyfills
		if (!validTypes[typeof Symbol.iterator]) return false;
		if (!validTypes[typeof Symbol.toPrimitive]) return false;
		if (!validTypes[typeof Symbol.toStringTag]) return false;
	
		return true;
	};


/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	// ES2015 Symbol polyfill for environments that do not support it (or partially support it)
	
	'use strict';
	
	var d              = __webpack_require__(525)
	  , validateSymbol = __webpack_require__(541)
	
	  , create = Object.create, defineProperties = Object.defineProperties
	  , defineProperty = Object.defineProperty, objPrototype = Object.prototype
	  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null)
	  , isNativeSafe;
	
	if (typeof Symbol === 'function') {
		NativeSymbol = Symbol;
		try {
			String(NativeSymbol());
			isNativeSafe = true;
		} catch (ignore) {}
	}
	
	var generateName = (function () {
		var created = create(null);
		return function (desc) {
			var postfix = 0, name, ie11BugWorkaround;
			while (created[desc + (postfix || '')]) ++postfix;
			desc += (postfix || '');
			created[desc] = true;
			name = '@@' + desc;
			defineProperty(objPrototype, name, d.gs(null, function (value) {
				// For IE11 issue see:
				// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
				//    ie11-broken-getters-on-dom-objects
				// https://github.com/medikoo/es6-symbol/issues/12
				if (ie11BugWorkaround) return;
				ie11BugWorkaround = true;
				defineProperty(this, name, d(value));
				ie11BugWorkaround = false;
			}));
			return name;
		};
	}());
	
	// Internal constructor (not one exposed) for creating Symbol instances.
	// This one is used to ensure that `someSymbol instanceof Symbol` always return false
	HiddenSymbol = function Symbol(description) {
		if (this instanceof HiddenSymbol) throw new TypeError('TypeError: Symbol is not a constructor');
		return SymbolPolyfill(description);
	};
	
	// Exposed `Symbol` constructor
	// (returns instances of HiddenSymbol)
	module.exports = SymbolPolyfill = function Symbol(description) {
		var symbol;
		if (this instanceof Symbol) throw new TypeError('TypeError: Symbol is not a constructor');
		if (isNativeSafe) return NativeSymbol(description);
		symbol = create(HiddenSymbol.prototype);
		description = (description === undefined ? '' : String(description));
		return defineProperties(symbol, {
			__description__: d('', description),
			__name__: d('', generateName(description))
		});
	};
	defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (globalSymbols[key]) return globalSymbols[key];
			return (globalSymbols[key] = SymbolPolyfill(String(key)));
		}),
		keyFor: d(function (s) {
			var key;
			validateSymbol(s);
			for (key in globalSymbols) if (globalSymbols[key] === s) return key;
		}),
	
		// If there's native implementation of given symbol, let's fallback to it
		// to ensure proper interoperability with other native functions e.g. Array.from
		hasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),
		isConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||
			SymbolPolyfill('isConcatSpreadable')),
		iterator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),
		match: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),
		replace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),
		search: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),
		species: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),
		split: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),
		toPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),
		toStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),
		unscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))
	});
	
	// Internal tweaks for real symbol producer
	defineProperties(HiddenSymbol.prototype, {
		constructor: d(SymbolPolyfill),
		toString: d('', function () { return this.__name__; })
	});
	
	// Proper implementation of methods exposed on Symbol.prototype
	// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
	defineProperties(SymbolPolyfill.prototype, {
		toString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),
		valueOf: d(function () { return validateSymbol(this); })
	});
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === 'symbol') return symbol;
		return symbol.toString();
	}));
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));
	
	// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
		d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));
	
	// Note: It's important to define `toPrimitive` as last one, as some implementations
	// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
	// And that may invoke error in definition flow:
	// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
		d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));


/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isSymbol = __webpack_require__(542);
	
	module.exports = function (value) {
		if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
		return value;
	};


/***/ },
/* 542 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (x) {
		if (!x) return false;
		if (typeof x === 'symbol') return true;
		if (!x.constructor) return false;
		if (x.constructor.name !== 'Symbol') return false;
		return (x[x.constructor.toStringTag] === 'Symbol');
	};


/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isIterable = __webpack_require__(544);
	
	module.exports = function (value) {
		if (!isIterable(value)) throw new TypeError(value + " is not iterable");
		return value;
	};


/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isArguments    = __webpack_require__(545)
	  , isString       = __webpack_require__(546)
	  , iteratorSymbol = __webpack_require__(538).iterator
	
	  , isArray = Array.isArray;
	
	module.exports = function (value) {
		if (value == null) return false;
		if (isArray(value)) return true;
		if (isString(value)) return true;
		if (isArguments(value)) return true;
		return (typeof value[iteratorSymbol] === 'function');
	};


/***/ },
/* 545 */
/***/ function(module, exports) {

	'use strict';
	
	var toString = Object.prototype.toString
	
	  , id = toString.call((function () { return arguments; }()));
	
	module.exports = function (x) { return (toString.call(x) === id); };


/***/ },
/* 546 */
/***/ function(module, exports) {

	'use strict';
	
	var toString = Object.prototype.toString
	
	  , id = toString.call('');
	
	module.exports = function (x) {
		return (typeof x === 'string') || (x && (typeof x === 'object') &&
			((x instanceof String) || (toString.call(x) === id))) || false;
	};


/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isArguments = __webpack_require__(545)
	  , callable    = __webpack_require__(524)
	  , isString    = __webpack_require__(546)
	  , get         = __webpack_require__(548)
	
	  , isArray = Array.isArray, call = Function.prototype.call
	  , some = Array.prototype.some;
	
	module.exports = function (iterable, cb/*, thisArg*/) {
		var mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;
		if (isArray(iterable) || isArguments(iterable)) mode = 'array';
		else if (isString(iterable)) mode = 'string';
		else iterable = get(iterable);
	
		callable(cb);
		doBreak = function () { broken = true; };
		if (mode === 'array') {
			some.call(iterable, function (value) {
				call.call(cb, thisArg, value, doBreak);
				if (broken) return true;
			});
			return;
		}
		if (mode === 'string') {
			l = iterable.length;
			for (i = 0; i < l; ++i) {
				char = iterable[i];
				if ((i + 1) < l) {
					code = char.charCodeAt(0);
					if ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];
				}
				call.call(cb, thisArg, char, doBreak);
				if (broken) break;
			}
			return;
		}
		result = iterable.next();
	
		while (!result.done) {
			call.call(cb, thisArg, result.value, doBreak);
			if (broken) return;
			result = iterable.next();
		}
	};


/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isArguments    = __webpack_require__(545)
	  , isString       = __webpack_require__(546)
	  , ArrayIterator  = __webpack_require__(549)
	  , StringIterator = __webpack_require__(556)
	  , iterable       = __webpack_require__(543)
	  , iteratorSymbol = __webpack_require__(538).iterator;
	
	module.exports = function (obj) {
		if (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();
		if (isArguments(obj)) return new ArrayIterator(obj);
		if (isString(obj)) return new StringIterator(obj);
		return new ArrayIterator(obj);
	};


/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var setPrototypeOf = __webpack_require__(519)
	  , contains       = __webpack_require__(534)
	  , d              = __webpack_require__(525)
	  , Iterator       = __webpack_require__(550)
	
	  , defineProperty = Object.defineProperty
	  , ArrayIterator;
	
	ArrayIterator = module.exports = function (arr, kind) {
		if (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);
		Iterator.call(this, arr);
		if (!kind) kind = 'value';
		else if (contains.call(kind, 'key+value')) kind = 'key+value';
		else if (contains.call(kind, 'key')) kind = 'key';
		else kind = 'value';
		defineProperty(this, '__kind__', d('', kind));
	};
	if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);
	
	ArrayIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(ArrayIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__list__[i];
			if (this.__kind__ === 'key+value') return [i, this.__list__[i]];
			return i;
		}),
		toString: d(function () { return '[object Array Iterator]'; })
	});


/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var clear    = __webpack_require__(511)
	  , assign   = __webpack_require__(526)
	  , callable = __webpack_require__(524)
	  , value    = __webpack_require__(512)
	  , d        = __webpack_require__(525)
	  , autoBind = __webpack_require__(551)
	  , Symbol   = __webpack_require__(538)
	
	  , defineProperty = Object.defineProperty
	  , defineProperties = Object.defineProperties
	  , Iterator;
	
	module.exports = Iterator = function (list, context) {
		if (!(this instanceof Iterator)) return new Iterator(list, context);
		defineProperties(this, {
			__list__: d('w', value(list)),
			__context__: d('w', context),
			__nextIndex__: d('w', 0)
		});
		if (!context) return;
		callable(context.on);
		context.on('_add', this._onAdd);
		context.on('_delete', this._onDelete);
		context.on('_clear', this._onClear);
	};
	
	defineProperties(Iterator.prototype, assign({
		constructor: d(Iterator),
		_next: d(function () {
			var i;
			if (!this.__list__) return;
			if (this.__redo__) {
				i = this.__redo__.shift();
				if (i !== undefined) return i;
			}
			if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
			this._unBind();
		}),
		next: d(function () { return this._createResult(this._next()); }),
		_createResult: d(function (i) {
			if (i === undefined) return { done: true, value: undefined };
			return { done: false, value: this._resolve(i) };
		}),
		_resolve: d(function (i) { return this.__list__[i]; }),
		_unBind: d(function () {
			this.__list__ = null;
			delete this.__redo__;
			if (!this.__context__) return;
			this.__context__.off('_add', this._onAdd);
			this.__context__.off('_delete', this._onDelete);
			this.__context__.off('_clear', this._onClear);
			this.__context__ = null;
		}),
		toString: d(function () { return '[object Iterator]'; })
	}, autoBind({
		_onAdd: d(function (index) {
			if (index >= this.__nextIndex__) return;
			++this.__nextIndex__;
			if (!this.__redo__) {
				defineProperty(this, '__redo__', d('c', [index]));
				return;
			}
			this.__redo__.forEach(function (redo, i) {
				if (redo >= index) this.__redo__[i] = ++redo;
			}, this);
			this.__redo__.push(index);
		}),
		_onDelete: d(function (index) {
			var i;
			if (index >= this.__nextIndex__) return;
			--this.__nextIndex__;
			if (!this.__redo__) return;
			i = this.__redo__.indexOf(index);
			if (i !== -1) this.__redo__.splice(i, 1);
			this.__redo__.forEach(function (redo, i) {
				if (redo > index) this.__redo__[i] = --redo;
			}, this);
		}),
		_onClear: d(function () {
			if (this.__redo__) clear.call(this.__redo__);
			this.__nextIndex__ = 0;
		})
	})));
	
	defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
		return this;
	}));
	defineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));


/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var copy       = __webpack_require__(552)
	  , map        = __webpack_require__(553)
	  , callable   = __webpack_require__(524)
	  , validValue = __webpack_require__(512)
	
	  , bind = Function.prototype.bind, defineProperty = Object.defineProperty
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , define;
	
	define = function (name, desc, bindTo) {
		var value = validValue(desc) && callable(desc.value), dgs;
		dgs = copy(desc);
		delete dgs.writable;
		delete dgs.value;
		dgs.get = function () {
			if (hasOwnProperty.call(this, name)) return value;
			desc.value = bind.call(value, (bindTo == null) ? this : this[bindTo]);
			defineProperty(this, name, desc);
			return this[name];
		};
		return dgs;
	};
	
	module.exports = function (props/*, bindTo*/) {
		var bindTo = arguments[1];
		return map(props, function (desc, name) {
			return define(name, desc, bindTo);
		});
	};


/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assign = __webpack_require__(526)
	  , value  = __webpack_require__(512);
	
	module.exports = function (obj) {
		var copy = Object(value(obj));
		if (copy !== obj) return copy;
		return assign({}, obj);
	};


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var callable = __webpack_require__(524)
	  , forEach  = __webpack_require__(554)
	
	  , call = Function.prototype.call;
	
	module.exports = function (obj, cb/*, thisArg*/) {
		var o = {}, thisArg = arguments[2];
		callable(cb);
		forEach(obj, function (value, key, obj, index) {
			o[key] = call.call(cb, thisArg, value, key, obj, index);
		});
		return o;
	};


/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(555)('forEach');


/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	// Internal method, used by iteration functions.
	// Calls a function for each key-value pair found in object
	// Optionally takes compareFn to iterate object in specific order
	
	'use strict';
	
	var callable = __webpack_require__(524)
	  , value    = __webpack_require__(512)
	
	  , bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys
	  , propertyIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	module.exports = function (method, defVal) {
		return function (obj, cb/*, thisArg, compareFn*/) {
			var list, thisArg = arguments[2], compareFn = arguments[3];
			obj = Object(value(obj));
			callable(cb);
	
			list = keys(obj);
			if (compareFn) {
				list.sort((typeof compareFn === 'function') ? bind.call(compareFn, obj) : undefined);
			}
			if (typeof method !== 'function') method = list[method];
			return call.call(method, list, function (key, index) {
				if (!propertyIsEnumerable.call(obj, key)) return defVal;
				return call.call(cb, thisArg, obj[key], key, obj, index);
			});
		};
	};


/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	// Thanks @mathiasbynens
	// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols
	
	'use strict';
	
	var setPrototypeOf = __webpack_require__(519)
	  , d              = __webpack_require__(525)
	  , Iterator       = __webpack_require__(550)
	
	  , defineProperty = Object.defineProperty
	  , StringIterator;
	
	StringIterator = module.exports = function (str) {
		if (!(this instanceof StringIterator)) return new StringIterator(str);
		str = String(str);
		Iterator.call(this, str);
		defineProperty(this, '__length__', d('', str.length));
	
	};
	if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);
	
	StringIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(StringIterator),
		_next: d(function () {
			if (!this.__list__) return;
			if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
			this._unBind();
		}),
		_resolve: d(function (i) {
			var char = this.__list__[i], code;
			if (this.__nextIndex__ === this.__length__) return char;
			code = char.charCodeAt(0);
			if ((code >= 0xD800) && (code <= 0xDBFF)) return char + this.__list__[this.__nextIndex__++];
			return char;
		}),
		toString: d(function () { return '[object String Iterator]'; })
	});


/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var setPrototypeOf    = __webpack_require__(519)
	  , contains          = __webpack_require__(534)
	  , d                 = __webpack_require__(525)
	  , Iterator          = __webpack_require__(550)
	  , toStringTagSymbol = __webpack_require__(538).toStringTag
	
	  , defineProperty = Object.defineProperty
	  , SetIterator;
	
	SetIterator = module.exports = function (set, kind) {
		if (!(this instanceof SetIterator)) return new SetIterator(set, kind);
		Iterator.call(this, set.__setData__, set);
		if (!kind) kind = 'value';
		else if (contains.call(kind, 'key+value')) kind = 'key+value';
		else kind = 'value';
		defineProperty(this, '__kind__', d('', kind));
	};
	if (setPrototypeOf) setPrototypeOf(SetIterator, Iterator);
	
	SetIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(SetIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__list__[i];
			return [this.__list__[i], this.__list__[i]];
		}),
		toString: d(function () { return '[object Set Iterator]'; })
	});
	defineProperty(SetIterator.prototype, toStringTagSymbol, d('c', 'Set Iterator'));


/***/ },
/* 558 */
/***/ function(module, exports) {

	// Exports true if environment provides native `Set` implementation,
	// whatever that is.
	
	'use strict';
	
	module.exports = (function () {
		if (typeof Set === 'undefined') return false;
		return (Object.prototype.toString.call(Set.prototype) === '[object Set]');
	}());


/***/ },
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function(fn, delay) {
	  var allowSample = true;
	  return function(e) {
	    if (allowSample) {
	      allowSample = false;
	      setTimeout(function() { allowSample = true; }, delay);
	      fn(e);
	    }
	  };
	}


/***/ },
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */,
/* 685 */,
/* 686 */,
/* 687 */,
/* 688 */,
/* 689 */,
/* 690 */,
/* 691 */,
/* 692 */,
/* 693 */,
/* 694 */,
/* 695 */,
/* 696 */,
/* 697 */,
/* 698 */,
/* 699 */,
/* 700 */,
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// Rebound
	// =======
	// **Rebound** is a simple library that models Spring dynamics for the
	// purpose of driving physical animations.
	//
	// Origin
	// ------
	// [Rebound](http://facebook.github.io/rebound) was originally written
	// in Java to provide a lightweight physics system for
	// [Home](https://play.google.com/store/apps/details?id=com.facebook.home) and
	// [Chat Heads](https://play.google.com/store/apps/details?id=com.facebook.orca)
	// on Android. It's now been adopted by several other Android
	// applications. This JavaScript port was written to provide a quick
	// way to demonstrate Rebound animations on the web for a
	// [conference talk](https://www.youtube.com/watch?v=s5kNm-DgyjY). Since then
	// the JavaScript version has been used to build some really nice interfaces.
	// Check out [brandonwalkin.com](http://brandonwalkin.com) for an
	// example.
	//
	// Overview
	// --------
	// The Library provides a SpringSystem for maintaining a set of Spring
	// objects and iterating those Springs through a physics solver loop
	// until equilibrium is achieved. The Spring class is the basic
	// animation driver provided by Rebound. By attaching a listener to
	// a Spring, you can observe its motion. The observer function is
	// notified of position changes on the spring as it solves for
	// equilibrium. These position updates can be mapped to an animation
	// range to drive animated property updates on your user interface
	// elements (translation, rotation, scale, etc).
	//
	// Example
	// -------
	// Here's a simple example. Pressing and releasing on the logo below
	// will cause it to scale up and down with a springy animation.
	//
	// <div style="text-align:center; margin-bottom:50px; margin-top:50px">
	//   <img
	//     src="http://facebook.github.io/rebound/images/rebound.png"
	//     id="logo"
	//   />
	// </div>
	// <script src="../rebound.min.js"></script>
	// <script>
	//
	// function scale(el, val) {
	//   el.style.mozTransform =
	//   el.style.msTransform =
	//   el.style.webkitTransform =
	//   el.style.transform = 'scale3d(' + val + ', ' + val + ', 1)';
	// }
	// var el = document.getElementById('logo');
	//
	// var springSystem = new rebound.SpringSystem();
	// var spring = springSystem.createSpring(50, 3);
	// spring.addListener({
	//   onSpringUpdate: function(spring) {
	//     var val = spring.getCurrentValue();
	//     val = rebound.MathUtil.mapValueInRange(val, 0, 1, 1, 0.5);
	//     scale(el, val);
	//   }
	// });
	//
	// el.addEventListener('mousedown', function() {
	//   spring.setEndValue(1);
	// });
	//
	// el.addEventListener('mouseout', function() {
	//   spring.setEndValue(0);
	// });
	//
	// el.addEventListener('mouseup', function() {
	//   spring.setEndValue(0);
	// });
	//
	// </script>
	//
	// Here's how it works.
	//
	// ```
	// // Get a reference to the logo element.
	// var el = document.getElementById('logo');
	//
	// // create a SpringSystem and a Spring with a bouncy config.
	// var springSystem = new rebound.SpringSystem();
	// var spring = springSystem.createSpring(50, 3);
	//
	// // Add a listener to the spring. Every time the physics
	// // solver updates the Spring's value onSpringUpdate will
	// // be called.
	// spring.addListener({
	//   onSpringUpdate: function(spring) {
	//     var val = spring.getCurrentValue();
	//     val = rebound.MathUtil
	//                  .mapValueInRange(val, 0, 1, 1, 0.5);
	//     scale(el, val);
	//   }
	// });
	//
	// // Listen for mouse down/up/out and toggle the
	// //springs endValue from 0 to 1.
	// el.addEventListener('mousedown', function() {
	//   spring.setEndValue(1);
	// });
	//
	// el.addEventListener('mouseout', function() {
	//   spring.setEndValue(0);
	// });
	//
	// el.addEventListener('mouseup', function() {
	//   spring.setEndValue(0);
	// });
	//
	// // Helper for scaling an element with css transforms.
	// function scale(el, val) {
	//   el.style.mozTransform =
	//   el.style.msTransform =
	//   el.style.webkitTransform =
	//   el.style.transform = 'scale3d(' +
	//     val + ', ' + val + ', 1)';
	// }
	// ```
	
	(function() {
	  var rebound = {};
	  var util = rebound.util = {};
	  var concat = Array.prototype.concat;
	  var slice = Array.prototype.slice;
	
	  // Bind a function to a context object.
	  util.bind = function bind(func, context) {
	    var args = slice.call(arguments, 2);
	    return function() {
	      func.apply(context, concat.call(args, slice.call(arguments)));
	    };
	  };
	
	  // Add all the properties in the source to the target.
	  util.extend = function extend(target, source) {
	    for (var key in source) {
	      if (source.hasOwnProperty(key)) {
	        target[key] = source[key];
	      }
	    }
	  };
	
	  // SpringSystem
	  // ------------
	  // **SpringSystem** is a set of Springs that all run on the same physics
	  // timing loop. To get started with a Rebound animation you first
	  // create a new SpringSystem and then add springs to it.
	  var SpringSystem = rebound.SpringSystem = function SpringSystem(looper) {
	    this._springRegistry = {};
	    this._activeSprings = [];
	    this.listeners = [];
	    this._idleSpringIndices = [];
	    this.looper = looper || new AnimationLooper();
	    this.looper.springSystem = this;
	  };
	
	  util.extend(SpringSystem.prototype, {
	
	    _springRegistry: null,
	
	    _isIdle: true,
	
	    _lastTimeMillis: -1,
	
	    _activeSprings: null,
	
	    listeners: null,
	
	    _idleSpringIndices: null,
	
	    // A SpringSystem is iterated by a looper. The looper is responsible
	    // for executing each frame as the SpringSystem is resolved to idle.
	    // There are three types of Loopers described below AnimationLooper,
	    // SimulationLooper, and SteppingSimulationLooper. AnimationLooper is
	    // the default as it is the most useful for common UI animations.
	    setLooper: function(looper) {
	      this.looper = looper;
	      looper.springSystem = this;
	    },
	
	    // Add a new spring to this SpringSystem. This Spring will now be solved for
	    // during the physics iteration loop. By default the spring will use the
	    // default Origami spring config with 40 tension and 7 friction, but you can
	    // also provide your own values here.
	    createSpring: function(tension, friction) {
	      var springConfig;
	      if (tension === undefined || friction === undefined) {
	        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
	      } else {
	        springConfig =
	          SpringConfig.fromOrigamiTensionAndFriction(tension, friction);
	      }
	      return this.createSpringWithConfig(springConfig);
	    },
	
	    // Add a spring with a specified bounciness and speed. To replicate Origami
	    // compositions based on PopAnimation patches, use this factory method to
	    // create matching springs.
	    createSpringWithBouncinessAndSpeed: function(bounciness, speed) {
	      var springConfig;
	      if (bounciness === undefined || speed === undefined) {
	        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
	      } else {
	        springConfig =
	          SpringConfig.fromBouncinessAndSpeed(bounciness, speed);
	      }
	      return this.createSpringWithConfig(springConfig);
	    },
	
	    // Add a spring with the provided SpringConfig.
	    createSpringWithConfig: function(springConfig) {
	      var spring = new Spring(this);
	      this.registerSpring(spring);
	      spring.setSpringConfig(springConfig);
	      return spring;
	    },
	
	    // You can check if a SpringSystem is idle or active by calling
	    // getIsIdle. If all of the Springs in the SpringSystem are at rest,
	    // i.e. the physics forces have reached equilibrium, then this
	    // method will return true.
	    getIsIdle: function() {
	      return this._isIdle;
	    },
	
	    // Retrieve a specific Spring from the SpringSystem by id. This
	    // can be useful for inspecting the state of a spring before
	    // or after an integration loop in the SpringSystem executes.
	    getSpringById: function (id) {
	      return this._springRegistry[id];
	    },
	
	    // Get a listing of all the springs registered with this
	    // SpringSystem.
	    getAllSprings: function() {
	      var vals = [];
	      for (var id in this._springRegistry) {
	        if (this._springRegistry.hasOwnProperty(id)) {
	          vals.push(this._springRegistry[id]);
	        }
	      }
	      return vals;
	    },
	
	    // registerSpring is called automatically as soon as you create
	    // a Spring with SpringSystem#createSpring. This method sets the
	    // spring up in the registry so that it can be solved in the
	    // solver loop.
	    registerSpring: function(spring) {
	      this._springRegistry[spring.getId()] = spring;
	    },
	
	    // Deregister a spring with this SpringSystem. The SpringSystem will
	    // no longer consider this Spring during its integration loop once
	    // this is called. This is normally done automatically for you when
	    // you call Spring#destroy.
	    deregisterSpring: function(spring) {
	      removeFirst(this._activeSprings, spring);
	      delete this._springRegistry[spring.getId()];
	    },
	
	    advance: function(time, deltaTime) {
	      while(this._idleSpringIndices.length > 0) this._idleSpringIndices.pop();
	      for (var i = 0, len = this._activeSprings.length; i < len; i++) {
	        var spring = this._activeSprings[i];
	        if (spring.systemShouldAdvance()) {
	          spring.advance(time / 1000.0, deltaTime / 1000.0);
	        } else {
	          this._idleSpringIndices.push(this._activeSprings.indexOf(spring));
	        }
	      }
	      while(this._idleSpringIndices.length > 0) {
	        var idx = this._idleSpringIndices.pop();
	        idx >= 0 && this._activeSprings.splice(idx, 1);
	      }
	    },
	
	    // This is our main solver loop called to move the simulation
	    // forward through time. Before each pass in the solver loop
	    // onBeforeIntegrate is called on an any listeners that have
	    // registered themeselves with the SpringSystem. This gives you
	    // an opportunity to apply any constraints or adjustments to
	    // the springs that should be enforced before each iteration
	    // loop. Next the advance method is called to move each Spring in
	    // the systemShouldAdvance forward to the current time. After the
	    // integration step runs in advance, onAfterIntegrate is called
	    // on any listeners that have registered themselves with the
	    // SpringSystem. This gives you an opportunity to run any post
	    // integration constraints or adjustments on the Springs in the
	    // SpringSystem.
	    loop: function(currentTimeMillis) {
	      var listener;
	      if (this._lastTimeMillis === -1) {
	        this._lastTimeMillis = currentTimeMillis -1;
	      }
	      var ellapsedMillis = currentTimeMillis - this._lastTimeMillis;
	      this._lastTimeMillis = currentTimeMillis;
	
	      var i = 0, len = this.listeners.length;
	      for (i = 0; i < len; i++) {
	        listener = this.listeners[i];
	        listener.onBeforeIntegrate && listener.onBeforeIntegrate(this);
	      }
	
	      this.advance(currentTimeMillis, ellapsedMillis);
	      if (this._activeSprings.length === 0) {
	        this._isIdle = true;
	        this._lastTimeMillis = -1;
	      }
	
	      for (i = 0; i < len; i++) {
	        listener = this.listeners[i];
	        listener.onAfterIntegrate && listener.onAfterIntegrate(this);
	      }
	
	      if (!this._isIdle) {
	        this.looper.run();
	      }
	    },
	
	    // activateSpring is used to notify the SpringSystem that a Spring
	    // has become displaced. The system responds by starting its solver
	    // loop up if it is currently idle.
	    activateSpring: function(springId) {
	      var spring = this._springRegistry[springId];
	      if (this._activeSprings.indexOf(spring) == -1) {
	        this._activeSprings.push(spring);
	      }
	      if (this.getIsIdle()) {
	        this._isIdle = false;
	        this.looper.run();
	      }
	    },
	
	    // Add a listener to the SpringSystem so that you can receive
	    // before/after integration notifications allowing Springs to be
	    // constrained or adjusted.
	    addListener: function(listener) {
	      this.listeners.push(listener);
	    },
	
	    // Remove a previously added listener on the SpringSystem.
	    removeListener: function(listener) {
	      removeFirst(this.listeners, listener);
	    },
	
	    // Remove all previously added listeners on the SpringSystem.
	    removeAllListeners: function() {
	      this.listeners = [];
	    }
	
	  });
	
	  // Spring
	  // ------
	  // **Spring** provides a model of a classical spring acting to
	  // resolve a body to equilibrium. Springs have configurable
	  // tension which is a force multipler on the displacement of the
	  // spring from its rest point or `endValue` as defined by [Hooke's
	  // law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have
	  // configurable friction, which ensures that they do not oscillate
	  // infinitely. When a Spring is displaced by updating it's resting
	  // or `currentValue`, the SpringSystems that contain that Spring
	  // will automatically start looping to solve for equilibrium. As each
	  // timestep passes, `SpringListener` objects attached to the Spring
	  // will be notified of the updates providing a way to drive an
	  // animation off of the spring's resolution curve.
	  var Spring = rebound.Spring = function Spring(springSystem) {
	    this._id = 's' + Spring._ID++;
	    this._springSystem = springSystem;
	    this.listeners = [];
	    this._currentState = new PhysicsState();
	    this._previousState = new PhysicsState();
	    this._tempState = new PhysicsState();
	  };
	
	  util.extend(Spring, {
	    _ID: 0,
	
	    MAX_DELTA_TIME_SEC: 0.064,
	
	    SOLVER_TIMESTEP_SEC: 0.001
	
	  });
	
	  util.extend(Spring.prototype, {
	
	    _id: 0,
	
	    _springConfig: null,
	
	    _overshootClampingEnabled: false,
	
	    _currentState: null,
	
	    _previousState: null,
	
	    _tempState: null,
	
	    _startValue: 0,
	
	    _endValue: 0,
	
	    _wasAtRest: true,
	
	    _restSpeedThreshold: 0.001,
	
	    _displacementFromRestThreshold: 0.001,
	
	    listeners: null,
	
	    _timeAccumulator: 0,
	
	    _springSystem: null,
	
	    // Remove a Spring from simulation and clear its listeners.
	    destroy: function() {
	      this.listeners = [];
	      this.frames = [];
	      this._springSystem.deregisterSpring(this);
	    },
	
	    // Get the id of the spring, which can be used to retrieve it from
	    // the SpringSystems it participates in later.
	    getId: function() {
	      return this._id;
	    },
	
	    // Set the configuration values for this Spring. A SpringConfig
	    // contains the tension and friction values used to solve for the
	    // equilibrium of the Spring in the physics loop.
	    setSpringConfig: function(springConfig) {
	      this._springConfig = springConfig;
	      return this;
	    },
	
	    // Retrieve the SpringConfig used by this Spring.
	    getSpringConfig: function() {
	      return this._springConfig;
	    },
	
	    // Set the current position of this Spring. Listeners will be updated
	    // with this value immediately. If the rest or `endValue` is not
	    // updated to match this value, then the spring will be dispalced and
	    // the SpringSystem will start to loop to restore the spring to the
	    // `endValue`.
	    //
	    // A common pattern is to move a Spring around without animation by
	    // calling.
	    //
	    // ```
	    // spring.setCurrentValue(n).setAtRest();
	    // ```
	    //
	    // This moves the Spring to a new position `n`, sets the endValue
	    // to `n`, and removes any velocity from the `Spring`. By doing
	    // this you can allow the `SpringListener` to manage the position
	    // of UI elements attached to the spring even when moving without
	    // animation. For example, when dragging an element you can
	    // update the position of an attached view through a spring
	    // by calling `spring.setCurrentValue(x)`. When
	    // the gesture ends you can update the Springs
	    // velocity and endValue
	    // `spring.setVelocity(gestureEndVelocity).setEndValue(flingTarget)`
	    // to cause it to naturally animate the UI element to the resting
	    // position taking into account existing velocity. The codepaths for
	    // synchronous movement and spring driven animation can
	    // be unified using this technique.
	    setCurrentValue: function(currentValue, skipSetAtRest) {
	      this._startValue = currentValue;
	      this._currentState.position = currentValue;
	      if (!skipSetAtRest) {
	        this.setAtRest();
	      }
	      this.notifyPositionUpdated(false, false);
	      return this;
	    },
	
	    // Get the position that the most recent animation started at. This
	    // can be useful for determining the number off oscillations that
	    // have occurred.
	    getStartValue: function() {
	      return this._startValue;
	    },
	
	    // Retrieve the current value of the Spring.
	    getCurrentValue: function() {
	      return this._currentState.position;
	    },
	
	    // Get the absolute distance of the Spring from it's resting endValue
	    // position.
	    getCurrentDisplacementDistance: function() {
	      return this.getDisplacementDistanceForState(this._currentState);
	    },
	
	    getDisplacementDistanceForState: function(state) {
	      return Math.abs(this._endValue - state.position);
	    },
	
	    // Set the endValue or resting position of the spring. If this
	    // value is different than the current value, the SpringSystem will
	    // be notified and will begin running its solver loop to resolve
	    // the Spring to equilibrium. Any listeners that are registered
	    // for onSpringEndStateChange will also be notified of this update
	    // immediately.
	    setEndValue: function(endValue) {
	      if (this._endValue == endValue && this.isAtRest())  {
	        return this;
	      }
	      this._startValue = this.getCurrentValue();
	      this._endValue = endValue;
	      this._springSystem.activateSpring(this.getId());
	      for (var i = 0, len = this.listeners.length; i < len; i++) {
	        var listener = this.listeners[i];
	        var onChange = listener.onSpringEndStateChange;
	        onChange && onChange(this);
	      }
	      return this;
	    },
	
	    // Retrieve the endValue or resting position of this spring.
	    getEndValue: function() {
	      return this._endValue;
	    },
	
	    // Set the current velocity of the Spring. As previously mentioned,
	    // this can be useful when you are performing a direct manipulation
	    // gesture. When a UI element is released you may call setVelocity
	    // on its animation Spring so that the Spring continues with the
	    // same velocity as the gesture ended with. The friction, tension,
	    // and displacement of the Spring will then govern its motion to
	    // return to rest on a natural feeling curve.
	    setVelocity: function(velocity) {
	      if (velocity === this._currentState.velocity) {
	        return this;
	      }
	      this._currentState.velocity = velocity;
	      this._springSystem.activateSpring(this.getId());
	      return this;
	    },
	
	    // Get the current velocity of the Spring.
	    getVelocity: function() {
	      return this._currentState.velocity;
	    },
	
	    // Set a threshold value for the movement speed of the Spring below
	    // which it will be considered to be not moving or resting.
	    setRestSpeedThreshold: function(restSpeedThreshold) {
	      this._restSpeedThreshold = restSpeedThreshold;
	      return this;
	    },
	
	    // Retrieve the rest speed threshold for this Spring.
	    getRestSpeedThreshold: function() {
	      return this._restSpeedThreshold;
	    },
	
	    // Set a threshold value for displacement below which the Spring
	    // will be considered to be not displaced i.e. at its resting
	    // `endValue`.
	    setRestDisplacementThreshold: function(displacementFromRestThreshold) {
	      this._displacementFromRestThreshold = displacementFromRestThreshold;
	    },
	
	    // Retrieve the rest displacement threshold for this spring.
	    getRestDisplacementThreshold: function() {
	      return this._displacementFromRestThreshold;
	    },
	
	    // Enable overshoot clamping. This means that the Spring will stop
	    // immediately when it reaches its resting position regardless of
	    // any existing momentum it may have. This can be useful for certain
	    // types of animations that should not oscillate such as a scale
	    // down to 0 or alpha fade.
	    setOvershootClampingEnabled: function(enabled) {
	      this._overshootClampingEnabled = enabled;
	      return this;
	    },
	
	    // Check if overshoot clamping is enabled for this spring.
	    isOvershootClampingEnabled: function() {
	      return this._overshootClampingEnabled;
	    },
	
	    // Check if the Spring has gone past its end point by comparing
	    // the direction it was moving in when it started to the current
	    // position and end value.
	    isOvershooting: function() {
	      var start = this._startValue;
	      var end = this._endValue;
	      return this._springConfig.tension > 0 &&
	       ((start < end && this.getCurrentValue() > end) ||
	       (start > end && this.getCurrentValue() < end));
	    },
	
	    // Spring.advance is the main solver method for the Spring. It takes
	    // the current time and delta since the last time step and performs
	    // an RK4 integration to get the new position and velocity state
	    // for the Spring based on the tension, friction, velocity, and
	    // displacement of the Spring.
	    advance: function(time, realDeltaTime) {
	      var isAtRest = this.isAtRest();
	
	      if (isAtRest && this._wasAtRest) {
	        return;
	      }
	
	      var adjustedDeltaTime = realDeltaTime;
	      if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {
	        adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC;
	      }
	
	      this._timeAccumulator += adjustedDeltaTime;
	
	      var tension = this._springConfig.tension,
	          friction = this._springConfig.friction,
	
	          position = this._currentState.position,
	          velocity = this._currentState.velocity,
	          tempPosition = this._tempState.position,
	          tempVelocity = this._tempState.velocity,
	
	          aVelocity, aAcceleration,
	          bVelocity, bAcceleration,
	          cVelocity, cAcceleration,
	          dVelocity, dAcceleration,
	
	          dxdt, dvdt;
	
	      while(this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {
	
	        this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC;
	
	        if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {
	          this._previousState.position = position;
	          this._previousState.velocity = velocity;
	        }
	
	        aVelocity = velocity;
	        aAcceleration =
	          (tension * (this._endValue - tempPosition)) - friction * velocity;
	
	        tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
	        tempVelocity =
	          velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
	        bVelocity = tempVelocity;
	        bAcceleration =
	          (tension * (this._endValue - tempPosition)) - friction * tempVelocity;
	
	        tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
	        tempVelocity =
	          velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
	        cVelocity = tempVelocity;
	        cAcceleration =
	          (tension * (this._endValue - tempPosition)) - friction * tempVelocity;
	
	        tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
	        tempVelocity =
	          velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
	        dVelocity = tempVelocity;
	        dAcceleration =
	          (tension * (this._endValue - tempPosition)) - friction * tempVelocity;
	
	        dxdt =
	          1.0/6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);
	        dvdt = 1.0/6.0 * (
	          aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration
	        );
	
	        position += dxdt * Spring.SOLVER_TIMESTEP_SEC;
	        velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC;
	      }
	
	      this._tempState.position = tempPosition;
	      this._tempState.velocity = tempVelocity;
	
	      this._currentState.position = position;
	      this._currentState.velocity = velocity;
	
	      if (this._timeAccumulator > 0) {
	        this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC);
	      }
	
	      if (this.isAtRest() ||
	          this._overshootClampingEnabled && this.isOvershooting()) {
	
	        if (this._springConfig.tension > 0) {
	          this._startValue = this._endValue;
	          this._currentState.position = this._endValue;
	        } else {
	          this._endValue = this._currentState.position;
	          this._startValue = this._endValue;
	        }
	        this.setVelocity(0);
	        isAtRest = true;
	      }
	
	      var notifyActivate = false;
	      if (this._wasAtRest) {
	        this._wasAtRest = false;
	        notifyActivate = true;
	      }
	
	      var notifyAtRest = false;
	      if (isAtRest) {
	        this._wasAtRest = true;
	        notifyAtRest = true;
	      }
	
	      this.notifyPositionUpdated(notifyActivate, notifyAtRest);
	    },
	
	    notifyPositionUpdated: function(notifyActivate, notifyAtRest) {
	      for (var i = 0, len = this.listeners.length; i < len; i++) {
	        var listener = this.listeners[i];
	        if (notifyActivate && listener.onSpringActivate) {
	          listener.onSpringActivate(this);
	        }
	
	        if (listener.onSpringUpdate) {
	          listener.onSpringUpdate(this);
	        }
	
	        if (notifyAtRest && listener.onSpringAtRest) {
	          listener.onSpringAtRest(this);
	        }
	      }
	    },
	
	
	    // Check if the SpringSystem should advance. Springs are advanced
	    // a final frame after they reach equilibrium to ensure that the
	    // currentValue is exactly the requested endValue regardless of the
	    // displacement threshold.
	    systemShouldAdvance: function() {
	      return !this.isAtRest() || !this.wasAtRest();
	    },
	
	    wasAtRest: function() {
	      return this._wasAtRest;
	    },
	
	    // Check if the Spring is atRest meaning that it's currentValue and
	    // endValue are the same and that it has no velocity. The previously
	    // described thresholds for speed and displacement define the bounds
	    // of this equivalence check. If the Spring has 0 tension, then it will
	    // be considered at rest whenever its absolute velocity drops below the
	    // restSpeedThreshold.
	    isAtRest: function() {
	      return Math.abs(this._currentState.velocity) < this._restSpeedThreshold &&
	        (this.getDisplacementDistanceForState(this._currentState) <=
	          this._displacementFromRestThreshold ||
	        this._springConfig.tension === 0);
	    },
	
	    // Force the spring to be at rest at its current position. As
	    // described in the documentation for setCurrentValue, this method
	    // makes it easy to do synchronous non-animated updates to ui
	    // elements that are attached to springs via SpringListeners.
	    setAtRest: function() {
	      this._endValue = this._currentState.position;
	      this._tempState.position = this._currentState.position;
	      this._currentState.velocity = 0;
	      return this;
	    },
	
	    _interpolate: function(alpha) {
	      this._currentState.position = this._currentState.position *
	        alpha + this._previousState.position * (1 - alpha);
	      this._currentState.velocity = this._currentState.velocity *
	        alpha + this._previousState.velocity * (1 - alpha);
	    },
	
	    getListeners: function() {
	      return this.listeners;
	    },
	
	    addListener: function(newListener) {
	      this.listeners.push(newListener);
	      return this;
	    },
	
	    removeListener: function(listenerToRemove) {
	      removeFirst(this.listeners, listenerToRemove);
	      return this;
	    },
	
	    removeAllListeners: function() {
	      this.listeners = [];
	      return this;
	    },
	
	    currentValueIsApproximately: function(value) {
	      return Math.abs(this.getCurrentValue() - value) <=
	        this.getRestDisplacementThreshold();
	    }
	
	  });
	
	  // PhysicsState
	  // ------------
	  // **PhysicsState** consists of a position and velocity. A Spring uses
	  // this internally to keep track of its current and prior position and
	  // velocity values.
	  var PhysicsState = function PhysicsState() {};
	
	  util.extend(PhysicsState.prototype, {
	    position: 0,
	    velocity: 0
	  });
	
	  // SpringConfig
	  // ------------
	  // **SpringConfig** maintains a set of tension and friction constants
	  // for a Spring. You can use fromOrigamiTensionAndFriction to convert
	  // values from the [Origami](http://facebook.github.io/origami/)
	  // design tool directly to Rebound spring constants.
	  var SpringConfig = rebound.SpringConfig =
	    function SpringConfig(tension, friction) {
	      this.tension = tension;
	      this.friction = friction;
	    };
	
	  // Loopers
	  // -------
	  // **AnimationLooper** plays each frame of the SpringSystem on animation
	  // timing loop. This is the default type of looper for a new spring system
	  // as it is the most common when developing UI.
	  var AnimationLooper = rebound.AnimationLooper = function AnimationLooper() {
	    this.springSystem = null;
	    var _this = this;
	    var _run = function() {
	      _this.springSystem.loop(Date.now());
	    };
	
	    this.run = function() {
	      util.onFrame(_run);
	    };
	  };
	
	  // **SimulationLooper** resolves the SpringSystem to a resting state in a
	  // tight and blocking loop. This is useful for synchronously generating
	  // pre-recorded animations that can then be played on a timing loop later.
	  // Sometimes this lead to better performance to pre-record a single spring
	  // curve and use it to drive many animations; however, it can make dynamic
	  // response to user input a bit trickier to implement.
	  rebound.SimulationLooper = function SimulationLooper(timestep) {
	    this.springSystem = null;
	    var time = 0;
	    var running = false;
	    timestep=timestep || 16.667;
	
	    this.run = function() {
	      if (running) {
	        return;
	      }
	      running = true;
	      while(!this.springSystem.getIsIdle()) {
	        this.springSystem.loop(time+=timestep);
	      }
	      running = false;
	    };
	  };
	
	  // **SteppingSimulationLooper** resolves the SpringSystem one step at a
	  // time controlled by an outside loop. This is useful for testing and
	  // verifying the behavior of a SpringSystem or if you want to control your own
	  // timing loop for some reason e.g. slowing down or speeding up the
	  // simulation.
	  rebound.SteppingSimulationLooper = function(timestep) {
	    this.springSystem = null;
	    var time = 0;
	
	    // this.run is NOOP'd here to allow control from the outside using
	    // this.step.
	    this.run = function(){};
	
	    // Perform one step toward resolving the SpringSystem.
	    this.step = function(timestep) {
	      this.springSystem.loop(time+=timestep);
	    };
	  };
	
	  // Math for converting from
	  // [Origami](http://facebook.github.io/origami/) to
	  // [Rebound](http://facebook.github.io/rebound).
	  // You mostly don't need to worry about this, just use
	  // SpringConfig.fromOrigamiTensionAndFriction(v, v);
	  var OrigamiValueConverter = rebound.OrigamiValueConverter = {
	    tensionFromOrigamiValue: function(oValue) {
	      return (oValue - 30.0) * 3.62 + 194.0;
	    },
	
	    origamiValueFromTension: function(tension) {
	      return (tension - 194.0) / 3.62 + 30.0;
	    },
	
	    frictionFromOrigamiValue: function(oValue) {
	      return (oValue - 8.0) * 3.0 + 25.0;
	    },
	
	    origamiFromFriction: function(friction) {
	      return (friction - 25.0) / 3.0 + 8.0;
	    }
	  };
	
	  // BouncyConversion provides math for converting from Origami PopAnimation
	  // config values to regular Origami tension and friction values. If you are
	  // trying to replicate prototypes made with PopAnimation patches in Origami,
	  // then you should create your springs with
	  // SpringSystem.createSpringWithBouncinessAndSpeed, which uses this Math
	  // internally to create a spring to match the provided PopAnimation
	  // configuration from Origami.
	  var BouncyConversion = rebound.BouncyConversion = function(bounciness, speed){
	    this.bounciness = bounciness;
	    this.speed = speed;
	    var b = this.normalize(bounciness / 1.7, 0, 20.0);
	    b = this.projectNormal(b, 0.0, 0.8);
	    var s = this.normalize(speed / 1.7, 0, 20.0);
	    this.bouncyTension = this.projectNormal(s, 0.5, 200)
	    this.bouncyFriction = this.quadraticOutInterpolation(
	      b,
	      this.b3Nobounce(this.bouncyTension),
	      0.01);
	  }
	
	  util.extend(BouncyConversion.prototype, {
	
	    normalize: function(value, startValue, endValue) {
	      return (value - startValue) / (endValue - startValue);
	    },
	
	    projectNormal: function(n, start, end) {
	      return start + (n * (end - start));
	    },
	
	    linearInterpolation: function(t, start, end) {
	      return t * end + (1.0 - t) * start;
	    },
	
	    quadraticOutInterpolation: function(t, start, end) {
	      return this.linearInterpolation(2*t - t*t, start, end);
	    },
	
	    b3Friction1: function(x) {
	      return (0.0007 * Math.pow(x, 3)) -
	        (0.031 * Math.pow(x, 2)) + 0.64 * x + 1.28;
	    },
	
	    b3Friction2: function(x) {
	      return (0.000044 * Math.pow(x, 3)) -
	        (0.006 * Math.pow(x, 2)) + 0.36 * x + 2.;
	    },
	
	    b3Friction3: function(x) {
	      return (0.00000045 * Math.pow(x, 3)) -
	        (0.000332 * Math.pow(x, 2)) + 0.1078 * x + 5.84;
	    },
	
	    b3Nobounce: function(tension) {
	      var friction = 0;
	      if (tension <= 18) {
	        friction = this.b3Friction1(tension);
	      } else if (tension > 18 && tension <= 44) {
	        friction = this.b3Friction2(tension);
	      } else {
	        friction = this.b3Friction3(tension);
	      }
	      return friction;
	    }
	  });
	
	  util.extend(SpringConfig, {
	    // Convert an origami Spring tension and friction to Rebound spring
	    // constants. If you are prototyping a design with Origami, this
	    // makes it easy to make your springs behave exactly the same in
	    // Rebound.
	    fromOrigamiTensionAndFriction: function(tension, friction) {
	      return new SpringConfig(
	        OrigamiValueConverter.tensionFromOrigamiValue(tension),
	        OrigamiValueConverter.frictionFromOrigamiValue(friction));
	    },
	
	    // Convert an origami PopAnimation Spring bounciness and speed to Rebound
	    // spring constants. If you are using PopAnimation patches in Origami, this
	    // utility will provide springs that match your prototype.
	    fromBouncinessAndSpeed: function(bounciness, speed) {
	      var bouncyConversion = new rebound.BouncyConversion(bounciness, speed);
	      return this.fromOrigamiTensionAndFriction(
	        bouncyConversion.bouncyTension,
	        bouncyConversion.bouncyFriction);
	    },
	
	    // Create a SpringConfig with no tension or a coasting spring with some
	    // amount of Friction so that it does not coast infininitely.
	    coastingConfigWithOrigamiFriction: function(friction) {
	      return new SpringConfig(
	        0,
	        OrigamiValueConverter.frictionFromOrigamiValue(friction)
	      );
	    }
	  });
	
	  SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG =
	    SpringConfig.fromOrigamiTensionAndFriction(40, 7);
	
	  util.extend(SpringConfig.prototype, {friction: 0, tension: 0});
	
	  // Here are a couple of function to convert colors between hex codes and RGB
	  // component values. These are handy when performing color
	  // tweening animations.
	  var colorCache = {};
	  util.hexToRGB = function(color) {
	    if (colorCache[color]) {
	      return colorCache[color];
	    }
	    color = color.replace('#', '');
	    if (color.length === 3) {
	      color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];
	    }
	    var parts = color.match(/.{2}/g);
	
	    var ret = {
	      r: parseInt(parts[0], 16),
	      g: parseInt(parts[1], 16),
	      b: parseInt(parts[2], 16)
	    };
	
	    colorCache[color] = ret;
	    return ret;
	  };
	
	  util.rgbToHex = function(r, g, b) {
	    r = r.toString(16);
	    g = g.toString(16);
	    b = b.toString(16);
	    r = r.length < 2 ? '0' + r : r;
	    g = g.length < 2 ? '0' + g : g;
	    b = b.length < 2 ? '0' + b : b;
	    return '#' + r + g + b;
	  };
	
	  var MathUtil = rebound.MathUtil = {
	    // This helper function does a linear interpolation of a value from
	    // one range to another. This can be very useful for converting the
	    // motion of a Spring to a range of UI property values. For example a
	    // spring moving from position 0 to 1 could be interpolated to move a
	    // view from pixel 300 to 350 and scale it from 0.5 to 1. The current
	    // position of the `Spring` just needs to be run through this method
	    // taking its input range in the _from_ parameters with the property
	    // animation range in the _to_ parameters.
	    mapValueInRange: function(value, fromLow, fromHigh, toLow, toHigh) {
	      var fromRangeSize = fromHigh - fromLow;
	      var toRangeSize = toHigh - toLow;
	      var valueScale = (value - fromLow) / fromRangeSize;
	      return toLow + (valueScale * toRangeSize);
	    },
	
	    // Interpolate two hex colors in a 0 - 1 range or optionally provide a
	    // custom range with fromLow,fromHight. The output will be in hex by default
	    // unless asRGB is true in which case it will be returned as an rgb string.
	    interpolateColor:
	      function(val, startColor, endColor, fromLow, fromHigh, asRGB) {
	      fromLow = fromLow === undefined ? 0 : fromLow;
	      fromHigh = fromHigh === undefined ? 1 : fromHigh;
	      startColor = util.hexToRGB(startColor);
	      endColor = util.hexToRGB(endColor);
	      var r = Math.floor(
	        util.mapValueInRange(val, fromLow, fromHigh, startColor.r, endColor.r)
	      );
	      var g = Math.floor(
	        util.mapValueInRange(val, fromLow, fromHigh, startColor.g, endColor.g)
	      );
	      var b = Math.floor(
	        util.mapValueInRange(val, fromLow, fromHigh, startColor.b, endColor.b)
	      );
	      if (asRGB) {
	        return 'rgb(' + r + ',' + g + ',' + b + ')';
	      } else {
	        return util.rgbToHex(r, g, b);
	      }
	    },
	
	    degreesToRadians: function(deg) {
	      return (deg * Math.PI) / 180;
	    },
	
	    radiansToDegrees: function(rad) {
	      return (rad * 180) / Math.PI;
	    }
	
	  }
	
	  util.extend(util, MathUtil);
	
	
	  // Utilities
	  // ---------
	  // Here are a few useful JavaScript utilities.
	
	  // Lop off the first occurence of the reference in the Array.
	  function removeFirst(array, item) {
	    var idx = array.indexOf(item);
	    idx != -1 && array.splice(idx, 1);
	  }
	
	  var _onFrame;
	  if (typeof window !== 'undefined') {
	    _onFrame = window.requestAnimationFrame ||
	      window.webkitRequestAnimationFrame ||
	      window.mozRequestAnimationFrame ||
	      window.msRequestAnimationFrame ||
	      window.oRequestAnimationFrame ||
	      function(callback) {
	        window.setTimeout(callback, 1000 / 60);
	      };
	  }
	  if (!_onFrame && typeof process !== 'undefined' && process.title === 'node') {
	    _onFrame = setImmediate;
	  }
	
	  // Cross browser/node timer functions.
	  util.onFrame = function onFrame(func) {
	    return _onFrame(func);
	  };
	
	  // Export the public api using exports for common js or the window for
	  // normal browser inclusion.
	  if (true) {
	    util.extend(exports, rebound);
	  } else if (typeof window != 'undefined') {
	    window.rebound = rebound;
	  }
	})();
	
	
	// Legal Stuff
	// -----------
	/**
	 *  Copyright (c) 2013, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(702).setImmediate))

/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(294).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(702).setImmediate, __webpack_require__(702).clearImmediate))

/***/ },
/* 703 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _warning = __webpack_require__(704);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(498);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _Actions = __webpack_require__(705);
	
	var _ExecutionEnvironment = __webpack_require__(706);
	
	var _DOMUtils = __webpack_require__(707);
	
	var _DOMStateStorage = __webpack_require__(708);
	
	var _createDOMHistory = __webpack_require__(709);
	
	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);
	
	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}
	
	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();
	
	  if (isAbsolutePath(path)) return true;
	
	  _DOMUtils.replaceHashPath('/' + path);
	
	  return false;
	}
	
	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}
	
	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}
	
	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}
	
	var DefaultQueryKey = '_k';
	
	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  _invariant2['default'](_ExecutionEnvironment.canUseDOM, 'Hash history needs a DOM');
	
	  var queryKey = options.queryKey;
	
	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;
	
	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();
	
	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);
	
	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }
	
	    return history.createLocation(path, state, undefined, key);
	  }
	
	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;
	
	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.
	
	      transitionTo(getCurrentLocation());
	    }
	
	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);
	
	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }
	
	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;
	
	    if (action === _Actions.POP) return; // Nothing to do.
	
	    var path = (basename || '') + pathname + search;
	
	    if (queryKey) path = addQueryStringValueToPath(path, queryKey, key);
	
	    if (path === _DOMUtils.getHashPath()) {
	      _warning2['default'](false, 'You cannot %s the same path using hash history', action);
	    } else {
	      if (queryKey) {
	        _DOMStateStorage.saveState(key, state);
	      } else {
	        // Drop key and state.
	        location.key = location.state = null;
	      }
	
	      if (action === _Actions.PUSH) {
	        window.location.hash = path;
	      } else {
	        // REPLACE
	        _DOMUtils.replaceHashPath(path);
	      }
	    }
	  }
	
	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));
	
	  var listenerCount = 0,
	      stopHashChangeListener = undefined;
	
	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
	
	    var unlisten = history.listenBefore(listener);
	
	    return function () {
	      unlisten();
	
	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }
	
	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
	
	    var unlisten = history.listen(listener);
	
	    return function () {
	      unlisten();
	
	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }
	
	  function pushState(state, path) {
	    _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped');
	
	    history.pushState(state, path);
	  }
	
	  function replaceState(state, path) {
	    _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped');
	
	    history.replaceState(state, path);
	  }
	
	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();
	
	  function go(n) {
	    _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
	
	    history.go(n);
	  }
	
	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }
	
	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
	
	    history.registerTransitionHook(hook);
	  }
	
	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);
	
	    if (--listenerCount === 0) stopHashChangeListener();
	  }
	
	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    pushState: pushState,
	    replaceState: replaceState,
	    go: go,
	    createHref: createHref,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}
	
	exports['default'] = createHashHistory;
	module.exports = exports['default'];

/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function() {};
	
	if (true) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;


/***/ },
/* 705 */
/***/ function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';
	
	exports.__esModule = true;
	var PUSH = 'PUSH';
	
	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';
	
	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';
	
	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ },
/* 706 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ },
/* 707 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;
	
	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}
	
	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}
	
	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}
	
	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}
	
	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}
	
	function go(n) {
	  if (n) window.history.go(n);
	}
	
	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}
	
	/**
	 * Returns true if the HTML5 history API is supported. Taken from modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */
	
	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}
	
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	
	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	/*eslint-disable no-empty */
	'use strict';
	
	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _warning = __webpack_require__(704);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var KeyPrefix = '@@History/';
	var QuotaExceededError = 'QuotaExceededError';
	
	function createKey(key) {
	  return KeyPrefix + key;
	}
	
	function saveState(key, state) {
	  try {
	    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	  } catch (error) {
	    if (error.name === QuotaExceededError || window.sessionStorage.length === 0) {
	      // Probably in Safari "private mode" where sessionStorage quota is 0. #42
	      _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode');
	
	      return;
	    }
	
	    throw error;
	  }
	}
	
	function readState(key) {
	  var json = window.sessionStorage.getItem(createKey(key));
	
	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }
	
	  return null;
	}

/***/ },
/* 709 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _invariant = __webpack_require__(498);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _ExecutionEnvironment = __webpack_require__(706);
	
	var _DOMUtils = __webpack_require__(707);
	
	var _createHistory = __webpack_require__(710);
	
	var _createHistory2 = _interopRequireDefault(_createHistory);
	
	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));
	
	  function listen(listener) {
	    _invariant2['default'](_ExecutionEnvironment.canUseDOM, 'DOM history needs a DOM');
	
	    return history.listen(listener);
	  }
	
	  return _extends({}, history, {
	    listen: listen
	  });
	}
	
	exports['default'] = createDOMHistory;
	module.exports = exports['default'];

/***/ },
/* 710 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _deepEqual = __webpack_require__(711);
	
	var _deepEqual2 = _interopRequireDefault(_deepEqual);
	
	var _AsyncUtils = __webpack_require__(714);
	
	var _Actions = __webpack_require__(705);
	
	var _createLocation2 = __webpack_require__(715);
	
	var _createLocation3 = _interopRequireDefault(_createLocation2);
	
	var _runTransitionHook = __webpack_require__(717);
	
	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
	
	var _deprecate = __webpack_require__(718);
	
	var _deprecate2 = _interopRequireDefault(_deprecate);
	
	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}
	
	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}
	
	var DefaultKeyLength = 6;
	
	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var keyLength = options.keyLength;
	  var getUserConfirmation = options.getUserConfirmation;
	
	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;
	
	  var transitionHooks = [];
	
	  function listenBefore(hook) {
	    transitionHooks.push(hook);
	
	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }
	
	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;
	
	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }
	
	  function updateLocation(newLocation) {
	    var current = getCurrent();
	
	    location = newLocation;
	
	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }
	
	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }
	
	  function listen(listener) {
	    changeListeners.push(listener);
	
	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }
	
	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }
	
	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }
	
	  var pendingLocation = undefined;
	
	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.
	
	    pendingLocation = nextLocation;
	
	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.
	
	      if (ok) {
	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);
	
	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }
	
	  function pushState(state, path) {
	    transitionTo(createLocation(path, state, _Actions.PUSH, createKey()));
	  }
	
	  function replaceState(state, path) {
	    transitionTo(createLocation(path, state, _Actions.REPLACE, createKey()));
	  }
	
	  function goBack() {
	    go(-1);
	  }
	
	  function goForward() {
	    go(1);
	  }
	
	  function createKey() {
	    return createRandomKey(keyLength);
	  }
	
	  function createPath(path) {
	    if (path == null || typeof path === 'string') return path;
	
	    var pathname = path.pathname;
	    var search = path.search;
	    var hash = path.hash;
	
	    var result = pathname;
	
	    if (search) result += search;
	
	    if (hash) result += hash;
	
	    return result;
	  }
	
	  function createHref(path) {
	    return createPath(path);
	  }
	
	  function createLocation(path, state, action) {
	    var key = arguments.length <= 3 || arguments[3] === undefined ? createKey() : arguments[3];
	
	    return _createLocation3['default'](path, state, action, key);
	  }
	
	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }
	
	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }
	
	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }
	
	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }
	
	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    pushState: pushState,
	    replaceState: replaceState,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,
	
	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead')
	  };
	}
	
	exports['default'] = createHistory;
	module.exports = exports['default'];

/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(712);
	var isArguments = __webpack_require__(713);
	
	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	
	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;
	
	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}
	
	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}
	
	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}
	
	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ },
/* 712 */
/***/ function(module, exports) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;
	
	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ },
/* 713 */
/***/ function(module, exports) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';
	
	exports = module.exports = supportsArgumentsClass ? supported : unsupported;
	
	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};
	
	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ },
/* 714 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0;
	  var isDone = false;
	
	  function done() {
	    isDone = true;
	    callback.apply(this, arguments);
	  }
	
	  function next() {
	    if (isDone) return;
	
	    if (currentTurn < turns) {
	      work.call(this, currentTurn++, next, done);
	    } else {
	      done.apply(this, arguments);
	    }
	  }
	
	  next();
	}

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _Actions = __webpack_require__(705);
	
	var _parsePath = __webpack_require__(716);
	
	var _parsePath2 = _interopRequireDefault(_parsePath);
	
	function createLocation() {
	  var path = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var state = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	  var action = arguments.length <= 2 || arguments[2] === undefined ? _Actions.POP : arguments[2];
	  var key = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
	
	  if (typeof path === 'string') path = _parsePath2['default'](path);
	
	  var pathname = path.pathname || '/';
	  var search = path.search || '';
	  var hash = path.hash || '';
	
	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}
	
	exports['default'] = createLocation;
	module.exports = exports['default'];

/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _warning = __webpack_require__(704);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);
	
	  if (match == null) return string;
	
	  _warning2['default'](false, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', string);
	
	  return string.substring(match[0].length);
	}
	
	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';
	
	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }
	
	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }
	
	  if (pathname === '') pathname = '/';
	
	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}
	
	exports['default'] = parsePath;
	module.exports = exports['default'];

/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _warning = __webpack_require__(704);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);
	
	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead');
	  }
	}
	
	exports['default'] = runTransitionHook;
	module.exports = exports['default'];

/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _warning = __webpack_require__(704);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function deprecate(fn, message) {
	  return function () {
	    _warning2['default'](false, '[history] ' + message);
	    return fn.apply(this, arguments);
	  };
	}
	
	exports['default'] = deprecate;
	module.exports = exports['default'];

/***/ },
/* 719 */,
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */,
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */,
/* 732 */,
/* 733 */,
/* 734 */,
/* 735 */,
/* 736 */,
/* 737 */,
/* 738 */,
/* 739 */,
/* 740 */,
/* 741 */,
/* 742 */,
/* 743 */,
/* 744 */,
/* 745 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}
	
	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;
	
	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}
	
	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
	
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` or `self` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	
	/* globals self */
	var scope = typeof global !== "undefined" ? global : self;
	var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
	
	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);
	
	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.
	
	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396
	
	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}
	
	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;
	
	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}
	
	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html
	
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.
	
	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }
	
	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.
	
	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }
	
	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.
	
	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.
	
	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);
	
	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}
	
	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
	
	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 746 */,
/* 747 */,
/* 748 */,
/* 749 */,
/* 750 */,
/* 751 */,
/* 752 */,
/* 753 */,
/* 754 */,
/* 755 */,
/* 756 */,
/* 757 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 758 */,
/* 759 */,
/* 760 */,
/* 761 */,
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 763 */,
/* 764 */,
/* 765 */,
/* 766 */,
/* 767 */,
/* 768 */,
/* 769 */,
/* 770 */,
/* 771 */,
/* 772 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	const thunky = __webpack_require__(773)
	const KEY = '~~tabopentimestamp'
	
	exports = module.exports = (function () {
	  let timestamp
	  let cb
	  let isWinningTab
	  window.addEventListener('storage', onUpdatedInAnotherTab, false)
	  // // Improvements that didn't work:
	  //
	  // // Periodically write the new timestamp to storage
	  // // on load, check if timestamp in storage is stale, and if so, declare self winner
	  // // fails: when you open two new tabs at once
	  // // after refreshMillis have gone by with no tabs open
	  // // both will think they're the winner
	  //
	  // const refreshMillis = 5000
	  // const refreshInterval = setInterval(update, refreshMillis)
	  //
	  // const lastVal = Number(localStorage.getItem(KEY)) || 0
	  // if (lastVal < timestamp - refreshMillis * 2) {
	  //   // assume other tab got closed
	  //   isWinningTab = true
	  // }
	
	  // // remove KEY from storage on beforeunload
	  // // on load, if KEY is not in storage, declare self winner
	  // // fails: when two tabs are opened at the same time, both think they won
	  // // when either is refreshed, it still thinks it won, because on beforeunload it removed KEY from localstorage
	  // window.addEventListener('beforeunload', function () {
	  //   try {
	  //     localStorage.removeItem(KEY)
	  //   } catch (err) {}
	  // }, false)
	  //
	  // if (localStorage.getItem(KEY) == null) {
	  //   // yoohoo!
	  //   isWinningTab = true
	  // }
	
	  update()
	
	  return thunky(function (_cb) {
	    cb = _cb
	    if (isWinningTab) return report()
	
	    // if there isn't another tab open
	    // there isn't a good way of knowing
	    setTimeout(() => {
	      isWinningTab = true
	      report()
	    }, exports.timeout)
	  })
	
	  function update () {
	    timestamp = Date.now()
	    try {
	      localStorage.setItem(KEY, timestamp)
	    } catch (err) {
	      console.error('failed to set timestamp', err)
	    }
	  }
	
	  function report () {
	    if (cb) {
	      // log('isTheirTab', isWinningTab, 'calling back')
	      cb(null, isWinningTab)
	      cb = null
	    }
	  }
	
	  function onUpdatedInAnotherTab (e) {
	    if (e.key !== KEY) return
	
	    // should never be isNaN
	    const val = e.newValue
	    const theirTimestamp = isNaN(val) ? Infinity : Number(val)
	    if (theirTimestamp < timestamp) {
	      // they win
	      // log('isTheirTab', 'they win', theirTimestamp, timestamp)
	      isWinningTab = false
	      // clearInterval(refreshInterval)
	      window.removeEventListener('storage', onUpdatedInAnotherTab, false)
	    } else {
	      // tell other tab to die
	      // log('isTheirTab', 'we win')
	      localStorage.setItem(KEY, timestamp)
	      isWinningTab = true
	    }
	
	    report()
	  }
	})()
	
	exports.timeout = 100
	
	function log () {
	  return console.log.apply(console, arguments)
	}


/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict'
	module.exports = thunky
	
	function thunky (fn) {
	  var state = run
	  return thunk
	
	  function thunk (callback) {
	    state(callback || noop)
	  }
	
	  function run (callback) {
	    var stack = [callback]
	    state = wait
	    fn(done)
	
	    function wait (callback) {
	      stack.push(callback)
	    }
	
	    function done (err) {
	      var args = arguments
	      var apply = applier(args)
	
	      state = isError(err) ? run : apply
	      while (stack.length) stack.shift().apply(null, args)
	    }
	  }
	}
	
	function applier (args) {
	  return args.length ? applyArgs : applyNoArgs
	
	  function applyArgs (callback) {
	    process.nextTick(function () {
	      callback.apply(null, args)
	    })
	  }
	
	  function applyNoArgs (callback) {
	    process.nextTick(callback)
	  }
	}
	
	function isError (err) { // inlined from util so this works in the browser
	  return Object.prototype.toString.call(err) === '[object Error]'
	}
	
	function noop () {}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 774 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }
	
	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }
	
	    return iterator
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var list = this.map[name]
	    if (!list) {
	      list = []
	      this.map[name] = list
	    }
	    list.push(value)
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    var values = this.map[normalizeName(name)]
	    return values ? values[0] : null
	  }
	
	  Headers.prototype.getAll = function(name) {
	    return this.map[normalizeName(name)] || []
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = [normalizeValue(value)]
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    Object.getOwnPropertyNames(this.map).forEach(function(name) {
	      this.map[name].forEach(function(value) {
	        callback.call(thisArg, value, name, this)
	      }, this)
	    }, this)
	  }
	
	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }
	
	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    reader.readAsArrayBuffer(blob)
	    return fileReaderReady(reader)
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    reader.readAsText(blob)
	    return fileReaderReady(reader)
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (!body) {
	        this._bodyText = ''
	      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
	        // Only support ArrayBuffers for POST method.
	        // Receiving ArrayBuffers happens via Blobs, instead.
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }
	
	      this.text = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text')
	        } else {
	          return Promise.resolve(this._bodyText)
	        }
	      }
	    } else {
	      this.text = function() {
	        var rejected = consumed(this)
	        return rejected ? rejected : Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	    if (Request.prototype.isPrototypeOf(input)) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = input
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this)
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function headers(xhr) {
	    var head = new Headers()
	    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n')
	    pairs.forEach(function(header) {
	      var split = header.trim().split(':')
	      var key = split.shift().trim()
	      var value = split.join(':').trim()
	      head.append(key, value)
	    })
	    return head
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = options.statusText
	    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request
	      if (Request.prototype.isPrototypeOf(input) && !init) {
	        request = input
	      } else {
	        request = new Request(input, init)
	      }
	
	      var xhr = new XMLHttpRequest()
	
	      function responseURL() {
	        if ('responseURL' in xhr) {
	          return xhr.responseURL
	        }
	
	        // Avoid security warnings on getResponseHeader when not allowed by CORS
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	          return xhr.getResponseHeader('X-Request-URL')
	        }
	
	        return
	      }
	
	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: headers(xhr),
	          url: responseURL()
	        }
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 775 */,
/* 776 */,
/* 777 */,
/* 778 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = exports.RedBoxError = undefined;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(345);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _style = __webpack_require__(779);
	
	var _style2 = _interopRequireDefault(_style);
	
	var _errorStackParser = __webpack_require__(780);
	
	var _errorStackParser2 = _interopRequireDefault(_errorStackParser);
	
	var _objectAssign = __webpack_require__(303);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _lib = __webpack_require__(782);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RedBoxError = exports.RedBoxError = function (_get__2) {
	  _inherits(RedBoxError, _get__2);
	
	  function RedBoxError() {
	    _classCallCheck(this, RedBoxError);
	
	    return _possibleConstructorReturn(this, (RedBoxError.__proto__ || Object.getPrototypeOf(RedBoxError)).apply(this, arguments));
	  }
	
	  _createClass(RedBoxError, [{
	    key: 'renderFrames',
	    value: function renderFrames(frames) {
	      var _props = this.props,
	          filename = _props.filename,
	          editorScheme = _props.editorScheme,
	          useLines = _props.useLines,
	          useColumns = _props.useColumns;
	
	      var _get__3 = _get__('assign')({}, _get__('style'), this.props.style),
	          frame = _get__3.frame,
	          file = _get__3.file,
	          linkToFile = _get__3.linkToFile;
	
	      return frames.map(function (f, index) {
	        var text = void 0;
	        var url = void 0;
	
	        if (index === 0 && filename && !_get__('isFilenameAbsolute')(f.fileName)) {
	          url = _get__('makeUrl')(filename, editorScheme);
	          text = _get__('makeLinkText')(filename);
	        } else {
	          var lines = useLines ? f.lineNumber : null;
	          var columns = useColumns ? f.columnNumber : null;
	          url = _get__('makeUrl')(f.fileName, editorScheme, lines, columns);
	          text = _get__('makeLinkText')(f.fileName, lines, columns);
	        }
	
	        return _get__('React').createElement(
	          'div',
	          { style: frame, key: index },
	          _get__('React').createElement(
	            'div',
	            null,
	            f.functionName
	          ),
	          _get__('React').createElement(
	            'div',
	            { style: file },
	            _get__('React').createElement(
	              'a',
	              { href: url, style: linkToFile },
	              text
	            )
	          )
	        );
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          error = _props2.error,
	          className = _props2.className;
	
	      var _get__4 = _get__('assign')({}, _get__('style'), this.props.style),
	          redbox = _get__4.redbox,
	          message = _get__4.message,
	          stack = _get__4.stack,
	          frame = _get__4.frame;
	
	      var frames = void 0;
	      var parseError = void 0;
	      try {
	        frames = _get__('ErrorStackParser').parse(error);
	      } catch (e) {
	        parseError = new Error('Failed to parse stack trace. Stack trace information unavailable.');
	      }
	
	      if (parseError) {
	        frames = _get__('React').createElement(
	          'div',
	          { style: frame, key: 0 },
	          _get__('React').createElement(
	            'div',
	            null,
	            parseError.message
	          )
	        );
	      } else {
	        frames = this.renderFrames(frames);
	      }
	
	      return _get__('React').createElement(
	        'div',
	        { style: redbox, className: className },
	        _get__('React').createElement(
	          'div',
	          { style: message },
	          error.name,
	          ': ',
	          error.message
	        ),
	        _get__('React').createElement(
	          'div',
	          { style: stack },
	          frames
	        )
	      );
	    }
	  }]);
	
	  return RedBoxError;
	}(_get__('Component'));
	
	// "Portal" component for actual RedBoxError component to
	// render to (directly under body). Prevents bugs as in #27.
	
	
	RedBoxError.propTypes = {
	  error: _get__('PropTypes').instanceOf(Error).isRequired,
	  filename: _get__('PropTypes').string,
	  editorScheme: _get__('PropTypes').string,
	  useLines: _get__('PropTypes').bool,
	  useColumns: _get__('PropTypes').bool,
	  style: _get__('PropTypes').object,
	  className: _get__('PropTypes').string
	};
	RedBoxError.displayName = 'RedBoxError';
	RedBoxError.defaultProps = {
	  useLines: true,
	  useColumns: true
	};
	
	var RedBox = function (_get__5) {
	  _inherits(RedBox, _get__5);
	
	  function RedBox() {
	    _classCallCheck(this, RedBox);
	
	    return _possibleConstructorReturn(this, (RedBox.__proto__ || Object.getPrototypeOf(RedBox)).apply(this, arguments));
	  }
	
	  _createClass(RedBox, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.el = document.createElement('div');
	      document.body.appendChild(this.el);
	      this.renderRedBoxError();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderRedBoxError();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _get__('ReactDOM').unmountComponentAtNode(this.el);
	      document.body.removeChild(this.el);
	      this.el = null;
	    }
	  }, {
	    key: 'renderRedBoxError',
	    value: function renderRedBoxError() {
	      _get__('ReactDOM').render(_get__('React').createElement(_get__('RedBoxError'), this.props), this.el);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);
	
	  return RedBox;
	}(_get__('Component'));
	
	RedBox.propTypes = {
	  error: _get__('PropTypes').instanceOf(Error).isRequired
	};
	RedBox.displayName = 'RedBox';
	exports.default = RedBox;
	
	var _RewiredData__ = Object.create(null);
	
	var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
	var _RewireAPI__ = {};
	
	(function () {
	  function addPropertyToAPIObject(name, value) {
	    Object.defineProperty(_RewireAPI__, name, {
	      value: value,
	      enumerable: false,
	      configurable: true
	    });
	  }
	
	  addPropertyToAPIObject('__get__', _get__);
	  addPropertyToAPIObject('__GetDependency__', _get__);
	  addPropertyToAPIObject('__Rewire__', _set__);
	  addPropertyToAPIObject('__set__', _set__);
	  addPropertyToAPIObject('__reset__', _reset__);
	  addPropertyToAPIObject('__ResetDependency__', _reset__);
	  addPropertyToAPIObject('__with__', _with__);
	})();
	
	function _get__(variableName) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _get_original__(variableName);
	  } else {
	    var value = _RewiredData__[variableName];
	
	    if (value === INTENTIONAL_UNDEFINED) {
	      return undefined;
	    } else {
	      return value;
	    }
	  }
	}
	
	function _get_original__(variableName) {
	  switch (variableName) {
	    case 'PropTypes':
	      return _react.PropTypes;
	
	    case 'assign':
	      return _objectAssign2.default;
	
	    case 'style':
	      return _style2.default;
	
	    case 'isFilenameAbsolute':
	      return _lib.isFilenameAbsolute;
	
	    case 'makeUrl':
	      return _lib.makeUrl;
	
	    case 'makeLinkText':
	      return _lib.makeLinkText;
	
	    case 'ErrorStackParser':
	      return _errorStackParser2.default;
	
	    case 'Component':
	      return _react.Component;
	
	    case 'ReactDOM':
	      return _reactDom2.default;
	
	    case 'React':
	      return _react2.default;
	
	    case 'RedBoxError':
	      return RedBoxError;
	  }
	
	  return undefined;
	}
	
	function _assign__(variableName, value) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _set_original__(variableName, value);
	  } else {
	    return _RewiredData__[variableName] = value;
	  }
	}
	
	function _set_original__(variableName, _value) {
	  switch (variableName) {}
	
	  return undefined;
	}
	
	function _update_operation__(operation, variableName, prefix) {
	  var oldValue = _get__(variableName);
	
	  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;
	
	  _assign__(variableName, newValue);
	
	  return prefix ? newValue : oldValue;
	}
	
	function _set__(variableName, value) {
	  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
	    Object.keys(variableName).forEach(function (name) {
	      _RewiredData__[name] = variableName[name];
	    });
	  } else {
	    if (value === undefined) {
	      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
	    } else {
	      _RewiredData__[variableName] = value;
	    }
	
	    return function () {
	      _reset__(variableName);
	    };
	  }
	}
	
	function _reset__(variableName) {
	  delete _RewiredData__[variableName];
	}
	
	function _with__(object) {
	  var rewiredVariableNames = Object.keys(object);
	  var previousValues = {};
	
	  function reset() {
	    rewiredVariableNames.forEach(function (variableName) {
	      _RewiredData__[variableName] = previousValues[variableName];
	    });
	  }
	
	  return function (callback) {
	    rewiredVariableNames.forEach(function (variableName) {
	      previousValues[variableName] = _RewiredData__[variableName];
	      _RewiredData__[variableName] = object[variableName];
	    });
	    var result = callback();
	
	    if (!!result && typeof result.then == 'function') {
	      result.then(reset).catch(reset);
	    } else {
	      reset();
	    }
	
	    return result;
	  };
	}
	
	var _typeOfOriginalExport = typeof RedBox === 'undefined' ? 'undefined' : _typeof(RedBox);
	
	function addNonEnumerableProperty(name, value) {
	  Object.defineProperty(RedBox, name, {
	    value: value,
	    enumerable: false,
	    configurable: true
	  });
	}
	
	if ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(RedBox)) {
	  addNonEnumerableProperty('__get__', _get__);
	  addNonEnumerableProperty('__GetDependency__', _get__);
	  addNonEnumerableProperty('__Rewire__', _set__);
	  addNonEnumerableProperty('__set__', _set__);
	  addNonEnumerableProperty('__reset__', _reset__);
	  addNonEnumerableProperty('__ResetDependency__', _reset__);
	  addNonEnumerableProperty('__with__', _with__);
	  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);
	}
	
	exports.__get__ = _get__;
	exports.__GetDependency__ = _get__;
	exports.__Rewire__ = _set__;
	exports.__set__ = _set__;
	exports.__ResetDependency__ = _reset__;
	exports.__RewireAPI__ = _RewireAPI__;

/***/ },
/* 779 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var _DefaultExportValue = {
	  redbox: {
	    boxSizing: 'border-box',
	    fontFamily: 'sans-serif',
	    position: 'fixed',
	    padding: 10,
	    top: '0px',
	    left: '0px',
	    bottom: '0px',
	    right: '0px',
	    width: '100%',
	    background: 'rgb(204, 0, 0)',
	    color: 'white',
	    zIndex: 2147483647,
	    textAlign: 'left',
	    fontSize: '16px',
	    lineHeight: 1.2,
	    overflow: 'auto'
	  },
	  message: {
	    fontWeight: 'bold'
	  },
	  stack: {
	    fontFamily: 'monospace',
	    marginTop: '2em'
	  },
	  frame: {
	    marginTop: '1em'
	  },
	  file: {
	    fontSize: '0.8em',
	    color: 'rgba(255, 255, 255, 0.7)'
	  },
	  linkToFile: {
	    textDecoration: 'none',
	    color: 'rgba(255, 255, 255, 0.7)'
	  }
	};
	exports.default = _DefaultExportValue;

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
	    'use strict';
	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.
	
	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(781)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('stackframe'));
	    } else {
	        root.ErrorStackParser = factory(root.StackFrame);
	    }
	}(this, function ErrorStackParser(StackFrame) {
	    'use strict';
	
	    var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+\:\d+/;
	    var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+\:\d+|\(native\))/m;
	    var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code\])?$/;
	
	    function _map(array, fn, thisArg) {
	        if (typeof Array.prototype.map === 'function') {
	            return array.map(fn, thisArg);
	        } else {
	            var output = new Array(array.length);
	            for (var i = 0; i < array.length; i++) {
	                output[i] = fn.call(thisArg, array[i]);
	            }
	            return output;
	        }
	    }
	
	    function _filter(array, fn, thisArg) {
	        if (typeof Array.prototype.filter === 'function') {
	            return array.filter(fn, thisArg);
	        } else {
	            var output = [];
	            for (var i = 0; i < array.length; i++) {
	                if (fn.call(thisArg, array[i])) {
	                    output.push(array[i]);
	                }
	            }
	            return output;
	        }
	    }
	
	    function _indexOf(array, target) {
	        if (typeof Array.prototype.indexOf === 'function') {
	            return array.indexOf(target);
	        } else {
	            for (var i = 0; i < array.length; i++) {
	                if (array[i] === target) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	    }
	
	    return {
	        /**
	         * Given an Error object, extract the most information from it.
	         *
	         * @param {Error} error object
	         * @return {Array} of StackFrames
	         */
	        parse: function ErrorStackParser$$parse(error) {
	            if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {
	                return this.parseOpera(error);
	            } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
	                return this.parseV8OrIE(error);
	            } else if (error.stack) {
	                return this.parseFFOrSafari(error);
	            } else {
	                throw new Error('Cannot parse given Error object');
	            }
	        },
	
	        // Separate line and column numbers from a string of the form: (URI:Line:Column)
	        extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
	            // Fail-fast but return locations like "(native)"
	            if (urlLike.indexOf(':') === -1) {
	                return [urlLike];
	            }
	
	            var regExp = /(.+?)(?:\:(\d+))?(?:\:(\d+))?$/;
	            var parts = regExp.exec(urlLike.replace(/[\(\)]/g, ''));
	            return [parts[1], parts[2] || undefined, parts[3] || undefined];
	        },
	
	        parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
	            var filtered = _filter(error.stack.split('\n'), function(line) {
	                return !!line.match(CHROME_IE_STACK_REGEXP);
	            }, this);
	
	            return _map(filtered, function(line) {
	                if (line.indexOf('(eval ') > -1) {
	                    // Throw away eval information until we implement stacktrace.js/stackframe#8
	                    line = line.replace(/eval code/g, 'eval').replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, '');
	                }
	                var tokens = line.replace(/^\s+/, '').replace(/\(eval code/g, '(').split(/\s+/).slice(1);
	                var locationParts = this.extractLocation(tokens.pop());
	                var functionName = tokens.join(' ') || undefined;
	                var fileName = _indexOf(['eval', '<anonymous>'], locationParts[0]) > -1 ? undefined : locationParts[0];
	
	                return new StackFrame(functionName, undefined, fileName, locationParts[1], locationParts[2], line);
	            }, this);
	        },
	
	        parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
	            var filtered = _filter(error.stack.split('\n'), function(line) {
	                return !line.match(SAFARI_NATIVE_CODE_REGEXP);
	            }, this);
	
	            return _map(filtered, function(line) {
	                // Throw away eval information until we implement stacktrace.js/stackframe#8
	                if (line.indexOf(' > eval') > -1) {
	                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ':$1');
	                }
	
	                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
	                    // Safari eval frames only have function names and nothing else
	                    return new StackFrame(line);
	                } else {
	                    var tokens = line.split('@');
	                    var locationParts = this.extractLocation(tokens.pop());
	                    var functionName = tokens.join('@') || undefined;
	                    return new StackFrame(functionName,
	                        undefined,
	                        locationParts[0],
	                        locationParts[1],
	                        locationParts[2],
	                        line);
	                }
	            }, this);
	        },
	
	        parseOpera: function ErrorStackParser$$parseOpera(e) {
	            if (!e.stacktrace || (e.message.indexOf('\n') > -1 &&
	                e.message.split('\n').length > e.stacktrace.split('\n').length)) {
	                return this.parseOpera9(e);
	            } else if (!e.stack) {
	                return this.parseOpera10(e);
	            } else {
	                return this.parseOpera11(e);
	            }
	        },
	
	        parseOpera9: function ErrorStackParser$$parseOpera9(e) {
	            var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
	            var lines = e.message.split('\n');
	            var result = [];
	
	            for (var i = 2, len = lines.length; i < len; i += 2) {
	                var match = lineRE.exec(lines[i]);
	                if (match) {
	                    result.push(new StackFrame(undefined, undefined, match[2], match[1], undefined, lines[i]));
	                }
	            }
	
	            return result;
	        },
	
	        parseOpera10: function ErrorStackParser$$parseOpera10(e) {
	            var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
	            var lines = e.stacktrace.split('\n');
	            var result = [];
	
	            for (var i = 0, len = lines.length; i < len; i += 2) {
	                var match = lineRE.exec(lines[i]);
	                if (match) {
	                    result.push(
	                        new StackFrame(
	                            match[3] || undefined,
	                            undefined,
	                            match[2],
	                            match[1],
	                            undefined,
	                            lines[i]
	                        )
	                    );
	                }
	            }
	
	            return result;
	        },
	
	        // Opera 10.65+ Error.stack very similar to FF/Safari
	        parseOpera11: function ErrorStackParser$$parseOpera11(error) {
	            var filtered = _filter(error.stack.split('\n'), function(line) {
	                return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
	            }, this);
	
	            return _map(filtered, function(line) {
	                var tokens = line.split('@');
	                var locationParts = this.extractLocation(tokens.pop());
	                var functionCall = (tokens.shift() || '');
	                var functionName = functionCall
	                        .replace(/<anonymous function(: (\w+))?>/, '$2')
	                        .replace(/\([^\)]*\)/g, '') || undefined;
	                var argsRaw;
	                if (functionCall.match(/\(([^\)]*)\)/)) {
	                    argsRaw = functionCall.replace(/^[^\(]+\(([^\)]*)\)$/, '$1');
	                }
	                var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?
	                    undefined : argsRaw.split(',');
	                return new StackFrame(
	                    functionName,
	                    args,
	                    locationParts[0],
	                    locationParts[1],
	                    locationParts[2],
	                    line);
	            }, this);
	        }
	    };
	}));
	


/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	    'use strict';
	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.
	
	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        module.exports = factory();
	    } else {
	        root.StackFrame = factory();
	    }
	}(this, function () {
	    'use strict';
	    function _isNumber(n) {
	        return !isNaN(parseFloat(n)) && isFinite(n);
	    }
	
	    function StackFrame(functionName, args, fileName, lineNumber, columnNumber, source) {
	        if (functionName !== undefined) {
	            this.setFunctionName(functionName);
	        }
	        if (args !== undefined) {
	            this.setArgs(args);
	        }
	        if (fileName !== undefined) {
	            this.setFileName(fileName);
	        }
	        if (lineNumber !== undefined) {
	            this.setLineNumber(lineNumber);
	        }
	        if (columnNumber !== undefined) {
	            this.setColumnNumber(columnNumber);
	        }
	        if (source !== undefined) {
	            this.setSource(source);
	        }
	    }
	
	    StackFrame.prototype = {
	        getFunctionName: function () {
	            return this.functionName;
	        },
	        setFunctionName: function (v) {
	            this.functionName = String(v);
	        },
	
	        getArgs: function () {
	            return this.args;
	        },
	        setArgs: function (v) {
	            if (Object.prototype.toString.call(v) !== '[object Array]') {
	                throw new TypeError('Args must be an Array');
	            }
	            this.args = v;
	        },
	
	        // NOTE: Property name may be misleading as it includes the path,
	        // but it somewhat mirrors V8's JavaScriptStackTraceApi
	        // https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's
	        // http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14
	        getFileName: function () {
	            return this.fileName;
	        },
	        setFileName: function (v) {
	            this.fileName = String(v);
	        },
	
	        getLineNumber: function () {
	            return this.lineNumber;
	        },
	        setLineNumber: function (v) {
	            if (!_isNumber(v)) {
	                throw new TypeError('Line Number must be a Number');
	            }
	            this.lineNumber = Number(v);
	        },
	
	        getColumnNumber: function () {
	            return this.columnNumber;
	        },
	        setColumnNumber: function (v) {
	            if (!_isNumber(v)) {
	                throw new TypeError('Column Number must be a Number');
	            }
	            this.columnNumber = Number(v);
	        },
	
	        getSource: function () {
	            return this.source;
	        },
	        setSource: function (v) {
	            this.source = String(v);
	        },
	
	        toString: function() {
	            var functionName = this.getFunctionName() || '{anonymous}';
	            var args = '(' + (this.getArgs() || []).join(',') + ')';
	            var fileName = this.getFileName() ? ('@' + this.getFileName()) : '';
	            var lineNumber = _isNumber(this.getLineNumber()) ? (':' + this.getLineNumber()) : '';
	            var columnNumber = _isNumber(this.getColumnNumber()) ? (':' + this.getColumnNumber()) : '';
	            return functionName + args + fileName + lineNumber + columnNumber;
	        }
	    };
	
	    return StackFrame;
	}));


/***/ },
/* 782 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var filenameWithoutLoaders = exports.filenameWithoutLoaders = function filenameWithoutLoaders() {
	  var filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	
	  var index = filename.lastIndexOf('!');
	
	  return index < 0 ? filename : filename.substr(index + 1);
	};
	
	var filenameHasLoaders = exports.filenameHasLoaders = function filenameHasLoaders(filename) {
	  var actualFilename = _get__('filenameWithoutLoaders')(filename);
	
	  return actualFilename !== filename;
	};
	
	var filenameHasSchema = exports.filenameHasSchema = function filenameHasSchema(filename) {
	  return (/^[\w]+\:/.test(filename)
	  );
	};
	
	var isFilenameAbsolute = exports.isFilenameAbsolute = function isFilenameAbsolute(filename) {
	  var actualFilename = _get__('filenameWithoutLoaders')(filename);
	
	  if (actualFilename.indexOf('/') === 0) {
	    return true;
	  }
	
	  return false;
	};
	
	var makeUrl = exports.makeUrl = function makeUrl(filename, scheme, line, column) {
	  var actualFilename = _get__('filenameWithoutLoaders')(filename);
	
	  if (_get__('filenameHasSchema')(filename)) {
	    return actualFilename;
	  }
	
	  var url = 'file://' + actualFilename;
	
	  if (scheme) {
	    url = scheme + '://open?url=' + url;
	
	    if (line && actualFilename === filename) {
	      url = url + '&line=' + line;
	
	      if (column) {
	        url = url + '&column=' + column;
	      }
	    }
	  }
	
	  return url;
	};
	
	var makeLinkText = exports.makeLinkText = function makeLinkText(filename, line, column) {
	  var text = _get__('filenameWithoutLoaders')(filename);
	
	  if (line && text === filename) {
	    text = text + ':' + line;
	
	    if (column) {
	      text = text + ':' + column;
	    }
	  }
	
	  return text;
	};
	
	var _RewiredData__ = Object.create(null);
	
	var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';
	var _RewireAPI__ = {};
	
	(function () {
	  function addPropertyToAPIObject(name, value) {
	    Object.defineProperty(_RewireAPI__, name, {
	      value: value,
	      enumerable: false,
	      configurable: true
	    });
	  }
	
	  addPropertyToAPIObject('__get__', _get__);
	  addPropertyToAPIObject('__GetDependency__', _get__);
	  addPropertyToAPIObject('__Rewire__', _set__);
	  addPropertyToAPIObject('__set__', _set__);
	  addPropertyToAPIObject('__reset__', _reset__);
	  addPropertyToAPIObject('__ResetDependency__', _reset__);
	  addPropertyToAPIObject('__with__', _with__);
	})();
	
	function _get__(variableName) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _get_original__(variableName);
	  } else {
	    var value = _RewiredData__[variableName];
	
	    if (value === INTENTIONAL_UNDEFINED) {
	      return undefined;
	    } else {
	      return value;
	    }
	  }
	}
	
	function _get_original__(variableName) {
	  switch (variableName) {
	    case 'filenameWithoutLoaders':
	      return filenameWithoutLoaders;
	
	    case 'filenameHasSchema':
	      return filenameHasSchema;
	  }
	
	  return undefined;
	}
	
	function _assign__(variableName, value) {
	  if (_RewiredData__ === undefined || _RewiredData__[variableName] === undefined) {
	    return _set_original__(variableName, value);
	  } else {
	    return _RewiredData__[variableName] = value;
	  }
	}
	
	function _set_original__(variableName, _value) {
	  switch (variableName) {}
	
	  return undefined;
	}
	
	function _update_operation__(operation, variableName, prefix) {
	  var oldValue = _get__(variableName);
	
	  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;
	
	  _assign__(variableName, newValue);
	
	  return prefix ? newValue : oldValue;
	}
	
	function _set__(variableName, value) {
	  if ((typeof variableName === 'undefined' ? 'undefined' : _typeof(variableName)) === 'object') {
	    Object.keys(variableName).forEach(function (name) {
	      _RewiredData__[name] = variableName[name];
	    });
	  } else {
	    if (value === undefined) {
	      _RewiredData__[variableName] = INTENTIONAL_UNDEFINED;
	    } else {
	      _RewiredData__[variableName] = value;
	    }
	
	    return function () {
	      _reset__(variableName);
	    };
	  }
	}
	
	function _reset__(variableName) {
	  delete _RewiredData__[variableName];
	}
	
	function _with__(object) {
	  var rewiredVariableNames = Object.keys(object);
	  var previousValues = {};
	
	  function reset() {
	    rewiredVariableNames.forEach(function (variableName) {
	      _RewiredData__[variableName] = previousValues[variableName];
	    });
	  }
	
	  return function (callback) {
	    rewiredVariableNames.forEach(function (variableName) {
	      previousValues[variableName] = _RewiredData__[variableName];
	      _RewiredData__[variableName] = object[variableName];
	    });
	    var result = callback();
	
	    if (!!result && typeof result.then == 'function') {
	      result.then(reset).catch(reset);
	    } else {
	      reset();
	    }
	
	    return result;
	  };
	}
	
	exports.__get__ = _get__;
	exports.__GetDependency__ = _get__;
	exports.__Rewire__ = _set__;
	exports.__set__ = _set__;
	exports.__ResetDependency__ = _reset__;
	exports.__RewireAPI__ = _RewireAPI__;
	exports.default = _RewireAPI__;

/***/ },
/* 783 */
/***/ function(module, exports) {

	'use strict';
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;_e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }return _arr;
	  }return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = catchErrors;
	function catchErrors(_ref) {
	  var filename = _ref.filename;
	  var components = _ref.components;
	  var imports = _ref.imports;
	
	  var _imports = _slicedToArray(imports, 3);
	
	  var React = _imports[0];
	  var ErrorReporter = _imports[1];
	  var reporterOptions = _imports[2];
	
	  if (!React || !React.Component) {
	    throw new Error('imports[0] for react-transform-catch-errors does not look like React.');
	  }
	  if (typeof ErrorReporter !== 'function') {
	    throw new Error('imports[1] for react-transform-catch-errors does not look like a React component.');
	  }
	
	  return function wrapToCatchErrors(ReactClass, componentId) {
	    var originalRender = ReactClass.prototype.render;
	
	    ReactClass.prototype.render = function tryRender() {
	      try {
	        return originalRender.apply(this, arguments);
	      } catch (err) {
	        setTimeout(function () {
	          if (typeof console.reportErrorsAsExceptions !== 'undefined') {
	            var prevReportErrorAsExceptions = console.reportErrorsAsExceptions;
	            // We're in React Native. Don't throw.
	            // Stop react-native from triggering its own error handler
	            console.reportErrorsAsExceptions = false;
	            // Log an error
	            console.error(err);
	            // Reactivate it so other errors are still handled
	            console.reportErrorsAsExceptions = prevReportErrorAsExceptions;
	          } else {
	            throw err;
	          }
	        });
	
	        return React.createElement(ErrorReporter, _extends({
	          error: err,
	          filename: filename
	        }, reporterOptions));
	      }
	    };
	
	    return ReactClass;
	  };
	}

/***/ },
/* 784 */,
/* 785 */,
/* 786 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 787 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(788);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(789);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 789 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 790 */,
/* 791 */,
/* 792 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var bind = __webpack_require__(793);
	var define = __webpack_require__(795);
	
	var implementation = __webpack_require__(799);
	var getPolyfill = __webpack_require__(817);
	var shim = __webpack_require__(818);
	
	var bound = bind.call(Function.call, getPolyfill());
	
	define(bound, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});
	
	module.exports = bound;


/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

	var implementation = __webpack_require__(794);
	
	module.exports = Function.prototype.bind || implementation;


/***/ },
/* 794 */
/***/ function(module, exports) {

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';
	
	module.exports = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);
	
	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };
	
	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }
	
	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
	
	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }
	
	    return bound;
	};


/***/ },
/* 795 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var keys = __webpack_require__(796);
	var foreach = __webpack_require__(798);
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';
	
	var toStr = Object.prototype.toString;
	
	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};
	
	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
	        /* eslint-disable no-unused-vars, no-restricted-syntax */
	        for (var _ in obj) { return false; }
	        /* eslint-enable no-unused-vars, no-restricted-syntax */
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();
	
	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			Object.defineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};
	
	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = props.concat(Object.getOwnPropertySymbols(map));
		}
		foreach(props, function (name) {
			defineProperty(object, name, map[name], predicates[name]);
		});
	};
	
	defineProperties.supportsDescriptors = !!supportsDescriptors;
	
	module.exports = defineProperties;


/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var slice = Array.prototype.slice;
	var isArgs = __webpack_require__(797);
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};
	
	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];
	
		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}
	
		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}
	
		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}
	
		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
	
			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
	
	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				return (Object.keys(arguments) || '').length === 2;
			}(1, 2));
			if (!keysWorksWithArguments) {
				var originalKeys = Object.keys;
				Object.keys = function keys(object) {
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					} else {
						return originalKeys(object);
					}
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};
	
	module.exports = keysShim;


/***/ },
/* 797 */
/***/ function(module, exports) {

	'use strict';
	
	var toStr = Object.prototype.toString;
	
	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};


/***/ },
/* 798 */
/***/ function(module, exports) {

	
	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;
	
	module.exports = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};
	


/***/ },
/* 799 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var requirePromise = __webpack_require__(800);
	
	requirePromise();
	
	var ES = __webpack_require__(801);
	var bind = __webpack_require__(793);
	
	var getPromise = function getPromise(C, handler) {
		return new C(function (resolve) {
			resolve(handler());
		});
	};
	
	var OriginalPromise = Promise;
	
	var then = bind.call(Function.call, Promise.prototype.then);
	
	var promiseFinally = function finally_(onFinally) {
		/* eslint no-invalid-this: 0 */
	
		var handler = typeof onFinally === 'function' ? onFinally : function () {};
		var C;
		var newPromise = then(
			this, // throw if IsPromise(this) is false
			function (x) {
				return then(getPromise(C, handler), function () {
					return x;
				});
			},
			function (e) {
				return then(getPromise(C, handler), function () {
					throw e;
				});
			}
		);
		C = ES.SpeciesConstructor(this, OriginalPromise); // may throw
		return newPromise;
	};
	if (Object.getOwnPropertyDescriptor) {
		var descriptor = Object.getOwnPropertyDescriptor(promiseFinally, 'name');
		if (descriptor && descriptor.configurable) {
			Object.defineProperty(promiseFinally, 'name', { configurable: true, value: 'finally' });
		}
	}
	
	module.exports = promiseFinally;


/***/ },
/* 800 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function requirePromise() {
		if (typeof Promise !== 'function') {
			throw new TypeError('`Promise.prototype.finally` requires a global `Promise` be available.');
		}
	};


/***/ },
/* 801 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ES6 = __webpack_require__(802);
	var assign = __webpack_require__(805);
	
	var ES7 = assign(ES6, {
		// https://github.com/tc39/ecma262/pull/60
		SameValueNonNumber: function SameValueNonNumber(x, y) {
			if (typeof x === 'number' || typeof x !== typeof y) {
				throw new TypeError('SameValueNonNumber requires two non-number values of the same type.');
			}
			return this.SameValue(x, y);
		}
	});
	
	module.exports = ES7;


/***/ },
/* 802 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toStr = Object.prototype.toString;
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
	var symbolToStr = hasSymbols ? Symbol.prototype.toString : toStr;
	
	var $isNaN = __webpack_require__(803);
	var $isFinite = __webpack_require__(804);
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
	
	var assign = __webpack_require__(805);
	var sign = __webpack_require__(806);
	var mod = __webpack_require__(807);
	var isPrimitive = __webpack_require__(808);
	var toPrimitive = __webpack_require__(809);
	var parseInteger = parseInt;
	var bind = __webpack_require__(793);
	var strSlice = bind.call(Function.call, String.prototype.slice);
	var isBinary = bind.call(Function.call, RegExp.prototype.test, /^0b[01]+$/i);
	var isOctal = bind.call(Function.call, RegExp.prototype.test, /^0o[0-7]+$/i);
	var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
	var nonWSregex = new RegExp('[' + nonWS + ']', 'g');
	var hasNonWS = bind.call(Function.call, RegExp.prototype.test, nonWSregex);
	var invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;
	var isInvalidHexLiteral = bind.call(Function.call, RegExp.prototype.test, invalidHexLiteral);
	
	// whitespace from: http://es5.github.io/#x15.5.4.20
	// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
	var ws = [
		'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
		'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
		'\u2029\uFEFF'
	].join('');
	var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
	var replace = bind.call(Function.call, String.prototype.replace);
	var trim = function (value) {
		return replace(value, trimRegex, '');
	};
	
	var ES5 = __webpack_require__(814);
	
	var hasRegExpMatcher = __webpack_require__(816);
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations
	var ES6 = assign(assign({}, ES5), {
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args
		Call: function Call(F, V) {
			var args = arguments.length > 2 ? arguments[2] : [];
			if (!this.IsCallable(F)) {
				throw new TypeError(F + ' is not a function');
			}
			return F.apply(V, args);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive
		ToPrimitive: toPrimitive,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean
		// ToBoolean: ES5.ToBoolean,
	
		// http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber
		ToNumber: function ToNumber(argument) {
			var value = isPrimitive(argument) ? argument : toPrimitive(argument, 'number');
			if (typeof value === 'symbol') {
				throw new TypeError('Cannot convert a Symbol value to a number');
			}
			if (typeof value === 'string') {
				if (isBinary(value)) {
					return this.ToNumber(parseInteger(strSlice(value, 2), 2));
				} else if (isOctal(value)) {
					return this.ToNumber(parseInteger(strSlice(value, 2), 8));
				} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
					return NaN;
				} else {
					var trimmed = trim(value);
					if (trimmed !== value) {
						return this.ToNumber(trimmed);
					}
				}
			}
			return Number(value);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger
		// ToInteger: ES5.ToNumber,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32
		// ToInt32: ES5.ToInt32,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32
		// ToUint32: ES5.ToUint32,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16
		ToInt16: function ToInt16(argument) {
			var int16bit = this.ToUint16(argument);
			return int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16
		// ToUint16: ES5.ToUint16,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8
		ToInt8: function ToInt8(argument) {
			var int8bit = this.ToUint8(argument);
			return int8bit >= 0x80 ? int8bit - 0x100 : int8bit;
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8
		ToUint8: function ToUint8(argument) {
			var number = this.ToNumber(argument);
			if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
			var posInt = sign(number) * Math.floor(Math.abs(number));
			return mod(posInt, 0x100);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp
		ToUint8Clamp: function ToUint8Clamp(argument) {
			var number = this.ToNumber(argument);
			if ($isNaN(number) || number <= 0) { return 0; }
			if (number >= 0xFF) { return 0xFF; }
			var f = Math.floor(argument);
			if (f + 0.5 < number) { return f + 1; }
			if (number < f + 0.5) { return f; }
			if (f % 2 !== 0) { return f + 1; }
			return f;
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring
		ToString: function ToString(argument) {
			if (typeof argument === 'symbol') {
				throw new TypeError('Cannot convert a Symbol value to a string');
			}
			return String(argument);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject
		ToObject: function ToObject(value) {
			this.RequireObjectCoercible(value);
			return Object(value);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
		ToPropertyKey: function ToPropertyKey(argument) {
			var key = this.ToPrimitive(argument, String);
			return typeof key === 'symbol' ? symbolToStr.call(key) : this.ToString(key);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
		ToLength: function ToLength(argument) {
			var len = this.ToInteger(argument);
			if (len <= 0) { return 0; } // includes converting -0 to +0
			if (len > MAX_SAFE_INTEGER) { return MAX_SAFE_INTEGER; }
			return len;
		},
	
		// http://www.ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring
		CanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {
			if (toStr.call(argument) !== '[object String]') {
				throw new TypeError('must be a string');
			}
			if (argument === '-0') { return -0; }
			var n = this.ToNumber(argument);
			if (this.SameValue(this.ToString(n), argument)) { return n; }
			return void 0;
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible
		RequireObjectCoercible: ES5.CheckObjectCoercible,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
		IsArray: Array.isArray || function IsArray(argument) {
			return toStr.call(argument) === '[object Array]';
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable
		// IsCallable: ES5.IsCallable,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
		IsConstructor: function IsConstructor(argument) {
			return typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o
		IsExtensible: function IsExtensible(obj) {
			if (!Object.preventExtensions) { return true; }
			if (isPrimitive(obj)) {
				return false;
			}
			return Object.isExtensible(obj);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger
		IsInteger: function IsInteger(argument) {
			if (typeof argument !== 'number' || $isNaN(argument) || !$isFinite(argument)) {
				return false;
			}
			var abs = Math.abs(argument);
			return Math.floor(abs) === abs;
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey
		IsPropertyKey: function IsPropertyKey(argument) {
			return typeof argument === 'string' || typeof argument === 'symbol';
		},
	
		// http://www.ecma-international.org/ecma-262/6.0/#sec-isregexp
		IsRegExp: function IsRegExp(argument) {
			if (!argument || typeof argument !== 'object') {
				return false;
			}
			if (hasSymbols) {
				var isRegExp = argument[Symbol.match];
				if (typeof isRegExp !== 'undefined') {
					return ES5.ToBoolean(isRegExp);
				}
			}
			return hasRegExpMatcher(argument);
		},
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue
		// SameValue: ES5.SameValue,
	
		// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero
		SameValueZero: function SameValueZero(x, y) {
			return (x === y) || ($isNaN(x) && $isNaN(y));
		},
	
		/**
		 * 7.3.2 GetV (V, P)
		 * 1. Assert: IsPropertyKey(P) is true.
		 * 2. Let O be ToObject(V).
		 * 3. ReturnIfAbrupt(O).
		 * 4. Return O.[[Get]](P, V).
		 */
		GetV: function GetV(V, P) {
			// 7.3.2.1
			if (!this.IsPropertyKey(P)) {
				throw new TypeError('Assertion failed: IsPropertyKey(P) is not true');
			}
	
			// 7.3.2.2-3
			var O = this.ToObject(V);
	
			// 7.3.2.4
			return O[P];
		},
	
		/**
		 * 7.3.9 - http://www.ecma-international.org/ecma-262/6.0/#sec-getmethod
		 * 1. Assert: IsPropertyKey(P) is true.
		 * 2. Let func be GetV(O, P).
		 * 3. ReturnIfAbrupt(func).
		 * 4. If func is either undefined or null, return undefined.
		 * 5. If IsCallable(func) is false, throw a TypeError exception.
		 * 6. Return func.
		 */
		GetMethod: function GetMethod(O, P) {
			// 7.3.9.1
			if (!this.IsPropertyKey(P)) {
				throw new TypeError('Assertion failed: IsPropertyKey(P) is not true');
			}
	
			// 7.3.9.2
			var func = this.GetV(O, P);
	
			// 7.3.9.4
			if (func == null) {
				return undefined;
			}
	
			// 7.3.9.5
			if (!this.IsCallable(func)) {
				throw new TypeError(P + 'is not a function');
			}
	
			// 7.3.9.6
			return func;
		},
	
		/**
		 * 7.3.1 Get (O, P) - http://www.ecma-international.org/ecma-262/6.0/#sec-get-o-p
		 * 1. Assert: Type(O) is Object.
		 * 2. Assert: IsPropertyKey(P) is true.
		 * 3. Return O.[[Get]](P, O).
		 */
		Get: function Get(O, P) {
			// 7.3.1.1
			if (this.Type(O) !== 'Object') {
				throw new TypeError('Assertion failed: Type(O) is not Object');
			}
			// 7.3.1.2
			if (!this.IsPropertyKey(P)) {
				throw new TypeError('Assertion failed: IsPropertyKey(P) is not true');
			}
			// 7.3.1.3
			return O[P];
		},
	
		Type: function Type(x) {
			if (typeof x === 'symbol') {
				return 'Symbol';
			}
			return ES5.Type(x);
		},
	
		// http://www.ecma-international.org/ecma-262/6.0/#sec-speciesconstructor
		SpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {
			if (this.Type(O) !== 'Object') {
				throw new TypeError('Assertion failed: Type(O) is not Object');
			}
			var C = O.constructor;
			if (typeof C === 'undefined') {
				return defaultConstructor;
			}
			if (this.Type(C) !== 'Object') {
				throw new TypeError('O.constructor is not an Object');
			}
			var S = hasSymbols && Symbol.species ? C[Symbol.species] : undefined;
			if (S == null) {
				return defaultConstructor;
			}
			if (this.IsConstructor(S)) {
				return S;
			}
			throw new TypeError('no constructor found');
		}
	});
	
	delete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible
	
	module.exports = ES6;


/***/ },
/* 803 */
/***/ function(module, exports) {

	module.exports = Number.isNaN || function isNaN(a) {
		return a !== a;
	};


/***/ },
/* 804 */
/***/ function(module, exports) {

	var $isNaN = Number.isNaN || function (a) { return a !== a; };
	
	module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };


/***/ },
/* 805 */
/***/ function(module, exports) {

	var has = Object.prototype.hasOwnProperty;
	module.exports = Object.assign || function assign(target, source) {
		for (var key in source) {
			if (has.call(source, key)) {
				target[key] = source[key];
			}
		}
		return target;
	};


/***/ },
/* 806 */
/***/ function(module, exports) {

	module.exports = function sign(number) {
		return number >= 0 ? 1 : -1;
	};


/***/ },
/* 807 */
/***/ function(module, exports) {

	module.exports = function mod(number, modulo) {
		var remain = number % modulo;
		return Math.floor(remain >= 0 ? remain : remain + modulo);
	};


/***/ },
/* 808 */
/***/ function(module, exports) {

	module.exports = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};


/***/ },
/* 809 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
	
	var isPrimitive = __webpack_require__(810);
	var isCallable = __webpack_require__(811);
	var isDate = __webpack_require__(812);
	var isSymbol = __webpack_require__(813);
	
	var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
		if (typeof O === 'undefined' || O === null) {
			throw new TypeError('Cannot call method on ' + O);
		}
		if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
			throw new TypeError('hint must be "string" or "number"');
		}
		var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
		var method, result, i;
		for (i = 0; i < methodNames.length; ++i) {
			method = O[methodNames[i]];
			if (isCallable(method)) {
				result = method.call(O);
				if (isPrimitive(result)) {
					return result;
				}
			}
		}
		throw new TypeError('No default value');
	};
	
	var GetMethod = function GetMethod(O, P) {
		var func = O[P];
		if (func !== null && typeof func !== 'undefined') {
			if (!isCallable(func)) {
				throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
			}
			return func;
		}
	};
	
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
	module.exports = function ToPrimitive(input, PreferredType) {
		if (isPrimitive(input)) {
			return input;
		}
		var hint = 'default';
		if (arguments.length > 1) {
			if (PreferredType === String) {
				hint = 'string';
			} else if (PreferredType === Number) {
				hint = 'number';
			}
		}
	
		var exoticToPrim;
		if (hasSymbols) {
			if (Symbol.toPrimitive) {
				exoticToPrim = GetMethod(input, Symbol.toPrimitive);
			} else if (isSymbol(input)) {
				exoticToPrim = Symbol.prototype.valueOf;
			}
		}
		if (typeof exoticToPrim !== 'undefined') {
			var result = exoticToPrim.call(input, hint);
			if (isPrimitive(result)) {
				return result;
			}
			throw new TypeError('unable to convert exotic object to primitive');
		}
		if (hint === 'default' && (isDate(input) || isSymbol(input))) {
			hint = 'string';
		}
		return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
	};


/***/ },
/* 810 */
/***/ function(module, exports) {

	module.exports = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};


/***/ },
/* 811 */
/***/ function(module, exports) {

	'use strict';
	
	var fnToStr = Function.prototype.toString;
	
	var constructorRegex = /^\s*class /;
	var isES6ClassFn = function isES6ClassFn(value) {
		try {
			var fnStr = fnToStr.call(value);
			var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
			var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
			var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
			return constructorRegex.test(spaceStripped);
		} catch (e) {
			return false; // not a function
		}
	};
	
	var tryFunctionObject = function tryFunctionObject(value) {
		try {
			if (isES6ClassFn(value)) { return false; }
			fnToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr = Object.prototype.toString;
	var fnClass = '[object Function]';
	var genClass = '[object GeneratorFunction]';
	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	
	module.exports = function isCallable(value) {
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};


/***/ },
/* 812 */
/***/ function(module, exports) {

	'use strict';
	
	var getDay = Date.prototype.getDay;
	var tryDateObject = function tryDateObject(value) {
		try {
			getDay.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	
	var toStr = Object.prototype.toString;
	var dateClass = '[object Date]';
	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	
	module.exports = function isDateObject(value) {
		if (typeof value !== 'object' || value === null) { return false; }
		return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
	};


/***/ },
/* 813 */
/***/ function(module, exports) {

	'use strict';
	
	var toStr = Object.prototype.toString;
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';
	
	if (hasSymbols) {
		var symToStr = Symbol.prototype.toString;
		var symStringRegex = /^Symbol\(.*\)$/;
		var isSymbolObject = function isSymbolObject(value) {
			if (typeof value.valueOf() !== 'symbol') { return false; }
			return symStringRegex.test(symToStr.call(value));
		};
		module.exports = function isSymbol(value) {
			if (typeof value === 'symbol') { return true; }
			if (toStr.call(value) !== '[object Symbol]') { return false; }
			try {
				return isSymbolObject(value);
			} catch (e) {
				return false;
			}
		};
	} else {
		module.exports = function isSymbol(value) {
			// this environment does not support Symbols.
			return false;
		};
	}


/***/ },
/* 814 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $isNaN = __webpack_require__(803);
	var $isFinite = __webpack_require__(804);
	
	var sign = __webpack_require__(806);
	var mod = __webpack_require__(807);
	
	var IsCallable = __webpack_require__(811);
	var toPrimitive = __webpack_require__(815);
	
	// https://es5.github.io/#x9
	var ES5 = {
		ToPrimitive: toPrimitive,
	
		ToBoolean: function ToBoolean(value) {
			return Boolean(value);
		},
		ToNumber: function ToNumber(value) {
			return Number(value);
		},
		ToInteger: function ToInteger(value) {
			var number = this.ToNumber(value);
			if ($isNaN(number)) { return 0; }
			if (number === 0 || !$isFinite(number)) { return number; }
			return sign(number) * Math.floor(Math.abs(number));
		},
		ToInt32: function ToInt32(x) {
			return this.ToNumber(x) >> 0;
		},
		ToUint32: function ToUint32(x) {
			return this.ToNumber(x) >>> 0;
		},
		ToUint16: function ToUint16(value) {
			var number = this.ToNumber(value);
			if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
			var posInt = sign(number) * Math.floor(Math.abs(number));
			return mod(posInt, 0x10000);
		},
		ToString: function ToString(value) {
			return String(value);
		},
		ToObject: function ToObject(value) {
			this.CheckObjectCoercible(value);
			return Object(value);
		},
		CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
			/* jshint eqnull:true */
			if (value == null) {
				throw new TypeError(optMessage || 'Cannot call method on ' + value);
			}
			return value;
		},
		IsCallable: IsCallable,
		SameValue: function SameValue(x, y) {
			if (x === y) { // 0 === -0, but they are not identical.
				if (x === 0) { return 1 / x === 1 / y; }
				return true;
			}
			return $isNaN(x) && $isNaN(y);
		},
	
		// http://www.ecma-international.org/ecma-262/5.1/#sec-8
		Type: function Type(x) {
			if (x === null) {
				return 'Null';
			}
			if (typeof x === 'undefined') {
				return 'Undefined';
			}
			if (typeof x === 'function' || typeof x === 'object') {
				return 'Object';
			}
			if (typeof x === 'number') {
				return 'Number';
			}
			if (typeof x === 'boolean') {
				return 'Boolean';
			}
			if (typeof x === 'string') {
				return 'String';
			}
		}
	};
	
	module.exports = ES5;


/***/ },
/* 815 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toStr = Object.prototype.toString;
	
	var isPrimitive = __webpack_require__(810);
	
	var isCallable = __webpack_require__(811);
	
	// https://es5.github.io/#x8.12
	var ES5internalSlots = {
		'[[DefaultValue]]': function (O, hint) {
			var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);
	
			if (actualHint === String || actualHint === Number) {
				var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
				var value, i;
				for (i = 0; i < methods.length; ++i) {
					if (isCallable(O[methods[i]])) {
						value = O[methods[i]]();
						if (isPrimitive(value)) {
							return value;
						}
					}
				}
				throw new TypeError('No default value');
			}
			throw new TypeError('invalid [[DefaultValue]] hint supplied');
		}
	};
	
	// https://es5.github.io/#x9
	module.exports = function ToPrimitive(input, PreferredType) {
		if (isPrimitive(input)) {
			return input;
		}
		return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
	};


/***/ },
/* 816 */
/***/ function(module, exports) {

	'use strict';
	
	var regexExec = RegExp.prototype.exec;
	var tryRegexExec = function tryRegexExec(value) {
		try {
			regexExec.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr = Object.prototype.toString;
	var regexClass = '[object RegExp]';
	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
	
	module.exports = function isRegex(value) {
		if (typeof value !== 'object') { return false; }
		return hasToStringTag ? tryRegexExec(value) : toStr.call(value) === regexClass;
	};


/***/ },
/* 817 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var requirePromise = __webpack_require__(800);
	
	var implementation = __webpack_require__(799);
	
	module.exports = function getPolyfill() {
		requirePromise();
		return typeof Promise.prototype['finally'] === 'function' ? Promise.prototype['finally'] : implementation;
	};


/***/ },
/* 818 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var requirePromise = __webpack_require__(800);
	
	var getPolyfill = __webpack_require__(817);
	var define = __webpack_require__(795);
	
	module.exports = function shimPromiseFinally() {
		requirePromise();
	
		var polyfill = getPolyfill();
		define(Promise.prototype, { 'finally': polyfill }, {
			'finally': function testFinally() {
				return Promise.prototype['finally'] !== polyfill;
			}
		});
		return polyfill;
	};


/***/ },
/* 819 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {(function () {
	  "use strict";
	
	  function btoa(str) {
	    var buffer
	      ;
	
	    if (str instanceof Buffer) {
	      buffer = str;
	    } else {
	      buffer = new Buffer(str.toString(), 'binary');
	    }
	
	    return buffer.toString('base64');
	  }
	
	  module.exports = btoa;
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 820 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(821)
	var ieee754 = __webpack_require__(822)
	var isArray = __webpack_require__(823)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer, (function() { return this; }())))

/***/ },
/* 821 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 822 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 823 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 824 */
/***/ function(module, exports) {

	exports = module.exports = stringify
	exports.getSerialize = serializer
	
	function stringify(obj, replacer, spaces, cycleReplacer) {
	  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)
	}
	
	function serializer(replacer, cycleReplacer) {
	  var stack = [], keys = []
	
	  if (cycleReplacer == null) cycleReplacer = function(key, value) {
	    if (stack[0] === value) return "[Circular ~]"
	    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]"
	  }
	
	  return function(key, value) {
	    if (stack.length > 0) {
	      var thisPos = stack.indexOf(this)
	      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)
	      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)
	      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)
	    }
	    else stack.push(value)
	
	    return replacer == null ? value : replacer.call(this, key, value)
	  }
	}


/***/ },
/* 825 */,
/* 826 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'
	exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
	  sign: 'rsa',
	  hash: 'sha224',
	  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
	}
	exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
	  sign: 'rsa',
	  hash: 'sha256',
	  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
	}
	exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
	  sign: 'rsa',
	  hash: 'sha384',
	  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
	}
	exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
	  sign: 'rsa',
	  hash: 'sha512',
	  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
	}
	exports['RSA-SHA1'] = {
	  sign: 'rsa',
	  hash: 'sha1',
	  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
	}
	exports['ecdsa-with-SHA1'] = {
	  sign: 'ecdsa',
	  hash: 'sha1',
	  id: new Buffer('', 'hex')
	}
	
	exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
	  sign: 'dsa',
	  hash: 'sha1',
	  id: new Buffer('', 'hex')
	}
	exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
	  sign: 'dsa',
	  hash: 'sha224',
	  id: new Buffer('', 'hex')
	}
	exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
	  sign: 'dsa',
	  hash: 'sha256',
	  id: new Buffer('', 'hex')
	}
	exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
	  sign: 'dsa',
	  hash: 'sha384',
	  id: new Buffer('', 'hex')
	}
	exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
	  sign: 'dsa',
	  hash: 'sha512',
	  id: new Buffer('', 'hex')
	}
	exports['DSA-RIPEMD160'] = {
	  sign: 'dsa',
	  hash: 'rmd160',
	  id: new Buffer('', 'hex')
	}
	exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
	  sign: 'rsa',
	  hash: 'rmd160',
	  id: new Buffer('3021300906052b2403020105000414', 'hex')
	}
	exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
	  sign: 'rsa',
	  hash: 'md5',
	  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 827 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(786).EventEmitter;
	var inherits = __webpack_require__(828);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(829);
	Stream.Writable = __webpack_require__(839);
	Stream.Duplex = __webpack_require__(840);
	Stream.Transform = __webpack_require__(841);
	Stream.PassThrough = __webpack_require__(842);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 828 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 829 */,
/* 830 */,
/* 831 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 832 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 833 */,
/* 834 */,
/* 835 */,
/* 836 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(820).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 837 */,
/* 838 */,
/* 839 */,
/* 840 */,
/* 841 */,
/* 842 */,
/* 843 */,
/* 844 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	 *  Copyright (c) 2015-present, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var GLOBAL = typeof window === 'undefined' ? global : window;
	
	var setter = function setter(_setter, _clearer, array) {
	  return function (callback, delta) {
	    var id = _setter(function () {
	      _clearer.call(this, id);
	      callback.apply(this, arguments);
	    }.bind(this), delta);
	
	    if (!this[array]) {
	      this[array] = [id];
	    } else {
	      this[array].push(id);
	    }
	    return id;
	  };
	};
	
	var clearer = function clearer(_clearer, array) {
	  return function (id) {
	    if (this[array]) {
	      var index = this[array].indexOf(id);
	      if (index !== -1) {
	        this[array].splice(index, 1);
	      }
	    }
	    _clearer(id);
	  };
	};
	
	var _timeouts = 'TimerMixin_timeouts';
	var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
	var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);
	
	var _intervals = 'TimerMixin_intervals';
	var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
	var _setInterval = setter(GLOBAL.setInterval, function () {/* noop */}, _intervals);
	
	var _immediates = 'TimerMixin_immediates';
	var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
	var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);
	
	var _rafs = 'TimerMixin_rafs';
	var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
	var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);
	
	var TimerMixin = {
	  componentWillUnmount: function componentWillUnmount() {
	    this[_timeouts] && this[_timeouts].forEach(function (id) {
	      GLOBAL.clearTimeout(id);
	    });
	    this[_timeouts] = null;
	    this[_intervals] && this[_intervals].forEach(function (id) {
	      GLOBAL.clearInterval(id);
	    });
	    this[_intervals] = null;
	    this[_immediates] && this[_immediates].forEach(function (id) {
	      GLOBAL.clearImmediate(id);
	    });
	    this[_immediates] = null;
	    this[_rafs] && this[_rafs].forEach(function (id) {
	      GLOBAL.cancelAnimationFrame(id);
	    });
	    this[_rafs] = null;
	  },
	
	  setTimeout: _setTimeout,
	  clearTimeout: _clearTimeout,
	
	  setInterval: _setInterval,
	  clearInterval: _clearInterval,
	
	  setImmediate: _setImmediate,
	  clearImmediate: _clearImmediate,
	
	  requestAnimationFrame: _requestAnimationFrame,
	  cancelAnimationFrame: _cancelAnimationFrame
	};
	
	module.exports = TimerMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 845 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var mixin = __webpack_require__(492);
	var assign = __webpack_require__(846);
	
	var mixinProto = mixin({
	  // lifecycle stuff is as you'd expect
	  componentDidMount: mixin.MANY,
	  componentWillMount: mixin.MANY,
	  componentWillReceiveProps: mixin.MANY,
	  shouldComponentUpdate: mixin.ONCE,
	  componentWillUpdate: mixin.MANY,
	  componentDidUpdate: mixin.MANY,
	  componentWillUnmount: mixin.MANY,
	  getChildContext: mixin.MANY_MERGED
	});
	
	function setDefaultProps(reactMixin) {
	  var getDefaultProps = reactMixin.getDefaultProps;
	
	  if (getDefaultProps) {
	    reactMixin.defaultProps = getDefaultProps();
	
	    delete reactMixin.getDefaultProps;
	  }
	}
	
	function setInitialState(reactMixin) {
	  var getInitialState = reactMixin.getInitialState;
	  var componentWillMount = reactMixin.componentWillMount;
	
	  function applyInitialState(instance) {
	    var state = instance.state || {};
	    assign(state, getInitialState.call(instance));
	    instance.state = state;
	  }
	
	  if (getInitialState) {
	    if (!componentWillMount) {
	      reactMixin.componentWillMount = function () {
	        applyInitialState(this);
	      };
	    } else {
	      reactMixin.componentWillMount = function () {
	        applyInitialState(this);
	        componentWillMount.call(this);
	      };
	    }
	
	    delete reactMixin.getInitialState;
	  }
	}
	
	function mixinClass(reactClass, reactMixin) {
	  setDefaultProps(reactMixin);
	  setInitialState(reactMixin);
	
	  var prototypeMethods = {};
	  var staticProps = {};
	
	  Object.keys(reactMixin).forEach(function (key) {
	    if (typeof reactMixin[key] === 'function') {
	      prototypeMethods[key] = reactMixin[key];
	    } else {
	      staticProps[key] = reactMixin[key];
	    }
	  });
	
	  mixinProto(reactClass.prototype, prototypeMethods);
	
	  mixin({
	    childContextTypes: mixin.MANY_MERGED_LOOSE,
	    contextTypes: mixin.MANY_MERGED_LOOSE,
	    propTypes: mixin.MANY_MERGED_LOOSE,
	    defaultProps: mixin.MANY_MERGED_LOOSE
	  })(reactClass, staticProps);
	}
	
	module.exports = function () {
	  var reactMixin = mixinProto;
	
	  reactMixin.onClass = function (reactClass, mixin) {
	    mixinClass(reactClass, mixin);
	  };
	
	  reactMixin.decorate = function (mixin) {
	    return function (reactClass) {
	      return reactMixin.onClass(reactClass, mixin);
	    };
	  };
	
	  return reactMixin;
	}();

/***/ },
/* 846 */
/***/ function(module, exports) {

	'use strict';
	
	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);
	
		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));
	
			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}
	
		return to;
	};


/***/ },
/* 847 */,
/* 848 */,
/* 849 */,
/* 850 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(851);
	exports.encode = exports.stringify = __webpack_require__(852);


/***/ },
/* 851 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 852 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 853 */,
/* 854 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * @providesModule react-native-device-info
	 */
	
	var RNDeviceInfo = __webpack_require__(300).NativeModules.RNDeviceInfo || {};
	
	module.exports = {
	  getUniqueID: function getUniqueID() {
	    return RNDeviceInfo.uniqueId;
	  },
	  getInstanceID: function getInstanceID() {
	    return RNDeviceInfo.instanceId;
	  },
	  getDeviceId: function getDeviceId() {
	    return RNDeviceInfo.deviceId;
	  },
	  getManufacturer: function getManufacturer() {
	    return RNDeviceInfo.systemManufacturer;
	  },
	  getModel: function getModel() {
	    return RNDeviceInfo.model;
	  },
	  getBrand: function getBrand() {
	    return RNDeviceInfo.brand;
	  },
	  getSystemName: function getSystemName() {
	    return RNDeviceInfo.systemName;
	  },
	  getSystemVersion: function getSystemVersion() {
	    return RNDeviceInfo.systemVersion;
	  },
	  getBundleId: function getBundleId() {
	    return RNDeviceInfo.bundleId;
	  },
	  getBuildNumber: function getBuildNumber() {
	    return RNDeviceInfo.buildNumber;
	  },
	  getVersion: function getVersion() {
	    return RNDeviceInfo.appVersion;
	  },
	  getReadableVersion: function getReadableVersion() {
	    return RNDeviceInfo.appVersion + "." + RNDeviceInfo.buildNumber;
	  },
	  getDeviceName: function getDeviceName() {
	    return RNDeviceInfo.deviceName;
	  },
	  getUserAgent: function getUserAgent() {
	    return RNDeviceInfo.userAgent;
	  },
	  getDeviceLocale: function getDeviceLocale() {
	    return RNDeviceInfo.deviceLocale;
	  },
	  getDeviceCountry: function getDeviceCountry() {
	    return RNDeviceInfo.deviceCountry;
	  },
	  getTimezone: function getTimezone() {
	    return RNDeviceInfo.timezone;
	  },
	  isEmulator: function isEmulator() {
	    return RNDeviceInfo.isEmulator;
	  },
	  isTablet: function isTablet() {
	    return RNDeviceInfo.isTablet;
	  }
	};

/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @providesModule Notifications
	 */
	
	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var RNNotificationsComponent = __webpack_require__(856);
	
	var AppState = RNNotificationsComponent.state;
	var RNNotifications = RNNotificationsComponent.component;
	
	var Platform = __webpack_require__(300).Platform;
	
	var Notifications = {
		handler: RNNotifications,
		onRegister: false,
		onError: false,
		onNotification: false,
		onRemoteFetch: false,
		isLoaded: false,
	
		isPermissionsRequestPending: false,
	
		permissions: {
			alert: true,
			badge: true,
			sound: true
		}
	};
	
	Notifications.callNative = function (name, params) {
		if (typeof this.handler[name] === 'function') {
			var _handler;
	
			if (typeof params !== 'array' && (typeof params === 'undefined' ? 'undefined' : _typeof(params)) !== 'object') {
				params = [];
			}
	
			return (_handler = this.handler)[name].apply(_handler, _toConsumableArray(params));
		} else {
			return null;
		}
	};
	
	/**
	 * Configure local and remote notifications
	 * @param {Object}		options
	 * @param {function}	options.onRegister - Fired when the user registers for remote notifications.
	 * @param {function}	options.onNotification - Fired when a remote notification is received.
	 * @param {function} 	options.onError - None
	 * @param {Object}		options.permissions - Permissions list
	 * @param {Boolean}		options.requestPermissions - Check permissions when register
	 */
	Notifications.configure = function (options) {
		if (typeof options.onRegister !== 'undefined') {
			this.onRegister = options.onRegister;
		}
	
		if (typeof options.onError !== 'undefined') {
			this.onError = options.onError;
		}
	
		if (typeof options.onNotification !== 'undefined') {
			this.onNotification = options.onNotification;
		}
	
		if (typeof options.permissions !== 'undefined') {
			this.permissions = options.permissions;
		}
	
		if (typeof options.senderID !== 'undefined') {
			this.senderID = options.senderID;
		}
	
		if (typeof options.onRemoteFetch !== 'undefined') {
			this.onRemoteFetch = options.onRemoteFetch;
		}
	
		if (this.isLoaded === false) {
			this._onRegister = this._onRegister.bind(this);
			this._onNotification = this._onNotification.bind(this);
			this._onRemoteFetch = this._onRemoteFetch.bind(this);
			this.callNative('addEventListener', ['register', this._onRegister]);
			this.callNative('addEventListener', ['notification', this._onNotification]);
			this.callNative('addEventListener', ['localNotification', this._onNotification]);
			Platform.OS === 'android' ? this.callNative('addEventListener', ['remoteFetch', this._onRemoteFetch]) : null;
	
			if (typeof options.popInitialNotification === 'undefined' || options.popInitialNotification === true) {
				this.popInitialNotification(function (firstNotification) {
					if (firstNotification !== null) {
						this._onNotification(firstNotification, true);
					}
				}.bind(this));
			}
	
			this.isLoaded = true;
		}
	
		if (options.requestPermissions !== false) {
			this._requestPermissions();
		}
	};
	
	/* Unregister */
	Notifications.unregister = function () {
		this.callNative('removeEventListener', ['register', this._onRegister]);
		this.callNative('removeEventListener', ['notification', this._onNotification]);
		this.callNative('removeEventListener', ['localNotification', this._onNotification]);
		Platform.OS === 'android' ? this.callNative('removeEventListener', ['remoteFetch', this._onRemoteFetch]) : null;
	};
	
	/**
	 * Local Notifications
	 * @param {Object}		details
	 * @param {String}		details.message - The message displayed in the notification alert.
	 * @param {String}		details.title  -  ANDROID ONLY: The title displayed in the notification alert.
	 * @param {String}		details.ticker -  ANDROID ONLY: The ticker displayed in the status bar.
	 * @param {Object}		details.userInfo -  iOS ONLY: The userInfo used in the notification alert.
	 */
	Notifications.localNotification = function (details) {
		if (Platform.OS === 'ios') {
			var soundName = 'default'; // play sound (and vibrate) as default behaviour
	
			if (details.hasOwnProperty("playSound")) {
				if (details.playSound) {
					if (details.soundName) {
						soundName = details.soundName;
					}
				} else {
					soundName = ''; // empty string results in no sound (and no vibration)
				}
			}
	
			// for valid fields see: https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html
			// alertTitle only valid for apple watch: https://developer.apple.com/library/ios/documentation/iPhone/Reference/UILocalNotification_Class/#//apple_ref/occ/instp/UILocalNotification/alertTitle
	
			this.handler.presentLocalNotification({
				alertTitle: details.title,
				alertBody: details.message,
				alertAction: details.alertAction,
				category: details.category,
				soundName: soundName,
				applicationIconBadgeNumber: details.number,
				userInfo: details.userInfo
			});
		} else {
			this.handler.presentLocalNotification(details);
		}
	};
	
	/**
	 * Local Notifications Schedule
	 * @param {Object}		details (same as localNotification)
	 * @param {Date}		details.date - The date and time when the system should deliver the notification
	 */
	Notifications.localNotificationSchedule = function (details) {
		if (Platform.OS === 'ios') {
			this.handler.scheduleLocalNotification({
				fireDate: details.date,
				alertBody: details.message,
				userInfo: details.userInfo
			});
		} else {
			details.fireDate = details.date.getTime();
			delete details.date;
			this.handler.scheduleLocalNotification(details);
		}
	};
	
	/* Internal Functions */
	Notifications._onRegister = function (token) {
		if (this.onRegister !== false) {
			this.onRegister({
				token: token,
				os: Platform.OS
			});
		}
	};
	
	Notifications._onRemoteFetch = function (notificationData) {
		if (this.onRemoteFetch !== false) {
			this.onRemoteFetch(notificationData);
		}
	};
	
	Notifications._onNotification = function (data) {
		var isFromBackground = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
		if (isFromBackground === null) {
			isFromBackground = data.foreground === false || AppState.currentState === 'background';
		}
	
		if (this.onNotification !== false) {
			if (Platform.OS === 'ios') {
				this.onNotification({
					foreground: !isFromBackground,
					userInteraction: isFromBackground,
					message: data.getMessage(),
					data: data.getData(),
					badge: data.getBadgeCount(),
					alert: data.getAlert(),
					sound: data.getSound()
				});
			} else {
				var notificationData = _extends({
					foreground: !isFromBackground
				}, data);
	
				if (typeof notificationData.data === 'string') {
					try {
						notificationData.data = JSON.parse(notificationData.data);
					} catch (e) {
						/* void */
					}
				}
	
				this.onNotification(notificationData);
			}
		}
	};
	
	/* onResultPermissionResult */
	Notifications._onPermissionResult = function () {
		this.isPermissionsRequestPending = false;
	};
	
	// Prevent requestPermissions called twice if ios result is pending
	Notifications._requestPermissions = function () {
		if (Platform.OS === 'ios') {
			if (this.isPermissionsRequestPending === false) {
				this.isPermissionsRequestPending = true;
				return this.callNative('requestPermissions', [this.permissions]).then(this._onPermissionResult.bind(this)).catch(this._onPermissionResult.bind(this));
			}
		} else if (typeof this.senderID !== 'undefined') {
			return this.callNative('requestPermissions', [this.senderID]);
		}
	};
	
	// Stock requestPermissions function
	Notifications.requestPermissions = function () {
		if (Platform.OS === 'ios') {
			return this.callNative('requestPermissions', [this.permissions]);
		} else if (typeof this.senderID !== 'undefined') {
			return this.callNative('requestPermissions', [this.senderID]);
		}
	};
	
	/* Fallback functions */
	Notifications.presentLocalNotification = function () {
		return this.callNative('presentLocalNotification', arguments);
	};
	
	Notifications.scheduleLocalNotification = function () {
		return this.callNative('scheduleLocalNotification', arguments);
	};
	
	Notifications.cancelLocalNotifications = function () {
		return this.callNative('cancelLocalNotifications', arguments);
	};
	
	Notifications.cancelAllLocalNotifications = function () {
		return this.callNative('cancelAllLocalNotifications', arguments);
	};
	
	Notifications.setApplicationIconBadgeNumber = function () {
		return this.callNative('setApplicationIconBadgeNumber', arguments);
	};
	
	Notifications.getApplicationIconBadgeNumber = function () {
		return this.callNative('getApplicationIconBadgeNumber', arguments);
	};
	
	Notifications.popInitialNotification = function (handler) {
		this.callNative('getInitialNotification').then(function (result) {
			handler(result);
		});
	};
	
	Notifications.abandonPermissions = function () {
		return this.callNative('abandonPermissions', arguments);
	};
	
	Notifications.checkPermissions = function () {
		return this.callNative('checkPermissions', arguments);
	};
	
	Notifications.registerNotificationActions = function () {
		return this.callNative('registerNotificationActions', arguments);
	};
	
	Notifications.clearAllNotifications = function () {
		// Only available for Android
		return this.callNative('clearAllNotifications', arguments);
	};
	
	module.exports = Notifications;

/***/ },
/* 856 */
/***/ function(module, exports) {

	"use strict";
	
	// Define suffix-less index module for unit tests
	module.exports = {
	  state: {},
	  component: {}
	};

/***/ },
/* 857 */,
/* 858 */,
/* 859 */
/***/ function(module, exports) {

	module.exports = extend
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend() {
	    var target = {}
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}


/***/ },
/* 860 */,
/* 861 */,
/* 862 */
/***/ function(module, exports, __webpack_require__) {

	// getUserMedia helper by @HenrikJoreteg used for navigator.getUserMedia shim
	var adapter = __webpack_require__(863);
	
	module.exports = function (constraints, cb) {
	    var error;
	    var haveOpts = arguments.length === 2;
	    var defaultOpts = {video: true, audio: true};
	
	    var denied = 'PermissionDeniedError';
	    var altDenied = 'PERMISSION_DENIED';
	    var notSatisfied = 'ConstraintNotSatisfiedError';
	
	    // make constraints optional
	    if (!haveOpts) {
	        cb = constraints;
	        constraints = defaultOpts;
	    }
	
	    // treat lack of browser support like an error
	    if (typeof navigator === 'undefined' || !navigator.getUserMedia) {
	        // throw proper error per spec
	        error = new Error('MediaStreamError');
	        error.name = 'NotSupportedError';
	
	        // keep all callbacks async
	        return setTimeout(function () {
	            cb(error);
	        }, 0);
	    }
	
	    // normalize error handling when no media types are requested
	    if (!constraints.audio && !constraints.video) {
	        error = new Error('MediaStreamError');
	        error.name = 'NoMediaRequestedError';
	
	        // keep all callbacks async
	        return setTimeout(function () {
	            cb(error);
	        }, 0);
	    }
	
	    navigator.mediaDevices.getUserMedia(constraints)
	    .then(function (stream) {
	        cb(null, stream);
	    }).catch(function (err) {
	        var error;
	        // coerce into an error object since FF gives us a string
	        // there are only two valid names according to the spec
	        // we coerce all non-denied to "constraint not satisfied".
	        if (typeof err === 'string') {
	            error = new Error('MediaStreamError');
	            if (err === denied || err === altDenied) {
	                error.name = denied;
	            } else {
	                error.name = notSatisfied;
	            }
	        } else {
	            // if we get an error object make sure '.name' property is set
	            // according to spec: http://dev.w3.org/2011/webrtc/editor/getusermedia.html#navigatorusermediaerror-and-navigatorusermediaerrorcallback
	            error = err;
	            if (!error.name) {
	                // this is likely chrome which
	                // sets a property called "ERROR_DENIED" on the error object
	                // if so we make sure to set a name
	                if (error[denied]) {
	                    err.name = denied;
	                } else {
	                    err.name = notSatisfied;
	                }
	            }
	        }
	
	        cb(error);
	    });
	};


/***/ },
/* 863 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	
	'use strict';
	
	// Shimming starts here.
	(function() {
	  // Utils.
	  var logging = __webpack_require__(864).log;
	  var browserDetails = __webpack_require__(864).browserDetails;
	  // Export to the adapter global object visible in the browser.
	  module.exports.browserDetails = browserDetails;
	  module.exports.extractVersion = __webpack_require__(864).extractVersion;
	  module.exports.disableLog = __webpack_require__(864).disableLog;
	
	  // Uncomment the line below if you want logging to occur, including logging
	  // for the switch statement below. Can also be turned on in the browser via
	  // adapter.disableLog(false), but then logging from the switch statement below
	  // will not appear.
	  // require('./utils').disableLog(false);
	
	  // Browser shims.
	  var chromeShim = __webpack_require__(865) || null;
	  var edgeShim = __webpack_require__(867) || null;
	  var firefoxShim = __webpack_require__(870) || null;
	  var safariShim = __webpack_require__(872) || null;
	
	  // Shim browser if found.
	  switch (browserDetails.browser) {
	    case 'opera': // fallthrough as it uses chrome shims
	    case 'chrome':
	      if (!chromeShim || !chromeShim.shimPeerConnection) {
	        logging('Chrome shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming chrome.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = chromeShim;
	
	      chromeShim.shimGetUserMedia();
	      chromeShim.shimMediaStream();
	      chromeShim.shimSourceObject();
	      chromeShim.shimPeerConnection();
	      chromeShim.shimOnTrack();
	      break;
	    case 'firefox':
	      if (!firefoxShim || !firefoxShim.shimPeerConnection) {
	        logging('Firefox shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming firefox.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = firefoxShim;
	
	      firefoxShim.shimGetUserMedia();
	      firefoxShim.shimSourceObject();
	      firefoxShim.shimPeerConnection();
	      firefoxShim.shimOnTrack();
	      break;
	    case 'edge':
	      if (!edgeShim || !edgeShim.shimPeerConnection) {
	        logging('MS edge shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming edge.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = edgeShim;
	
	      edgeShim.shimGetUserMedia();
	      edgeShim.shimPeerConnection();
	      break;
	    case 'safari':
	      if (!safariShim) {
	        logging('Safari shim is not included in this adapter release.');
	        return;
	      }
	      logging('adapter.js shimming safari.');
	      // Export to the adapter global object visible in the browser.
	      module.exports.browserShim = safariShim;
	
	      safariShim.shimGetUserMedia();
	      break;
	    default:
	      logging('Unsupported browser!');
	  }
	})();


/***/ },
/* 864 */
/***/ function(module, exports) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	
	var logDisabled_ = true;
	
	// Utility methods.
	var utils = {
	  disableLog: function(bool) {
	    if (typeof bool !== 'boolean') {
	      return new Error('Argument type: ' + typeof bool +
	          '. Please use a boolean.');
	    }
	    logDisabled_ = bool;
	    return (bool) ? 'adapter.js logging disabled' :
	        'adapter.js logging enabled';
	  },
	
	  log: function() {
	    if (typeof window === 'object') {
	      if (logDisabled_) {
	        return;
	      }
	      if (typeof console !== 'undefined' && typeof console.log === 'function') {
	        console.log.apply(console, arguments);
	      }
	    }
	  },
	
	  /**
	   * Extract browser version out of the provided user agent string.
	   *
	   * @param {!string} uastring userAgent string.
	   * @param {!string} expr Regular expression used as match criteria.
	   * @param {!number} pos position in the version string to be returned.
	   * @return {!number} browser version.
	   */
	  extractVersion: function(uastring, expr, pos) {
	    var match = uastring.match(expr);
	    return match && match.length >= pos && parseInt(match[pos], 10);
	  },
	
	  /**
	   * Browser detector.
	   *
	   * @return {object} result containing browser and version
	   *     properties.
	   */
	  detectBrowser: function() {
	    // Returned result object.
	    var result = {};
	    result.browser = null;
	    result.version = null;
	
	    // Fail early if it's not a browser
	    if (typeof window === 'undefined' || !window.navigator) {
	      result.browser = 'Not a browser.';
	      return result;
	    }
	
	    // Firefox.
	    if (navigator.mozGetUserMedia) {
	      result.browser = 'firefox';
	      result.version = this.extractVersion(navigator.userAgent,
	          /Firefox\/([0-9]+)\./, 1);
	
	    // all webkit-based browsers
	    } else if (navigator.webkitGetUserMedia) {
	      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now
	      if (window.webkitRTCPeerConnection) {
	        result.browser = 'chrome';
	        result.version = this.extractVersion(navigator.userAgent,
	          /Chrom(e|ium)\/([0-9]+)\./, 2);
	
	      // Safari or unknown webkit-based
	      // for the time being Safari has support for MediaStreams but not webRTC
	      } else {
	        // Safari UA substrings of interest for reference:
	        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)
	        // - safari UI version:        Version/9.0.3 (unique to Safari)
	        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)
	        //
	        // if the webkit version and safari UI webkit versions are equals,
	        // ... this is a stable version.
	        //
	        // only the internal webkit version is important today to know if
	        // media streams are supported
	        //
	        if (navigator.userAgent.match(/Version\/(\d+).(\d+)/)) {
	          result.browser = 'safari';
	          result.version = this.extractVersion(navigator.userAgent,
	            /AppleWebKit\/([0-9]+)\./, 1);
	
	        // unknown webkit-based browser
	        } else {
	          result.browser = 'Unsupported webkit-based browser ' +
	              'with GUM support but no WebRTC support.';
	          return result;
	        }
	      }
	
	    // Edge.
	    } else if (navigator.mediaDevices &&
	        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
	      result.browser = 'edge';
	      result.version = this.extractVersion(navigator.userAgent,
	          /Edge\/(\d+).(\d+)$/, 2);
	
	    // Default fallthrough: not supported.
	    } else {
	      result.browser = 'Not a supported browser.';
	      return result;
	    }
	
	    return result;
	  }
	};
	
	// Export.
	module.exports = {
	  log: utils.log,
	  disableLog: utils.disableLog,
	  browserDetails: utils.detectBrowser(),
	  extractVersion: utils.extractVersion
	};


/***/ },
/* 865 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	var logging = __webpack_require__(864).log;
	var browserDetails = __webpack_require__(864).browserDetails;
	
	var chromeShim = {
	  shimMediaStream: function() {
	    window.MediaStream = window.MediaStream || window.webkitMediaStream;
	  },
	
	  shimOnTrack: function() {
	    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
	        window.RTCPeerConnection.prototype)) {
	      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
	        get: function() {
	          return this._ontrack;
	        },
	        set: function(f) {
	          var self = this;
	          if (this._ontrack) {
	            this.removeEventListener('track', this._ontrack);
	            this.removeEventListener('addstream', this._ontrackpoly);
	          }
	          this.addEventListener('track', this._ontrack = f);
	          this.addEventListener('addstream', this._ontrackpoly = function(e) {
	            // onaddstream does not fire when a track is added to an existing
	            // stream. But stream.onaddtrack is implemented so we use that.
	            e.stream.addEventListener('addtrack', function(te) {
	              var event = new Event('track');
	              event.track = te.track;
	              event.receiver = {track: te.track};
	              event.streams = [e.stream];
	              self.dispatchEvent(event);
	            });
	            e.stream.getTracks().forEach(function(track) {
	              var event = new Event('track');
	              event.track = track;
	              event.receiver = {track: track};
	              event.streams = [e.stream];
	              this.dispatchEvent(event);
	            }.bind(this));
	          }.bind(this));
	        }
	      });
	    }
	  },
	
	  shimSourceObject: function() {
	    if (typeof window === 'object') {
	      if (window.HTMLMediaElement &&
	        !('srcObject' in window.HTMLMediaElement.prototype)) {
	        // Shim the srcObject property, once, when HTMLMediaElement is found.
	        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
	          get: function() {
	            return this._srcObject;
	          },
	          set: function(stream) {
	            var self = this;
	            // Use _srcObject as a private property for this shim
	            this._srcObject = stream;
	            if (this.src) {
	              URL.revokeObjectURL(this.src);
	            }
	
	            if (!stream) {
	              this.src = '';
	              return;
	            }
	            this.src = URL.createObjectURL(stream);
	            // We need to recreate the blob url when a track is added or
	            // removed. Doing it manually since we want to avoid a recursion.
	            stream.addEventListener('addtrack', function() {
	              if (self.src) {
	                URL.revokeObjectURL(self.src);
	              }
	              self.src = URL.createObjectURL(stream);
	            });
	            stream.addEventListener('removetrack', function() {
	              if (self.src) {
	                URL.revokeObjectURL(self.src);
	              }
	              self.src = URL.createObjectURL(stream);
	            });
	          }
	        });
	      }
	    }
	  },
	
	  shimPeerConnection: function() {
	    // The RTCPeerConnection object.
	    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
	      // Translate iceTransportPolicy to iceTransports,
	      // see https://code.google.com/p/webrtc/issues/detail?id=4869
	      logging('PeerConnection');
	      if (pcConfig && pcConfig.iceTransportPolicy) {
	        pcConfig.iceTransports = pcConfig.iceTransportPolicy;
	      }
	
	      var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints);
	      var origGetStats = pc.getStats.bind(pc);
	      pc.getStats = function(selector, successCallback, errorCallback) {
	        var self = this;
	        var args = arguments;
	
	        // If selector is a function then we are in the old style stats so just
	        // pass back the original getStats format to avoid breaking old users.
	        if (arguments.length > 0 && typeof selector === 'function') {
	          return origGetStats(selector, successCallback);
	        }
	
	        var fixChromeStats_ = function(response) {
	          var standardReport = {};
	          var reports = response.result();
	          reports.forEach(function(report) {
	            var standardStats = {
	              id: report.id,
	              timestamp: report.timestamp,
	              type: report.type
	            };
	            report.names().forEach(function(name) {
	              standardStats[name] = report.stat(name);
	            });
	            standardReport[standardStats.id] = standardStats;
	          });
	
	          return standardReport;
	        };
	
	        // shim getStats with maplike support
	        var makeMapStats = function(stats, legacyStats) {
	          var map = new Map(Object.keys(stats).map(function(key) {
	            return[key, stats[key]];
	          }));
	          legacyStats = legacyStats || stats;
	          Object.keys(legacyStats).forEach(function(key) {
	            map[key] = legacyStats[key];
	          });
	          return map;
	        };
	
	        if (arguments.length >= 2) {
	          var successCallbackWrapper_ = function(response) {
	            args[1](makeMapStats(fixChromeStats_(response)));
	          };
	
	          return origGetStats.apply(this, [successCallbackWrapper_,
	              arguments[0]]);
	        }
	
	        // promise-support
	        return new Promise(function(resolve, reject) {
	          if (args.length === 1 && typeof selector === 'object') {
	            origGetStats.apply(self, [
	              function(response) {
	                resolve(makeMapStats(fixChromeStats_(response)));
	              }, reject]);
	          } else {
	            // Preserve legacy chrome stats only on legacy access of stats obj
	            origGetStats.apply(self, [
	              function(response) {
	                resolve(makeMapStats(fixChromeStats_(response),
	                    response.result()));
	              }, reject]);
	          }
	        }).then(successCallback, errorCallback);
	      };
	
	      return pc;
	    };
	    window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;
	
	    // wrap static methods. Currently just generateCertificate.
	    if (webkitRTCPeerConnection.generateCertificate) {
	      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
	        get: function() {
	          return webkitRTCPeerConnection.generateCertificate;
	        }
	      });
	    }
	
	    ['createOffer', 'createAnswer'].forEach(function(method) {
	      var nativeMethod = webkitRTCPeerConnection.prototype[method];
	      webkitRTCPeerConnection.prototype[method] = function() {
	        var self = this;
	        if (arguments.length < 1 || (arguments.length === 1 &&
	            typeof arguments[0] === 'object')) {
	          var opts = arguments.length === 1 ? arguments[0] : undefined;
	          return new Promise(function(resolve, reject) {
	            nativeMethod.apply(self, [resolve, reject, opts]);
	          });
	        }
	        return nativeMethod.apply(this, arguments);
	      };
	    });
	
	    // add promise support -- natively available in Chrome 51
	    if (browserDetails.version < 51) {
	      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
	          .forEach(function(method) {
	            var nativeMethod = webkitRTCPeerConnection.prototype[method];
	            webkitRTCPeerConnection.prototype[method] = function() {
	              var args = arguments;
	              var self = this;
	              var promise = new Promise(function(resolve, reject) {
	                nativeMethod.apply(self, [args[0], resolve, reject]);
	              });
	              if (args.length < 2) {
	                return promise;
	              }
	              return promise.then(function() {
	                args[1].apply(null, []);
	              },
	              function(err) {
	                if (args.length >= 3) {
	                  args[2].apply(null, [err]);
	                }
	              });
	            };
	          });
	    }
	
	    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
	    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
	        .forEach(function(method) {
	          var nativeMethod = webkitRTCPeerConnection.prototype[method];
	          webkitRTCPeerConnection.prototype[method] = function() {
	            arguments[0] = new ((method === 'addIceCandidate') ?
	                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
	            return nativeMethod.apply(this, arguments);
	          };
	        });
	
	    // support for addIceCandidate(null or undefined)
	    var nativeAddIceCandidate =
	        RTCPeerConnection.prototype.addIceCandidate;
	    RTCPeerConnection.prototype.addIceCandidate = function() {
	      if (!arguments[0]) {
	        if (arguments[1]) {
	          arguments[1].apply(null);
	        }
	        return Promise.resolve();
	      }
	      return nativeAddIceCandidate.apply(this, arguments);
	    };
	  }
	};
	
	
	// Expose public methods.
	module.exports = {
	  shimMediaStream: chromeShim.shimMediaStream,
	  shimOnTrack: chromeShim.shimOnTrack,
	  shimSourceObject: chromeShim.shimSourceObject,
	  shimPeerConnection: chromeShim.shimPeerConnection,
	  shimGetUserMedia: __webpack_require__(866)
	};


/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	var logging = __webpack_require__(864).log;
	
	// Expose public methods.
	module.exports = function() {
	  var constraintsToChrome_ = function(c) {
	    if (typeof c !== 'object' || c.mandatory || c.optional) {
	      return c;
	    }
	    var cc = {};
	    Object.keys(c).forEach(function(key) {
	      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
	        return;
	      }
	      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
	      if (r.exact !== undefined && typeof r.exact === 'number') {
	        r.min = r.max = r.exact;
	      }
	      var oldname_ = function(prefix, name) {
	        if (prefix) {
	          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
	        }
	        return (name === 'deviceId') ? 'sourceId' : name;
	      };
	      if (r.ideal !== undefined) {
	        cc.optional = cc.optional || [];
	        var oc = {};
	        if (typeof r.ideal === 'number') {
	          oc[oldname_('min', key)] = r.ideal;
	          cc.optional.push(oc);
	          oc = {};
	          oc[oldname_('max', key)] = r.ideal;
	          cc.optional.push(oc);
	        } else {
	          oc[oldname_('', key)] = r.ideal;
	          cc.optional.push(oc);
	        }
	      }
	      if (r.exact !== undefined && typeof r.exact !== 'number') {
	        cc.mandatory = cc.mandatory || {};
	        cc.mandatory[oldname_('', key)] = r.exact;
	      } else {
	        ['min', 'max'].forEach(function(mix) {
	          if (r[mix] !== undefined) {
	            cc.mandatory = cc.mandatory || {};
	            cc.mandatory[oldname_(mix, key)] = r[mix];
	          }
	        });
	      }
	    });
	    if (c.advanced) {
	      cc.optional = (cc.optional || []).concat(c.advanced);
	    }
	    return cc;
	  };
	
	  var shimConstraints_ = function(constraints, func) {
	    constraints = JSON.parse(JSON.stringify(constraints));
	    if (constraints && constraints.audio) {
	      constraints.audio = constraintsToChrome_(constraints.audio);
	    }
	    if (constraints && typeof constraints.video === 'object') {
	      // Shim facingMode for mobile, where it defaults to "user".
	      var face = constraints.video.facingMode;
	      face = face && ((typeof face === 'object') ? face : {ideal: face});
	
	      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
	                    face.ideal === 'user' || face.ideal === 'environment')) &&
	          !(navigator.mediaDevices.getSupportedConstraints &&
	            navigator.mediaDevices.getSupportedConstraints().facingMode)) {
	        delete constraints.video.facingMode;
	        if (face.exact === 'environment' || face.ideal === 'environment') {
	          // Look for "back" in label, or use last cam (typically back cam).
	          return navigator.mediaDevices.enumerateDevices()
	          .then(function(devices) {
	            devices = devices.filter(function(d) {
	              return d.kind === 'videoinput';
	            });
	            var back = devices.find(function(d) {
	              return d.label.toLowerCase().indexOf('back') !== -1;
	            }) || (devices.length && devices[devices.length - 1]);
	            if (back) {
	              constraints.video.deviceId = face.exact ? {exact: back.deviceId} :
	                                                        {ideal: back.deviceId};
	            }
	            constraints.video = constraintsToChrome_(constraints.video);
	            logging('chrome: ' + JSON.stringify(constraints));
	            return func(constraints);
	          });
	        }
	      }
	      constraints.video = constraintsToChrome_(constraints.video);
	    }
	    logging('chrome: ' + JSON.stringify(constraints));
	    return func(constraints);
	  };
	
	  var shimError_ = function(e) {
	    return {
	      name: {
	        PermissionDeniedError: 'NotAllowedError',
	        ConstraintNotSatisfiedError: 'OverconstrainedError'
	      }[e.name] || e.name,
	      message: e.message,
	      constraint: e.constraintName,
	      toString: function() {
	        return this.name + (this.message && ': ') + this.message;
	      }
	    };
	  };
	
	  var getUserMedia_ = function(constraints, onSuccess, onError) {
	    shimConstraints_(constraints, function(c) {
	      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
	        onError(shimError_(e));
	      });
	    });
	  };
	
	  navigator.getUserMedia = getUserMedia_;
	
	  // Returns the result of getUserMedia as a Promise.
	  var getUserMediaPromise_ = function(constraints) {
	    return new Promise(function(resolve, reject) {
	      navigator.getUserMedia(constraints, resolve, reject);
	    });
	  };
	
	  if (!navigator.mediaDevices) {
	    navigator.mediaDevices = {
	      getUserMedia: getUserMediaPromise_,
	      enumerateDevices: function() {
	        return new Promise(function(resolve) {
	          var kinds = {audio: 'audioinput', video: 'videoinput'};
	          return MediaStreamTrack.getSources(function(devices) {
	            resolve(devices.map(function(device) {
	              return {label: device.label,
	                      kind: kinds[device.kind],
	                      deviceId: device.id,
	                      groupId: ''};
	            }));
	          });
	        });
	      }
	    };
	  }
	
	  // A shim for getUserMedia method on the mediaDevices object.
	  // TODO(KaptenJansson) remove once implemented in Chrome stable.
	  if (!navigator.mediaDevices.getUserMedia) {
	    navigator.mediaDevices.getUserMedia = function(constraints) {
	      return getUserMediaPromise_(constraints);
	    };
	  } else {
	    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
	    // function which returns a Promise, it does not accept spec-style
	    // constraints.
	    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	        bind(navigator.mediaDevices);
	    navigator.mediaDevices.getUserMedia = function(cs) {
	      return shimConstraints_(cs, function(c) {
	        return origGetUserMedia(c).then(function(stream) {
	          if (c.audio && !stream.getAudioTracks().length ||
	              c.video && !stream.getVideoTracks().length) {
	            stream.getTracks().forEach(function(track) {
	              track.stop();
	            });
	            throw new DOMException('', 'NotFoundError');
	          }
	          return stream;
	        }, function(e) {
	          return Promise.reject(shimError_(e));
	        });
	      });
	    };
	  }
	
	  // Dummy devicechange event methods.
	  // TODO(KaptenJansson) remove once implemented in Chrome stable.
	  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
	    navigator.mediaDevices.addEventListener = function() {
	      logging('Dummy mediaDevices.addEventListener called.');
	    };
	  }
	  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
	    navigator.mediaDevices.removeEventListener = function() {
	      logging('Dummy mediaDevices.removeEventListener called.');
	    };
	  }
	};


/***/ },
/* 867 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	
	var SDPUtils = __webpack_require__(868);
	var browserDetails = __webpack_require__(864).browserDetails;
	
	var edgeShim = {
	  shimPeerConnection: function() {
	    if (window.RTCIceGatherer) {
	      // ORTC defines an RTCIceCandidate object but no constructor.
	      // Not implemented in Edge.
	      if (!window.RTCIceCandidate) {
	        window.RTCIceCandidate = function(args) {
	          return args;
	        };
	      }
	      // ORTC does not have a session description object but
	      // other browsers (i.e. Chrome) that will support both PC and ORTC
	      // in the future might have this defined already.
	      if (!window.RTCSessionDescription) {
	        window.RTCSessionDescription = function(args) {
	          return args;
	        };
	      }
	      // this adds an additional event listener to MediaStrackTrack that signals
	      // when a tracks enabled property was changed.
	      var origMSTEnabled = Object.getOwnPropertyDescriptor(
	          MediaStreamTrack.prototype, 'enabled');
	      Object.defineProperty(MediaStreamTrack.prototype, 'enabled', {
	        set: function(value) {
	          origMSTEnabled.set.call(this, value);
	          var ev = new Event('enabled');
	          ev.enabled = value;
	          this.dispatchEvent(ev);
	        }
	      });
	    }
	
	    window.RTCPeerConnection = function(config) {
	      var self = this;
	
	      var _eventTarget = document.createDocumentFragment();
	      ['addEventListener', 'removeEventListener', 'dispatchEvent']
	          .forEach(function(method) {
	            self[method] = _eventTarget[method].bind(_eventTarget);
	          });
	
	      this.onicecandidate = null;
	      this.onaddstream = null;
	      this.ontrack = null;
	      this.onremovestream = null;
	      this.onsignalingstatechange = null;
	      this.oniceconnectionstatechange = null;
	      this.onnegotiationneeded = null;
	      this.ondatachannel = null;
	
	      this.localStreams = [];
	      this.remoteStreams = [];
	      this.getLocalStreams = function() {
	        return self.localStreams;
	      };
	      this.getRemoteStreams = function() {
	        return self.remoteStreams;
	      };
	
	      this.localDescription = new RTCSessionDescription({
	        type: '',
	        sdp: ''
	      });
	      this.remoteDescription = new RTCSessionDescription({
	        type: '',
	        sdp: ''
	      });
	      this.signalingState = 'stable';
	      this.iceConnectionState = 'new';
	      this.iceGatheringState = 'new';
	
	      this.iceOptions = {
	        gatherPolicy: 'all',
	        iceServers: []
	      };
	      if (config && config.iceTransportPolicy) {
	        switch (config.iceTransportPolicy) {
	          case 'all':
	          case 'relay':
	            this.iceOptions.gatherPolicy = config.iceTransportPolicy;
	            break;
	          case 'none':
	            // FIXME: remove once implementation and spec have added this.
	            throw new TypeError('iceTransportPolicy "none" not supported');
	          default:
	            // don't set iceTransportPolicy.
	            break;
	        }
	      }
	      this.usingBundle = config && config.bundlePolicy === 'max-bundle';
	
	      if (config && config.iceServers) {
	        // Edge does not like
	        // 1) stun:
	        // 2) turn: that does not have all of turn:host:port?transport=udp
	        // 3) turn: with ipv6 addresses
	        var iceServers = JSON.parse(JSON.stringify(config.iceServers));
	        this.iceOptions.iceServers = iceServers.filter(function(server) {
	          if (server && server.urls) {
	            var urls = server.urls;
	            if (typeof urls === 'string') {
	              urls = [urls];
	            }
	            urls = urls.filter(function(url) {
	              return (url.indexOf('turn:') === 0 &&
	                  url.indexOf('transport=udp') !== -1 &&
	                  url.indexOf('turn:[') === -1) ||
	                  (url.indexOf('stun:') === 0 &&
	                    browserDetails.version >= 14393);
	            })[0];
	            return !!urls;
	          }
	          return false;
	        });
	      }
	      this._config = config;
	
	      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
	      // everything that is needed to describe a SDP m-line.
	      this.transceivers = [];
	
	      // since the iceGatherer is currently created in createOffer but we
	      // must not emit candidates until after setLocalDescription we buffer
	      // them in this array.
	      this._localIceCandidatesBuffer = [];
	    };
	
	    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {
	      var self = this;
	      var sections = SDPUtils.splitSections(self.localDescription.sdp);
	      // FIXME: need to apply ice candidates in a way which is async but
	      // in-order
	      this._localIceCandidatesBuffer.forEach(function(event) {
	        var end = !event.candidate || Object.keys(event.candidate).length === 0;
	        if (end) {
	          for (var j = 1; j < sections.length; j++) {
	            if (sections[j].indexOf('\r\na=end-of-candidates\r\n') === -1) {
	              sections[j] += 'a=end-of-candidates\r\n';
	            }
	          }
	        } else if (event.candidate.candidate.indexOf('typ endOfCandidates')
	            === -1) {
	          sections[event.candidate.sdpMLineIndex + 1] +=
	              'a=' + event.candidate.candidate + '\r\n';
	        }
	        self.localDescription.sdp = sections.join('');
	        self.dispatchEvent(event);
	        if (self.onicecandidate !== null) {
	          self.onicecandidate(event);
	        }
	        if (!event.candidate && self.iceGatheringState !== 'complete') {
	          var complete = self.transceivers.every(function(transceiver) {
	            return transceiver.iceGatherer &&
	                transceiver.iceGatherer.state === 'completed';
	          });
	          if (complete) {
	            self.iceGatheringState = 'complete';
	          }
	        }
	      });
	      this._localIceCandidatesBuffer = [];
	    };
	
	    window.RTCPeerConnection.prototype.getConfiguration = function() {
	      return this._config;
	    };
	
	    window.RTCPeerConnection.prototype.addStream = function(stream) {
	      // Clone is necessary for local demos mostly, attaching directly
	      // to two different senders does not work (build 10547).
	      var clonedStream = stream.clone();
	      stream.getTracks().forEach(function(track, idx) {
	        var clonedTrack = clonedStream.getTracks()[idx];
	        track.addEventListener('enabled', function(event) {
	          clonedTrack.enabled = event.enabled;
	        });
	      });
	      this.localStreams.push(clonedStream);
	      this._maybeFireNegotiationNeeded();
	    };
	
	    window.RTCPeerConnection.prototype.removeStream = function(stream) {
	      var idx = this.localStreams.indexOf(stream);
	      if (idx > -1) {
	        this.localStreams.splice(idx, 1);
	        this._maybeFireNegotiationNeeded();
	      }
	    };
	
	    window.RTCPeerConnection.prototype.getSenders = function() {
	      return this.transceivers.filter(function(transceiver) {
	        return !!transceiver.rtpSender;
	      })
	      .map(function(transceiver) {
	        return transceiver.rtpSender;
	      });
	    };
	
	    window.RTCPeerConnection.prototype.getReceivers = function() {
	      return this.transceivers.filter(function(transceiver) {
	        return !!transceiver.rtpReceiver;
	      })
	      .map(function(transceiver) {
	        return transceiver.rtpReceiver;
	      });
	    };
	
	    // Determines the intersection of local and remote capabilities.
	    window.RTCPeerConnection.prototype._getCommonCapabilities =
	        function(localCapabilities, remoteCapabilities) {
	          var commonCapabilities = {
	            codecs: [],
	            headerExtensions: [],
	            fecMechanisms: []
	          };
	          localCapabilities.codecs.forEach(function(lCodec) {
	            for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
	              var rCodec = remoteCapabilities.codecs[i];
	              if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
	                  lCodec.clockRate === rCodec.clockRate) {
	                // number of channels is the highest common number of channels
	                rCodec.numChannels = Math.min(lCodec.numChannels,
	                    rCodec.numChannels);
	                // push rCodec so we reply with offerer payload type
	                commonCapabilities.codecs.push(rCodec);
	
	                // determine common feedback mechanisms
	                rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
	                  for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
	                    if (lCodec.rtcpFeedback[j].type === fb.type &&
	                        lCodec.rtcpFeedback[j].parameter === fb.parameter) {
	                      return true;
	                    }
	                  }
	                  return false;
	                });
	                // FIXME: also need to determine .parameters
	                //  see https://github.com/openpeer/ortc/issues/569
	                break;
	              }
	            }
	          });
	
	          localCapabilities.headerExtensions
	              .forEach(function(lHeaderExtension) {
	                for (var i = 0; i < remoteCapabilities.headerExtensions.length;
	                     i++) {
	                  var rHeaderExtension = remoteCapabilities.headerExtensions[i];
	                  if (lHeaderExtension.uri === rHeaderExtension.uri) {
	                    commonCapabilities.headerExtensions.push(rHeaderExtension);
	                    break;
	                  }
	                }
	              });
	
	          // FIXME: fecMechanisms
	          return commonCapabilities;
	        };
	
	    // Create ICE gatherer, ICE transport and DTLS transport.
	    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =
	        function(mid, sdpMLineIndex) {
	          var self = this;
	          var iceGatherer = new RTCIceGatherer(self.iceOptions);
	          var iceTransport = new RTCIceTransport(iceGatherer);
	          iceGatherer.onlocalcandidate = function(evt) {
	            var event = new Event('icecandidate');
	            event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};
	
	            var cand = evt.candidate;
	            var end = !cand || Object.keys(cand).length === 0;
	            // Edge emits an empty object for RTCIceCandidateComplete‥
	            if (end) {
	              // polyfill since RTCIceGatherer.state is not implemented in
	              // Edge 10547 yet.
	              if (iceGatherer.state === undefined) {
	                iceGatherer.state = 'completed';
	              }
	
	              // Emit a candidate with type endOfCandidates to make the samples
	              // work. Edge requires addIceCandidate with this empty candidate
	              // to start checking. The real solution is to signal
	              // end-of-candidates to the other side when getting the null
	              // candidate but some apps (like the samples) don't do that.
	              event.candidate.candidate =
	                  'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';
	            } else {
	              // RTCIceCandidate doesn't have a component, needs to be added
	              cand.component = iceTransport.component === 'RTCP' ? 2 : 1;
	              event.candidate.candidate = SDPUtils.writeCandidate(cand);
	            }
	
	            // update local description.
	            var sections = SDPUtils.splitSections(self.localDescription.sdp);
	            if (event.candidate.candidate.indexOf('typ endOfCandidates')
	                === -1) {
	              sections[event.candidate.sdpMLineIndex + 1] +=
	                  'a=' + event.candidate.candidate + '\r\n';
	            } else {
	              sections[event.candidate.sdpMLineIndex + 1] +=
	                  'a=end-of-candidates\r\n';
	            }
	            self.localDescription.sdp = sections.join('');
	
	            var complete = self.transceivers.every(function(transceiver) {
	              return transceiver.iceGatherer &&
	                  transceiver.iceGatherer.state === 'completed';
	            });
	
	            // Emit candidate if localDescription is set.
	            // Also emits null candidate when all gatherers are complete.
	            switch (self.iceGatheringState) {
	              case 'new':
	                self._localIceCandidatesBuffer.push(event);
	                if (end && complete) {
	                  self._localIceCandidatesBuffer.push(
	                      new Event('icecandidate'));
	                }
	                break;
	              case 'gathering':
	                self._emitBufferedCandidates();
	                self.dispatchEvent(event);
	                if (self.onicecandidate !== null) {
	                  self.onicecandidate(event);
	                }
	                if (complete) {
	                  self.dispatchEvent(new Event('icecandidate'));
	                  if (self.onicecandidate !== null) {
	                    self.onicecandidate(new Event('icecandidate'));
	                  }
	                  self.iceGatheringState = 'complete';
	                }
	                break;
	              case 'complete':
	                // should not happen... currently!
	                break;
	              default: // no-op.
	                break;
	            }
	          };
	          iceTransport.onicestatechange = function() {
	            self._updateConnectionState();
	          };
	
	          var dtlsTransport = new RTCDtlsTransport(iceTransport);
	          dtlsTransport.ondtlsstatechange = function() {
	            self._updateConnectionState();
	          };
	          dtlsTransport.onerror = function() {
	            // onerror does not set state to failed by itself.
	            dtlsTransport.state = 'failed';
	            self._updateConnectionState();
	          };
	
	          return {
	            iceGatherer: iceGatherer,
	            iceTransport: iceTransport,
	            dtlsTransport: dtlsTransport
	          };
	        };
	
	    // Start the RTP Sender and Receiver for a transceiver.
	    window.RTCPeerConnection.prototype._transceive = function(transceiver,
	        send, recv) {
	      var params = this._getCommonCapabilities(transceiver.localCapabilities,
	          transceiver.remoteCapabilities);
	      if (send && transceiver.rtpSender) {
	        params.encodings = transceiver.sendEncodingParameters;
	        params.rtcp = {
	          cname: SDPUtils.localCName
	        };
	        if (transceiver.recvEncodingParameters.length) {
	          params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
	        }
	        transceiver.rtpSender.send(params);
	      }
	      if (recv && transceiver.rtpReceiver) {
	        // remove RTX field in Edge 14942
	        if (transceiver.kind === 'video'
	            && transceiver.recvEncodingParameters) {
	          transceiver.recvEncodingParameters.forEach(function(p) {
	            delete p.rtx;
	          });
	        }
	        params.encodings = transceiver.recvEncodingParameters;
	        params.rtcp = {
	          cname: transceiver.cname
	        };
	        if (transceiver.sendEncodingParameters.length) {
	          params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
	        }
	        transceiver.rtpReceiver.receive(params);
	      }
	    };
	
	    window.RTCPeerConnection.prototype.setLocalDescription =
	        function(description) {
	          var self = this;
	          var sections;
	          var sessionpart;
	          if (description.type === 'offer') {
	            // FIXME: What was the purpose of this empty if statement?
	            // if (!this._pendingOffer) {
	            // } else {
	            if (this._pendingOffer) {
	              // VERY limited support for SDP munging. Limited to:
	              // * changing the order of codecs
	              sections = SDPUtils.splitSections(description.sdp);
	              sessionpart = sections.shift();
	              sections.forEach(function(mediaSection, sdpMLineIndex) {
	                var caps = SDPUtils.parseRtpParameters(mediaSection);
	                self._pendingOffer[sdpMLineIndex].localCapabilities = caps;
	              });
	              this.transceivers = this._pendingOffer;
	              delete this._pendingOffer;
	            }
	          } else if (description.type === 'answer') {
	            sections = SDPUtils.splitSections(self.remoteDescription.sdp);
	            sessionpart = sections.shift();
	            var isIceLite = SDPUtils.matchPrefix(sessionpart,
	                'a=ice-lite').length > 0;
	            sections.forEach(function(mediaSection, sdpMLineIndex) {
	              var transceiver = self.transceivers[sdpMLineIndex];
	              var iceGatherer = transceiver.iceGatherer;
	              var iceTransport = transceiver.iceTransport;
	              var dtlsTransport = transceiver.dtlsTransport;
	              var localCapabilities = transceiver.localCapabilities;
	              var remoteCapabilities = transceiver.remoteCapabilities;
	
	              var rejected = mediaSection.split('\n', 1)[0]
	                  .split(' ', 2)[1] === '0';
	
	              if (!rejected && !transceiver.isDatachannel) {
	                var remoteIceParameters = SDPUtils.getIceParameters(
	                    mediaSection, sessionpart);
	                if (isIceLite) {
	                  var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
	                  .map(function(cand) {
	                    return SDPUtils.parseCandidate(cand);
	                  })
	                  .filter(function(cand) {
	                    return cand.component === '1';
	                  });
	                  // ice-lite only includes host candidates in the SDP so we can
	                  // use setRemoteCandidates (which implies an
	                  // RTCIceCandidateComplete)
	                  if (cands.length) {
	                    iceTransport.setRemoteCandidates(cands);
	                  }
	                }
	                var remoteDtlsParameters = SDPUtils.getDtlsParameters(
	                    mediaSection, sessionpart);
	                if (isIceLite) {
	                  remoteDtlsParameters.role = 'server';
	                }
	
	                if (!self.usingBundle || sdpMLineIndex === 0) {
	                  iceTransport.start(iceGatherer, remoteIceParameters,
	                      isIceLite ? 'controlling' : 'controlled');
	                  dtlsTransport.start(remoteDtlsParameters);
	                }
	
	                // Calculate intersection of capabilities.
	                var params = self._getCommonCapabilities(localCapabilities,
	                    remoteCapabilities);
	
	                // Start the RTCRtpSender. The RTCRtpReceiver for this
	                // transceiver has already been started in setRemoteDescription.
	                self._transceive(transceiver,
	                    params.codecs.length > 0,
	                    false);
	              }
	            });
	          }
	
	          this.localDescription = {
	            type: description.type,
	            sdp: description.sdp
	          };
	          switch (description.type) {
	            case 'offer':
	              this._updateSignalingState('have-local-offer');
	              break;
	            case 'answer':
	              this._updateSignalingState('stable');
	              break;
	            default:
	              throw new TypeError('unsupported type "' + description.type +
	                  '"');
	          }
	
	          // If a success callback was provided, emit ICE candidates after it
	          // has been executed. Otherwise, emit callback after the Promise is
	          // resolved.
	          var hasCallback = arguments.length > 1 &&
	            typeof arguments[1] === 'function';
	          if (hasCallback) {
	            var cb = arguments[1];
	            window.setTimeout(function() {
	              cb();
	              if (self.iceGatheringState === 'new') {
	                self.iceGatheringState = 'gathering';
	              }
	              self._emitBufferedCandidates();
	            }, 0);
	          }
	          var p = Promise.resolve();
	          p.then(function() {
	            if (!hasCallback) {
	              if (self.iceGatheringState === 'new') {
	                self.iceGatheringState = 'gathering';
	              }
	              // Usually candidates will be emitted earlier.
	              window.setTimeout(self._emitBufferedCandidates.bind(self), 500);
	            }
	          });
	          return p;
	        };
	
	    window.RTCPeerConnection.prototype.setRemoteDescription =
	        function(description) {
	          var self = this;
	          var stream = new MediaStream();
	          var receiverList = [];
	          var sections = SDPUtils.splitSections(description.sdp);
	          var sessionpart = sections.shift();
	          var isIceLite = SDPUtils.matchPrefix(sessionpart,
	              'a=ice-lite').length > 0;
	          this.usingBundle = SDPUtils.matchPrefix(sessionpart,
	              'a=group:BUNDLE ').length > 0;
	          sections.forEach(function(mediaSection, sdpMLineIndex) {
	            var lines = SDPUtils.splitLines(mediaSection);
	            var mline = lines[0].substr(2).split(' ');
	            var kind = mline[0];
	            var rejected = mline[1] === '0';
	            var direction = SDPUtils.getDirection(mediaSection, sessionpart);
	
	            var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:');
	            if (mid.length) {
	              mid = mid[0].substr(6);
	            } else {
	              mid = SDPUtils.generateIdentifier();
	            }
	
	            // Reject datachannels which are not implemented yet.
	            if (kind === 'application' && mline[2] === 'DTLS/SCTP') {
	              self.transceivers[sdpMLineIndex] = {
	                mid: mid,
	                isDatachannel: true
	              };
	              return;
	            }
	
	            var transceiver;
	            var iceGatherer;
	            var iceTransport;
	            var dtlsTransport;
	            var rtpSender;
	            var rtpReceiver;
	            var sendEncodingParameters;
	            var recvEncodingParameters;
	            var localCapabilities;
	
	            var track;
	            // FIXME: ensure the mediaSection has rtcp-mux set.
	            var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
	            var remoteIceParameters;
	            var remoteDtlsParameters;
	            if (!rejected) {
	              remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
	                  sessionpart);
	              remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
	                  sessionpart);
	              remoteDtlsParameters.role = 'client';
	            }
	            recvEncodingParameters =
	                SDPUtils.parseRtpEncodingParameters(mediaSection);
	
	            var cname;
	            // Gets the first SSRC. Note that with RTX there might be multiple
	            // SSRCs.
	            var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	                .map(function(line) {
	                  return SDPUtils.parseSsrcMedia(line);
	                })
	                .filter(function(obj) {
	                  return obj.attribute === 'cname';
	                })[0];
	            if (remoteSsrc) {
	              cname = remoteSsrc.value;
	            }
	
	            var isComplete = SDPUtils.matchPrefix(mediaSection,
	                'a=end-of-candidates', sessionpart).length > 0;
	            var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
	                .map(function(cand) {
	                  return SDPUtils.parseCandidate(cand);
	                })
	                .filter(function(cand) {
	                  return cand.component === '1';
	                });
	            if (description.type === 'offer' && !rejected) {
	              var transports = self.usingBundle && sdpMLineIndex > 0 ? {
	                iceGatherer: self.transceivers[0].iceGatherer,
	                iceTransport: self.transceivers[0].iceTransport,
	                dtlsTransport: self.transceivers[0].dtlsTransport
	              } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);
	
	              if (isComplete) {
	                transports.iceTransport.setRemoteCandidates(cands);
	              }
	
	              localCapabilities = RTCRtpReceiver.getCapabilities(kind);
	
	              // filter RTX until additional stuff needed for RTX is implemented
	              // in adapter.js
	              localCapabilities.codecs = localCapabilities.codecs.filter(
	                  function(codec) {
	                    return codec.name !== 'rtx';
	                  });
	
	              sendEncodingParameters = [{
	                ssrc: (2 * sdpMLineIndex + 2) * 1001
	              }];
	
	              rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
	
	              track = rtpReceiver.track;
	              receiverList.push([track, rtpReceiver]);
	              // FIXME: not correct when there are multiple streams but that is
	              // not currently supported in this shim.
	              stream.addTrack(track);
	
	              // FIXME: look at direction.
	              if (self.localStreams.length > 0 &&
	                  self.localStreams[0].getTracks().length >= sdpMLineIndex) {
	                var localTrack;
	                if (kind === 'audio') {
	                  localTrack = self.localStreams[0].getAudioTracks()[0];
	                } else if (kind === 'video') {
	                  localTrack = self.localStreams[0].getVideoTracks()[0];
	                }
	                if (localTrack) {
	                  rtpSender = new RTCRtpSender(localTrack,
	                      transports.dtlsTransport);
	                }
	              }
	
	              self.transceivers[sdpMLineIndex] = {
	                iceGatherer: transports.iceGatherer,
	                iceTransport: transports.iceTransport,
	                dtlsTransport: transports.dtlsTransport,
	                localCapabilities: localCapabilities,
	                remoteCapabilities: remoteCapabilities,
	                rtpSender: rtpSender,
	                rtpReceiver: rtpReceiver,
	                kind: kind,
	                mid: mid,
	                cname: cname,
	                sendEncodingParameters: sendEncodingParameters,
	                recvEncodingParameters: recvEncodingParameters
	              };
	              // Start the RTCRtpReceiver now. The RTPSender is started in
	              // setLocalDescription.
	              self._transceive(self.transceivers[sdpMLineIndex],
	                  false,
	                  direction === 'sendrecv' || direction === 'sendonly');
	            } else if (description.type === 'answer' && !rejected) {
	              transceiver = self.transceivers[sdpMLineIndex];
	              iceGatherer = transceiver.iceGatherer;
	              iceTransport = transceiver.iceTransport;
	              dtlsTransport = transceiver.dtlsTransport;
	              rtpSender = transceiver.rtpSender;
	              rtpReceiver = transceiver.rtpReceiver;
	              sendEncodingParameters = transceiver.sendEncodingParameters;
	              localCapabilities = transceiver.localCapabilities;
	
	              self.transceivers[sdpMLineIndex].recvEncodingParameters =
	                  recvEncodingParameters;
	              self.transceivers[sdpMLineIndex].remoteCapabilities =
	                  remoteCapabilities;
	              self.transceivers[sdpMLineIndex].cname = cname;
	
	              if ((isIceLite || isComplete) && cands.length) {
	                iceTransport.setRemoteCandidates(cands);
	              }
	              if (!self.usingBundle || sdpMLineIndex === 0) {
	                iceTransport.start(iceGatherer, remoteIceParameters,
	                    'controlling');
	                dtlsTransport.start(remoteDtlsParameters);
	              }
	
	              self._transceive(transceiver,
	                  direction === 'sendrecv' || direction === 'recvonly',
	                  direction === 'sendrecv' || direction === 'sendonly');
	
	              if (rtpReceiver &&
	                  (direction === 'sendrecv' || direction === 'sendonly')) {
	                track = rtpReceiver.track;
	                receiverList.push([track, rtpReceiver]);
	                stream.addTrack(track);
	              } else {
	                // FIXME: actually the receiver should be created later.
	                delete transceiver.rtpReceiver;
	              }
	            }
	          });
	
	          this.remoteDescription = {
	            type: description.type,
	            sdp: description.sdp
	          };
	          switch (description.type) {
	            case 'offer':
	              this._updateSignalingState('have-remote-offer');
	              break;
	            case 'answer':
	              this._updateSignalingState('stable');
	              break;
	            default:
	              throw new TypeError('unsupported type "' + description.type +
	                  '"');
	          }
	          if (stream.getTracks().length) {
	            self.remoteStreams.push(stream);
	            window.setTimeout(function() {
	              var event = new Event('addstream');
	              event.stream = stream;
	              self.dispatchEvent(event);
	              if (self.onaddstream !== null) {
	                window.setTimeout(function() {
	                  self.onaddstream(event);
	                }, 0);
	              }
	
	              receiverList.forEach(function(item) {
	                var track = item[0];
	                var receiver = item[1];
	                var trackEvent = new Event('track');
	                trackEvent.track = track;
	                trackEvent.receiver = receiver;
	                trackEvent.streams = [stream];
	                self.dispatchEvent(event);
	                if (self.ontrack !== null) {
	                  window.setTimeout(function() {
	                    self.ontrack(trackEvent);
	                  }, 0);
	                }
	              });
	            }, 0);
	          }
	          if (arguments.length > 1 && typeof arguments[1] === 'function') {
	            window.setTimeout(arguments[1], 0);
	          }
	          return Promise.resolve();
	        };
	
	    window.RTCPeerConnection.prototype.close = function() {
	      this.transceivers.forEach(function(transceiver) {
	        /* not yet
	        if (transceiver.iceGatherer) {
	          transceiver.iceGatherer.close();
	        }
	        */
	        if (transceiver.iceTransport) {
	          transceiver.iceTransport.stop();
	        }
	        if (transceiver.dtlsTransport) {
	          transceiver.dtlsTransport.stop();
	        }
	        if (transceiver.rtpSender) {
	          transceiver.rtpSender.stop();
	        }
	        if (transceiver.rtpReceiver) {
	          transceiver.rtpReceiver.stop();
	        }
	      });
	      // FIXME: clean up tracks, local streams, remote streams, etc
	      this._updateSignalingState('closed');
	    };
	
	    // Update the signaling state.
	    window.RTCPeerConnection.prototype._updateSignalingState =
	        function(newState) {
	          this.signalingState = newState;
	          var event = new Event('signalingstatechange');
	          this.dispatchEvent(event);
	          if (this.onsignalingstatechange !== null) {
	            this.onsignalingstatechange(event);
	          }
	        };
	
	    // Determine whether to fire the negotiationneeded event.
	    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =
	        function() {
	          // Fire away (for now).
	          var event = new Event('negotiationneeded');
	          this.dispatchEvent(event);
	          if (this.onnegotiationneeded !== null) {
	            this.onnegotiationneeded(event);
	          }
	        };
	
	    // Update the connection state.
	    window.RTCPeerConnection.prototype._updateConnectionState = function() {
	      var self = this;
	      var newState;
	      var states = {
	        'new': 0,
	        closed: 0,
	        connecting: 0,
	        checking: 0,
	        connected: 0,
	        completed: 0,
	        failed: 0
	      };
	      this.transceivers.forEach(function(transceiver) {
	        states[transceiver.iceTransport.state]++;
	        states[transceiver.dtlsTransport.state]++;
	      });
	      // ICETransport.completed and connected are the same for this purpose.
	      states.connected += states.completed;
	
	      newState = 'new';
	      if (states.failed > 0) {
	        newState = 'failed';
	      } else if (states.connecting > 0 || states.checking > 0) {
	        newState = 'connecting';
	      } else if (states.disconnected > 0) {
	        newState = 'disconnected';
	      } else if (states.new > 0) {
	        newState = 'new';
	      } else if (states.connected > 0 || states.completed > 0) {
	        newState = 'connected';
	      }
	
	      if (newState !== self.iceConnectionState) {
	        self.iceConnectionState = newState;
	        var event = new Event('iceconnectionstatechange');
	        this.dispatchEvent(event);
	        if (this.oniceconnectionstatechange !== null) {
	          this.oniceconnectionstatechange(event);
	        }
	      }
	    };
	
	    window.RTCPeerConnection.prototype.createOffer = function() {
	      var self = this;
	      if (this._pendingOffer) {
	        throw new Error('createOffer called while there is a pending offer.');
	      }
	      var offerOptions;
	      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	        offerOptions = arguments[0];
	      } else if (arguments.length === 3) {
	        offerOptions = arguments[2];
	      }
	
	      var tracks = [];
	      var numAudioTracks = 0;
	      var numVideoTracks = 0;
	      // Default to sendrecv.
	      if (this.localStreams.length) {
	        numAudioTracks = this.localStreams[0].getAudioTracks().length;
	        numVideoTracks = this.localStreams[0].getVideoTracks().length;
	      }
	      // Determine number of audio and video tracks we need to send/recv.
	      if (offerOptions) {
	        // Reject Chrome legacy constraints.
	        if (offerOptions.mandatory || offerOptions.optional) {
	          throw new TypeError(
	              'Legacy mandatory/optional constraints not supported.');
	        }
	        if (offerOptions.offerToReceiveAudio !== undefined) {
	          numAudioTracks = offerOptions.offerToReceiveAudio;
	        }
	        if (offerOptions.offerToReceiveVideo !== undefined) {
	          numVideoTracks = offerOptions.offerToReceiveVideo;
	        }
	      }
	      if (this.localStreams.length) {
	        // Push local streams.
	        this.localStreams[0].getTracks().forEach(function(track) {
	          tracks.push({
	            kind: track.kind,
	            track: track,
	            wantReceive: track.kind === 'audio' ?
	                numAudioTracks > 0 : numVideoTracks > 0
	          });
	          if (track.kind === 'audio') {
	            numAudioTracks--;
	          } else if (track.kind === 'video') {
	            numVideoTracks--;
	          }
	        });
	      }
	      // Create M-lines for recvonly streams.
	      while (numAudioTracks > 0 || numVideoTracks > 0) {
	        if (numAudioTracks > 0) {
	          tracks.push({
	            kind: 'audio',
	            wantReceive: true
	          });
	          numAudioTracks--;
	        }
	        if (numVideoTracks > 0) {
	          tracks.push({
	            kind: 'video',
	            wantReceive: true
	          });
	          numVideoTracks--;
	        }
	      }
	
	      var sdp = SDPUtils.writeSessionBoilerplate();
	      var transceivers = [];
	      tracks.forEach(function(mline, sdpMLineIndex) {
	        // For each track, create an ice gatherer, ice transport,
	        // dtls transport, potentially rtpsender and rtpreceiver.
	        var track = mline.track;
	        var kind = mline.kind;
	        var mid = SDPUtils.generateIdentifier();
	
	        var transports = self.usingBundle && sdpMLineIndex > 0 ? {
	          iceGatherer: transceivers[0].iceGatherer,
	          iceTransport: transceivers[0].iceTransport,
	          dtlsTransport: transceivers[0].dtlsTransport
	        } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);
	
	        var localCapabilities = RTCRtpSender.getCapabilities(kind);
	        // filter RTX until additional stuff needed for RTX is implemented
	        // in adapter.js
	        localCapabilities.codecs = localCapabilities.codecs.filter(
	            function(codec) {
	              return codec.name !== 'rtx';
	            });
	        localCapabilities.codecs.forEach(function(codec) {
	          // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
	          // by adding level-asymmetry-allowed=1
	          if (codec.name === 'H264' &&
	              codec.parameters['level-asymmetry-allowed'] === undefined) {
	            codec.parameters['level-asymmetry-allowed'] = '1';
	          }
	        });
	
	        var rtpSender;
	        var rtpReceiver;
	
	        // generate an ssrc now, to be used later in rtpSender.send
	        var sendEncodingParameters = [{
	          ssrc: (2 * sdpMLineIndex + 1) * 1001
	        }];
	        if (track) {
	          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);
	        }
	
	        if (mline.wantReceive) {
	          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
	        }
	
	        transceivers[sdpMLineIndex] = {
	          iceGatherer: transports.iceGatherer,
	          iceTransport: transports.iceTransport,
	          dtlsTransport: transports.dtlsTransport,
	          localCapabilities: localCapabilities,
	          remoteCapabilities: null,
	          rtpSender: rtpSender,
	          rtpReceiver: rtpReceiver,
	          kind: kind,
	          mid: mid,
	          sendEncodingParameters: sendEncodingParameters,
	          recvEncodingParameters: null
	        };
	      });
	      if (this.usingBundle) {
	        sdp += 'a=group:BUNDLE ' + transceivers.map(function(t) {
	          return t.mid;
	        }).join(' ') + '\r\n';
	      }
	      tracks.forEach(function(mline, sdpMLineIndex) {
	        var transceiver = transceivers[sdpMLineIndex];
	        sdp += SDPUtils.writeMediaSection(transceiver,
	            transceiver.localCapabilities, 'offer', self.localStreams[0]);
	      });
	
	      this._pendingOffer = transceivers;
	      var desc = new RTCSessionDescription({
	        type: 'offer',
	        sdp: sdp
	      });
	      if (arguments.length && typeof arguments[0] === 'function') {
	        window.setTimeout(arguments[0], 0, desc);
	      }
	      return Promise.resolve(desc);
	    };
	
	    window.RTCPeerConnection.prototype.createAnswer = function() {
	      var self = this;
	
	      var sdp = SDPUtils.writeSessionBoilerplate();
	      if (this.usingBundle) {
	        sdp += 'a=group:BUNDLE ' + this.transceivers.map(function(t) {
	          return t.mid;
	        }).join(' ') + '\r\n';
	      }
	      this.transceivers.forEach(function(transceiver) {
	        if (transceiver.isDatachannel) {
	          sdp += 'm=application 0 DTLS/SCTP 5000\r\n' +
	              'c=IN IP4 0.0.0.0\r\n' +
	              'a=mid:' + transceiver.mid + '\r\n';
	          return;
	        }
	        // Calculate intersection of capabilities.
	        var commonCapabilities = self._getCommonCapabilities(
	            transceiver.localCapabilities,
	            transceiver.remoteCapabilities);
	
	        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
	            'answer', self.localStreams[0]);
	      });
	
	      var desc = new RTCSessionDescription({
	        type: 'answer',
	        sdp: sdp
	      });
	      if (arguments.length && typeof arguments[0] === 'function') {
	        window.setTimeout(arguments[0], 0, desc);
	      }
	      return Promise.resolve(desc);
	    };
	
	    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
	      if (!candidate) {
	        this.transceivers.forEach(function(transceiver) {
	          transceiver.iceTransport.addRemoteCandidate({});
	        });
	      } else {
	        var mLineIndex = candidate.sdpMLineIndex;
	        if (candidate.sdpMid) {
	          for (var i = 0; i < this.transceivers.length; i++) {
	            if (this.transceivers[i].mid === candidate.sdpMid) {
	              mLineIndex = i;
	              break;
	            }
	          }
	        }
	        var transceiver = this.transceivers[mLineIndex];
	        if (transceiver) {
	          var cand = Object.keys(candidate.candidate).length > 0 ?
	              SDPUtils.parseCandidate(candidate.candidate) : {};
	          // Ignore Chrome's invalid candidates since Edge does not like them.
	          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
	            return;
	          }
	          // Ignore RTCP candidates, we assume RTCP-MUX.
	          if (cand.component !== '1') {
	            return;
	          }
	          // A dirty hack to make samples work.
	          if (cand.type === 'endOfCandidates') {
	            cand = {};
	          }
	          transceiver.iceTransport.addRemoteCandidate(cand);
	
	          // update the remoteDescription.
	          var sections = SDPUtils.splitSections(this.remoteDescription.sdp);
	          sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()
	              : 'a=end-of-candidates') + '\r\n';
	          this.remoteDescription.sdp = sections.join('');
	        }
	      }
	      if (arguments.length > 1 && typeof arguments[1] === 'function') {
	        window.setTimeout(arguments[1], 0);
	      }
	      return Promise.resolve();
	    };
	
	    window.RTCPeerConnection.prototype.getStats = function() {
	      var promises = [];
	      this.transceivers.forEach(function(transceiver) {
	        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
	            'dtlsTransport'].forEach(function(method) {
	              if (transceiver[method]) {
	                promises.push(transceiver[method].getStats());
	              }
	            });
	      });
	      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
	          arguments[1];
	      return new Promise(function(resolve) {
	        // shim getStats with maplike support
	        var results = new Map();
	        Promise.all(promises).then(function(res) {
	          res.forEach(function(result) {
	            Object.keys(result).forEach(function(id) {
	              results.set(id, result[id]);
	              results[id] = result[id];
	            });
	          });
	          if (cb) {
	            window.setTimeout(cb, 0, results);
	          }
	          resolve(results);
	        });
	      });
	    };
	  }
	};
	
	// Expose public methods.
	module.exports = {
	  shimPeerConnection: edgeShim.shimPeerConnection,
	  shimGetUserMedia: __webpack_require__(869)
	};


/***/ },
/* 868 */
/***/ function(module, exports) {

	 /* eslint-env node */
	'use strict';
	
	// SDP helpers.
	var SDPUtils = {};
	
	// Generate an alphanumeric identifier for cname or mids.
	// TODO: use UUIDs instead? https://gist.github.com/jed/982883
	SDPUtils.generateIdentifier = function() {
	  return Math.random().toString(36).substr(2, 10);
	};
	
	// The RTCP CNAME used by all peerconnections from the same JS.
	SDPUtils.localCName = SDPUtils.generateIdentifier();
	
	// Splits SDP into lines, dealing with both CRLF and LF.
	SDPUtils.splitLines = function(blob) {
	  return blob.trim().split('\n').map(function(line) {
	    return line.trim();
	  });
	};
	// Splits SDP into sessionpart and mediasections. Ensures CRLF.
	SDPUtils.splitSections = function(blob) {
	  var parts = blob.split('\nm=');
	  return parts.map(function(part, index) {
	    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
	  });
	};
	
	// Returns lines that start with a certain prefix.
	SDPUtils.matchPrefix = function(blob, prefix) {
	  return SDPUtils.splitLines(blob).filter(function(line) {
	    return line.indexOf(prefix) === 0;
	  });
	};
	
	// Parses an ICE candidate line. Sample input:
	// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
	// rport 55996"
	SDPUtils.parseCandidate = function(line) {
	  var parts;
	  // Parse both variants.
	  if (line.indexOf('a=candidate:') === 0) {
	    parts = line.substring(12).split(' ');
	  } else {
	    parts = line.substring(10).split(' ');
	  }
	
	  var candidate = {
	    foundation: parts[0],
	    component: parts[1],
	    protocol: parts[2].toLowerCase(),
	    priority: parseInt(parts[3], 10),
	    ip: parts[4],
	    port: parseInt(parts[5], 10),
	    // skip parts[6] == 'typ'
	    type: parts[7]
	  };
	
	  for (var i = 8; i < parts.length; i += 2) {
	    switch (parts[i]) {
	      case 'raddr':
	        candidate.relatedAddress = parts[i + 1];
	        break;
	      case 'rport':
	        candidate.relatedPort = parseInt(parts[i + 1], 10);
	        break;
	      case 'tcptype':
	        candidate.tcpType = parts[i + 1];
	        break;
	      default: // Unknown extensions are silently ignored.
	        break;
	    }
	  }
	  return candidate;
	};
	
	// Translates a candidate object into SDP candidate attribute.
	SDPUtils.writeCandidate = function(candidate) {
	  var sdp = [];
	  sdp.push(candidate.foundation);
	  sdp.push(candidate.component);
	  sdp.push(candidate.protocol.toUpperCase());
	  sdp.push(candidate.priority);
	  sdp.push(candidate.ip);
	  sdp.push(candidate.port);
	
	  var type = candidate.type;
	  sdp.push('typ');
	  sdp.push(type);
	  if (type !== 'host' && candidate.relatedAddress &&
	      candidate.relatedPort) {
	    sdp.push('raddr');
	    sdp.push(candidate.relatedAddress); // was: relAddr
	    sdp.push('rport');
	    sdp.push(candidate.relatedPort); // was: relPort
	  }
	  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
	    sdp.push('tcptype');
	    sdp.push(candidate.tcpType);
	  }
	  return 'candidate:' + sdp.join(' ');
	};
	
	// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
	// a=rtpmap:111 opus/48000/2
	SDPUtils.parseRtpMap = function(line) {
	  var parts = line.substr(9).split(' ');
	  var parsed = {
	    payloadType: parseInt(parts.shift(), 10) // was: id
	  };
	
	  parts = parts[0].split('/');
	
	  parsed.name = parts[0];
	  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
	  // was: channels
	  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
	  return parsed;
	};
	
	// Generate an a=rtpmap line from RTCRtpCodecCapability or
	// RTCRtpCodecParameters.
	SDPUtils.writeRtpMap = function(codec) {
	  var pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
	      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
	};
	
	// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
	// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
	SDPUtils.parseExtmap = function(line) {
	  var parts = line.substr(9).split(' ');
	  return {
	    id: parseInt(parts[0], 10),
	    uri: parts[1]
	  };
	};
	
	// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
	// RTCRtpHeaderExtension.
	SDPUtils.writeExtmap = function(headerExtension) {
	  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
	       ' ' + headerExtension.uri + '\r\n';
	};
	
	// Parses an ftmp line, returns dictionary. Sample input:
	// a=fmtp:96 vbr=on;cng=on
	// Also deals with vbr=on; cng=on
	SDPUtils.parseFmtp = function(line) {
	  var parsed = {};
	  var kv;
	  var parts = line.substr(line.indexOf(' ') + 1).split(';');
	  for (var j = 0; j < parts.length; j++) {
	    kv = parts[j].trim().split('=');
	    parsed[kv[0].trim()] = kv[1];
	  }
	  return parsed;
	};
	
	// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
	SDPUtils.writeFmtp = function(codec) {
	  var line = '';
	  var pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  if (codec.parameters && Object.keys(codec.parameters).length) {
	    var params = [];
	    Object.keys(codec.parameters).forEach(function(param) {
	      params.push(param + '=' + codec.parameters[param]);
	    });
	    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
	  }
	  return line;
	};
	
	// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
	// a=rtcp-fb:98 nack rpsi
	SDPUtils.parseRtcpFb = function(line) {
	  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
	  return {
	    type: parts.shift(),
	    parameter: parts.join(' ')
	  };
	};
	// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
	SDPUtils.writeRtcpFb = function(codec) {
	  var lines = '';
	  var pt = codec.payloadType;
	  if (codec.preferredPayloadType !== undefined) {
	    pt = codec.preferredPayloadType;
	  }
	  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
	    // FIXME: special handling for trr-int?
	    codec.rtcpFeedback.forEach(function(fb) {
	      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
	      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
	          '\r\n';
	    });
	  }
	  return lines;
	};
	
	// Parses an RFC 5576 ssrc media attribute. Sample input:
	// a=ssrc:3735928559 cname:something
	SDPUtils.parseSsrcMedia = function(line) {
	  var sp = line.indexOf(' ');
	  var parts = {
	    ssrc: parseInt(line.substr(7, sp - 7), 10)
	  };
	  var colon = line.indexOf(':', sp);
	  if (colon > -1) {
	    parts.attribute = line.substr(sp + 1, colon - sp - 1);
	    parts.value = line.substr(colon + 1);
	  } else {
	    parts.attribute = line.substr(sp + 1);
	  }
	  return parts;
	};
	
	// Extracts DTLS parameters from SDP media section or sessionpart.
	// FIXME: for consistency with other functions this should only
	//   get the fingerprint line as input. See also getIceParameters.
	SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
	  var lines = SDPUtils.splitLines(mediaSection);
	  // Search in session part, too.
	  lines = lines.concat(SDPUtils.splitLines(sessionpart));
	  var fpLine = lines.filter(function(line) {
	    return line.indexOf('a=fingerprint:') === 0;
	  })[0].substr(14);
	  // Note: a=setup line is ignored since we use the 'auto' role.
	  var dtlsParameters = {
	    role: 'auto',
	    fingerprints: [{
	      algorithm: fpLine.split(' ')[0],
	      value: fpLine.split(' ')[1]
	    }]
	  };
	  return dtlsParameters;
	};
	
	// Serializes DTLS parameters to SDP.
	SDPUtils.writeDtlsParameters = function(params, setupType) {
	  var sdp = 'a=setup:' + setupType + '\r\n';
	  params.fingerprints.forEach(function(fp) {
	    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
	  });
	  return sdp;
	};
	// Parses ICE information from SDP media section or sessionpart.
	// FIXME: for consistency with other functions this should only
	//   get the ice-ufrag and ice-pwd lines as input.
	SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
	  var lines = SDPUtils.splitLines(mediaSection);
	  // Search in session part, too.
	  lines = lines.concat(SDPUtils.splitLines(sessionpart));
	  var iceParameters = {
	    usernameFragment: lines.filter(function(line) {
	      return line.indexOf('a=ice-ufrag:') === 0;
	    })[0].substr(12),
	    password: lines.filter(function(line) {
	      return line.indexOf('a=ice-pwd:') === 0;
	    })[0].substr(10)
	  };
	  return iceParameters;
	};
	
	// Serializes ICE parameters to SDP.
	SDPUtils.writeIceParameters = function(params) {
	  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
	      'a=ice-pwd:' + params.password + '\r\n';
	};
	
	// Parses the SDP media section and returns RTCRtpParameters.
	SDPUtils.parseRtpParameters = function(mediaSection) {
	  var description = {
	    codecs: [],
	    headerExtensions: [],
	    fecMechanisms: [],
	    rtcp: []
	  };
	  var lines = SDPUtils.splitLines(mediaSection);
	  var mline = lines[0].split(' ');
	  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
	    var pt = mline[i];
	    var rtpmapline = SDPUtils.matchPrefix(
	        mediaSection, 'a=rtpmap:' + pt + ' ')[0];
	    if (rtpmapline) {
	      var codec = SDPUtils.parseRtpMap(rtpmapline);
	      var fmtps = SDPUtils.matchPrefix(
	          mediaSection, 'a=fmtp:' + pt + ' ');
	      // Only the first a=fmtp:<pt> is considered.
	      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
	      codec.rtcpFeedback = SDPUtils.matchPrefix(
	          mediaSection, 'a=rtcp-fb:' + pt + ' ')
	        .map(SDPUtils.parseRtcpFb);
	      description.codecs.push(codec);
	      // parse FEC mechanisms from rtpmap lines.
	      switch (codec.name.toUpperCase()) {
	        case 'RED':
	        case 'ULPFEC':
	          description.fecMechanisms.push(codec.name.toUpperCase());
	          break;
	        default: // only RED and ULPFEC are recognized as FEC mechanisms.
	          break;
	      }
	    }
	  }
	  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
	    description.headerExtensions.push(SDPUtils.parseExtmap(line));
	  });
	  // FIXME: parse rtcp.
	  return description;
	};
	
	// Generates parts of the SDP media section describing the capabilities /
	// parameters.
	SDPUtils.writeRtpDescription = function(kind, caps) {
	  var sdp = '';
	
	  // Build the mline.
	  sdp += 'm=' + kind + ' ';
	  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
	  sdp += ' UDP/TLS/RTP/SAVPF ';
	  sdp += caps.codecs.map(function(codec) {
	    if (codec.preferredPayloadType !== undefined) {
	      return codec.preferredPayloadType;
	    }
	    return codec.payloadType;
	  }).join(' ') + '\r\n';
	
	  sdp += 'c=IN IP4 0.0.0.0\r\n';
	  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';
	
	  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
	  caps.codecs.forEach(function(codec) {
	    sdp += SDPUtils.writeRtpMap(codec);
	    sdp += SDPUtils.writeFmtp(codec);
	    sdp += SDPUtils.writeRtcpFb(codec);
	  });
	  var maxptime = 0;
	  caps.codecs.forEach(function(codec) {
	    if (codec.maxptime > maxptime) {
	      maxptime = codec.maxptime;
	    }
	  });
	  if (maxptime > 0) {
	    sdp += 'a=maxptime:' + maxptime + '\r\n';
	  }
	  sdp += 'a=rtcp-mux\r\n';
	
	  caps.headerExtensions.forEach(function(extension) {
	    sdp += SDPUtils.writeExtmap(extension);
	  });
	  // FIXME: write fecMechanisms.
	  return sdp;
	};
	
	// Parses the SDP media section and returns an array of
	// RTCRtpEncodingParameters.
	SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
	  var encodingParameters = [];
	  var description = SDPUtils.parseRtpParameters(mediaSection);
	  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
	  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;
	
	  // filter a=ssrc:... cname:, ignore PlanB-msid
	  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	  .map(function(line) {
	    return SDPUtils.parseSsrcMedia(line);
	  })
	  .filter(function(parts) {
	    return parts.attribute === 'cname';
	  });
	  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
	  var secondarySsrc;
	
	  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
	  .map(function(line) {
	    var parts = line.split(' ');
	    parts.shift();
	    return parts.map(function(part) {
	      return parseInt(part, 10);
	    });
	  });
	  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
	    secondarySsrc = flows[0][1];
	  }
	
	  description.codecs.forEach(function(codec) {
	    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
	      var encParam = {
	        ssrc: primarySsrc,
	        codecPayloadType: parseInt(codec.parameters.apt, 10),
	        rtx: {
	          ssrc: secondarySsrc
	        }
	      };
	      encodingParameters.push(encParam);
	      if (hasRed) {
	        encParam = JSON.parse(JSON.stringify(encParam));
	        encParam.fec = {
	          ssrc: secondarySsrc,
	          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
	        };
	        encodingParameters.push(encParam);
	      }
	    }
	  });
	  if (encodingParameters.length === 0 && primarySsrc) {
	    encodingParameters.push({
	      ssrc: primarySsrc
	    });
	  }
	
	  // we support both b=AS and b=TIAS but interpret AS as TIAS.
	  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
	  if (bandwidth.length) {
	    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
	      bandwidth = parseInt(bandwidth[0].substr(7), 10);
	    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
	      bandwidth = parseInt(bandwidth[0].substr(5), 10);
	    }
	    encodingParameters.forEach(function(params) {
	      params.maxBitrate = bandwidth;
	    });
	  }
	  return encodingParameters;
	};
	
	// parses either a=msid: or a=ssrc:... msid lines an returns
	// the id of the MediaStream and MediaStreamTrack.
	SDPUtils.parseMsid = function(mediaSection) {
	  var parts;
	  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
	  if (spec.length === 1) {
	    parts = spec[0].substr(7).split(' ');
	    return {stream: parts[0], track: parts[1]};
	  }
	  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	  .map(function(line) {
	    return SDPUtils.parseSsrcMedia(line);
	  })
	  .filter(function(parts) {
	    return parts.attribute === 'msid';
	  });
	  if (planB.length > 0) {
	    parts = planB[0].value.split(' ');
	    return {stream: parts[0], track: parts[1]};
	  }
	};
	
	SDPUtils.writeSessionBoilerplate = function() {
	  // FIXME: sess-id should be an NTP timestamp.
	  return 'v=0\r\n' +
	      'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n' +
	      's=-\r\n' +
	      't=0 0\r\n';
	};
	
	SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
	  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);
	
	  // Map ICE parameters (ufrag, pwd) to SDP.
	  sdp += SDPUtils.writeIceParameters(
	      transceiver.iceGatherer.getLocalParameters());
	
	  // Map DTLS parameters to SDP.
	  sdp += SDPUtils.writeDtlsParameters(
	      transceiver.dtlsTransport.getLocalParameters(),
	      type === 'offer' ? 'actpass' : 'active');
	
	  sdp += 'a=mid:' + transceiver.mid + '\r\n';
	
	  if (transceiver.rtpSender && transceiver.rtpReceiver) {
	    sdp += 'a=sendrecv\r\n';
	  } else if (transceiver.rtpSender) {
	    sdp += 'a=sendonly\r\n';
	  } else if (transceiver.rtpReceiver) {
	    sdp += 'a=recvonly\r\n';
	  } else {
	    sdp += 'a=inactive\r\n';
	  }
	
	  if (transceiver.rtpSender) {
	    // spec.
	    var msid = 'msid:' + stream.id + ' ' +
	        transceiver.rtpSender.track.id + '\r\n';
	    sdp += 'a=' + msid;
	
	    // for Chrome.
	    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
	        ' ' + msid;
	    if (transceiver.sendEncodingParameters[0].rtx) {
	      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
	          ' ' + msid;
	      sdp += 'a=ssrc-group:FID ' +
	          transceiver.sendEncodingParameters[0].ssrc + ' ' +
	          transceiver.sendEncodingParameters[0].rtx.ssrc +
	          '\r\n';
	    }
	  }
	  // FIXME: this should be written by writeRtpDescription.
	  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
	      ' cname:' + SDPUtils.localCName + '\r\n';
	  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
	    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
	        ' cname:' + SDPUtils.localCName + '\r\n';
	  }
	  return sdp;
	};
	
	// Gets the direction from the mediaSection or the sessionpart.
	SDPUtils.getDirection = function(mediaSection, sessionpart) {
	  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
	  var lines = SDPUtils.splitLines(mediaSection);
	  for (var i = 0; i < lines.length; i++) {
	    switch (lines[i]) {
	      case 'a=sendrecv':
	      case 'a=sendonly':
	      case 'a=recvonly':
	      case 'a=inactive':
	        return lines[i].substr(2);
	      default:
	        // FIXME: What should happen here?
	    }
	  }
	  if (sessionpart) {
	    return SDPUtils.getDirection(sessionpart);
	  }
	  return 'sendrecv';
	};
	
	SDPUtils.getKind = function(mediaSection) {
	  var lines = SDPUtils.splitLines(mediaSection);
	  var mline = lines[0].split(' ');
	  return mline[0].substr(2);
	};
	
	SDPUtils.isRejected = function(mediaSection) {
	  return mediaSection.split(' ', 2)[1] === '0';
	};
	
	// Expose public methods.
	module.exports = SDPUtils;


/***/ },
/* 869 */
/***/ function(module, exports) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	
	// Expose public methods.
	module.exports = function() {
	  var shimError_ = function(e) {
	    return {
	      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
	      message: e.message,
	      constraint: e.constraint,
	      toString: function() {
	        return this.name;
	      }
	    };
	  };
	
	  // getUserMedia error shim.
	  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	      bind(navigator.mediaDevices);
	  navigator.mediaDevices.getUserMedia = function(c) {
	    return origGetUserMedia(c).catch(function(e) {
	      return Promise.reject(shimError_(e));
	    });
	  };
	};


/***/ },
/* 870 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	
	var browserDetails = __webpack_require__(864).browserDetails;
	
	var firefoxShim = {
	  shimOnTrack: function() {
	    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
	        window.RTCPeerConnection.prototype)) {
	      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
	        get: function() {
	          return this._ontrack;
	        },
	        set: function(f) {
	          if (this._ontrack) {
	            this.removeEventListener('track', this._ontrack);
	            this.removeEventListener('addstream', this._ontrackpoly);
	          }
	          this.addEventListener('track', this._ontrack = f);
	          this.addEventListener('addstream', this._ontrackpoly = function(e) {
	            e.stream.getTracks().forEach(function(track) {
	              var event = new Event('track');
	              event.track = track;
	              event.receiver = {track: track};
	              event.streams = [e.stream];
	              this.dispatchEvent(event);
	            }.bind(this));
	          }.bind(this));
	        }
	      });
	    }
	  },
	
	  shimSourceObject: function() {
	    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
	    if (typeof window === 'object') {
	      if (window.HTMLMediaElement &&
	        !('srcObject' in window.HTMLMediaElement.prototype)) {
	        // Shim the srcObject property, once, when HTMLMediaElement is found.
	        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
	          get: function() {
	            return this.mozSrcObject;
	          },
	          set: function(stream) {
	            this.mozSrcObject = stream;
	          }
	        });
	      }
	    }
	  },
	
	  shimPeerConnection: function() {
	    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
	        window.mozRTCPeerConnection)) {
	      return; // probably media.peerconnection.enabled=false in about:config
	    }
	    // The RTCPeerConnection object.
	    if (!window.RTCPeerConnection) {
	      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
	        if (browserDetails.version < 38) {
	          // .urls is not supported in FF < 38.
	          // create RTCIceServers with a single url.
	          if (pcConfig && pcConfig.iceServers) {
	            var newIceServers = [];
	            for (var i = 0; i < pcConfig.iceServers.length; i++) {
	              var server = pcConfig.iceServers[i];
	              if (server.hasOwnProperty('urls')) {
	                for (var j = 0; j < server.urls.length; j++) {
	                  var newServer = {
	                    url: server.urls[j]
	                  };
	                  if (server.urls[j].indexOf('turn') === 0) {
	                    newServer.username = server.username;
	                    newServer.credential = server.credential;
	                  }
	                  newIceServers.push(newServer);
	                }
	              } else {
	                newIceServers.push(pcConfig.iceServers[i]);
	              }
	            }
	            pcConfig.iceServers = newIceServers;
	          }
	        }
	        return new mozRTCPeerConnection(pcConfig, pcConstraints);
	      };
	      window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;
	
	      // wrap static methods. Currently just generateCertificate.
	      if (mozRTCPeerConnection.generateCertificate) {
	        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
	          get: function() {
	            return mozRTCPeerConnection.generateCertificate;
	          }
	        });
	      }
	
	      window.RTCSessionDescription = mozRTCSessionDescription;
	      window.RTCIceCandidate = mozRTCIceCandidate;
	    }
	
	    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
	    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
	        .forEach(function(method) {
	          var nativeMethod = RTCPeerConnection.prototype[method];
	          RTCPeerConnection.prototype[method] = function() {
	            arguments[0] = new ((method === 'addIceCandidate') ?
	                RTCIceCandidate : RTCSessionDescription)(arguments[0]);
	            return nativeMethod.apply(this, arguments);
	          };
	        });
	
	    // support for addIceCandidate(null or undefined)
	    var nativeAddIceCandidate =
	        RTCPeerConnection.prototype.addIceCandidate;
	    RTCPeerConnection.prototype.addIceCandidate = function() {
	      if (!arguments[0]) {
	        if (arguments[1]) {
	          arguments[1].apply(null);
	        }
	        return Promise.resolve();
	      }
	      return nativeAddIceCandidate.apply(this, arguments);
	    };
	
	    if (browserDetails.version < 48) {
	      // shim getStats with maplike support
	      var makeMapStats = function(stats) {
	        var map = new Map();
	        Object.keys(stats).forEach(function(key) {
	          map.set(key, stats[key]);
	          map[key] = stats[key];
	        });
	        return map;
	      };
	
	      var nativeGetStats = RTCPeerConnection.prototype.getStats;
	      RTCPeerConnection.prototype.getStats = function(selector, onSucc, onErr) {
	        return nativeGetStats.apply(this, [selector || null])
	          .then(function(stats) {
	            return makeMapStats(stats);
	          })
	          .then(onSucc, onErr);
	      };
	    }
	  }
	};
	
	// Expose public methods.
	module.exports = {
	  shimOnTrack: firefoxShim.shimOnTrack,
	  shimSourceObject: firefoxShim.shimSourceObject,
	  shimPeerConnection: firefoxShim.shimPeerConnection,
	  shimGetUserMedia: __webpack_require__(871)
	};


/***/ },
/* 871 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	 /* eslint-env node */
	'use strict';
	
	var logging = __webpack_require__(864).log;
	var browserDetails = __webpack_require__(864).browserDetails;
	
	// Expose public methods.
	module.exports = function() {
	  var shimError_ = function(e) {
	    return {
	      name: {
	        SecurityError: 'NotAllowedError',
	        PermissionDeniedError: 'NotAllowedError'
	      }[e.name] || e.name,
	      message: {
	        'The operation is insecure.': 'The request is not allowed by the ' +
	        'user agent or the platform in the current context.'
	      }[e.message] || e.message,
	      constraint: e.constraint,
	      toString: function() {
	        return this.name + (this.message && ': ') + this.message;
	      }
	    };
	  };
	
	  // getUserMedia constraints shim.
	  var getUserMedia_ = function(constraints, onSuccess, onError) {
	    var constraintsToFF37_ = function(c) {
	      if (typeof c !== 'object' || c.require) {
	        return c;
	      }
	      var require = [];
	      Object.keys(c).forEach(function(key) {
	        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
	          return;
	        }
	        var r = c[key] = (typeof c[key] === 'object') ?
	            c[key] : {ideal: c[key]};
	        if (r.min !== undefined ||
	            r.max !== undefined || r.exact !== undefined) {
	          require.push(key);
	        }
	        if (r.exact !== undefined) {
	          if (typeof r.exact === 'number') {
	            r. min = r.max = r.exact;
	          } else {
	            c[key] = r.exact;
	          }
	          delete r.exact;
	        }
	        if (r.ideal !== undefined) {
	          c.advanced = c.advanced || [];
	          var oc = {};
	          if (typeof r.ideal === 'number') {
	            oc[key] = {min: r.ideal, max: r.ideal};
	          } else {
	            oc[key] = r.ideal;
	          }
	          c.advanced.push(oc);
	          delete r.ideal;
	          if (!Object.keys(r).length) {
	            delete c[key];
	          }
	        }
	      });
	      if (require.length) {
	        c.require = require;
	      }
	      return c;
	    };
	    constraints = JSON.parse(JSON.stringify(constraints));
	    if (browserDetails.version < 38) {
	      logging('spec: ' + JSON.stringify(constraints));
	      if (constraints.audio) {
	        constraints.audio = constraintsToFF37_(constraints.audio);
	      }
	      if (constraints.video) {
	        constraints.video = constraintsToFF37_(constraints.video);
	      }
	      logging('ff37: ' + JSON.stringify(constraints));
	    }
	    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
	      onError(shimError_(e));
	    });
	  };
	
	  // Returns the result of getUserMedia as a Promise.
	  var getUserMediaPromise_ = function(constraints) {
	    return new Promise(function(resolve, reject) {
	      getUserMedia_(constraints, resolve, reject);
	    });
	  };
	
	  // Shim for mediaDevices on older versions.
	  if (!navigator.mediaDevices) {
	    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
	      addEventListener: function() { },
	      removeEventListener: function() { }
	    };
	  }
	  navigator.mediaDevices.enumerateDevices =
	      navigator.mediaDevices.enumerateDevices || function() {
	        return new Promise(function(resolve) {
	          var infos = [
	            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
	            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
	          ];
	          resolve(infos);
	        });
	      };
	
	  if (browserDetails.version < 41) {
	    // Work around http://bugzil.la/1169665
	    var orgEnumerateDevices =
	        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
	    navigator.mediaDevices.enumerateDevices = function() {
	      return orgEnumerateDevices().then(undefined, function(e) {
	        if (e.name === 'NotFoundError') {
	          return [];
	        }
	        throw e;
	      });
	    };
	  }
	  if (browserDetails.version < 49) {
	    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	        bind(navigator.mediaDevices);
	    navigator.mediaDevices.getUserMedia = function(c) {
	      return origGetUserMedia(c).then(function(stream) {
	        // Work around https://bugzil.la/802326
	        if (c.audio && !stream.getAudioTracks().length ||
	            c.video && !stream.getVideoTracks().length) {
	          stream.getTracks().forEach(function(track) {
	            track.stop();
	          });
	          throw new DOMException('The object can not be found here.',
	                                 'NotFoundError');
	        }
	        return stream;
	      }, function(e) {
	        return Promise.reject(shimError_(e));
	      });
	    };
	  }
	  navigator.getUserMedia = function(constraints, onSuccess, onError) {
	    if (browserDetails.version < 44) {
	      return getUserMedia_(constraints, onSuccess, onError);
	    }
	    // Replace Firefox 44+'s deprecation warning with unprefixed version.
	    console.warn('navigator.getUserMedia has been replaced by ' +
	                 'navigator.mediaDevices.getUserMedia');
	    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
	  };
	};


/***/ },
/* 872 */
/***/ function(module, exports) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */
	'use strict';
	var safariShim = {
	  // TODO: DrAlex, should be here, double check against LayoutTests
	  // shimOnTrack: function() { },
	
	  // TODO: once the back-end for the mac port is done, add.
	  // TODO: check for webkitGTK+
	  // shimPeerConnection: function() { },
	
	  shimGetUserMedia: function() {
	    navigator.getUserMedia = navigator.webkitGetUserMedia;
	  }
	};
	
	// Expose public methods.
	module.exports = {
	  shimGetUserMedia: safariShim.shimGetUserMedia
	  // TODO
	  // shimOnTrack: safariShim.shimOnTrack,
	  // shimPeerConnection: safariShim.shimPeerConnection
	};


/***/ },
/* 873 */,
/* 874 */,
/* 875 */,
/* 876 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	var _reactNativeOrientation = __webpack_require__(877);
	
	var _reactNativeOrientation2 = _interopRequireDefault(_reactNativeOrientation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Responsive: {
	    displayName: 'Responsive',
	    isInFunction: true
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-orient/index.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var orientation = _reactNativeOrientation2.default.getInitialOrientation();
	_reactNativeOrientation2.default.addOrientationListener(function (o) {
	  orientation = normalize(o);
	});
	
	exports.makeResponsive = makeResponsive;
	exports.getOrientation = getOrientation;
	exports.getDimensions = getDimensions;
	
	function makeResponsive(WrappedComponent) {
	  var _class, _temp;
	
	  return _wrapComponent('Responsive')((_temp = _class = function (_Component) {
	    _inherits(Responsive, _Component);
	
	    function Responsive(props) {
	      _classCallCheck(this, Responsive);
	
	      var _this = _possibleConstructorReturn(this, (Responsive.__proto__ || Object.getPrototypeOf(Responsive)).call(this, props));
	
	      _this._updateOrientation = _this._updateOrientation.bind(_this);
	      _this._handleResize = _this._handleResize.bind(_this);
	      _this.state = _extends({ orientation: orientation }, getDimensions(WrappedComponent));
	      return _this;
	    }
	
	    _createClass(Responsive, [{
	      key: 'componentWillMount',
	      value: function componentWillMount() {
	        _reactNativeOrientation2.default.addOrientationListener(this._updateOrientation);
	        if (_reactNative.Platform.OS === 'web') {
	          window.addEventListener('resize', this._handleResize);
	        }
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        _reactNativeOrientation2.default.removeOrientationListener(this._updateOrientation);
	        if (_reactNative.Platform.OS === 'web') {
	          window.removeEventListener('resize', this._handleResize);
	          clearTimeout(this._resizeTimeout);
	        }
	      }
	    }, {
	      key: '_handleResize',
	      value: function _handleResize() {
	        orientation = window.innerWidth > window.innerHeight ? 'LANDSCAPE' : 'PORTRAIT';
	        clearTimeout(this._resizeTimeout);
	        this._resizeTimeout = setTimeout(this._updateOrientation.bind(this, orientation), 100);
	      }
	    }, {
	      key: '_updateOrientation',
	      value: function _updateOrientation(orientation) {
	        if (orientation.toUpperCase() !== 'UNKNOWN') {
	          orientation = normalize(orientation);
	          this.setState(_extends({ orientation: orientation }, getDimensions(WrappedComponent)));
	        }
	      }
	    }, {
	      key: 'shouldComponentUpdate',
	      value: function shouldComponentUpdate(newProps, newState) {
	        for (var p in newProps) {
	          if (newProps[p] !== this.props[p]) return true;
	        }
	
	        for (var p in newState) {
	          if (newState[p] !== this.state[p]) return true;
	        }
	
	        return false;
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        return _react3.default.createElement(WrappedComponent, _extends({}, this.props, this.state));
	      }
	    }]);
	
	    return Responsive;
	  }(_react2.Component), _class.displayName = WrappedComponent.displayName, _temp));
	}
	
	function getDimensions(Component) {
	  var ori = normalize(getOrientation(Component));
	
	  var _Dimensions$get = _reactNative.Dimensions.get('window'),
	      width = _Dimensions$get.width,
	      height = _Dimensions$get.height;
	  // orientation locks may cause orientation and width/height
	  // to mismatch
	  //
	  // if orientation is locked to PORTRAIT/LANDSCAPE (via `static orientation = 'PORTRAIT'`)
	  // width vs height should reflect that
	
	
	  var switchWidthHeight = _reactNative.Platform.OS !== 'web' && (ori === 'PORTRAIT' && width > height || ori === 'LANDSCAPE' && width < height);
	
	  if (switchWidthHeight) {
	    var _ref = [height, width];
	    width = _ref[0];
	    height = _ref[1];
	  }
	
	  return { width: width, height: height };
	}
	
	function getOrientation(Component) {
	  return Component && Component.orientation || orientation;
	}
	
	function normalize(o) {
	  o = o.toUpperCase();
	  // disallow portraitupsidedown
	  if (o === 'PORTRAITUPSIDEDOWN' || o.indexOf('LANDSCAPE') !== -1) {
	    return 'LANDSCAPE';
	  } else {
	    return 'PORTRAIT';
	  }
	}

/***/ },
/* 877 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Orientation = __webpack_require__(300).NativeModules.Orientation;
	var DeviceEventEmitter = __webpack_require__(300).DeviceEventEmitter;
	
	var listeners = {};
	var orientationDidChangeEvent = "orientationDidChange";
	var specificOrientationDidChangeEvent = "specificOrientationDidChange";
	
	var id = 0;
	var META = '__listener_id';
	
	function getKey(listener) {
	  if (!listener.hasOwnProperty(META)) {
	    if (!Object.isExtensible(listener)) {
	      return 'F';
	    }
	    Object.defineProperty(listener, META, {
	      value: 'L' + ++id
	    });
	  }
	  return listener[META];
	};
	
	module.exports = {
	  getOrientation: function getOrientation(cb) {
	    Orientation.getOrientation(function (error, orientation) {
	      cb(error, orientation);
	    });
	  },
	  getSpecificOrientation: function getSpecificOrientation(cb) {
	    Orientation.getSpecificOrientation(function (error, orientation) {
	      cb(error, orientation);
	    });
	  },
	  lockToPortrait: function lockToPortrait() {
	    Orientation.lockToPortrait();
	  },
	  lockToLandscape: function lockToLandscape() {
	    Orientation.lockToLandscape();
	  },
	  lockToLandscapeRight: function lockToLandscapeRight() {
	    Orientation.lockToLandscapeRight();
	  },
	  lockToLandscapeLeft: function lockToLandscapeLeft() {
	    Orientation.lockToLandscapeLeft();
	  },
	  unlockAllOrientations: function unlockAllOrientations() {
	    Orientation.unlockAllOrientations();
	  },
	  addOrientationListener: function addOrientationListener(cb) {
	    var key = getKey(cb);
	    listeners[key] = DeviceEventEmitter.addListener(orientationDidChangeEvent, function (body) {
	      cb(body.orientation);
	    });
	  },
	  removeOrientationListener: function removeOrientationListener(cb) {
	    var key = getKey(cb);
	    if (!listeners[key]) {
	      return;
	    }
	    listeners[key].remove();
	    listeners[key] = null;
	  },
	  addSpecificOrientationListener: function addSpecificOrientationListener(cb) {
	    var key = getKey(cb);
	    listeners[key] = DeviceEventEmitter.addListener(specificOrientationDidChangeEvent, function (body) {
	      cb(body.specificOrientation);
	    });
	  },
	  removeSpecificOrientationListener: function removeSpecificOrientationListener(cb) {
	    var key = getKey(cb);
	    if (!listeners[key]) {
	      return;
	    }
	    listeners[key].remove();
	    listeners[key] = null;
	  },
	  getInitialOrientation: function getInitialOrientation() {
	    return Orientation.initialOrientation;
	  }
	};

/***/ },
/* 878 */,
/* 879 */,
/* 880 */,
/* 881 */,
/* 882 */,
/* 883 */
/***/ function(module, exports, __webpack_require__) {

	var Reflux = __webpack_require__(884);
	
	Reflux.connect = __webpack_require__(897);
	
	Reflux.connectFilter = __webpack_require__(899);
	
	Reflux.ListenerMixin = __webpack_require__(898);
	
	Reflux.listenTo = __webpack_require__(900);
	
	Reflux.listenToMany = __webpack_require__(901);
	
	module.exports = Reflux;


/***/ },
/* 884 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var Reflux = {
	    version: {
	        "reflux-core": "0.3.0"
	    }
	};
	
	Reflux.ActionMethods = __webpack_require__(885);
	
	Reflux.ListenerMethods = __webpack_require__(886);
	
	Reflux.PublisherMethods = __webpack_require__(895);
	
	Reflux.StoreMethods = __webpack_require__(894);
	
	Reflux.createAction = __webpack_require__(896);
	
	Reflux.createStore = __webpack_require__(890);
	
	var maker = __webpack_require__(889).staticJoinCreator;
	
	Reflux.joinTrailing = Reflux.all = maker("last"); // Reflux.all alias for backward compatibility
	
	Reflux.joinLeading = maker("first");
	
	Reflux.joinStrict = maker("strict");
	
	Reflux.joinConcat = maker("all");
	
	var _ = Reflux.utils = __webpack_require__(887);
	
	Reflux.EventEmitter = _.EventEmitter;
	
	Reflux.Promise = _.Promise;
	
	/**
	 * Convenience function for creating a set of actions
	 *
	 * @param definitions the definitions for the actions to be created
	 * @returns an object with actions of corresponding action names
	 */
	Reflux.createActions = (function () {
	    var reducer = function reducer(definitions, actions) {
	        Object.keys(definitions).forEach(function (actionName) {
	            var val = definitions[actionName];
	            actions[actionName] = Reflux.createAction(val);
	        });
	    };
	
	    return function (definitions) {
	        var actions = {};
	        if (definitions instanceof Array) {
	            definitions.forEach(function (val) {
	                if (_.isObject(val)) {
	                    reducer(val, actions);
	                } else {
	                    actions[val] = Reflux.createAction(val);
	                }
	            });
	        } else {
	            reducer(definitions, actions);
	        }
	        return actions;
	    };
	})();
	
	/**
	 * Sets the eventmitter that Reflux uses
	 */
	Reflux.setEventEmitter = function (ctx) {
	    Reflux.EventEmitter = _.EventEmitter = ctx;
	};
	
	/**
	 * Sets the method used for deferring actions and stores
	 */
	Reflux.nextTick = function (nextTick) {
	    _.nextTick = nextTick;
	};
	
	Reflux.use = function (pluginCb) {
	    pluginCb(Reflux);
	};
	
	/**
	 * Provides the set of created actions and stores for introspection
	 */
	/*eslint-disable no-underscore-dangle*/
	Reflux.__keep = __webpack_require__(891);
	/*eslint-enable no-underscore-dangle*/
	
	/**
	 * Warn if Function.prototype.bind not available
	 */
	if (!Function.prototype.bind) {
	    console.error("Function.prototype.bind not available. " + "ES5 shim required. " + "https://github.com/spoike/refluxjs#es5");
	}
	
	exports["default"] = Reflux;
	module.exports = exports["default"];

/***/ },
/* 885 */
/***/ function(module, exports) {

	/**
	 * A module of methods that you want to include in all actions.
	 * This module is consumed by `createAction`.
	 */
	"use strict";
	
	module.exports = {};

/***/ },
/* 886 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _ = __webpack_require__(887),
	    maker = __webpack_require__(889).instanceJoinCreator;
	
	/**
	 * Extract child listenables from a parent from their
	 * children property and return them in a keyed Object
	 *
	 * @param {Object} listenable The parent listenable
	 */
	var mapChildListenables = function mapChildListenables(listenable) {
	    var i = 0,
	        children = {},
	        childName;
	    for (; i < (listenable.children || []).length; ++i) {
	        childName = listenable.children[i];
	        if (listenable[childName]) {
	            children[childName] = listenable[childName];
	        }
	    }
	    return children;
	};
	
	/**
	 * Make a flat dictionary of all listenables including their
	 * possible children (recursively), concatenating names in camelCase.
	 *
	 * @param {Object} listenables The top-level listenables
	 */
	var flattenListenables = function flattenListenables(listenables) {
	    var flattened = {};
	    for (var key in listenables) {
	        var listenable = listenables[key];
	        var childMap = mapChildListenables(listenable);
	
	        // recursively flatten children
	        var children = flattenListenables(childMap);
	
	        // add the primary listenable and chilren
	        flattened[key] = listenable;
	        for (var childKey in children) {
	            var childListenable = children[childKey];
	            flattened[key + _.capitalize(childKey)] = childListenable;
	        }
	    }
	
	    return flattened;
	};
	
	/**
	 * A module of methods related to listening.
	 */
	module.exports = {
	
	    /**
	     * An internal utility function used by `validateListening`
	     *
	     * @param {Action|Store} listenable The listenable we want to search for
	     * @returns {Boolean} The result of a recursive search among `this.subscriptions`
	     */
	    hasListener: function hasListener(listenable) {
	        var i = 0,
	            j,
	            listener,
	            listenables;
	        for (; i < (this.subscriptions || []).length; ++i) {
	            listenables = [].concat(this.subscriptions[i].listenable);
	            for (j = 0; j < listenables.length; j++) {
	                listener = listenables[j];
	                if (listener === listenable || listener.hasListener && listener.hasListener(listenable)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    },
	
	    /**
	     * A convenience method that listens to all listenables in the given object.
	     *
	     * @param {Object} listenables An object of listenables. Keys will be used as callback method names.
	     */
	    listenToMany: function listenToMany(listenables) {
	        var allListenables = flattenListenables(listenables);
	        for (var key in allListenables) {
	            var cbname = _.callbackName(key),
	                localname = this[cbname] ? cbname : this[key] ? key : undefined;
	            if (localname) {
	                this.listenTo(allListenables[key], localname, this[cbname + "Default"] || this[localname + "Default"] || localname);
	            }
	        }
	    },
	
	    /**
	     * Checks if the current context can listen to the supplied listenable
	     *
	     * @param {Action|Store} listenable An Action or Store that should be
	     *  listened to.
	     * @returns {String|Undefined} An error message, or undefined if there was no problem.
	     */
	    validateListening: function validateListening(listenable) {
	        if (listenable === this) {
	            return "Listener is not able to listen to itself";
	        }
	        if (!_.isFunction(listenable.listen)) {
	            return listenable + " is missing a listen method";
	        }
	        if (listenable.hasListener && listenable.hasListener(this)) {
	            return "Listener cannot listen to this listenable because of circular loop";
	        }
	    },
	
	    /**
	     * Sets up a subscription to the given listenable for the context object
	     *
	     * @param {Action|Store} listenable An Action or Store that should be
	     *  listened to.
	     * @param {Function|String} callback The callback to register as event handler
	     * @param {Function|String} defaultCallback The callback to register as default handler
	     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is the object being listened to
	     */
	    listenTo: function listenTo(listenable, callback, defaultCallback) {
	        var desub,
	            unsubscriber,
	            subscriptionobj,
	            subs = this.subscriptions = this.subscriptions || [];
	        _.throwIf(this.validateListening(listenable));
	        this.fetchInitialState(listenable, defaultCallback);
	        desub = listenable.listen(this[callback] || callback, this);
	        unsubscriber = function () {
	            var index = subs.indexOf(subscriptionobj);
	            _.throwIf(index === -1, "Tried to remove listen already gone from subscriptions list!");
	            subs.splice(index, 1);
	            desub();
	        };
	        subscriptionobj = {
	            stop: unsubscriber,
	            listenable: listenable
	        };
	        subs.push(subscriptionobj);
	        return subscriptionobj;
	    },
	
	    /**
	     * Stops listening to a single listenable
	     *
	     * @param {Action|Store} listenable The action or store we no longer want to listen to
	     * @returns {Boolean} True if a subscription was found and removed, otherwise false.
	     */
	    stopListeningTo: function stopListeningTo(listenable) {
	        var sub,
	            i = 0,
	            subs = this.subscriptions || [];
	        for (; i < subs.length; i++) {
	            sub = subs[i];
	            if (sub.listenable === listenable) {
	                sub.stop();
	                _.throwIf(subs.indexOf(sub) !== -1, "Failed to remove listen from subscriptions list!");
	                return true;
	            }
	        }
	        return false;
	    },
	
	    /**
	     * Stops all subscriptions and empties subscriptions array
	     */
	    stopListeningToAll: function stopListeningToAll() {
	        var remaining,
	            subs = this.subscriptions || [];
	        while (remaining = subs.length) {
	            subs[0].stop();
	            _.throwIf(subs.length !== remaining - 1, "Failed to remove listen from subscriptions list!");
	        }
	    },
	
	    /**
	     * Used in `listenTo`. Fetches initial data from a publisher if it has a `getInitialState` method.
	     * @param {Action|Store} listenable The publisher we want to get initial state from
	     * @param {Function|String} defaultCallback The method to receive the data
	     */
	    fetchInitialState: function fetchInitialState(listenable, defaultCallback) {
	        defaultCallback = defaultCallback && this[defaultCallback] || defaultCallback;
	        var me = this;
	        if (_.isFunction(defaultCallback) && _.isFunction(listenable.getInitialState)) {
	            var data = listenable.getInitialState();
	            if (data && _.isFunction(data.then)) {
	                data.then(function () {
	                    defaultCallback.apply(me, arguments);
	                });
	            } else {
	                defaultCallback.call(this, data);
	            }
	        }
	    },
	
	    /**
	     * The callback will be called once all listenables have triggered at least once.
	     * It will be invoked with the last emission from each listenable.
	     * @param {...Publishers} publishers Publishers that should be tracked.
	     * @param {Function|String} callback The method to call when all publishers have emitted
	     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
	     */
	    joinTrailing: maker("last"),
	
	    /**
	     * The callback will be called once all listenables have triggered at least once.
	     * It will be invoked with the first emission from each listenable.
	     * @param {...Publishers} publishers Publishers that should be tracked.
	     * @param {Function|String} callback The method to call when all publishers have emitted
	     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
	     */
	    joinLeading: maker("first"),
	
	    /**
	     * The callback will be called once all listenables have triggered at least once.
	     * It will be invoked with all emission from each listenable.
	     * @param {...Publishers} publishers Publishers that should be tracked.
	     * @param {Function|String} callback The method to call when all publishers have emitted
	     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
	     */
	    joinConcat: maker("all"),
	
	    /**
	     * The callback will be called once all listenables have triggered.
	     * If a callback triggers twice before that happens, an error is thrown.
	     * @param {...Publishers} publishers Publishers that should be tracked.
	     * @param {Function|String} callback The method to call when all publishers have emitted
	     * @returns {Object} A subscription obj where `stop` is an unsub function and `listenable` is an array of listenables
	     */
	    joinStrict: maker("strict")
	};

/***/ },
/* 887 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.capitalize = capitalize;
	exports.callbackName = callbackName;
	exports.isObject = isObject;
	exports.extend = extend;
	exports.isFunction = isFunction;
	exports.object = object;
	exports.isArguments = isArguments;
	exports.throwIf = throwIf;
	
	function capitalize(string) {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	}
	
	function callbackName(string, prefix) {
	    prefix = prefix || "on";
	    return prefix + exports.capitalize(string);
	}
	
	/*
	 * isObject, extend, isFunction, isArguments are taken from undescore/lodash in
	 * order to remove the dependency
	 */
	
	function isObject(obj) {
	    var type = typeof obj;
	    return type === "function" || type === "object" && !!obj;
	}
	
	function extend(obj) {
	    if (!isObject(obj)) {
	        return obj;
	    }
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	        source = arguments[i];
	        for (prop in source) {
	            if (Object.getOwnPropertyDescriptor && Object.defineProperty) {
	                var propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);
	                Object.defineProperty(obj, prop, propertyDescriptor);
	            } else {
	                obj[prop] = source[prop];
	            }
	        }
	    }
	    return obj;
	}
	
	function isFunction(value) {
	    return typeof value === "function";
	}
	
	exports.EventEmitter = __webpack_require__(888);
	
	exports.nextTick = function (callback) {
	    setTimeout(callback, 0);
	};
	
	function object(keys, vals) {
	    var o = {},
	        i = 0;
	    for (; i < keys.length; i++) {
	        o[keys[i]] = vals[i];
	    }
	    return o;
	}
	
	function isArguments(value) {
	    return typeof value === "object" && "callee" in value && typeof value.length === "number";
	}
	
	function throwIf(val, msg) {
	    if (val) {
	        throw Error(msg || val);
	    }
	}

/***/ },
/* 888 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var has = Object.prototype.hasOwnProperty;
	
	//
	// We store our EE objects in a plain object whose properties are event names.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// `~` to make sure that the built-in object properties are not overridden or
	// used as an attack vector.
	// We also assume that `Object.create(null)` is available when the event name
	// is an ES6 Symbol.
	//
	var prefix = typeof Object.create !== 'function' ? '~' : false;
	
	/**
	 * Representation of a single EventEmitter function.
	 *
	 * @param {Function} fn Event handler to be called.
	 * @param {Mixed} context Context for function execution.
	 * @param {Boolean} [once=false] Only emit once
	 * @api private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}
	
	/**
	 * Minimal EventEmitter interface that is molded against the Node.js
	 * EventEmitter interface.
	 *
	 * @constructor
	 * @api public
	 */
	function EventEmitter() { /* Nothing to set */ }
	
	/**
	 * Hold the assigned EventEmitters by name.
	 *
	 * @type {Object}
	 * @private
	 */
	EventEmitter.prototype._events = undefined;
	
	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @api public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var events = this._events
	    , names = []
	    , name;
	
	  if (!events) return names;
	
	  for (name in events) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }
	
	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }
	
	  return names;
	};
	
	/**
	 * Return a list of assigned event listeners.
	 *
	 * @param {String} event The events that should be listed.
	 * @param {Boolean} exists We only need to know if there are listeners.
	 * @returns {Array|Boolean}
	 * @api public
	 */
	EventEmitter.prototype.listeners = function listeners(event, exists) {
	  var evt = prefix ? prefix + event : event
	    , available = this._events && this._events[evt];
	
	  if (exists) return !!available;
	  if (!available) return [];
	  if (available.fn) return [available.fn];
	
	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
	    ee[i] = available[i].fn;
	  }
	
	  return ee;
	};
	
	/**
	 * Emit an event to all registered event listeners.
	 *
	 * @param {String} event The name of the event.
	 * @returns {Boolean} Indication if we've emitted an event.
	 * @api public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events || !this._events[evt]) return false;
	
	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;
	
	  if ('function' === typeof listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
	
	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }
	
	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }
	
	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;
	
	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
	
	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }
	
	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }
	
	  return true;
	};
	
	/**
	 * Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} [context=this] The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  var listener = new EE(fn, context || this)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }
	
	  return this;
	};
	
	/**
	 * Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} [context=this] The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  var listener = new EE(fn, context || this, true)
	    , evt = prefix ? prefix + event : event;
	
	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }
	
	  return this;
	};
	
	/**
	 * Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {Function} fn The listener that we need to find.
	 * @param {Mixed} context Only remove listeners matching this context.
	 * @param {Boolean} once Only remove once listeners.
	 * @api public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;
	
	  if (!this._events || !this._events[evt]) return this;
	
	  var listeners = this._events[evt]
	    , events = [];
	
	  if (fn) {
	    if (listeners.fn) {
	      if (
	           listeners.fn !== fn
	        || (once && !listeners.once)
	        || (context && listeners.context !== context)
	      ) {
	        events.push(listeners);
	      }
	    } else {
	      for (var i = 0, length = listeners.length; i < length; i++) {
	        if (
	             listeners[i].fn !== fn
	          || (once && !listeners[i].once)
	          || (context && listeners[i].context !== context)
	        ) {
	          events.push(listeners[i]);
	        }
	      }
	    }
	  }
	
	  //
	  // Reset the array, or remove it completely if we have no more listeners.
	  //
	  if (events.length) {
	    this._events[evt] = events.length === 1 ? events[0] : events;
	  } else {
	    delete this._events[evt];
	  }
	
	  return this;
	};
	
	/**
	 * Remove all listeners or only the listeners for the specified event.
	 *
	 * @param {String} event The event want to remove all listeners for.
	 * @api public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  if (!this._events) return this;
	
	  if (event) delete this._events[prefix ? prefix + event : event];
	  else this._events = prefix ? {} : Object.create(null);
	
	  return this;
	};
	
	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;
	
	//
	// This function doesn't apply anymore.
	//
	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
	  return this;
	};
	
	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;
	
	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ },
/* 889 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Internal module used to create static and instance join methods
	 */
	
	"use strict";
	
	var createStore = __webpack_require__(890),
	    _ = __webpack_require__(887);
	
	var slice = Array.prototype.slice,
	    strategyMethodNames = {
	    strict: "joinStrict",
	    first: "joinLeading",
	    last: "joinTrailing",
	    all: "joinConcat"
	};
	
	/**
	 * Used in `index.js` to create the static join methods
	 * @param {String} strategy Which strategy to use when tracking listenable trigger arguments
	 * @returns {Function} A static function which returns a store with a join listen on the given listenables using the given strategy
	 */
	exports.staticJoinCreator = function (strategy) {
	    return function () /* listenables... */{
	        var listenables = slice.call(arguments);
	        return createStore({
	            init: function init() {
	                this[strategyMethodNames[strategy]].apply(this, listenables.concat("triggerAsync"));
	            }
	        });
	    };
	};
	
	/**
	 * Used in `ListenerMethods.js` to create the instance join methods
	 * @param {String} strategy Which strategy to use when tracking listenable trigger arguments
	 * @returns {Function} An instance method which sets up a join listen on the given listenables using the given strategy
	 */
	exports.instanceJoinCreator = function (strategy) {
	    return function () /* listenables..., callback*/{
	        _.throwIf(arguments.length < 2, "Cannot create a join with less than 2 listenables!");
	        var listenables = slice.call(arguments),
	            callback = listenables.pop(),
	            numberOfListenables = listenables.length,
	            join = {
	            numberOfListenables: numberOfListenables,
	            callback: this[callback] || callback,
	            listener: this,
	            strategy: strategy
	        },
	            i,
	            cancels = [],
	            subobj;
	        for (i = 0; i < numberOfListenables; i++) {
	            _.throwIf(this.validateListening(listenables[i]));
	        }
	        for (i = 0; i < numberOfListenables; i++) {
	            cancels.push(listenables[i].listen(newListener(i, join), this));
	        }
	        reset(join);
	        subobj = { listenable: listenables };
	        subobj.stop = makeStopper(subobj, cancels, this);
	        this.subscriptions = (this.subscriptions || []).concat(subobj);
	        return subobj;
	    };
	};
	
	// ---- internal join functions ----
	
	function makeStopper(subobj, cancels, context) {
	    return function () {
	        var i,
	            subs = context.subscriptions,
	            index = subs ? subs.indexOf(subobj) : -1;
	        _.throwIf(index === -1, "Tried to remove join already gone from subscriptions list!");
	        for (i = 0; i < cancels.length; i++) {
	            cancels[i]();
	        }
	        subs.splice(index, 1);
	    };
	}
	
	function reset(join) {
	    join.listenablesEmitted = new Array(join.numberOfListenables);
	    join.args = new Array(join.numberOfListenables);
	}
	
	function newListener(i, join) {
	    return function () {
	        var callargs = slice.call(arguments);
	        if (join.listenablesEmitted[i]) {
	            switch (join.strategy) {
	                case "strict":
	                    throw new Error("Strict join failed because listener triggered twice.");
	                case "last":
	                    join.args[i] = callargs;break;
	                case "all":
	                    join.args[i].push(callargs);
	            }
	        } else {
	            join.listenablesEmitted[i] = true;
	            join.args[i] = join.strategy === "all" ? [callargs] : callargs;
	        }
	        emitIfAllListenablesEmitted(join);
	    };
	}
	
	function emitIfAllListenablesEmitted(join) {
	    for (var i = 0; i < join.numberOfListenables; i++) {
	        if (!join.listenablesEmitted[i]) {
	            return;
	        }
	    }
	    join.callback.apply(join.listener, join.args);
	    reset(join);
	}

/***/ },
/* 890 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _ = __webpack_require__(887),
	    Keep = __webpack_require__(891),
	    mixer = __webpack_require__(892),
	    bindMethods = __webpack_require__(893);
	
	var allowed = { preEmit: 1, shouldEmit: 1 };
	
	/**
	 * Creates an event emitting Data Store. It is mixed in with functions
	 * from the `ListenerMethods` and `PublisherMethods` mixins. `preEmit`
	 * and `shouldEmit` may be overridden in the definition object.
	 *
	 * @param {Object} definition The data store object definition
	 * @returns {Store} A data store instance
	 */
	module.exports = function (definition) {
	
	    var StoreMethods = __webpack_require__(894),
	        PublisherMethods = __webpack_require__(895),
	        ListenerMethods = __webpack_require__(886);
	
	    definition = definition || {};
	
	    for (var a in StoreMethods) {
	        if (!allowed[a] && (PublisherMethods[a] || ListenerMethods[a])) {
	            throw new Error("Cannot override API method " + a + " in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");
	        }
	    }
	
	    for (var d in definition) {
	        if (!allowed[d] && (PublisherMethods[d] || ListenerMethods[d])) {
	            throw new Error("Cannot override API method " + d + " in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");
	        }
	    }
	
	    definition = mixer(definition);
	
	    function Store() {
	        var i = 0,
	            arr;
	        this.subscriptions = [];
	        this.emitter = new _.EventEmitter();
	        this.eventLabel = "change";
	        bindMethods(this, definition);
	        if (this.init && _.isFunction(this.init)) {
	            this.init();
	        }
	        if (this.listenables) {
	            arr = [].concat(this.listenables);
	            for (; i < arr.length; i++) {
	                this.listenToMany(arr[i]);
	            }
	        }
	    }
	
	    _.extend(Store.prototype, ListenerMethods, PublisherMethods, StoreMethods, definition);
	
	    var store = new Store();
	    Keep.createdStores.push(store);
	
	    return store;
	};

/***/ },
/* 891 */
/***/ function(module, exports) {

	"use strict";
	
	exports.createdStores = [];
	
	exports.createdActions = [];
	
	exports.reset = function () {
	    while (exports.createdStores.length) {
	        exports.createdStores.pop();
	    }
	    while (exports.createdActions.length) {
	        exports.createdActions.pop();
	    }
	};

/***/ },
/* 892 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _ = __webpack_require__(887);
	
	module.exports = function mix(def) {
	    var composed = {
	        init: [],
	        preEmit: [],
	        shouldEmit: []
	    };
	
	    var updated = (function mixDef(mixin) {
	        var mixed = {};
	        if (mixin.mixins) {
	            mixin.mixins.forEach(function (subMixin) {
	                _.extend(mixed, mixDef(subMixin));
	            });
	        }
	        _.extend(mixed, mixin);
	        Object.keys(composed).forEach(function (composable) {
	            if (mixin.hasOwnProperty(composable)) {
	                composed[composable].push(mixin[composable]);
	            }
	        });
	        return mixed;
	    })(def);
	
	    if (composed.init.length > 1) {
	        updated.init = function () {
	            var args = arguments;
	            composed.init.forEach(function (init) {
	                init.apply(this, args);
	            }, this);
	        };
	    }
	    if (composed.preEmit.length > 1) {
	        updated.preEmit = function () {
	            return composed.preEmit.reduce((function (args, preEmit) {
	                var newValue = preEmit.apply(this, args);
	                return newValue === undefined ? args : [newValue];
	            }).bind(this), arguments);
	        };
	    }
	    if (composed.shouldEmit.length > 1) {
	        updated.shouldEmit = function () {
	            var args = arguments;
	            return !composed.shouldEmit.some(function (shouldEmit) {
	                return !shouldEmit.apply(this, args);
	            }, this);
	        };
	    }
	    Object.keys(composed).forEach(function (composable) {
	        if (composed[composable].length === 1) {
	            updated[composable] = composed[composable][0];
	        }
	    });
	
	    return updated;
	};

/***/ },
/* 893 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (store, definition) {
	    for (var name in definition) {
	        if (Object.getOwnPropertyDescriptor && Object.defineProperty) {
	            var propertyDescriptor = Object.getOwnPropertyDescriptor(definition, name);
	
	            if (!propertyDescriptor.value || typeof propertyDescriptor.value !== "function" || !definition.hasOwnProperty(name)) {
	                continue;
	            }
	
	            store[name] = definition[name].bind(store);
	        } else {
	            var property = definition[name];
	
	            if (typeof property !== "function" || !definition.hasOwnProperty(name)) {
	                continue;
	            }
	
	            store[name] = property.bind(store);
	        }
	    }
	
	    return store;
	};

/***/ },
/* 894 */
/***/ function(module, exports) {

	/**
	 * A module of methods that you want to include in all stores.
	 * This module is consumed by `createStore`.
	 */
	"use strict";
	
	module.exports = {};

/***/ },
/* 895 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _ = __webpack_require__(887);
	
	/**
	 * A module of methods for object that you want to be able to listen to.
	 * This module is consumed by `createStore` and `createAction`
	 */
	module.exports = {
	
	    /**
	     * Hook used by the publisher that is invoked before emitting
	     * and before `shouldEmit`. The arguments are the ones that the action
	     * is invoked with. If this function returns something other than
	     * undefined, that will be passed on as arguments for shouldEmit and
	     * emission.
	     */
	    preEmit: function preEmit() {},
	
	    /**
	     * Hook used by the publisher after `preEmit` to determine if the
	     * event should be emitted with given arguments. This may be overridden
	     * in your application, default implementation always returns true.
	     *
	     * @returns {Boolean} true if event should be emitted
	     */
	    shouldEmit: function shouldEmit() {
	        return true;
	    },
	
	    /**
	     * Subscribes the given callback for action triggered
	     *
	     * @param {Function} callback The callback to register as event handler
	     * @param {Mixed} [optional] bindContext The context to bind the callback with
	     * @returns {Function} Callback that unsubscribes the registered event handler
	     */
	    listen: function listen(callback, bindContext) {
	        bindContext = bindContext || this;
	        var eventHandler = function eventHandler(args) {
	            if (aborted) {
	                return;
	            }
	            callback.apply(bindContext, args);
	        },
	            me = this,
	            aborted = false;
	        this.emitter.addListener(this.eventLabel, eventHandler);
	        return function () {
	            aborted = true;
	            me.emitter.removeListener(me.eventLabel, eventHandler);
	        };
	    },
	
	    /**
	     * Publishes an event using `this.emitter` (if `shouldEmit` agrees)
	     */
	    trigger: function trigger() {
	        var args = arguments,
	            pre = this.preEmit.apply(this, args);
	        args = pre === undefined ? args : _.isArguments(pre) ? pre : [].concat(pre);
	        if (this.shouldEmit.apply(this, args)) {
	            this.emitter.emit(this.eventLabel, args);
	        }
	    },
	
	    /**
	     * Tries to publish the event on the next tick
	     */
	    triggerAsync: function triggerAsync() {
	        var args = arguments,
	            me = this;
	        _.nextTick(function () {
	            me.trigger.apply(me, args);
	        });
	    },
	
	    /**
	     * Wraps the trigger mechanism with a deferral function.
	     *
	     * @param {Function} callback the deferral function,
	     *        first argument is the resolving function and the
	     *        rest are the arguments provided from the previous
	     *        trigger invocation
	     */
	    deferWith: function deferWith(callback) {
	        var oldTrigger = this.trigger,
	            ctx = this,
	            resolver = function resolver() {
	            oldTrigger.apply(ctx, arguments);
	        };
	        this.trigger = function () {
	            callback.apply(ctx, [resolver].concat([].splice.call(arguments, 0)));
	        };
	    }
	
	};

/***/ },
/* 896 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _ = __webpack_require__(887),
	    ActionMethods = __webpack_require__(885),
	    PublisherMethods = __webpack_require__(895),
	    Keep = __webpack_require__(891);
	
	var allowed = { preEmit: 1, shouldEmit: 1 };
	
	/**
	 * Creates an action functor object. It is mixed in with functions
	 * from the `PublisherMethods` mixin. `preEmit` and `shouldEmit` may
	 * be overridden in the definition object.
	 *
	 * @param {Object} definition The action object definition
	 */
	var createAction = function createAction(definition) {
	
	    definition = definition || {};
	    if (!_.isObject(definition)) {
	        definition = { actionName: definition };
	    }
	
	    for (var a in ActionMethods) {
	        if (!allowed[a] && PublisherMethods[a]) {
	            throw new Error("Cannot override API method " + a + " in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.");
	        }
	    }
	
	    for (var d in definition) {
	        if (!allowed[d] && PublisherMethods[d]) {
	            throw new Error("Cannot override API method " + d + " in action creation. Use another method name or override it on Reflux.PublisherMethods instead.");
	        }
	    }
	
	    definition.children = definition.children || [];
	    if (definition.asyncResult) {
	        definition.children = definition.children.concat(["completed", "failed"]);
	    }
	
	    var i = 0,
	        childActions = {};
	    for (; i < definition.children.length; i++) {
	        var name = definition.children[i];
	        childActions[name] = createAction(name);
	    }
	
	    var context = _.extend({
	        eventLabel: "action",
	        emitter: new _.EventEmitter(),
	        _isAction: true
	    }, PublisherMethods, ActionMethods, definition);
	
	    var functor = function functor() {
	        var triggerType = functor.sync ? "trigger" : "triggerAsync";
	        return functor[triggerType].apply(functor, arguments);
	    };
	
	    _.extend(functor, childActions, context);
	
	    Keep.createdActions.push(functor);
	
	    return functor;
	};
	
	module.exports = createAction;

/***/ },
/* 897 */
/***/ function(module, exports, __webpack_require__) {

	var ListenerMethods = __webpack_require__(886),
	    ListenerMixin = __webpack_require__(898),
	    _ = __webpack_require__(887);
	
	module.exports = function(listenable, key) {
	
	    _.throwIf(typeof(key) === 'undefined', 'Reflux.connect() requires a key.');
	
	    return {
	        getInitialState: function() {
	            if (!_.isFunction(listenable.getInitialState)) {
	                return {};
	            }
	
	            return _.object([key],[listenable.getInitialState()]);
	        },
	        componentDidMount: function() {
	            var me = this;
	
	            _.extend(me, ListenerMethods);
	
	            this.listenTo(listenable, function(v) {
	                me.setState(_.object([key],[v]));
	            });
	        },
	        componentWillUnmount: ListenerMixin.componentWillUnmount
	    };
	};


/***/ },
/* 898 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(887),
	    ListenerMethods = __webpack_require__(886);
	
	/**
	 * A module meant to be consumed as a mixin by a React component. Supplies the methods from
	 * `ListenerMethods` mixin and takes care of teardown of subscriptions.
	 * Note that if you're using the `connect` mixin you don't need this mixin, as connect will
	 * import everything this mixin contains!
	 */
	module.exports = _.extend({
	
	    /**
	     * Cleans up all listener previously registered.
	     */
	    componentWillUnmount: ListenerMethods.stopListeningToAll
	
	}, ListenerMethods);


/***/ },
/* 899 */
/***/ function(module, exports, __webpack_require__) {

	var ListenerMethods = __webpack_require__(886),
	    ListenerMixin = __webpack_require__(898),
	    _ = __webpack_require__(887);
	
	module.exports = function(listenable, key, filterFunc) {
	
	    _.throwIf(_.isFunction(key), 'Reflux.connectFilter() requires a key.');
	
	    return {
	        getInitialState: function() {
	            if (!_.isFunction(listenable.getInitialState)) {
	                return {};
	            }
	
	            // Filter initial payload from store.
	            var result = filterFunc.call(this, listenable.getInitialState());
	            if (typeof(result) !== 'undefined') {
	                return _.object([key], [result]);
	            } else {
	                return {};
	            }
	        },
	        componentDidMount: function() {
	            var me = this;
	
	            _.extend(this, ListenerMethods);
	
	            this.listenTo(listenable, function(value) {
	                var result = filterFunc.call(me, value);
	                me.setState(_.object([key], [result]));
	            });
	        },
	        componentWillUnmount: ListenerMixin.componentWillUnmount
	    };
	};


/***/ },
/* 900 */
/***/ function(module, exports, __webpack_require__) {

	var ListenerMethods = __webpack_require__(886);
	
	/**
	 * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,
	 * without having to manually set listeners in the `componentDidMount` method.
	 *
	 * @param {Action|Store} listenable An Action or Store that should be
	 *  listened to.
	 * @param {Function|String} callback The callback to register as event handler
	 * @param {Function|String} defaultCallback The callback to register as default handler
	 * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.
	 */
	module.exports = function(listenable,callback,initial){
	    return {
	        /**
	         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`
	         * and then make the call to `listenTo` with the arguments provided to the factory function
	         */
	        componentDidMount: function() {
	            for(var m in ListenerMethods){
	                if (this[m] !== ListenerMethods[m]){
	                    if (this[m]){
	                        throw "Can't have other property '"+m+"' when using Reflux.listenTo!";
	                    }
	                    this[m] = ListenerMethods[m];
	                }
	            }
	            this.listenTo(listenable,callback,initial);
	        },
	        /**
	         * Cleans up all listener previously registered.
	         */
	        componentWillUnmount: ListenerMethods.stopListeningToAll
	    };
	};


/***/ },
/* 901 */
/***/ function(module, exports, __webpack_require__) {

	var ListenerMethods = __webpack_require__(886);
	
	/**
	 * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,
	 * without having to manually set listeners in the `componentDidMount` method. This version is used
	 * to automatically set up a `listenToMany` call.
	 *
	 * @param {Object} listenables An object of listenables
	 * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.
	 */
	module.exports = function(listenables){
	    return {
	        /**
	         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`
	         * and then make the call to `listenTo` with the arguments provided to the factory function
	         */
	        componentDidMount: function() {
	            for(var m in ListenerMethods){
	                if (this[m] !== ListenerMethods[m]){
	                    if (this[m]){
	                        throw "Can't have other property '"+m+"' when using Reflux.listenToMany!";
	                    }
	                    this[m] = ListenerMethods[m];
	                }
	            }
	            this.listenToMany(listenables);
	        },
	        /**
	         * Cleans up all listener previously registered.
	         */
	        componentWillUnmount: ListenerMethods.stopListeningToAll
	    };
	};


/***/ },
/* 902 */,
/* 903 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var clone = (function() {
	'use strict';
	
	/**
	 * Clones (copies) an Object using deep copying.
	 *
	 * This function supports circular references by default, but if you are certain
	 * there are no circular references in your object, you can save some CPU time
	 * by calling clone(obj, false).
	 *
	 * Caution: if `circular` is false and `parent` contains circular references,
	 * your program may enter an infinite loop and crash.
	 *
	 * @param `parent` - the object to be cloned
	 * @param `circular` - set to true if the object to be cloned may contain
	 *    circular references. (optional - true by default)
	 * @param `depth` - set to a number if the object is only to be cloned to
	 *    a particular depth. (optional - defaults to Infinity)
	 * @param `prototype` - sets the prototype to be used when cloning an object.
	 *    (optional - defaults to parent prototype).
	*/
	function clone(parent, circular, depth, prototype) {
	  var filter;
	  if (typeof circular === 'object') {
	    depth = circular.depth;
	    prototype = circular.prototype;
	    filter = circular.filter;
	    circular = circular.circular
	  }
	  // maintain two arrays for circular references, where corresponding parents
	  // and children have the same index
	  var allParents = [];
	  var allChildren = [];
	
	  var useBuffer = typeof Buffer != 'undefined';
	
	  if (typeof circular == 'undefined')
	    circular = true;
	
	  if (typeof depth == 'undefined')
	    depth = Infinity;
	
	  // recurse this function so we don't reset allParents and allChildren
	  function _clone(parent, depth) {
	    // cloning null always returns null
	    if (parent === null)
	      return null;
	
	    if (depth == 0)
	      return parent;
	
	    var child;
	    var proto;
	    if (typeof parent != 'object') {
	      return parent;
	    }
	
	    if (clone.__isArray(parent)) {
	      child = [];
	    } else if (clone.__isRegExp(parent)) {
	      child = new RegExp(parent.source, __getRegExpFlags(parent));
	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	    } else if (clone.__isDate(parent)) {
	      child = new Date(parent.getTime());
	    } else if (useBuffer && Buffer.isBuffer(parent)) {
	      child = new Buffer(parent.length);
	      parent.copy(child);
	      return child;
	    } else {
	      if (typeof prototype == 'undefined') {
	        proto = Object.getPrototypeOf(parent);
	        child = Object.create(proto);
	      }
	      else {
	        child = Object.create(prototype);
	        proto = prototype;
	      }
	    }
	
	    if (circular) {
	      var index = allParents.indexOf(parent);
	
	      if (index != -1) {
	        return allChildren[index];
	      }
	      allParents.push(parent);
	      allChildren.push(child);
	    }
	
	    for (var i in parent) {
	      var attrs;
	      if (proto) {
	        attrs = Object.getOwnPropertyDescriptor(proto, i);
	      }
	
	      if (attrs && attrs.set == null) {
	        continue;
	      }
	      child[i] = _clone(parent[i], depth - 1);
	    }
	
	    return child;
	  }
	
	  return _clone(parent, depth);
	}
	
	/**
	 * Simple flat clone using prototype, accepts only objects, usefull for property
	 * override on FLAT configuration object (no nested props).
	 *
	 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
	 * works.
	 */
	clone.clonePrototype = function clonePrototype(parent) {
	  if (parent === null)
	    return null;
	
	  var c = function () {};
	  c.prototype = parent;
	  return new c();
	};
	
	// private utility functions
	
	function __objToStr(o) {
	  return Object.prototype.toString.call(o);
	};
	clone.__objToStr = __objToStr;
	
	function __isDate(o) {
	  return typeof o === 'object' && __objToStr(o) === '[object Date]';
	};
	clone.__isDate = __isDate;
	
	function __isArray(o) {
	  return typeof o === 'object' && __objToStr(o) === '[object Array]';
	};
	clone.__isArray = __isArray;
	
	function __isRegExp(o) {
	  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
	};
	clone.__isRegExp = __isRegExp;
	
	function __getRegExpFlags(re) {
	  var flags = '';
	  if (re.global) flags += 'g';
	  if (re.ignoreCase) flags += 'i';
	  if (re.multiline) flags += 'm';
	  return flags;
	};
	clone.__getRegExpFlags = __getRegExpFlags;
	
	return clone;
	})();
	
	if (typeof module === 'object' && module.exports) {
	  module.exports = clone;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 904 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(905)
	exports.createHash = exports.Hash = __webpack_require__(906)
	exports.createHmac = exports.Hmac = __webpack_require__(919)
	
	var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(__webpack_require__(826)))
	exports.getHashes = function () {
	  return hashes
	}
	
	var p = __webpack_require__(920)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	
	var aes = __webpack_require__(922)
	;[
	  'Cipher',
	  'createCipher',
	  'Cipheriv',
	  'createCipheriv',
	  'Decipher',
	  'createDecipher',
	  'Decipheriv',
	  'createDecipheriv',
	  'getCiphers',
	  'listCiphers'
	].forEach(function (key) {
	  exports[key] = aes[key]
	})
	
	var dh = __webpack_require__(949)
	;[
	  'DiffieHellmanGroup',
	  'createDiffieHellmanGroup',
	  'getDiffieHellman',
	  'createDiffieHellman',
	  'DiffieHellman'
	].forEach(function (key) {
	  exports[key] = dh[key]
	})
	
	var sign = __webpack_require__(958)
	;[
	  'createSign',
	  'Sign',
	  'createVerify',
	  'Verify'
	].forEach(function (key) {
	  exports[key] = sign[key]
	})
	
	exports.createECDH = __webpack_require__(1006)
	
	var publicEncrypt = __webpack_require__(1007)
	
	;[
	  'publicEncrypt',
	  'privateEncrypt',
	  'publicDecrypt',
	  'privateDecrypt'
	].forEach(function (key) {
	  exports[key] = publicEncrypt[key]
	})
	
	// the least I can do is make error messages for the rest of the node.js/crypto api.
	;[
	  'createCredentials'
	].forEach(function (name) {
	  exports[name] = function () {
	    throw new Error([
	      'sorry, ' + name + ' is not implemented yet',
	      'we accept pull requests',
	      'https://github.com/crypto-browserify/crypto-browserify'
	    ].join('\n'))
	  }
	})


/***/ },
/* 905 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer, process) {'use strict'
	
	function oldBrowser () {
	  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
	}
	
	var crypto = global.crypto || global.msCrypto
	
	if (crypto && crypto.getRandomValues) {
	  module.exports = randomBytes
	} else {
	  module.exports = oldBrowser
	}
	
	function randomBytes (size, cb) {
	  // phantomjs needs to throw
	  if (size > 65536) throw new Error('requested too many random bytes')
	  // in case browserify  isn't using the Uint8Array version
	  var rawBytes = new global.Uint8Array(size)
	
	  // This will not work in older browsers.
	  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	  if (size > 0) {  // getRandomValues fails on IE if size == 0
	    crypto.getRandomValues(rawBytes)
	  }
	  // phantomjs doesn't like a buffer being passed here
	  var bytes = new Buffer(rawBytes.buffer)
	
	  if (typeof cb === 'function') {
	    return process.nextTick(function () {
	      cb(null, bytes)
	    })
	  }
	
	  return bytes
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(820).Buffer, __webpack_require__(294)))

/***/ },
/* 906 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	var inherits = __webpack_require__(828)
	var md5 = __webpack_require__(907)
	var rmd160 = __webpack_require__(909)
	var sha = __webpack_require__(910)
	
	var Base = __webpack_require__(918)
	
	function HashNoConstructor(hash) {
	  Base.call(this, 'digest')
	
	  this._hash = hash
	  this.buffers = []
	}
	
	inherits(HashNoConstructor, Base)
	
	HashNoConstructor.prototype._update = function (data) {
	  this.buffers.push(data)
	}
	
	HashNoConstructor.prototype._final = function () {
	  var buf = Buffer.concat(this.buffers)
	  var r = this._hash(buf)
	  this.buffers = null
	
	  return r
	}
	
	function Hash(hash) {
	  Base.call(this, 'digest')
	
	  this._hash = hash
	}
	
	inherits(Hash, Base)
	
	Hash.prototype._update = function (data) {
	  this._hash.update(data)
	}
	
	Hash.prototype._final = function () {
	  return this._hash.digest()
	}
	
	module.exports = function createHash (alg) {
	  alg = alg.toLowerCase()
	  if ('md5' === alg) return new HashNoConstructor(md5)
	  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)
	
	  return new Hash(sha(alg))
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 907 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	
	var helpers = __webpack_require__(908);
	
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;
	
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
	
	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	
	}
	
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
	
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};

/***/ },
/* 908 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	exports.hash = hash;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 909 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// constants table
	var zl = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	]
	
	var zr = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	]
	
	var sl = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	]
	
	var sr = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	]
	
	var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
	var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]
	
	function bytesToWords (bytes) {
	  var words = []
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32)
	  }
	  return words
	}
	
	function wordsToBytes (words) {
	  var bytes = []
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
	  }
	  return bytes
	}
	
	function processBlock (H, M, offset) {
	  // swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i
	    var M_offset_i = M[offset_i]
	
	    // Swap
	    M[offset_i] = (
	      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
	      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
	    )
	  }
	
	  // Working variables
	  var al, bl, cl, dl, el
	  var ar, br, cr, dr, er
	
	  ar = al = H[0]
	  br = bl = H[1]
	  cr = cl = H[2]
	  dr = dl = H[3]
	  er = el = H[4]
	
	  // computation
	  var t
	  for (i = 0; i < 80; i += 1) {
	    t = (al + M[offset + zl[i]]) | 0
	    if (i < 16) {
	      t += f1(bl, cl, dl) + hl[0]
	    } else if (i < 32) {
	      t += f2(bl, cl, dl) + hl[1]
	    } else if (i < 48) {
	      t += f3(bl, cl, dl) + hl[2]
	    } else if (i < 64) {
	      t += f4(bl, cl, dl) + hl[3]
	    } else {// if (i<80) {
	      t += f5(bl, cl, dl) + hl[4]
	    }
	    t = t | 0
	    t = rotl(t, sl[i])
	    t = (t + el) | 0
	    al = el
	    el = dl
	    dl = rotl(cl, 10)
	    cl = bl
	    bl = t
	
	    t = (ar + M[offset + zr[i]]) | 0
	    if (i < 16) {
	      t += f5(br, cr, dr) + hr[0]
	    } else if (i < 32) {
	      t += f4(br, cr, dr) + hr[1]
	    } else if (i < 48) {
	      t += f3(br, cr, dr) + hr[2]
	    } else if (i < 64) {
	      t += f2(br, cr, dr) + hr[3]
	    } else {// if (i<80) {
	      t += f1(br, cr, dr) + hr[4]
	    }
	
	    t = t | 0
	    t = rotl(t, sr[i])
	    t = (t + er) | 0
	    ar = er
	    er = dr
	    dr = rotl(cr, 10)
	    cr = br
	    br = t
	  }
	
	  // intermediate hash value
	  t = (H[1] + cl + dr) | 0
	  H[1] = (H[2] + dl + er) | 0
	  H[2] = (H[3] + el + ar) | 0
	  H[3] = (H[4] + al + br) | 0
	  H[4] = (H[0] + bl + cr) | 0
	  H[0] = t
	}
	
	function f1 (x, y, z) {
	  return ((x) ^ (y) ^ (z))
	}
	
	function f2 (x, y, z) {
	  return (((x) & (y)) | ((~x) & (z)))
	}
	
	function f3 (x, y, z) {
	  return (((x) | (~(y))) ^ (z))
	}
	
	function f4 (x, y, z) {
	  return (((x) & (z)) | ((y) & (~(z))))
	}
	
	function f5 (x, y, z) {
	  return ((x) ^ ((y) | (~(z))))
	}
	
	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}
	
	function ripemd160 (message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]
	
	  if (typeof message === 'string') {
	    message = new Buffer(message, 'utf8')
	  }
	
	  var m = bytesToWords(message)
	
	  var nBitsLeft = message.length * 8
	  var nBitsTotal = message.length * 8
	
	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
	  )
	
	  for (var i = 0; i < m.length; i += 16) {
	    processBlock(H, m, i)
	  }
	
	  // swap endian
	  for (i = 0; i < 5; i++) {
	    // shortcut
	    var H_i = H[i]
	
	    // Swap
	    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
	      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
	  }
	
	  var digestbytes = wordsToBytes(H)
	  return new Buffer(digestbytes)
	}
	
	module.exports = ripemd160
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 910 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function SHA (algorithm) {
	  algorithm = algorithm.toLowerCase()
	
	  var Algorithm = exports[algorithm]
	  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')
	
	  return new Algorithm()
	}
	
	exports.sha = __webpack_require__(911)
	exports.sha1 = __webpack_require__(913)
	exports.sha224 = __webpack_require__(914)
	exports.sha256 = __webpack_require__(915)
	exports.sha384 = __webpack_require__(916)
	exports.sha512 = __webpack_require__(917)


/***/ },
/* 911 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */
	
	var inherits = __webpack_require__(828)
	var Hash = __webpack_require__(912)
	
	var K = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	]
	
	var W = new Array(80)
	
	function Sha () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha, Hash)
	
	Sha.prototype.init = function () {
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0
	
	  return this
	}
	
	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}
	
	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}
	
	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}
	
	Sha.prototype._update = function (M) {
	  var W = this._w
	
	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	
	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]
	
	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20)
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
	
	    e = d
	    d = c
	    c = rotl30(b)
	    b = a
	    a = t
	  }
	
	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	}
	
	Sha.prototype._hash = function () {
	  var H = new Buffer(20)
	
	  H.writeInt32BE(this._a | 0, 0)
	  H.writeInt32BE(this._b | 0, 4)
	  H.writeInt32BE(this._c | 0, 8)
	  H.writeInt32BE(this._d | 0, 12)
	  H.writeInt32BE(this._e | 0, 16)
	
	  return H
	}
	
	module.exports = Sha
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 912 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// prototype class for hash functions
	function Hash (blockSize, finalSize) {
	  this._block = new Buffer(blockSize)
	  this._finalSize = finalSize
	  this._blockSize = blockSize
	  this._len = 0
	  this._s = 0
	}
	
	Hash.prototype.update = function (data, enc) {
	  if (typeof data === 'string') {
	    enc = enc || 'utf8'
	    data = new Buffer(data, enc)
	  }
	
	  var l = this._len += data.length
	  var s = this._s || 0
	  var f = 0
	  var buffer = this._block
	
	  while (s < l) {
	    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	    var ch = (t - f)
	
	    for (var i = 0; i < ch; i++) {
	      buffer[(s % this._blockSize) + i] = data[i + f]
	    }
	
	    s += ch
	    f += ch
	
	    if ((s % this._blockSize) === 0) {
	      this._update(buffer)
	    }
	  }
	  this._s = s
	
	  return this
	}
	
	Hash.prototype.digest = function (enc) {
	  // Suppose the length of the message M, in bits, is l
	  var l = this._len * 8
	
	  // Append the bit 1 to the end of the message
	  this._block[this._len % this._blockSize] = 0x80
	
	  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	  this._block.fill(0, this._len % this._blockSize + 1)
	
	  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	    this._update(this._block)
	    this._block.fill(0)
	  }
	
	  // to this append the block which is equal to the number l written in binary
	  // TODO: handle case where l is > Math.pow(2, 29)
	  this._block.writeInt32BE(l, this._blockSize - 4)
	
	  var hash = this._update(this._block) || this._hash()
	
	  return enc ? hash.toString(enc) : hash
	}
	
	Hash.prototype._update = function () {
	  throw new Error('_update must be implemented by subclass')
	}
	
	module.exports = Hash
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 913 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	
	var inherits = __webpack_require__(828)
	var Hash = __webpack_require__(912)
	
	var K = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	]
	
	var W = new Array(80)
	
	function Sha1 () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha1, Hash)
	
	Sha1.prototype.init = function () {
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0
	
	  return this
	}
	
	function rotl1 (num) {
	  return (num << 1) | (num >>> 31)
	}
	
	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}
	
	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}
	
	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}
	
	Sha1.prototype._update = function (M) {
	  var W = this._w
	
	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	
	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])
	
	  for (var j = 0; j < 80; ++j) {
	    var s = ~~(j / 20)
	    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
	
	    e = d
	    d = c
	    c = rotl30(b)
	    b = a
	    a = t
	  }
	
	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	}
	
	Sha1.prototype._hash = function () {
	  var H = new Buffer(20)
	
	  H.writeInt32BE(this._a | 0, 0)
	  H.writeInt32BE(this._b | 0, 4)
	  H.writeInt32BE(this._c | 0, 8)
	  H.writeInt32BE(this._d | 0, 12)
	  H.writeInt32BE(this._e | 0, 16)
	
	  return H
	}
	
	module.exports = Sha1
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 914 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(828)
	var Sha256 = __webpack_require__(915)
	var Hash = __webpack_require__(912)
	
	var W = new Array(64)
	
	function Sha224 () {
	  this.init()
	
	  this._w = W // new Array(64)
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha224, Sha256)
	
	Sha224.prototype.init = function () {
	  this._a = 0xc1059ed8
	  this._b = 0x367cd507
	  this._c = 0x3070dd17
	  this._d = 0xf70e5939
	  this._e = 0xffc00b31
	  this._f = 0x68581511
	  this._g = 0x64f98fa7
	  this._h = 0xbefa4fa4
	
	  return this
	}
	
	Sha224.prototype._hash = function () {
	  var H = new Buffer(28)
	
	  H.writeInt32BE(this._a, 0)
	  H.writeInt32BE(this._b, 4)
	  H.writeInt32BE(this._c, 8)
	  H.writeInt32BE(this._d, 12)
	  H.writeInt32BE(this._e, 16)
	  H.writeInt32BE(this._f, 20)
	  H.writeInt32BE(this._g, 24)
	
	  return H
	}
	
	module.exports = Sha224
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 915 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(828)
	var Hash = __webpack_require__(912)
	
	var K = [
	  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	]
	
	var W = new Array(64)
	
	function Sha256 () {
	  this.init()
	
	  this._w = W // new Array(64)
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha256, Hash)
	
	Sha256.prototype.init = function () {
	  this._a = 0x6a09e667
	  this._b = 0xbb67ae85
	  this._c = 0x3c6ef372
	  this._d = 0xa54ff53a
	  this._e = 0x510e527f
	  this._f = 0x9b05688c
	  this._g = 0x1f83d9ab
	  this._h = 0x5be0cd19
	
	  return this
	}
	
	function ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}
	
	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}
	
	function sigma0 (x) {
	  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
	}
	
	function sigma1 (x) {
	  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
	}
	
	function gamma0 (x) {
	  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
	}
	
	function gamma1 (x) {
	  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
	}
	
	Sha256.prototype._update = function (M) {
	  var W = this._w
	
	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	  var f = this._f | 0
	  var g = this._g | 0
	  var h = this._h | 0
	
	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0
	
	  for (var j = 0; j < 64; ++j) {
	    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
	    var T2 = (sigma0(a) + maj(a, b, c)) | 0
	
	    h = g
	    g = f
	    f = e
	    e = (d + T1) | 0
	    d = c
	    c = b
	    b = a
	    a = (T1 + T2) | 0
	  }
	
	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	  this._f = (f + this._f) | 0
	  this._g = (g + this._g) | 0
	  this._h = (h + this._h) | 0
	}
	
	Sha256.prototype._hash = function () {
	  var H = new Buffer(32)
	
	  H.writeInt32BE(this._a, 0)
	  H.writeInt32BE(this._b, 4)
	  H.writeInt32BE(this._c, 8)
	  H.writeInt32BE(this._d, 12)
	  H.writeInt32BE(this._e, 16)
	  H.writeInt32BE(this._f, 20)
	  H.writeInt32BE(this._g, 24)
	  H.writeInt32BE(this._h, 28)
	
	  return H
	}
	
	module.exports = Sha256
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 916 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(828)
	var SHA512 = __webpack_require__(917)
	var Hash = __webpack_require__(912)
	
	var W = new Array(160)
	
	function Sha384 () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 128, 112)
	}
	
	inherits(Sha384, SHA512)
	
	Sha384.prototype.init = function () {
	  this._ah = 0xcbbb9d5d
	  this._bh = 0x629a292a
	  this._ch = 0x9159015a
	  this._dh = 0x152fecd8
	  this._eh = 0x67332667
	  this._fh = 0x8eb44a87
	  this._gh = 0xdb0c2e0d
	  this._hh = 0x47b5481d
	
	  this._al = 0xc1059ed8
	  this._bl = 0x367cd507
	  this._cl = 0x3070dd17
	  this._dl = 0xf70e5939
	  this._el = 0xffc00b31
	  this._fl = 0x68581511
	  this._gl = 0x64f98fa7
	  this._hl = 0xbefa4fa4
	
	  return this
	}
	
	Sha384.prototype._hash = function () {
	  var H = new Buffer(48)
	
	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset)
	    H.writeInt32BE(l, offset + 4)
	  }
	
	  writeInt64BE(this._ah, this._al, 0)
	  writeInt64BE(this._bh, this._bl, 8)
	  writeInt64BE(this._ch, this._cl, 16)
	  writeInt64BE(this._dh, this._dl, 24)
	  writeInt64BE(this._eh, this._el, 32)
	  writeInt64BE(this._fh, this._fl, 40)
	
	  return H
	}
	
	module.exports = Sha384
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 917 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(828)
	var Hash = __webpack_require__(912)
	
	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	]
	
	var W = new Array(160)
	
	function Sha512 () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 128, 112)
	}
	
	inherits(Sha512, Hash)
	
	Sha512.prototype.init = function () {
	  this._ah = 0x6a09e667
	  this._bh = 0xbb67ae85
	  this._ch = 0x3c6ef372
	  this._dh = 0xa54ff53a
	  this._eh = 0x510e527f
	  this._fh = 0x9b05688c
	  this._gh = 0x1f83d9ab
	  this._hh = 0x5be0cd19
	
	  this._al = 0xf3bcc908
	  this._bl = 0x84caa73b
	  this._cl = 0xfe94f82b
	  this._dl = 0x5f1d36f1
	  this._el = 0xade682d1
	  this._fl = 0x2b3e6c1f
	  this._gl = 0xfb41bd6b
	  this._hl = 0x137e2179
	
	  return this
	}
	
	function Ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}
	
	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}
	
	function sigma0 (x, xl) {
	  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
	}
	
	function sigma1 (x, xl) {
	  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
	}
	
	function Gamma0 (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
	}
	
	function Gamma0l (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
	}
	
	function Gamma1 (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
	}
	
	function Gamma1l (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
	}
	
	function getCarry (a, b) {
	  return (a >>> 0) < (b >>> 0) ? 1 : 0
	}
	
	Sha512.prototype._update = function (M) {
	  var W = this._w
	
	  var ah = this._ah | 0
	  var bh = this._bh | 0
	  var ch = this._ch | 0
	  var dh = this._dh | 0
	  var eh = this._eh | 0
	  var fh = this._fh | 0
	  var gh = this._gh | 0
	  var hh = this._hh | 0
	
	  var al = this._al | 0
	  var bl = this._bl | 0
	  var cl = this._cl | 0
	  var dl = this._dl | 0
	  var el = this._el | 0
	  var fl = this._fl | 0
	  var gl = this._gl | 0
	  var hl = this._hl | 0
	
	  for (var i = 0; i < 32; i += 2) {
	    W[i] = M.readInt32BE(i * 4)
	    W[i + 1] = M.readInt32BE(i * 4 + 4)
	  }
	  for (; i < 160; i += 2) {
	    var xh = W[i - 15 * 2]
	    var xl = W[i - 15 * 2 + 1]
	    var gamma0 = Gamma0(xh, xl)
	    var gamma0l = Gamma0l(xl, xh)
	
	    xh = W[i - 2 * 2]
	    xl = W[i - 2 * 2 + 1]
	    var gamma1 = Gamma1(xh, xl)
	    var gamma1l = Gamma1l(xl, xh)
	
	    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	    var Wi7h = W[i - 7 * 2]
	    var Wi7l = W[i - 7 * 2 + 1]
	
	    var Wi16h = W[i - 16 * 2]
	    var Wi16l = W[i - 16 * 2 + 1]
	
	    var Wil = (gamma0l + Wi7l) | 0
	    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
	    Wil = (Wil + gamma1l) | 0
	    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
	    Wil = (Wil + Wi16l) | 0
	    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0
	
	    W[i] = Wih
	    W[i + 1] = Wil
	  }
	
	  for (var j = 0; j < 160; j += 2) {
	    Wih = W[j]
	    Wil = W[j + 1]
	
	    var majh = maj(ah, bh, ch)
	    var majl = maj(al, bl, cl)
	
	    var sigma0h = sigma0(ah, al)
	    var sigma0l = sigma0(al, ah)
	    var sigma1h = sigma1(eh, el)
	    var sigma1l = sigma1(el, eh)
	
	    // t1 = h + sigma1 + ch + K[j] + W[j]
	    var Kih = K[j]
	    var Kil = K[j + 1]
	
	    var chh = Ch(eh, fh, gh)
	    var chl = Ch(el, fl, gl)
	
	    var t1l = (hl + sigma1l) | 0
	    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
	    t1l = (t1l + chl) | 0
	    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
	    t1l = (t1l + Kil) | 0
	    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
	    t1l = (t1l + Wil) | 0
	    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0
	
	    // t2 = sigma0 + maj
	    var t2l = (sigma0l + majl) | 0
	    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0
	
	    hh = gh
	    hl = gl
	    gh = fh
	    gl = fl
	    fh = eh
	    fl = el
	    el = (dl + t1l) | 0
	    eh = (dh + t1h + getCarry(el, dl)) | 0
	    dh = ch
	    dl = cl
	    ch = bh
	    cl = bl
	    bh = ah
	    bl = al
	    al = (t1l + t2l) | 0
	    ah = (t1h + t2h + getCarry(al, t1l)) | 0
	  }
	
	  this._al = (this._al + al) | 0
	  this._bl = (this._bl + bl) | 0
	  this._cl = (this._cl + cl) | 0
	  this._dl = (this._dl + dl) | 0
	  this._el = (this._el + el) | 0
	  this._fl = (this._fl + fl) | 0
	  this._gl = (this._gl + gl) | 0
	  this._hl = (this._hl + hl) | 0
	
	  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
	  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
	  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
	  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
	  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
	  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
	  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
	  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
	}
	
	Sha512.prototype._hash = function () {
	  var H = new Buffer(64)
	
	  function writeInt64BE (h, l, offset) {
	    H.writeInt32BE(h, offset)
	    H.writeInt32BE(l, offset + 4)
	  }
	
	  writeInt64BE(this._ah, this._al, 0)
	  writeInt64BE(this._bh, this._bl, 8)
	  writeInt64BE(this._ch, this._cl, 16)
	  writeInt64BE(this._dh, this._dl, 24)
	  writeInt64BE(this._eh, this._el, 32)
	  writeInt64BE(this._fh, this._fl, 40)
	  writeInt64BE(this._gh, this._gl, 48)
	  writeInt64BE(this._hh, this._hl, 56)
	
	  return H
	}
	
	module.exports = Sha512
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 918 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(827).Transform
	var inherits = __webpack_require__(828)
	var StringDecoder = __webpack_require__(836).StringDecoder
	module.exports = CipherBase
	inherits(CipherBase, Transform)
	function CipherBase (hashMode) {
	  Transform.call(this)
	  this.hashMode = typeof hashMode === 'string'
	  if (this.hashMode) {
	    this[hashMode] = this._finalOrDigest
	  } else {
	    this.final = this._finalOrDigest
	  }
	  this._decoder = null
	  this._encoding = null
	}
	CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
	  if (typeof data === 'string') {
	    data = new Buffer(data, inputEnc)
	  }
	  var outData = this._update(data)
	  if (this.hashMode) {
	    return this
	  }
	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc)
	  }
	  return outData
	}
	
	CipherBase.prototype.setAutoPadding = function () {}
	
	CipherBase.prototype.getAuthTag = function () {
	  throw new Error('trying to get auth tag in unsupported state')
	}
	
	CipherBase.prototype.setAuthTag = function () {
	  throw new Error('trying to set auth tag in unsupported state')
	}
	
	CipherBase.prototype.setAAD = function () {
	  throw new Error('trying to set aad in unsupported state')
	}
	
	CipherBase.prototype._transform = function (data, _, next) {
	  var err
	  try {
	    if (this.hashMode) {
	      this._update(data)
	    } else {
	      this.push(this._update(data))
	    }
	  } catch (e) {
	    err = e
	  } finally {
	    next(err)
	  }
	}
	CipherBase.prototype._flush = function (done) {
	  var err
	  try {
	    this.push(this._final())
	  } catch (e) {
	    err = e
	  } finally {
	    done(err)
	  }
	}
	CipherBase.prototype._finalOrDigest = function (outputEnc) {
	  var outData = this._final() || new Buffer('')
	  if (outputEnc) {
	    outData = this._toString(outData, outputEnc, true)
	  }
	  return outData
	}
	
	CipherBase.prototype._toString = function (value, enc, fin) {
	  if (!this._decoder) {
	    this._decoder = new StringDecoder(enc)
	    this._encoding = enc
	  }
	  if (this._encoding !== enc) {
	    throw new Error('can\'t switch encodings')
	  }
	  var out = this._decoder.write(value)
	  if (fin) {
	    out += this._decoder.end()
	  }
	  return out
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 919 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	var createHash = __webpack_require__(906);
	var inherits = __webpack_require__(828)
	
	var Transform = __webpack_require__(827).Transform
	
	var ZEROS = new Buffer(128)
	ZEROS.fill(0)
	
	function Hmac(alg, key) {
	  Transform.call(this)
	  alg = alg.toLowerCase()
	  if (typeof key === 'string') {
	    key = new Buffer(key)
	  }
	
	  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64
	
	  this._alg = alg
	  this._key = key
	
	  if (key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	
	  } else if (key.length < blocksize) {
	    key = Buffer.concat([key, ZEROS], blocksize)
	  }
	
	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)
	
	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	
	  this._hash = createHash(alg).update(ipad)
	}
	
	inherits(Hmac, Transform)
	
	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	
	  return this
	}
	
	Hmac.prototype._transform = function (data, _, next) {
	  this._hash.update(data)
	
	  next()
	}
	
	Hmac.prototype._flush = function (next) {
	  this.push(this.digest())
	
	  next()
	}
	
	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}
	
	module.exports = function createHmac(alg, key) {
	  return new Hmac(alg, key)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 920 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var createHmac = __webpack_require__(919)
	var checkParameters = __webpack_require__(921)
	
	exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
	  if (typeof digest === 'function') {
	    callback = digest
	    digest = undefined
	  }
	
	  checkParameters(iterations, keylen)
	  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
	
	  setTimeout(function () {
	    callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest))
	  })
	}
	
	var defaultEncoding
	if (process.browser) {
	  defaultEncoding = 'utf-8'
	} else {
	  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)
	
	  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
	}
	
	exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
	  if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding)
	  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding)
	
	  checkParameters(iterations, keylen)
	
	  digest = digest || 'sha1'
	
	  var hLen
	  var l = 1
	  var DK = new Buffer(keylen)
	  var block1 = new Buffer(salt.length + 4)
	  salt.copy(block1, 0, 0, salt.length)
	
	  var r
	  var T
	
	  for (var i = 1; i <= l; i++) {
	    block1.writeUInt32BE(i, salt.length)
	    var U = createHmac(digest, password).update(block1).digest()
	
	    if (!hLen) {
	      hLen = U.length
	      T = new Buffer(hLen)
	      l = Math.ceil(keylen / hLen)
	      r = keylen - (l - 1) * hLen
	    }
	
	    U.copy(T, 0, 0, hLen)
	
	    for (var j = 1; j < iterations; j++) {
	      U = createHmac(digest, password).update(U).digest()
	      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
	    }
	
	    var destPos = (i - 1) * hLen
	    var len = (i === l ? r : hLen)
	    T.copy(DK, destPos, 0, len)
	  }
	
	  return DK
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 921 */
/***/ function(module, exports) {

	var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
	module.exports = function (iterations, keylen) {
	  if (typeof iterations !== 'number') {
	    throw new TypeError('Iterations not a number')
	  }
	
	  if (iterations < 0) {
	    throw new TypeError('Bad iterations')
	  }
	
	  if (typeof keylen !== 'number') {
	    throw new TypeError('Key length not a number')
	  }
	
	  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
	    throw new TypeError('Bad key length')
	  }
	}


/***/ },
/* 922 */
/***/ function(module, exports, __webpack_require__) {

	var ebtk = __webpack_require__(923)
	var aes = __webpack_require__(924)
	var DES = __webpack_require__(940)
	var desModes = __webpack_require__(948)
	var aesModes = __webpack_require__(927)
	function createCipher (suite, password) {
	  var keyLen, ivLen
	  suite = suite.toLowerCase()
	  if (aesModes[suite]) {
	    keyLen = aesModes[suite].key
	    ivLen = aesModes[suite].iv
	  } else if (desModes[suite]) {
	    keyLen = desModes[suite].key * 8
	    ivLen = desModes[suite].iv
	  } else {
	    throw new TypeError('invalid suite type')
	  }
	  var keys = ebtk(password, false, keyLen, ivLen)
	  return createCipheriv(suite, keys.key, keys.iv)
	}
	function createDecipher (suite, password) {
	  var keyLen, ivLen
	  suite = suite.toLowerCase()
	  if (aesModes[suite]) {
	    keyLen = aesModes[suite].key
	    ivLen = aesModes[suite].iv
	  } else if (desModes[suite]) {
	    keyLen = desModes[suite].key * 8
	    ivLen = desModes[suite].iv
	  } else {
	    throw new TypeError('invalid suite type')
	  }
	  var keys = ebtk(password, false, keyLen, ivLen)
	  return createDecipheriv(suite, keys.key, keys.iv)
	}
	
	function createCipheriv (suite, key, iv) {
	  suite = suite.toLowerCase()
	  if (aesModes[suite]) {
	    return aes.createCipheriv(suite, key, iv)
	  } else if (desModes[suite]) {
	    return new DES({
	      key: key,
	      iv: iv,
	      mode: suite
	    })
	  } else {
	    throw new TypeError('invalid suite type')
	  }
	}
	function createDecipheriv (suite, key, iv) {
	  suite = suite.toLowerCase()
	  if (aesModes[suite]) {
	    return aes.createDecipheriv(suite, key, iv)
	  } else if (desModes[suite]) {
	    return new DES({
	      key: key,
	      iv: iv,
	      mode: suite,
	      decrypt: true
	    })
	  } else {
	    throw new TypeError('invalid suite type')
	  }
	}
	exports.createCipher = exports.Cipher = createCipher
	exports.createCipheriv = exports.Cipheriv = createCipheriv
	exports.createDecipher = exports.Decipher = createDecipher
	exports.createDecipheriv = exports.Decipheriv = createDecipheriv
	function getCiphers () {
	  return Object.keys(desModes).concat(aes.getCiphers())
	}
	exports.listCiphers = exports.getCiphers = getCiphers


/***/ },
/* 923 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var md5 = __webpack_require__(907)
	module.exports = EVP_BytesToKey
	function EVP_BytesToKey (password, salt, keyLen, ivLen) {
	  if (!Buffer.isBuffer(password)) {
	    password = new Buffer(password, 'binary')
	  }
	  if (salt && !Buffer.isBuffer(salt)) {
	    salt = new Buffer(salt, 'binary')
	  }
	  keyLen = keyLen / 8
	  ivLen = ivLen || 0
	  var ki = 0
	  var ii = 0
	  var key = new Buffer(keyLen)
	  var iv = new Buffer(ivLen)
	  var addmd = 0
	  var md_buf
	  var i
	  var bufs = []
	  while (true) {
	    if (addmd++ > 0) {
	      bufs.push(md_buf)
	    }
	    bufs.push(password)
	    if (salt) {
	      bufs.push(salt)
	    }
	    md_buf = md5(Buffer.concat(bufs))
	    bufs = []
	    i = 0
	    if (keyLen > 0) {
	      while (true) {
	        if (keyLen === 0) {
	          break
	        }
	        if (i === md_buf.length) {
	          break
	        }
	        key[ki++] = md_buf[i]
	        keyLen--
	        i++
	      }
	    }
	    if (ivLen > 0 && i !== md_buf.length) {
	      while (true) {
	        if (ivLen === 0) {
	          break
	        }
	        if (i === md_buf.length) {
	          break
	        }
	        iv[ii++] = md_buf[i]
	        ivLen--
	        i++
	      }
	    }
	    if (keyLen === 0 && ivLen === 0) {
	      break
	    }
	  }
	  for (i = 0; i < md_buf.length; i++) {
	    md_buf[i] = 0
	  }
	  return {
	    key: key,
	    iv: iv
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 924 */
/***/ function(module, exports, __webpack_require__) {

	var ciphers = __webpack_require__(925)
	exports.createCipher = exports.Cipher = ciphers.createCipher
	exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
	var deciphers = __webpack_require__(939)
	exports.createDecipher = exports.Decipher = deciphers.createDecipher
	exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
	var modes = __webpack_require__(927)
	function getCiphers () {
	  return Object.keys(modes)
	}
	exports.listCiphers = exports.getCiphers = getCiphers


/***/ },
/* 925 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(926)
	var Transform = __webpack_require__(918)
	var inherits = __webpack_require__(828)
	var modes = __webpack_require__(927)
	var ebtk = __webpack_require__(923)
	var StreamCipher = __webpack_require__(928)
	var AuthCipher = __webpack_require__(929)
	inherits(Cipher, Transform)
	function Cipher (mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv)
	  }
	  Transform.call(this)
	  this._cache = new Splitter()
	  this._cipher = new aes.AES(key)
	  this._prev = new Buffer(iv.length)
	  iv.copy(this._prev)
	  this._mode = mode
	  this._autopadding = true
	}
	Cipher.prototype._update = function (data) {
	  this._cache.add(data)
	  var chunk
	  var thing
	  var out = []
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk)
	    out.push(thing)
	  }
	  return Buffer.concat(out)
	}
	Cipher.prototype._final = function () {
	  var chunk = this._cache.flush()
	  if (this._autopadding) {
	    chunk = this._mode.encrypt(this, chunk)
	    this._cipher.scrub()
	    return chunk
	  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
	    this._cipher.scrub()
	    throw new Error('data not multiple of block length')
	  }
	}
	Cipher.prototype.setAutoPadding = function (setTo) {
	  this._autopadding = !!setTo
	  return this
	}
	
	function Splitter () {
	  if (!(this instanceof Splitter)) {
	    return new Splitter()
	  }
	  this.cache = new Buffer('')
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data])
	}
	
	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16)
	    this.cache = this.cache.slice(16)
	    return out
	  }
	  return null
	}
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length
	  var padBuff = new Buffer(len)
	
	  var i = -1
	  while (++i < len) {
	    padBuff.writeUInt8(len, i)
	  }
	  var out = Buffer.concat([this.cache, padBuff])
	  return out
	}
	var modelist = {
	  ECB: __webpack_require__(932),
	  CBC: __webpack_require__(933),
	  CFB: __webpack_require__(934),
	  CFB8: __webpack_require__(935),
	  CFB1: __webpack_require__(936),
	  OFB: __webpack_require__(937),
	  CTR: __webpack_require__(938),
	  GCM: __webpack_require__(938)
	}
	
	function createCipheriv (suite, password, iv) {
	  var config = modes[suite.toLowerCase()]
	  if (!config) {
	    throw new TypeError('invalid suite type')
	  }
	  if (typeof iv === 'string') {
	    iv = new Buffer(iv)
	  }
	  if (typeof password === 'string') {
	    password = new Buffer(password)
	  }
	  if (password.length !== config.key / 8) {
	    throw new TypeError('invalid key length ' + password.length)
	  }
	  if (iv.length !== config.iv) {
	    throw new TypeError('invalid iv length ' + iv.length)
	  }
	  if (config.type === 'stream') {
	    return new StreamCipher(modelist[config.mode], password, iv)
	  } else if (config.type === 'auth') {
	    return new AuthCipher(modelist[config.mode], password, iv)
	  }
	  return new Cipher(modelist[config.mode], password, iv)
	}
	function createCipher (suite, password) {
	  var config = modes[suite.toLowerCase()]
	  if (!config) {
	    throw new TypeError('invalid suite type')
	  }
	  var keys = ebtk(password, false, config.key, config.iv)
	  return createCipheriv(suite, keys.key, keys.iv)
	}
	
	exports.createCipheriv = createCipheriv
	exports.createCipher = createCipher
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 926 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// based on the aes implimentation in triple sec
	// https://github.com/keybase/triplesec
	
	// which is in turn based on the one from crypto-js
	// https://code.google.com/p/crypto-js/
	
	var uint_max = Math.pow(2, 32)
	function fixup_uint32 (x) {
	  var ret, x_pos
	  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
	  return ret
	}
	function scrub_vec (v) {
	  for (var i = 0; i < v.length; v++) {
	    v[i] = 0
	  }
	  return false
	}
	
	function Global () {
	  this.SBOX = []
	  this.INV_SBOX = []
	  this.SUB_MIX = [[], [], [], []]
	  this.INV_SUB_MIX = [[], [], [], []]
	  this.init()
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
	}
	
	Global.prototype.init = function () {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i
	  d = (function () {
	    var _i, _results
	    _results = []
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1)
	      } else {
	        _results.push((i << 1) ^ 0x11b)
	      }
	    }
	    return _results
	  })()
	  x = 0
	  xi = 0
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
	    this.SBOX[x] = sx
	    this.INV_SBOX[sx] = x
	    x2 = d[x]
	    x4 = d[x2]
	    x8 = d[x4]
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
	    this.SUB_MIX[3][x] = t
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
	    this.INV_SUB_MIX[3][sx] = t
	    if (x === 0) {
	      x = xi = 1
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]]
	      xi ^= d[d[xi]]
	    }
	  }
	  return true
	}
	
	var G = new Global()
	
	AES.blockSize = 4 * 4
	
	AES.prototype.blockSize = AES.blockSize
	
	AES.keySize = 256 / 8
	
	AES.prototype.keySize = AES.keySize
	
	function bufferToArray (buf) {
	  var len = buf.length / 4
	  var out = new Array(len)
	  var i = -1
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4)
	  }
	  return out
	}
	function AES (key) {
	  this._key = bufferToArray(key)
	  this._doReset()
	}
	
	AES.prototype._doReset = function () {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t
	  keyWords = this._key
	  keySize = keyWords.length
	  this._nRounds = keySize + 6
	  ksRows = (this._nRounds + 1) * 4
	  this._keySchedule = []
	  for (ksRow = 0; ksRow < ksRows; ksRow++) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
	  }
	  this._invKeySchedule = []
	  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	    ksRow = ksRows - invKsRow
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
	  }
	  return true
	}
	
	AES.prototype.encryptBlock = function (M) {
	  M = bufferToArray(new Buffer(M))
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
	  var buf = new Buffer(16)
	  buf.writeUInt32BE(out[0], 0)
	  buf.writeUInt32BE(out[1], 4)
	  buf.writeUInt32BE(out[2], 8)
	  buf.writeUInt32BE(out[3], 12)
	  return buf
	}
	
	AES.prototype.decryptBlock = function (M) {
	  M = bufferToArray(new Buffer(M))
	  var temp = [M[3], M[1]]
	  M[1] = temp[0]
	  M[3] = temp[1]
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
	  var buf = new Buffer(16)
	  buf.writeUInt32BE(out[0], 0)
	  buf.writeUInt32BE(out[3], 4)
	  buf.writeUInt32BE(out[2], 8)
	  buf.writeUInt32BE(out[1], 12)
	  return buf
	}
	
	AES.prototype.scrub = function () {
	  scrub_vec(this._keySchedule)
	  scrub_vec(this._invKeySchedule)
	  scrub_vec(this._key)
	}
	
	AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3
	
	  s0 = M[0] ^ keySchedule[0]
	  s1 = M[1] ^ keySchedule[1]
	  s2 = M[2] ^ keySchedule[2]
	  s3 = M[3] ^ keySchedule[3]
	  ksRow = 4
	  for (var round = 1; round < this._nRounds; round++) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
	    s0 = t0
	    s1 = t1
	    s2 = t2
	    s3 = t3
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ]
	}
	
	exports.AES = AES
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 927 */
/***/ function(module, exports) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	}
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	}
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	}
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	}
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	}
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	}
	exports['aes128'] = exports['aes-128-cbc']
	exports['aes192'] = exports['aes-192-cbc']
	exports['aes256'] = exports['aes-256-cbc']
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	}
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	}
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	}
	exports['aes-128-cfb8'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB8',
	  type: 'stream'
	}
	exports['aes-192-cfb8'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB8',
	  type: 'stream'
	}
	exports['aes-256-cfb8'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB8',
	  type: 'stream'
	}
	exports['aes-128-cfb1'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB1',
	  type: 'stream'
	}
	exports['aes-192-cfb1'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB1',
	  type: 'stream'
	}
	exports['aes-256-cfb1'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB1',
	  type: 'stream'
	}
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	}
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	}
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	}
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	}
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	}
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	}
	exports['aes-128-gcm'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 12,
	  mode: 'GCM',
	  type: 'auth'
	}
	exports['aes-192-gcm'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 12,
	  mode: 'GCM',
	  type: 'auth'
	}
	exports['aes-256-gcm'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 12,
	  mode: 'GCM',
	  type: 'auth'
	}


/***/ },
/* 928 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(926)
	var Transform = __webpack_require__(918)
	var inherits = __webpack_require__(828)
	
	inherits(StreamCipher, Transform)
	module.exports = StreamCipher
	function StreamCipher (mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv)
	  }
	  Transform.call(this)
	  this._cipher = new aes.AES(key)
	  this._prev = new Buffer(iv.length)
	  this._cache = new Buffer('')
	  this._secCache = new Buffer('')
	  this._decrypt = decrypt
	  iv.copy(this._prev)
	  this._mode = mode
	}
	StreamCipher.prototype._update = function (chunk) {
	  return this._mode.encrypt(this, chunk, this._decrypt)
	}
	StreamCipher.prototype._final = function () {
	  this._cipher.scrub()
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 929 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(926)
	var Transform = __webpack_require__(918)
	var inherits = __webpack_require__(828)
	var GHASH = __webpack_require__(930)
	var xor = __webpack_require__(931)
	inherits(StreamCipher, Transform)
	module.exports = StreamCipher
	
	function StreamCipher (mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv)
	  }
	  Transform.call(this)
	  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
	  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
	  this._cipher = new aes.AES(key)
	  this._prev = new Buffer(iv.length)
	  this._cache = new Buffer('')
	  this._secCache = new Buffer('')
	  this._decrypt = decrypt
	  this._alen = 0
	  this._len = 0
	  iv.copy(this._prev)
	  this._mode = mode
	  var h = new Buffer(4)
	  h.fill(0)
	  this._ghash = new GHASH(this._cipher.encryptBlock(h))
	  this._authTag = null
	  this._called = false
	}
	StreamCipher.prototype._update = function (chunk) {
	  if (!this._called && this._alen) {
	    var rump = 16 - (this._alen % 16)
	    if (rump < 16) {
	      rump = new Buffer(rump)
	      rump.fill(0)
	      this._ghash.update(rump)
	    }
	  }
	  this._called = true
	  var out = this._mode.encrypt(this, chunk)
	  if (this._decrypt) {
	    this._ghash.update(chunk)
	  } else {
	    this._ghash.update(out)
	  }
	  this._len += chunk.length
	  return out
	}
	StreamCipher.prototype._final = function () {
	  if (this._decrypt && !this._authTag) {
	    throw new Error('Unsupported state or unable to authenticate data')
	  }
	  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
	  if (this._decrypt) {
	    if (xorTest(tag, this._authTag)) {
	      throw new Error('Unsupported state or unable to authenticate data')
	    }
	  } else {
	    this._authTag = tag
	  }
	  this._cipher.scrub()
	}
	StreamCipher.prototype.getAuthTag = function getAuthTag () {
	  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
	    return this._authTag
	  } else {
	    throw new Error('Attempting to get auth tag in unsupported state')
	  }
	}
	StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
	  if (this._decrypt) {
	    this._authTag = tag
	  } else {
	    throw new Error('Attempting to set auth tag in unsupported state')
	  }
	}
	StreamCipher.prototype.setAAD = function setAAD (buf) {
	  if (!this._called) {
	    this._ghash.update(buf)
	    this._alen += buf.length
	  } else {
	    throw new Error('Attempting to set AAD in unsupported state')
	  }
	}
	function xorTest (a, b) {
	  var out = 0
	  if (a.length !== b.length) {
	    out++
	  }
	  var len = Math.min(a.length, b.length)
	  var i = -1
	  while (++i < len) {
	    out += (a[i] ^ b[i])
	  }
	  return out
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 930 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var zeros = new Buffer(16)
	zeros.fill(0)
	module.exports = GHASH
	function GHASH (key) {
	  this.h = key
	  this.state = new Buffer(16)
	  this.state.fill(0)
	  this.cache = new Buffer('')
	}
	// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
	// by Juho Vähä-Herttua
	GHASH.prototype.ghash = function (block) {
	  var i = -1
	  while (++i < block.length) {
	    this.state[i] ^= block[i]
	  }
	  this._multiply()
	}
	
	GHASH.prototype._multiply = function () {
	  var Vi = toArray(this.h)
	  var Zi = [0, 0, 0, 0]
	  var j, xi, lsb_Vi
	  var i = -1
	  while (++i < 128) {
	    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
	    if (xi) {
	      // Z_i+1 = Z_i ^ V_i
	      Zi = xor(Zi, Vi)
	    }
	
	    // Store the value of LSB(V_i)
	    lsb_Vi = (Vi[3] & 1) !== 0
	
	    // V_i+1 = V_i >> 1
	    for (j = 3; j > 0; j--) {
	      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
	    }
	    Vi[0] = Vi[0] >>> 1
	
	    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
	    if (lsb_Vi) {
	      Vi[0] = Vi[0] ^ (0xe1 << 24)
	    }
	  }
	  this.state = fromArray(Zi)
	}
	GHASH.prototype.update = function (buf) {
	  this.cache = Buffer.concat([this.cache, buf])
	  var chunk
	  while (this.cache.length >= 16) {
	    chunk = this.cache.slice(0, 16)
	    this.cache = this.cache.slice(16)
	    this.ghash(chunk)
	  }
	}
	GHASH.prototype.final = function (abl, bl) {
	  if (this.cache.length) {
	    this.ghash(Buffer.concat([this.cache, zeros], 16))
	  }
	  this.ghash(fromArray([
	    0, abl,
	    0, bl
	  ]))
	  return this.state
	}
	
	function toArray (buf) {
	  return [
	    buf.readUInt32BE(0),
	    buf.readUInt32BE(4),
	    buf.readUInt32BE(8),
	    buf.readUInt32BE(12)
	  ]
	}
	function fromArray (out) {
	  out = out.map(fixup_uint32)
	  var buf = new Buffer(16)
	  buf.writeUInt32BE(out[0], 0)
	  buf.writeUInt32BE(out[1], 4)
	  buf.writeUInt32BE(out[2], 8)
	  buf.writeUInt32BE(out[3], 12)
	  return buf
	}
	var uint_max = Math.pow(2, 32)
	function fixup_uint32 (x) {
	  var ret, x_pos
	  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
	  return ret
	}
	function xor (a, b) {
	  return [
	    a[0] ^ b[0],
	    a[1] ^ b[1],
	    a[2] ^ b[2],
	    a[3] ^ b[3]
	  ]
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor (a, b) {
	  var length = Math.min(a.length, b.length)
	  var buffer = new Buffer(length)
	
	  for (var i = 0; i < length; ++i) {
	    buffer[i] = a[i] ^ b[i]
	  }
	
	  return buffer
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 932 */
/***/ function(module, exports) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block)
	}
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block)
	}


/***/ },
/* 933 */
/***/ function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(931)
	
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev)
	
	  self._prev = self._cipher.encryptBlock(data)
	  return self._prev
	}
	
	exports.decrypt = function (self, block) {
	  var pad = self._prev
	
	  self._prev = block
	  var out = self._cipher.decryptBlock(block)
	
	  return xor(out, pad)
	}


/***/ },
/* 934 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(931)
	
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('')
	  var len
	
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev)
	      self._prev = new Buffer('')
	    }
	
	    if (self._cache.length <= data.length) {
	      len = self._cache.length
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
	      data = data.slice(len)
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
	      break
	    }
	  }
	
	  return out
	}
	function encryptStart (self, data, decrypt) {
	  var len = data.length
	  var out = xor(data, self._cache)
	  self._cache = self._cache.slice(len)
	  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
	  return out
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 935 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
	  var pad = self._cipher.encryptBlock(self._prev)
	  var out = pad[0] ^ byteParam
	  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
	  return out
	}
	exports.encrypt = function (self, chunk, decrypt) {
	  var len = chunk.length
	  var out = new Buffer(len)
	  var i = -1
	  while (++i < len) {
	    out[i] = encryptByte(self, chunk[i], decrypt)
	  }
	  return out
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 936 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {function encryptByte (self, byteParam, decrypt) {
	  var pad
	  var i = -1
	  var len = 8
	  var out = 0
	  var bit, value
	  while (++i < len) {
	    pad = self._cipher.encryptBlock(self._prev)
	    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
	    value = pad[0] ^ bit
	    out += ((value & 0x80) >> (i % 8))
	    self._prev = shiftIn(self._prev, decrypt ? bit : value)
	  }
	  return out
	}
	exports.encrypt = function (self, chunk, decrypt) {
	  var len = chunk.length
	  var out = new Buffer(len)
	  var i = -1
	  while (++i < len) {
	    out[i] = encryptByte(self, chunk[i], decrypt)
	  }
	  return out
	}
	function shiftIn (buffer, value) {
	  var len = buffer.length
	  var i = -1
	  var out = new Buffer(buffer.length)
	  buffer = Buffer.concat([buffer, new Buffer([value])])
	  while (++i < len) {
	    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
	  }
	  return out
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 937 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(931)
	
	function getBlock (self) {
	  self._prev = self._cipher.encryptBlock(self._prev)
	  return self._prev
	}
	
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)])
	  }
	
	  var pad = self._cache.slice(0, chunk.length)
	  self._cache = self._cache.slice(chunk.length)
	  return xor(chunk, pad)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 938 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(931)
	
	function incr32 (iv) {
	  var len = iv.length
	  var item
	  while (len--) {
	    item = iv.readUInt8(len)
	    if (item === 255) {
	      iv.writeUInt8(0, len)
	    } else {
	      item++
	      iv.writeUInt8(item, len)
	      break
	    }
	  }
	}
	
	function getBlock (self) {
	  var out = self._cipher.encryptBlock(self._prev)
	  incr32(self._prev)
	  return out
	}
	
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)])
	  }
	  var pad = self._cache.slice(0, chunk.length)
	  self._cache = self._cache.slice(chunk.length)
	  return xor(chunk, pad)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 939 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(926)
	var Transform = __webpack_require__(918)
	var inherits = __webpack_require__(828)
	var modes = __webpack_require__(927)
	var StreamCipher = __webpack_require__(928)
	var AuthCipher = __webpack_require__(929)
	var ebtk = __webpack_require__(923)
	
	inherits(Decipher, Transform)
	function Decipher (mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv)
	  }
	  Transform.call(this)
	  this._cache = new Splitter()
	  this._last = void 0
	  this._cipher = new aes.AES(key)
	  this._prev = new Buffer(iv.length)
	  iv.copy(this._prev)
	  this._mode = mode
	  this._autopadding = true
	}
	Decipher.prototype._update = function (data) {
	  this._cache.add(data)
	  var chunk
	  var thing
	  var out = []
	  while ((chunk = this._cache.get(this._autopadding))) {
	    thing = this._mode.decrypt(this, chunk)
	    out.push(thing)
	  }
	  return Buffer.concat(out)
	}
	Decipher.prototype._final = function () {
	  var chunk = this._cache.flush()
	  if (this._autopadding) {
	    return unpad(this._mode.decrypt(this, chunk))
	  } else if (chunk) {
	    throw new Error('data not multiple of block length')
	  }
	}
	Decipher.prototype.setAutoPadding = function (setTo) {
	  this._autopadding = !!setTo
	  return this
	}
	function Splitter () {
	  if (!(this instanceof Splitter)) {
	    return new Splitter()
	  }
	  this.cache = new Buffer('')
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data])
	}
	
	Splitter.prototype.get = function (autoPadding) {
	  var out
	  if (autoPadding) {
	    if (this.cache.length > 16) {
	      out = this.cache.slice(0, 16)
	      this.cache = this.cache.slice(16)
	      return out
	    }
	  } else {
	    if (this.cache.length >= 16) {
	      out = this.cache.slice(0, 16)
	      this.cache = this.cache.slice(16)
	      return out
	    }
	  }
	  return null
	}
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache
	  }
	}
	function unpad (last) {
	  var padded = last[15]
	  var i = -1
	  while (++i < padded) {
	    if (last[(i + (16 - padded))] !== padded) {
	      throw new Error('unable to decrypt data')
	    }
	  }
	  if (padded === 16) {
	    return
	  }
	  return last.slice(0, 16 - padded)
	}
	
	var modelist = {
	  ECB: __webpack_require__(932),
	  CBC: __webpack_require__(933),
	  CFB: __webpack_require__(934),
	  CFB8: __webpack_require__(935),
	  CFB1: __webpack_require__(936),
	  OFB: __webpack_require__(937),
	  CTR: __webpack_require__(938),
	  GCM: __webpack_require__(938)
	}
	
	function createDecipheriv (suite, password, iv) {
	  var config = modes[suite.toLowerCase()]
	  if (!config) {
	    throw new TypeError('invalid suite type')
	  }
	  if (typeof iv === 'string') {
	    iv = new Buffer(iv)
	  }
	  if (typeof password === 'string') {
	    password = new Buffer(password)
	  }
	  if (password.length !== config.key / 8) {
	    throw new TypeError('invalid key length ' + password.length)
	  }
	  if (iv.length !== config.iv) {
	    throw new TypeError('invalid iv length ' + iv.length)
	  }
	  if (config.type === 'stream') {
	    return new StreamCipher(modelist[config.mode], password, iv, true)
	  } else if (config.type === 'auth') {
	    return new AuthCipher(modelist[config.mode], password, iv, true)
	  }
	  return new Decipher(modelist[config.mode], password, iv)
	}
	
	function createDecipher (suite, password) {
	  var config = modes[suite.toLowerCase()]
	  if (!config) {
	    throw new TypeError('invalid suite type')
	  }
	  var keys = ebtk(password, false, config.key, config.iv)
	  return createDecipheriv(suite, keys.key, keys.iv)
	}
	exports.createDecipher = createDecipher
	exports.createDecipheriv = createDecipheriv
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 940 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var CipherBase = __webpack_require__(918)
	var des = __webpack_require__(941)
	var inherits = __webpack_require__(828)
	
	var modes = {
	  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
	  'des-ede3': des.EDE,
	  'des-ede-cbc': des.CBC.instantiate(des.EDE),
	  'des-ede': des.EDE,
	  'des-cbc': des.CBC.instantiate(des.DES),
	  'des-ecb': des.DES
	}
	modes.des = modes['des-cbc']
	modes.des3 = modes['des-ede3-cbc']
	module.exports = DES
	inherits(DES, CipherBase)
	function DES (opts) {
	  CipherBase.call(this)
	  var modeName = opts.mode.toLowerCase()
	  var mode = modes[modeName]
	  var type
	  if (opts.decrypt) {
	    type = 'decrypt'
	  } else {
	    type = 'encrypt'
	  }
	  var key = opts.key
	  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
	    key = Buffer.concat([key, key.slice(0, 8)])
	  }
	  var iv = opts.iv
	  this._des = mode.create({
	    key: key,
	    iv: iv,
	    type: type
	  })
	}
	DES.prototype._update = function (data) {
	  return new Buffer(this._des.update(data))
	}
	DES.prototype._final = function () {
	  return new Buffer(this._des.final())
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 941 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.utils = __webpack_require__(942);
	exports.Cipher = __webpack_require__(943);
	exports.DES = __webpack_require__(945);
	exports.CBC = __webpack_require__(946);
	exports.EDE = __webpack_require__(947);


/***/ },
/* 942 */
/***/ function(module, exports) {

	'use strict';
	
	exports.readUInt32BE = function readUInt32BE(bytes, off) {
	  var res =  (bytes[0 + off] << 24) |
	             (bytes[1 + off] << 16) |
	             (bytes[2 + off] << 8) |
	             bytes[3 + off];
	  return res >>> 0;
	};
	
	exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
	  bytes[0 + off] = value >>> 24;
	  bytes[1 + off] = (value >>> 16) & 0xff;
	  bytes[2 + off] = (value >>> 8) & 0xff;
	  bytes[3 + off] = value & 0xff;
	};
	
	exports.ip = function ip(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;
	
	  for (var i = 6; i >= 0; i -= 2) {
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inR >>> (j + i)) & 1;
	    }
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inL >>> (j + i)) & 1;
	    }
	  }
	
	  for (var i = 6; i >= 0; i -= 2) {
	    for (var j = 1; j <= 25; j += 8) {
	      outR <<= 1;
	      outR |= (inR >>> (j + i)) & 1;
	    }
	    for (var j = 1; j <= 25; j += 8) {
	      outR <<= 1;
	      outR |= (inL >>> (j + i)) & 1;
	    }
	  }
	
	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};
	
	exports.rip = function rip(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;
	
	  for (var i = 0; i < 4; i++) {
	    for (var j = 24; j >= 0; j -= 8) {
	      outL <<= 1;
	      outL |= (inR >>> (j + i)) & 1;
	      outL <<= 1;
	      outL |= (inL >>> (j + i)) & 1;
	    }
	  }
	  for (var i = 4; i < 8; i++) {
	    for (var j = 24; j >= 0; j -= 8) {
	      outR <<= 1;
	      outR |= (inR >>> (j + i)) & 1;
	      outR <<= 1;
	      outR |= (inL >>> (j + i)) & 1;
	    }
	  }
	
	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};
	
	exports.pc1 = function pc1(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;
	
	  // 7, 15, 23, 31, 39, 47, 55, 63
	  // 6, 14, 22, 30, 39, 47, 55, 63
	  // 5, 13, 21, 29, 39, 47, 55, 63
	  // 4, 12, 20, 28
	  for (var i = 7; i >= 5; i--) {
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inR >> (j + i)) & 1;
	    }
	    for (var j = 0; j <= 24; j += 8) {
	      outL <<= 1;
	      outL |= (inL >> (j + i)) & 1;
	    }
	  }
	  for (var j = 0; j <= 24; j += 8) {
	    outL <<= 1;
	    outL |= (inR >> (j + i)) & 1;
	  }
	
	  // 1, 9, 17, 25, 33, 41, 49, 57
	  // 2, 10, 18, 26, 34, 42, 50, 58
	  // 3, 11, 19, 27, 35, 43, 51, 59
	  // 36, 44, 52, 60
	  for (var i = 1; i <= 3; i++) {
	    for (var j = 0; j <= 24; j += 8) {
	      outR <<= 1;
	      outR |= (inR >> (j + i)) & 1;
	    }
	    for (var j = 0; j <= 24; j += 8) {
	      outR <<= 1;
	      outR |= (inL >> (j + i)) & 1;
	    }
	  }
	  for (var j = 0; j <= 24; j += 8) {
	    outR <<= 1;
	    outR |= (inL >> (j + i)) & 1;
	  }
	
	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};
	
	exports.r28shl = function r28shl(num, shift) {
	  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
	};
	
	var pc2table = [
	  // inL => outL
	  14, 11, 17, 4, 27, 23, 25, 0,
	  13, 22, 7, 18, 5, 9, 16, 24,
	  2, 20, 12, 21, 1, 8, 15, 26,
	
	  // inR => outR
	  15, 4, 25, 19, 9, 1, 26, 16,
	  5, 11, 23, 8, 12, 7, 17, 0,
	  22, 3, 10, 14, 6, 20, 27, 24
	];
	
	exports.pc2 = function pc2(inL, inR, out, off) {
	  var outL = 0;
	  var outR = 0;
	
	  var len = pc2table.length >>> 1;
	  for (var i = 0; i < len; i++) {
	    outL <<= 1;
	    outL |= (inL >>> pc2table[i]) & 0x1;
	  }
	  for (var i = len; i < pc2table.length; i++) {
	    outR <<= 1;
	    outR |= (inR >>> pc2table[i]) & 0x1;
	  }
	
	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};
	
	exports.expand = function expand(r, out, off) {
	  var outL = 0;
	  var outR = 0;
	
	  outL = ((r & 1) << 5) | (r >>> 27);
	  for (var i = 23; i >= 15; i -= 4) {
	    outL <<= 6;
	    outL |= (r >>> i) & 0x3f;
	  }
	  for (var i = 11; i >= 3; i -= 4) {
	    outR |= (r >>> i) & 0x3f;
	    outR <<= 6;
	  }
	  outR |= ((r & 0x1f) << 1) | (r >>> 31);
	
	  out[off + 0] = outL >>> 0;
	  out[off + 1] = outR >>> 0;
	};
	
	var sTable = [
	  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
	  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
	  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
	  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,
	
	  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
	  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
	  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
	  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,
	
	  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
	  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
	  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
	  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,
	
	  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
	  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
	  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
	  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,
	
	  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
	  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
	  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
	  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,
	
	  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
	  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
	  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
	  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,
	
	  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
	  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
	  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
	  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,
	
	  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
	  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
	  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
	  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
	];
	
	exports.substitute = function substitute(inL, inR) {
	  var out = 0;
	  for (var i = 0; i < 4; i++) {
	    var b = (inL >>> (18 - i * 6)) & 0x3f;
	    var sb = sTable[i * 0x40 + b];
	
	    out <<= 4;
	    out |= sb;
	  }
	  for (var i = 0; i < 4; i++) {
	    var b = (inR >>> (18 - i * 6)) & 0x3f;
	    var sb = sTable[4 * 0x40 + i * 0x40 + b];
	
	    out <<= 4;
	    out |= sb;
	  }
	  return out >>> 0;
	};
	
	var permuteTable = [
	  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
	  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
	];
	
	exports.permute = function permute(num) {
	  var out = 0;
	  for (var i = 0; i < permuteTable.length; i++) {
	    out <<= 1;
	    out |= (num >>> permuteTable[i]) & 0x1;
	  }
	  return out >>> 0;
	};
	
	exports.padSplit = function padSplit(num, size, group) {
	  var str = num.toString(2);
	  while (str.length < size)
	    str = '0' + str;
	
	  var out = [];
	  for (var i = 0; i < size; i += group)
	    out.push(str.slice(i, i + group));
	  return out.join(' ');
	};


/***/ },
/* 943 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(944);
	
	function Cipher(options) {
	  this.options = options;
	
	  this.type = this.options.type;
	  this.blockSize = 8;
	  this._init();
	
	  this.buffer = new Array(this.blockSize);
	  this.bufferOff = 0;
	}
	module.exports = Cipher;
	
	Cipher.prototype._init = function _init() {
	  // Might be overrided
	};
	
	Cipher.prototype.update = function update(data) {
	  if (data.length === 0)
	    return [];
	
	  if (this.type === 'decrypt')
	    return this._updateDecrypt(data);
	  else
	    return this._updateEncrypt(data);
	};
	
	Cipher.prototype._buffer = function _buffer(data, off) {
	  // Append data to buffer
	  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
	  for (var i = 0; i < min; i++)
	    this.buffer[this.bufferOff + i] = data[off + i];
	  this.bufferOff += min;
	
	  // Shift next
	  return min;
	};
	
	Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
	  this._update(this.buffer, 0, out, off);
	  this.bufferOff = 0;
	  return this.blockSize;
	};
	
	Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
	  var inputOff = 0;
	  var outputOff = 0;
	
	  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
	  var out = new Array(count * this.blockSize);
	
	  if (this.bufferOff !== 0) {
	    inputOff += this._buffer(data, inputOff);
	
	    if (this.bufferOff === this.buffer.length)
	      outputOff += this._flushBuffer(out, outputOff);
	  }
	
	  // Write blocks
	  var max = data.length - ((data.length - inputOff) % this.blockSize);
	  for (; inputOff < max; inputOff += this.blockSize) {
	    this._update(data, inputOff, out, outputOff);
	    outputOff += this.blockSize;
	  }
	
	  // Queue rest
	  for (; inputOff < data.length; inputOff++, this.bufferOff++)
	    this.buffer[this.bufferOff] = data[inputOff];
	
	  return out;
	};
	
	Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
	  var inputOff = 0;
	  var outputOff = 0;
	
	  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
	  var out = new Array(count * this.blockSize);
	
	  // TODO(indutny): optimize it, this is far from optimal
	  for (; count > 0; count--) {
	    inputOff += this._buffer(data, inputOff);
	    outputOff += this._flushBuffer(out, outputOff);
	  }
	
	  // Buffer rest of the input
	  inputOff += this._buffer(data, inputOff);
	
	  return out;
	};
	
	Cipher.prototype.final = function final(buffer) {
	  var first;
	  if (buffer)
	    first = this.update(buffer);
	
	  var last;
	  if (this.type === 'encrypt')
	    last = this._finalEncrypt();
	  else
	    last = this._finalDecrypt();
	
	  if (first)
	    return first.concat(last);
	  else
	    return last;
	};
	
	Cipher.prototype._pad = function _pad(buffer, off) {
	  if (off === 0)
	    return false;
	
	  while (off < buffer.length)
	    buffer[off++] = 0;
	
	  return true;
	};
	
	Cipher.prototype._finalEncrypt = function _finalEncrypt() {
	  if (!this._pad(this.buffer, this.bufferOff))
	    return [];
	
	  var out = new Array(this.blockSize);
	  this._update(this.buffer, 0, out, 0);
	  return out;
	};
	
	Cipher.prototype._unpad = function _unpad(buffer) {
	  return buffer;
	};
	
	Cipher.prototype._finalDecrypt = function _finalDecrypt() {
	  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
	  var out = new Array(this.blockSize);
	  this._flushBuffer(out, 0);
	
	  return this._unpad(out);
	};


/***/ },
/* 944 */
/***/ function(module, exports) {

	module.exports = assert;
	
	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}
	
	assert.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};


/***/ },
/* 945 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(944);
	var inherits = __webpack_require__(828);
	
	var des = __webpack_require__(941);
	var utils = des.utils;
	var Cipher = des.Cipher;
	
	function DESState() {
	  this.tmp = new Array(2);
	  this.keys = null;
	}
	
	function DES(options) {
	  Cipher.call(this, options);
	
	  var state = new DESState();
	  this._desState = state;
	
	  this.deriveKeys(state, options.key);
	}
	inherits(DES, Cipher);
	module.exports = DES;
	
	DES.create = function create(options) {
	  return new DES(options);
	};
	
	var shiftTable = [
	  1, 1, 2, 2, 2, 2, 2, 2,
	  1, 2, 2, 2, 2, 2, 2, 1
	];
	
	DES.prototype.deriveKeys = function deriveKeys(state, key) {
	  state.keys = new Array(16 * 2);
	
	  assert.equal(key.length, this.blockSize, 'Invalid key length');
	
	  var kL = utils.readUInt32BE(key, 0);
	  var kR = utils.readUInt32BE(key, 4);
	
	  utils.pc1(kL, kR, state.tmp, 0);
	  kL = state.tmp[0];
	  kR = state.tmp[1];
	  for (var i = 0; i < state.keys.length; i += 2) {
	    var shift = shiftTable[i >>> 1];
	    kL = utils.r28shl(kL, shift);
	    kR = utils.r28shl(kR, shift);
	    utils.pc2(kL, kR, state.keys, i);
	  }
	};
	
	DES.prototype._update = function _update(inp, inOff, out, outOff) {
	  var state = this._desState;
	
	  var l = utils.readUInt32BE(inp, inOff);
	  var r = utils.readUInt32BE(inp, inOff + 4);
	
	  // Initial Permutation
	  utils.ip(l, r, state.tmp, 0);
	  l = state.tmp[0];
	  r = state.tmp[1];
	
	  if (this.type === 'encrypt')
	    this._encrypt(state, l, r, state.tmp, 0);
	  else
	    this._decrypt(state, l, r, state.tmp, 0);
	
	  l = state.tmp[0];
	  r = state.tmp[1];
	
	  utils.writeUInt32BE(out, l, outOff);
	  utils.writeUInt32BE(out, r, outOff + 4);
	};
	
	DES.prototype._pad = function _pad(buffer, off) {
	  var value = buffer.length - off;
	  for (var i = off; i < buffer.length; i++)
	    buffer[i] = value;
	
	  return true;
	};
	
	DES.prototype._unpad = function _unpad(buffer) {
	  var pad = buffer[buffer.length - 1];
	  for (var i = buffer.length - pad; i < buffer.length; i++)
	    assert.equal(buffer[i], pad);
	
	  return buffer.slice(0, buffer.length - pad);
	};
	
	DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
	  var l = lStart;
	  var r = rStart;
	
	  // Apply f() x16 times
	  for (var i = 0; i < state.keys.length; i += 2) {
	    var keyL = state.keys[i];
	    var keyR = state.keys[i + 1];
	
	    // f(r, k)
	    utils.expand(r, state.tmp, 0);
	
	    keyL ^= state.tmp[0];
	    keyR ^= state.tmp[1];
	    var s = utils.substitute(keyL, keyR);
	    var f = utils.permute(s);
	
	    var t = r;
	    r = (l ^ f) >>> 0;
	    l = t;
	  }
	
	  // Reverse Initial Permutation
	  utils.rip(r, l, out, off);
	};
	
	DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
	  var l = rStart;
	  var r = lStart;
	
	  // Apply f() x16 times
	  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
	    var keyL = state.keys[i];
	    var keyR = state.keys[i + 1];
	
	    // f(r, k)
	    utils.expand(l, state.tmp, 0);
	
	    keyL ^= state.tmp[0];
	    keyR ^= state.tmp[1];
	    var s = utils.substitute(keyL, keyR);
	    var f = utils.permute(s);
	
	    var t = l;
	    l = (r ^ f) >>> 0;
	    r = t;
	  }
	
	  // Reverse Initial Permutation
	  utils.rip(l, r, out, off);
	};


/***/ },
/* 946 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(944);
	var inherits = __webpack_require__(828);
	
	var proto = {};
	
	function CBCState(iv) {
	  assert.equal(iv.length, 8, 'Invalid IV length');
	
	  this.iv = new Array(8);
	  for (var i = 0; i < this.iv.length; i++)
	    this.iv[i] = iv[i];
	}
	
	function instantiate(Base) {
	  function CBC(options) {
	    Base.call(this, options);
	    this._cbcInit();
	  }
	  inherits(CBC, Base);
	
	  var keys = Object.keys(proto);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    CBC.prototype[key] = proto[key];
	  }
	
	  CBC.create = function create(options) {
	    return new CBC(options);
	  };
	
	  return CBC;
	}
	
	exports.instantiate = instantiate;
	
	proto._cbcInit = function _cbcInit() {
	  var state = new CBCState(this.options.iv);
	  this._cbcState = state;
	};
	
	proto._update = function _update(inp, inOff, out, outOff) {
	  var state = this._cbcState;
	  var superProto = this.constructor.super_.prototype;
	
	  var iv = state.iv;
	  if (this.type === 'encrypt') {
	    for (var i = 0; i < this.blockSize; i++)
	      iv[i] ^= inp[inOff + i];
	
	    superProto._update.call(this, iv, 0, out, outOff);
	
	    for (var i = 0; i < this.blockSize; i++)
	      iv[i] = out[outOff + i];
	  } else {
	    superProto._update.call(this, inp, inOff, out, outOff);
	
	    for (var i = 0; i < this.blockSize; i++)
	      out[outOff + i] ^= iv[i];
	
	    for (var i = 0; i < this.blockSize; i++)
	      iv[i] = inp[inOff + i];
	  }
	};


/***/ },
/* 947 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(944);
	var inherits = __webpack_require__(828);
	
	var des = __webpack_require__(941);
	var Cipher = des.Cipher;
	var DES = des.DES;
	
	function EDEState(type, key) {
	  assert.equal(key.length, 24, 'Invalid key length');
	
	  var k1 = key.slice(0, 8);
	  var k2 = key.slice(8, 16);
	  var k3 = key.slice(16, 24);
	
	  if (type === 'encrypt') {
	    this.ciphers = [
	      DES.create({ type: 'encrypt', key: k1 }),
	      DES.create({ type: 'decrypt', key: k2 }),
	      DES.create({ type: 'encrypt', key: k3 })
	    ];
	  } else {
	    this.ciphers = [
	      DES.create({ type: 'decrypt', key: k3 }),
	      DES.create({ type: 'encrypt', key: k2 }),
	      DES.create({ type: 'decrypt', key: k1 })
	    ];
	  }
	}
	
	function EDE(options) {
	  Cipher.call(this, options);
	
	  var state = new EDEState(this.type, this.options.key);
	  this._edeState = state;
	}
	inherits(EDE, Cipher);
	
	module.exports = EDE;
	
	EDE.create = function create(options) {
	  return new EDE(options);
	};
	
	EDE.prototype._update = function _update(inp, inOff, out, outOff) {
	  var state = this._edeState;
	
	  state.ciphers[0]._update(inp, inOff, out, outOff);
	  state.ciphers[1]._update(out, outOff, out, outOff);
	  state.ciphers[2]._update(out, outOff, out, outOff);
	};
	
	EDE.prototype._pad = DES.prototype._pad;
	EDE.prototype._unpad = DES.prototype._unpad;


/***/ },
/* 948 */
/***/ function(module, exports) {

	exports['des-ecb'] = {
	  key: 8,
	  iv: 0
	}
	exports['des-cbc'] = exports.des = {
	  key: 8,
	  iv: 8
	}
	exports['des-ede3-cbc'] = exports.des3 = {
	  key: 24,
	  iv: 8
	}
	exports['des-ede3'] = {
	  key: 24,
	  iv: 0
	}
	exports['des-ede-cbc'] = {
	  key: 16,
	  iv: 8
	}
	exports['des-ede'] = {
	  key: 16,
	  iv: 0
	}


/***/ },
/* 949 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(950)
	var primes = __webpack_require__(956)
	
	var DH = __webpack_require__(957)
	
	function getDiffieHellman (mod) {
	  var prime = new Buffer(primes[mod].prime, 'hex')
	  var gen = new Buffer(primes[mod].gen, 'hex')
	
	  return new DH(prime, gen)
	}
	
	var ENCODINGS = {
	  'binary': true, 'hex': true, 'base64': true
	}
	
	function createDiffieHellman (prime, enc, generator, genc) {
	  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
	    return createDiffieHellman(prime, 'binary', enc, generator)
	  }
	
	  enc = enc || 'binary'
	  genc = genc || 'binary'
	  generator = generator || new Buffer([2])
	
	  if (!Buffer.isBuffer(generator)) {
	    generator = new Buffer(generator, genc)
	  }
	
	  if (typeof prime === 'number') {
	    return new DH(generatePrime(prime, generator), generator, true)
	  }
	
	  if (!Buffer.isBuffer(prime)) {
	    prime = new Buffer(prime, enc)
	  }
	
	  return new DH(prime, generator, true)
	}
	
	exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
	exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 950 */
/***/ function(module, exports, __webpack_require__) {

	var randomBytes = __webpack_require__(905);
	module.exports = findPrime;
	findPrime.simpleSieve = simpleSieve;
	findPrime.fermatTest = fermatTest;
	var BN = __webpack_require__(951);
	var TWENTYFOUR = new BN(24);
	var MillerRabin = __webpack_require__(953);
	var millerRabin = new MillerRabin();
	var ONE = new BN(1);
	var TWO = new BN(2);
	var FIVE = new BN(5);
	var SIXTEEN = new BN(16);
	var EIGHT = new BN(8);
	var TEN = new BN(10);
	var THREE = new BN(3);
	var SEVEN = new BN(7);
	var ELEVEN = new BN(11);
	var FOUR = new BN(4);
	var TWELVE = new BN(12);
	var primes = null;
	
	function _getPrimes() {
	  if (primes !== null)
	    return primes;
	
	  var limit = 0x100000;
	  var res = [];
	  res[0] = 2;
	  for (var i = 1, k = 3; k < limit; k += 2) {
	    var sqrt = Math.ceil(Math.sqrt(k));
	    for (var j = 0; j < i && res[j] <= sqrt; j++)
	      if (k % res[j] === 0)
	        break;
	
	    if (i !== j && res[j] <= sqrt)
	      continue;
	
	    res[i++] = k;
	  }
	  primes = res;
	  return res;
	}
	
	function simpleSieve(p) {
	  var primes = _getPrimes();
	
	  for (var i = 0; i < primes.length; i++)
	    if (p.modn(primes[i]) === 0) {
	      if (p.cmpn(primes[i]) === 0) {
	        return true;
	      } else {
	        return false;
	      }
	    }
	
	  return true;
	}
	
	function fermatTest(p) {
	  var red = BN.mont(p);
	  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
	}
	
	function findPrime(bits, gen) {
	  if (bits < 16) {
	    // this is what openssl does
	    if (gen === 2 || gen === 5) {
	      return new BN([0x8c, 0x7b]);
	    } else {
	      return new BN([0x8c, 0x27]);
	    }
	  }
	  gen = new BN(gen);
	
	  var num, n2;
	
	  while (true) {
	    num = new BN(randomBytes(Math.ceil(bits / 8)));
	    while (num.bitLength() > bits) {
	      num.ishrn(1);
	    }
	    if (num.isEven()) {
	      num.iadd(ONE);
	    }
	    if (!num.testn(1)) {
	      num.iadd(TWO);
	    }
	    if (!gen.cmp(TWO)) {
	      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
	        num.iadd(FOUR);
	      }
	    } else if (!gen.cmp(FIVE)) {
	      while (num.mod(TEN).cmp(THREE)) {
	        num.iadd(FOUR);
	      }
	    }
	    n2 = num.shrn(1);
	    if (simpleSieve(n2) && simpleSieve(num) &&
	      fermatTest(n2) && fermatTest(num) &&
	      millerRabin.test(n2) && millerRabin.test(num)) {
	      return num;
	    }
	  }
	
	}


/***/ },
/* 951 */,
/* 952 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 953 */
/***/ function(module, exports, __webpack_require__) {

	var bn = __webpack_require__(951);
	var brorand = __webpack_require__(954);
	
	function MillerRabin(rand) {
	  this.rand = rand || new brorand.Rand();
	}
	module.exports = MillerRabin;
	
	MillerRabin.create = function create(rand) {
	  return new MillerRabin(rand);
	};
	
	MillerRabin.prototype._rand = function _rand(n) {
	  var len = n.bitLength();
	  var buf = this.rand.generate(Math.ceil(len / 8));
	
	  // Set low bits
	  buf[0] |= 3;
	
	  // Mask high bits
	  var mask = len & 0x7;
	  if (mask !== 0)
	    buf[buf.length - 1] >>= 7 - mask;
	
	  return new bn(buf);
	}
	
	MillerRabin.prototype.test = function test(n, k, cb) {
	  var len = n.bitLength();
	  var red = bn.mont(n);
	  var rone = new bn(1).toRed(red);
	
	  if (!k)
	    k = Math.max(1, (len / 48) | 0);
	
	  // Find d and s, (n - 1) = (2 ^ s) * d;
	  var n1 = n.subn(1);
	  var n2 = n1.subn(1);
	  for (var s = 0; !n1.testn(s); s++) {}
	  var d = n.shrn(s);
	
	  var rn1 = n1.toRed(red);
	
	  var prime = true;
	  for (; k > 0; k--) {
	    var a = this._rand(n2);
	    if (cb)
	      cb(a);
	
	    var x = a.toRed(red).redPow(d);
	    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
	      continue;
	
	    for (var i = 1; i < s; i++) {
	      x = x.redSqr();
	
	      if (x.cmp(rone) === 0)
	        return false;
	      if (x.cmp(rn1) === 0)
	        break;
	    }
	
	    if (i === s)
	      return false;
	  }
	
	  return prime;
	};
	
	MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
	  var len = n.bitLength();
	  var red = bn.mont(n);
	  var rone = new bn(1).toRed(red);
	
	  if (!k)
	    k = Math.max(1, (len / 48) | 0);
	
	  // Find d and s, (n - 1) = (2 ^ s) * d;
	  var n1 = n.subn(1);
	  var n2 = n1.subn(1);
	  for (var s = 0; !n1.testn(s); s++) {}
	  var d = n.shrn(s);
	
	  var rn1 = n1.toRed(red);
	
	  for (; k > 0; k--) {
	    var a = this._rand(n2);
	
	    var g = n.gcd(a);
	    if (g.cmpn(1) !== 0)
	      return g;
	
	    var x = a.toRed(red).redPow(d);
	    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
	      continue;
	
	    for (var i = 1; i < s; i++) {
	      x = x.redSqr();
	
	      if (x.cmp(rone) === 0)
	        return x.fromRed().subn(1).gcd(n);
	      if (x.cmp(rn1) === 0)
	        break;
	    }
	
	    if (i === s) {
	      x = x.redSqr();
	      return x.fromRed().subn(1).gcd(n);
	    }
	  }
	
	  return false;
	};


/***/ },
/* 954 */
/***/ function(module, exports, __webpack_require__) {

	var r;
	
	module.exports = function rand(len) {
	  if (!r)
	    r = new Rand(null);
	
	  return r.generate(len);
	};
	
	function Rand(rand) {
	  this.rand = rand;
	}
	module.exports.Rand = Rand;
	
	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};
	
	if (typeof window === 'object') {
	  if (window.crypto && window.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      window.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      window.msCrypto.getRandomValues(arr);
	      return arr;
	    };
	  } else {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker
	  try {
	    var crypto = __webpack_require__(955);
	
	    Rand.prototype._rand = function _rand(n) {
	      return crypto.randomBytes(n);
	    };
	  } catch (e) {
	    // Emulate crypto API using randy
	    Rand.prototype._rand = function _rand(n) {
	      var res = new Uint8Array(n);
	      for (var i = 0; i < res.length; i++)
	        res[i] = this.rand.getByte();
	      return res;
	    };
	  }
	}


/***/ },
/* 955 */,
/* 956 */
/***/ function(module, exports) {

	module.exports = {
		"modp1": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
		},
		"modp2": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
		},
		"modp5": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
		},
		"modp14": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
		},
		"modp15": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
		},
		"modp16": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
		},
		"modp17": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
		},
		"modp18": {
			"gen": "02",
			"prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
		}
	};

/***/ },
/* 957 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(951);
	var MillerRabin = __webpack_require__(953);
	var millerRabin = new MillerRabin();
	var TWENTYFOUR = new BN(24);
	var ELEVEN = new BN(11);
	var TEN = new BN(10);
	var THREE = new BN(3);
	var SEVEN = new BN(7);
	var primes = __webpack_require__(950);
	var randomBytes = __webpack_require__(905);
	module.exports = DH;
	
	function setPublicKey(pub, enc) {
	  enc = enc || 'utf8';
	  if (!Buffer.isBuffer(pub)) {
	    pub = new Buffer(pub, enc);
	  }
	  this._pub = new BN(pub);
	  return this;
	}
	
	function setPrivateKey(priv, enc) {
	  enc = enc || 'utf8';
	  if (!Buffer.isBuffer(priv)) {
	    priv = new Buffer(priv, enc);
	  }
	  this._priv = new BN(priv);
	  return this;
	}
	
	var primeCache = {};
	function checkPrime(prime, generator) {
	  var gen = generator.toString('hex');
	  var hex = [gen, prime.toString(16)].join('_');
	  if (hex in primeCache) {
	    return primeCache[hex];
	  }
	  var error = 0;
	
	  if (prime.isEven() ||
	    !primes.simpleSieve ||
	    !primes.fermatTest(prime) ||
	    !millerRabin.test(prime)) {
	    //not a prime so +1
	    error += 1;
	
	    if (gen === '02' || gen === '05') {
	      // we'd be able to check the generator
	      // it would fail so +8
	      error += 8;
	    } else {
	      //we wouldn't be able to test the generator
	      // so +4
	      error += 4;
	    }
	    primeCache[hex] = error;
	    return error;
	  }
	  if (!millerRabin.test(prime.shrn(1))) {
	    //not a safe prime
	    error += 2;
	  }
	  var rem;
	  switch (gen) {
	    case '02':
	      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
	        // unsuidable generator
	        error += 8;
	      }
	      break;
	    case '05':
	      rem = prime.mod(TEN);
	      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
	        // prime mod 10 needs to equal 3 or 7
	        error += 8;
	      }
	      break;
	    default:
	      error += 4;
	  }
	  primeCache[hex] = error;
	  return error;
	}
	
	function DH(prime, generator, malleable) {
	  this.setGenerator(generator);
	  this.__prime = new BN(prime);
	  this._prime = BN.mont(this.__prime);
	  this._primeLen = prime.length;
	  this._pub = undefined;
	  this._priv = undefined;
	  this._primeCode = undefined;
	  if (malleable) {
	    this.setPublicKey = setPublicKey;
	    this.setPrivateKey = setPrivateKey;
	  } else {
	    this._primeCode = 8;
	  }
	}
	Object.defineProperty(DH.prototype, 'verifyError', {
	  enumerable: true,
	  get: function () {
	    if (typeof this._primeCode !== 'number') {
	      this._primeCode = checkPrime(this.__prime, this.__gen);
	    }
	    return this._primeCode;
	  }
	});
	DH.prototype.generateKeys = function () {
	  if (!this._priv) {
	    this._priv = new BN(randomBytes(this._primeLen));
	  }
	  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
	  return this.getPublicKey();
	};
	
	DH.prototype.computeSecret = function (other) {
	  other = new BN(other);
	  other = other.toRed(this._prime);
	  var secret = other.redPow(this._priv).fromRed();
	  var out = new Buffer(secret.toArray());
	  var prime = this.getPrime();
	  if (out.length < prime.length) {
	    var front = new Buffer(prime.length - out.length);
	    front.fill(0);
	    out = Buffer.concat([front, out]);
	  }
	  return out;
	};
	
	DH.prototype.getPublicKey = function getPublicKey(enc) {
	  return formatReturnValue(this._pub, enc);
	};
	
	DH.prototype.getPrivateKey = function getPrivateKey(enc) {
	  return formatReturnValue(this._priv, enc);
	};
	
	DH.prototype.getPrime = function (enc) {
	  return formatReturnValue(this.__prime, enc);
	};
	
	DH.prototype.getGenerator = function (enc) {
	  return formatReturnValue(this._gen, enc);
	};
	
	DH.prototype.setGenerator = function (gen, enc) {
	  enc = enc || 'utf8';
	  if (!Buffer.isBuffer(gen)) {
	    gen = new Buffer(gen, enc);
	  }
	  this.__gen = gen;
	  this._gen = new BN(gen);
	  return this;
	};
	
	function formatReturnValue(bn, enc) {
	  var buf = new Buffer(bn.toArray());
	  if (!enc) {
	    return buf;
	  } else {
	    return buf.toString(enc);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 958 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var _algos = __webpack_require__(826)
	var createHash = __webpack_require__(906)
	var inherits = __webpack_require__(828)
	var sign = __webpack_require__(959)
	var stream = __webpack_require__(827)
	var verify = __webpack_require__(1005)
	
	var algos = {}
	Object.keys(_algos).forEach(function (key) {
	  algos[key] = algos[key.toLowerCase()] = _algos[key]
	})
	
	function Sign (algorithm) {
	  stream.Writable.call(this)
	
	  var data = algos[algorithm]
	  if (!data) {
	    throw new Error('Unknown message digest')
	  }
	
	  this._hashType = data.hash
	  this._hash = createHash(data.hash)
	  this._tag = data.id
	  this._signType = data.sign
	}
	inherits(Sign, stream.Writable)
	
	Sign.prototype._write = function _write (data, _, done) {
	  this._hash.update(data)
	  done()
	}
	
	Sign.prototype.update = function update (data, enc) {
	  if (typeof data === 'string') {
	    data = new Buffer(data, enc)
	  }
	
	  this._hash.update(data)
	  return this
	}
	
	Sign.prototype.sign = function signMethod (key, enc) {
	  this.end()
	  var hash = this._hash.digest()
	  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)
	
	  return enc ? sig.toString(enc) : sig
	}
	
	function Verify (algorithm) {
	  stream.Writable.call(this)
	
	  var data = algos[algorithm]
	  if (!data) {
	    throw new Error('Unknown message digest')
	  }
	
	  this._hash = createHash(data.hash)
	  this._tag = data.id
	  this._signType = data.sign
	}
	inherits(Verify, stream.Writable)
	
	Verify.prototype._write = function _write (data, _, done) {
	  this._hash.update(data)
	
	  done()
	}
	
	Verify.prototype.update = function update (data, enc) {
	  if (typeof data === 'string') {
	    data = new Buffer(data, enc)
	  }
	
	  this._hash.update(data)
	  return this
	}
	
	Verify.prototype.verify = function verifyMethod (key, sig, enc) {
	  if (typeof sig === 'string') {
	    sig = new Buffer(sig, enc)
	  }
	
	  this.end()
	  var hash = this._hash.digest()
	
	  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
	}
	
	function createSign (algorithm) {
	  return new Sign(algorithm)
	}
	
	function createVerify (algorithm) {
	  return new Verify(algorithm)
	}
	
	module.exports = {
	  Sign: createSign,
	  Verify: createVerify,
	  createSign: createSign,
	  createVerify: createVerify
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 959 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
	var createHmac = __webpack_require__(919)
	var crt = __webpack_require__(960)
	var curves = __webpack_require__(961)
	var elliptic = __webpack_require__(962)
	var parseKeys = __webpack_require__(985)
	
	var BN = __webpack_require__(951)
	var EC = elliptic.ec
	
	function sign (hash, key, hashType, signType) {
	  var priv = parseKeys(key)
	  if (priv.curve) {
	    if (signType !== 'ecdsa') throw new Error('wrong private key type')
	
	    return ecSign(hash, priv)
	  } else if (priv.type === 'dsa') {
	    if (signType !== 'dsa') {
	      throw new Error('wrong private key type')
	    }
	    return dsaSign(hash, priv, hashType)
	  } else {
	    if (signType !== 'rsa') throw new Error('wrong private key type')
	  }
	
	  var len = priv.modulus.byteLength()
	  var pad = [ 0, 1 ]
	  while (hash.length + pad.length + 1 < len) {
	    pad.push(0xff)
	  }
	  pad.push(0x00)
	  var i = -1
	  while (++i < hash.length) {
	    pad.push(hash[i])
	  }
	
	  var out = crt(pad, priv)
	  return out
	}
	
	function ecSign (hash, priv) {
	  var curveId = curves[priv.curve.join('.')]
	  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))
	
	  var curve = new EC(curveId)
	  var key = curve.genKeyPair()
	
	  key._importPrivate(priv.privateKey)
	  var out = key.sign(hash)
	
	  return new Buffer(out.toDER())
	}
	
	function dsaSign (hash, priv, algo) {
	  var x = priv.params.priv_key
	  var p = priv.params.p
	  var q = priv.params.q
	  var g = priv.params.g
	  var r = new BN(0)
	  var k
	  var H = bits2int(hash, q).mod(q)
	  var s = false
	  var kv = getKey(x, q, hash, algo)
	  while (s === false) {
	    k = makeKey(q, kv, algo)
	    r = makeR(g, k, p, q)
	    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
	    if (!s.cmpn(0)) {
	      s = false
	      r = new BN(0)
	    }
	  }
	  return toDER(r, s)
	}
	
	function toDER (r, s) {
	  r = r.toArray()
	  s = s.toArray()
	
	  // Pad values
	  if (r[0] & 0x80) {
	    r = [ 0 ].concat(r)
	  }
	  // Pad values
	  if (s[0] & 0x80) {
	    s = [0].concat(s)
	  }
	
	  var total = r.length + s.length + 4
	  var res = [ 0x30, total, 0x02, r.length ]
	  res = res.concat(r, [ 0x02, s.length ], s)
	  return new Buffer(res)
	}
	
	function getKey (x, q, hash, algo) {
	  x = new Buffer(x.toArray())
	  if (x.length < q.byteLength()) {
	    var zeros = new Buffer(q.byteLength() - x.length)
	    zeros.fill(0)
	    x = Buffer.concat([zeros, x])
	  }
	  var hlen = hash.length
	  var hbits = bits2octets(hash, q)
	  var v = new Buffer(hlen)
	  v.fill(1)
	  var k = new Buffer(hlen)
	  k.fill(0)
	  k = createHmac(algo, k)
	    .update(v)
	    .update(new Buffer([0]))
	    .update(x)
	    .update(hbits)
	    .digest()
	  v = createHmac(algo, k)
	    .update(v)
	    .digest()
	  k = createHmac(algo, k)
	    .update(v)
	    .update(new Buffer([1]))
	    .update(x)
	    .update(hbits)
	    .digest()
	  v = createHmac(algo, k)
	    .update(v)
	    .digest()
	  return {
	    k: k,
	    v: v
	  }
	}
	
	function bits2int (obits, q) {
	  var bits = new BN(obits)
	  var shift = (obits.length << 3) - q.bitLength()
	  if (shift > 0) {
	    bits.ishrn(shift)
	  }
	  return bits
	}
	
	function bits2octets (bits, q) {
	  bits = bits2int(bits, q)
	  bits = bits.mod(q)
	  var out = new Buffer(bits.toArray())
	  if (out.length < q.byteLength()) {
	    var zeros = new Buffer(q.byteLength() - out.length)
	    zeros.fill(0)
	    out = Buffer.concat([zeros, out])
	  }
	  return out
	}
	
	function makeKey (q, kv, algo) {
	  var t, k
	
	  do {
	    t = new Buffer('')
	
	    while (t.length * 8 < q.bitLength()) {
	      kv.v = createHmac(algo, kv.k)
	        .update(kv.v)
	        .digest()
	      t = Buffer.concat([t, kv.v])
	    }
	
	    k = bits2int(t, q)
	    kv.k = createHmac(algo, kv.k)
	      .update(kv.v)
	      .update(new Buffer([0]))
	      .digest()
	    kv.v = createHmac(algo, kv.k)
	      .update(kv.v)
	      .digest()
	  } while (k.cmp(q) !== -1)
	
	  return k
	}
	
	function makeR (g, k, p, q) {
	  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
	}
	
	module.exports = sign
	module.exports.getKey = getKey
	module.exports.makeKey = makeKey
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 960 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(951);
	var randomBytes = __webpack_require__(905);
	module.exports = crt;
	function blind(priv) {
	  var r = getr(priv);
	  var blinder = r.toRed(bn.mont(priv.modulus))
	  .redPow(new bn(priv.publicExponent)).fromRed();
	  return {
	    blinder: blinder,
	    unblinder:r.invm(priv.modulus)
	  };
	}
	function crt(msg, priv) {
	  var blinds = blind(priv);
	  var len = priv.modulus.byteLength();
	  var mod = bn.mont(priv.modulus);
	  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
	  var c1 = blinded.toRed(bn.mont(priv.prime1));
	  var c2 = blinded.toRed(bn.mont(priv.prime2));
	  var qinv = priv.coefficient;
	  var p = priv.prime1;
	  var q = priv.prime2;
	  var m1 = c1.redPow(priv.exponent1);
	  var m2 = c2.redPow(priv.exponent2);
	  m1 = m1.fromRed();
	  m2 = m2.fromRed();
	  var h = m1.isub(m2).imul(qinv).umod(p);
	  h.imul(q);
	  m2.iadd(h);
	  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
	}
	crt.getr = getr;
	function getr(priv) {
	  var len = priv.modulus.byteLength();
	  var r = new bn(randomBytes(len));
	  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
	    r = new bn(randomBytes(len));
	  }
	  return r;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 961 */
/***/ function(module, exports) {

	'use strict'
	exports['1.3.132.0.10'] = 'secp256k1'
	
	exports['1.3.132.0.33'] = 'p224'
	
	exports['1.2.840.10045.3.1.1'] = 'p192'
	
	exports['1.2.840.10045.3.1.7'] = 'p256'
	
	exports['1.3.132.0.34'] = 'p384'
	
	exports['1.3.132.0.35'] = 'p521'


/***/ },
/* 962 */,
/* 963 */,
/* 964 */,
/* 965 */,
/* 966 */
/***/ function(module, exports, __webpack_require__) {

	var hash = exports;
	
	hash.utils = __webpack_require__(967);
	hash.common = __webpack_require__(968);
	hash.sha = __webpack_require__(969);
	hash.ripemd = __webpack_require__(970);
	hash.hmac = __webpack_require__(971);
	
	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 967 */
/***/ function(module, exports, __webpack_require__) {

	var utils = exports;
	var inherits = __webpack_require__(828);
	
	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        var hi = c >> 8;
	        var lo = c & 0xff;
	        if (hi)
	          res.push(hi, lo);
	        else
	          res.push(lo);
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (var i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils.toArray = toArray;
	
	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;
	
	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	utils.htonl = htonl;
	
	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils.toHex32 = toHex32;
	
	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;
	
	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils.zero8 = zero8;
	
	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	utils.join32 = join32;
	
	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils.split32 = split32;
	
	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils.rotr32 = rotr32;
	
	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils.rotl32 = rotl32;
	
	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	utils.sum32 = sum32;
	
	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	utils.sum32_3 = sum32_3;
	
	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	utils.sum32_4 = sum32_4;
	
	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	utils.sum32_5 = sum32_5;
	
	function assert(cond, msg) {
	  if (!cond)
	    throw new Error(msg || 'Assertion failed');
	}
	utils.assert = assert;
	
	utils.inherits = inherits;
	
	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];
	
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	exports.sum64 = sum64;
	
	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	};
	exports.sum64_hi = sum64_hi;
	
	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	};
	exports.sum64_lo = sum64_lo;
	
	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	
	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	};
	exports.sum64_4_hi = sum64_4_hi;
	
	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	};
	exports.sum64_4_lo = sum64_4_lo;
	
	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;
	
	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	};
	exports.sum64_5_hi = sum64_5_hi;
	
	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;
	
	  return lo >>> 0;
	};
	exports.sum64_5_lo = sum64_5_lo;
	
	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	};
	exports.rotr64_hi = rotr64_hi;
	
	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	};
	exports.rotr64_lo = rotr64_lo;
	
	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	};
	exports.shr64_hi = shr64_hi;
	
	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	};
	exports.shr64_lo = shr64_lo;


/***/ },
/* 968 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(966);
	var utils = hash.utils;
	var assert = utils.assert;
	
	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';
	
	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	exports.BlockHash = BlockHash;
	
	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;
	
	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;
	
	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;
	
	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }
	
	  return this;
	};
	
	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert(this.pending === null);
	
	  return this._digest(enc);
	};
	
	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;
	
	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }
	
	  return res;
	};


/***/ },
/* 969 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(966);
	var utils = hash.utils;
	var assert = utils.assert;
	
	var rotr32 = utils.rotr32;
	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_4 = utils.sum32_4;
	var sum32_5 = utils.sum32_5;
	var rotr64_hi = utils.rotr64_hi;
	var rotr64_lo = utils.rotr64_lo;
	var shr64_hi = utils.shr64_hi;
	var shr64_lo = utils.shr64_lo;
	var sum64 = utils.sum64;
	var sum64_hi = utils.sum64_hi;
	var sum64_lo = utils.sum64_lo;
	var sum64_4_hi = utils.sum64_4_hi;
	var sum64_4_lo = utils.sum64_4_lo;
	var sum64_5_hi = utils.sum64_5_hi;
	var sum64_5_lo = utils.sum64_5_lo;
	var BlockHash = hash.common.BlockHash;
	
	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];
	
	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];
	
	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];
	
	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();
	
	  BlockHash.call(this);
	  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash);
	exports.sha256 = SHA256;
	
	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;
	
	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;
	
	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
	
	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];
	
	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32(T1, T2);
	  }
	
	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	  this.h[5] = sum32(this.h[5], f);
	  this.h[6] = sum32(this.h[6], g);
	  this.h[7] = sum32(this.h[7], h);
	};
	
	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};
	
	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();
	
	  SHA256.call(this);
	  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, SHA256);
	exports.sha224 = SHA224;
	
	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;
	
	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};
	
	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();
	
	  BlockHash.call(this);
	  this.h = [ 0x6a09e667, 0xf3bcc908,
	             0xbb67ae85, 0x84caa73b,
	             0x3c6ef372, 0xfe94f82b,
	             0xa54ff53a, 0x5f1d36f1,
	             0x510e527f, 0xade682d1,
	             0x9b05688c, 0x2b3e6c1f,
	             0x1f83d9ab, 0xfb41bd6b,
	             0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash);
	exports.sha512 = SHA512;
	
	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;
	
	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;
	
	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];
	
	    W[i] = sum64_4_hi(c0_hi, c0_lo,
	                      c1_hi, c1_lo,
	                      c2_hi, c2_lo,
	                      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
	                          c1_hi, c1_lo,
	                          c2_hi, c2_lo,
	                          c3_hi, c3_lo);
	  }
	};
	
	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);
	
	  var W = this.W;
	
	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];
	
	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];
	
	    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
	                           c1_hi, c1_lo,
	                           c2_hi, c2_lo,
	                           c3_hi, c3_lo,
	                           c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
	                           c1_hi, c1_lo,
	                           c2_hi, c2_lo,
	                           c3_hi, c3_lo,
	                           c4_hi, c4_lo);
	
	    var c0_hi = s0_512_hi(ah, al);
	    var c0_lo = s0_512_lo(ah, al);
	    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
	    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
	
	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
	
	    hh = gh;
	    hl = gl;
	
	    gh = fh;
	    gl = fl;
	
	    fh = eh;
	    fl = el;
	
	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);
	
	    dh = ch;
	    dl = cl;
	
	    ch = bh;
	    cl = bl;
	
	    bh = ah;
	    bl = al;
	
	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }
	
	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};
	
	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};
	
	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();
	
	  SHA512.call(this);
	  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
	             0x629a292a, 0x367cd507,
	             0x9159015a, 0x3070dd17,
	             0x152fecd8, 0xf70e5939,
	             0x67332667, 0xffc00b31,
	             0x8eb44a87, 0x68581511,
	             0xdb0c2e0d, 0x64f98fa7,
	             0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, SHA512);
	exports.sha384 = SHA384;
	
	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;
	
	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils.split32(this.h.slice(0, 12), 'big');
	};
	
	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();
	
	  BlockHash.call(this);
	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
	             0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}
	
	utils.inherits(SHA1, BlockHash);
	exports.sha1 = SHA1;
	
	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;
	
	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;
	
	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	
	  for(; i < W.length; i++)
	    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
	
	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	
	  for (var i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32(b, 30);
	    b = a;
	    a = t;
	  }
	
	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	};
	
	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};
	
	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	
	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	
	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	
	function s0_256(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	
	function s1_256(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	
	function g0_256(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	
	function g1_256(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	
	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32(x, y, z);
	}
	
	function ch64_hi(xh, xl, yh, yl, zh, zl) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function maj64_hi(xh, xl, yh, yl, zh, zl) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	
	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}


/***/ },
/* 970 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(966);
	var utils = hash.utils;
	
	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_3 = utils.sum32_3;
	var sum32_4 = utils.sum32_4;
	var BlockHash = hash.common.BlockHash;
	
	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();
	
	  BlockHash.call(this);
	
	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash);
	exports.ripemd160 = RIPEMD160;
	
	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;
	
	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};
	
	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};
	
	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}
	
	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}
	
	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}
	
	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];
	
	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];
	
	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];
	
	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];


/***/ },
/* 971 */
/***/ function(module, exports, __webpack_require__) {

	var hmac = exports;
	
	var hash = __webpack_require__(966);
	var utils = hash.utils;
	var assert = utils.assert;
	
	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;
	
	  this._init(utils.toArray(key, enc));
	}
	module.exports = Hmac;
	
	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert(key.length <= this.blockSize);
	
	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);
	
	  for (var i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);
	
	  // 0x36 ^ 0x5c = 0x6a
	  for (var i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};
	
	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};
	
	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};


/***/ },
/* 972 */,
/* 973 */,
/* 974 */,
/* 975 */,
/* 976 */,
/* 977 */,
/* 978 */,
/* 979 */,
/* 980 */,
/* 981 */,
/* 982 */,
/* 983 */,
/* 984 */,
/* 985 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var asn1 = __webpack_require__(986)
	var aesid = __webpack_require__(1003)
	var fixProc = __webpack_require__(1004)
	var ciphers = __webpack_require__(924)
	var compat = __webpack_require__(920)
	module.exports = parseKeys
	
	function parseKeys (buffer) {
	  var password
	  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
	    password = buffer.passphrase
	    buffer = buffer.key
	  }
	  if (typeof buffer === 'string') {
	    buffer = new Buffer(buffer)
	  }
	
	  var stripped = fixProc(buffer, password)
	
	  var type = stripped.tag
	  var data = stripped.data
	  var subtype, ndata
	  switch (type) {
	    case 'PUBLIC KEY':
	      ndata = asn1.PublicKey.decode(data, 'der')
	      subtype = ndata.algorithm.algorithm.join('.')
	      switch (subtype) {
	        case '1.2.840.113549.1.1.1':
	          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
	        case '1.2.840.10045.2.1':
	          ndata.subjectPrivateKey = ndata.subjectPublicKey
	          return {
	            type: 'ec',
	            data: ndata
	          }
	        case '1.2.840.10040.4.1':
	          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
	          return {
	            type: 'dsa',
	            data: ndata.algorithm.params
	          }
	        default: throw new Error('unknown key id ' + subtype)
	      }
	      throw new Error('unknown key type ' + type)
	    case 'ENCRYPTED PRIVATE KEY':
	      data = asn1.EncryptedPrivateKey.decode(data, 'der')
	      data = decrypt(data, password)
	      // falls through
	    case 'PRIVATE KEY':
	      ndata = asn1.PrivateKey.decode(data, 'der')
	      subtype = ndata.algorithm.algorithm.join('.')
	      switch (subtype) {
	        case '1.2.840.113549.1.1.1':
	          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
	        case '1.2.840.10045.2.1':
	          return {
	            curve: ndata.algorithm.curve,
	            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
	          }
	        case '1.2.840.10040.4.1':
	          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
	          return {
	            type: 'dsa',
	            params: ndata.algorithm.params
	          }
	        default: throw new Error('unknown key id ' + subtype)
	      }
	      throw new Error('unknown key type ' + type)
	    case 'RSA PUBLIC KEY':
	      return asn1.RSAPublicKey.decode(data, 'der')
	    case 'RSA PRIVATE KEY':
	      return asn1.RSAPrivateKey.decode(data, 'der')
	    case 'DSA PRIVATE KEY':
	      return {
	        type: 'dsa',
	        params: asn1.DSAPrivateKey.decode(data, 'der')
	      }
	    case 'EC PRIVATE KEY':
	      data = asn1.ECPrivateKey.decode(data, 'der')
	      return {
	        curve: data.parameters.value,
	        privateKey: data.privateKey
	      }
	    default: throw new Error('unknown key type ' + type)
	  }
	}
	parseKeys.signature = asn1.signature
	function decrypt (data, password) {
	  var salt = data.algorithm.decrypt.kde.kdeparams.salt
	  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
	  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
	  var iv = data.algorithm.decrypt.cipher.iv
	  var cipherText = data.subjectPrivateKey
	  var keylen = parseInt(algo.split('-')[1], 10) / 8
	  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
	  var cipher = ciphers.createDecipheriv(algo, key, iv)
	  var out = []
	  out.push(cipher.update(cipherText))
	  out.push(cipher.final())
	  return Buffer.concat(out)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 986 */
/***/ function(module, exports, __webpack_require__) {

	// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
	// Fedor, you are amazing.
	
	var asn1 = __webpack_require__(987)
	
	var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('modulus').int(),
	    this.key('publicExponent').int(),
	    this.key('privateExponent').int(),
	    this.key('prime1').int(),
	    this.key('prime2').int(),
	    this.key('exponent1').int(),
	    this.key('exponent2').int(),
	    this.key('coefficient').int()
	  )
	})
	exports.RSAPrivateKey = RSAPrivateKey
	
	var RSAPublicKey = asn1.define('RSAPublicKey', function () {
	  this.seq().obj(
	    this.key('modulus').int(),
	    this.key('publicExponent').int()
	  )
	})
	exports.RSAPublicKey = RSAPublicKey
	
	var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
	  this.seq().obj(
	    this.key('algorithm').use(AlgorithmIdentifier),
	    this.key('subjectPublicKey').bitstr()
	  )
	})
	exports.PublicKey = PublicKey
	
	var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
	  this.seq().obj(
	    this.key('algorithm').objid(),
	    this.key('none').null_().optional(),
	    this.key('curve').objid().optional(),
	    this.key('params').seq().obj(
	      this.key('p').int(),
	      this.key('q').int(),
	      this.key('g').int()
	    ).optional()
	  )
	})
	
	var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('algorithm').use(AlgorithmIdentifier),
	    this.key('subjectPrivateKey').octstr()
	  )
	})
	exports.PrivateKey = PrivateKeyInfo
	var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
	  this.seq().obj(
	    this.key('algorithm').seq().obj(
	      this.key('id').objid(),
	      this.key('decrypt').seq().obj(
	        this.key('kde').seq().obj(
	          this.key('id').objid(),
	          this.key('kdeparams').seq().obj(
	            this.key('salt').octstr(),
	            this.key('iters').int()
	          )
	        ),
	        this.key('cipher').seq().obj(
	          this.key('algo').objid(),
	          this.key('iv').octstr()
	        )
	      )
	    ),
	    this.key('subjectPrivateKey').octstr()
	  )
	})
	
	exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo
	
	var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('p').int(),
	    this.key('q').int(),
	    this.key('g').int(),
	    this.key('pub_key').int(),
	    this.key('priv_key').int()
	  )
	})
	exports.DSAPrivateKey = DSAPrivateKey
	
	exports.DSAparam = asn1.define('DSAparam', function () {
	  this.int()
	})
	var ECPrivateKey = asn1.define('ECPrivateKey', function () {
	  this.seq().obj(
	    this.key('version').int(),
	    this.key('privateKey').octstr(),
	    this.key('parameters').optional().explicit(0).use(ECParameters),
	    this.key('publicKey').optional().explicit(1).bitstr()
	  )
	})
	exports.ECPrivateKey = ECPrivateKey
	var ECParameters = asn1.define('ECParameters', function () {
	  this.choice({
	    namedCurve: this.objid()
	  })
	})
	
	exports.signature = asn1.define('signature', function () {
	  this.seq().obj(
	    this.key('r').int(),
	    this.key('s').int()
	  )
	})


/***/ },
/* 987 */
/***/ function(module, exports, __webpack_require__) {

	var asn1 = exports;
	
	asn1.bignum = __webpack_require__(951);
	
	asn1.define = __webpack_require__(988).define;
	asn1.base = __webpack_require__(991);
	asn1.constants = __webpack_require__(995);
	asn1.decoders = __webpack_require__(997);
	asn1.encoders = __webpack_require__(1000);


/***/ },
/* 988 */
/***/ function(module, exports, __webpack_require__) {

	var asn1 = __webpack_require__(987);
	var inherits = __webpack_require__(828);
	
	var api = exports;
	
	api.define = function define(name, body) {
	  return new Entity(name, body);
	};
	
	function Entity(name, body) {
	  this.name = name;
	  this.body = body;
	
	  this.decoders = {};
	  this.encoders = {};
	};
	
	Entity.prototype._createNamed = function createNamed(base) {
	  var named;
	  try {
	    named = __webpack_require__(989).runInThisContext(
	      '(function ' + this.name + '(entity) {\n' +
	      '  this._initNamed(entity);\n' +
	      '})'
	    );
	  } catch (e) {
	    named = function (entity) {
	      this._initNamed(entity);
	    };
	  }
	  inherits(named, base);
	  named.prototype._initNamed = function initnamed(entity) {
	    base.call(this, entity);
	  };
	
	  return new named(this);
	};
	
	Entity.prototype._getDecoder = function _getDecoder(enc) {
	  enc = enc || 'der';
	  // Lazily create decoder
	  if (!this.decoders.hasOwnProperty(enc))
	    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
	  return this.decoders[enc];
	};
	
	Entity.prototype.decode = function decode(data, enc, options) {
	  return this._getDecoder(enc).decode(data, options);
	};
	
	Entity.prototype._getEncoder = function _getEncoder(enc) {
	  enc = enc || 'der';
	  // Lazily create encoder
	  if (!this.encoders.hasOwnProperty(enc))
	    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
	  return this.encoders[enc];
	};
	
	Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
	  return this._getEncoder(enc).encode(data, reporter);
	};


/***/ },
/* 989 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(990);
	
	var Object_keys = function (obj) {
	    if (Object.keys) return Object.keys(obj)
	    else {
	        var res = [];
	        for (var key in obj) res.push(key)
	        return res;
	    }
	};
	
	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};
	
	var defineProp = (function() {
	    try {
	        Object.defineProperty({}, '_', {});
	        return function(obj, name, value) {
	            Object.defineProperty(obj, name, {
	                writable: true,
	                enumerable: false,
	                configurable: true,
	                value: value
	            })
	        };
	    } catch(e) {
	        return function(obj, name, value) {
	            obj[name] = value;
	        };
	    }
	}());
	
	var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
	'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
	'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
	'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
	'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
	
	function Context() {}
	Context.prototype = {};
	
	var Script = exports.Script = function NodeScript (code) {
	    if (!(this instanceof Script)) return new Script(code);
	    this.code = code;
	};
	
	Script.prototype.runInContext = function (context) {
	    if (!(context instanceof Context)) {
	        throw new TypeError("needs a 'context' argument.");
	    }
	    
	    var iframe = document.createElement('iframe');
	    if (!iframe.style) iframe.style = {};
	    iframe.style.display = 'none';
	    
	    document.body.appendChild(iframe);
	    
	    var win = iframe.contentWindow;
	    var wEval = win.eval, wExecScript = win.execScript;
	
	    if (!wEval && wExecScript) {
	        // win.eval() magically appears when this is called in IE:
	        wExecScript.call(win, 'null');
	        wEval = win.eval;
	    }
	    
	    forEach(Object_keys(context), function (key) {
	        win[key] = context[key];
	    });
	    forEach(globals, function (key) {
	        if (context[key]) {
	            win[key] = context[key];
	        }
	    });
	    
	    var winKeys = Object_keys(win);
	
	    var res = wEval.call(win, this.code);
	    
	    forEach(Object_keys(win), function (key) {
	        // Avoid copying circular objects like `top` and `window` by only
	        // updating existing context properties or new properties in the `win`
	        // that was only introduced after the eval.
	        if (key in context || indexOf(winKeys, key) === -1) {
	            context[key] = win[key];
	        }
	    });
	
	    forEach(globals, function (key) {
	        if (!(key in context)) {
	            defineProp(context, key, win[key]);
	        }
	    });
	    
	    document.body.removeChild(iframe);
	    
	    return res;
	};
	
	Script.prototype.runInThisContext = function () {
	    return eval(this.code); // maybe...
	};
	
	Script.prototype.runInNewContext = function (context) {
	    var ctx = Script.createContext(context);
	    var res = this.runInContext(ctx);
	
	    forEach(Object_keys(ctx), function (key) {
	        context[key] = ctx[key];
	    });
	
	    return res;
	};
	
	forEach(Object_keys(Script.prototype), function (name) {
	    exports[name] = Script[name] = function (code) {
	        var s = Script(code);
	        return s[name].apply(s, [].slice.call(arguments, 1));
	    };
	});
	
	exports.createScript = function (code) {
	    return exports.Script(code);
	};
	
	exports.createContext = Script.createContext = function (context) {
	    var copy = new Context();
	    if(typeof context === 'object') {
	        forEach(Object_keys(context), function (key) {
	            copy[key] = context[key];
	        });
	    }
	    return copy;
	};


/***/ },
/* 990 */
/***/ function(module, exports) {

	
	var indexOf = [].indexOf;
	
	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 991 */
/***/ function(module, exports, __webpack_require__) {

	var base = exports;
	
	base.Reporter = __webpack_require__(992).Reporter;
	base.DecoderBuffer = __webpack_require__(993).DecoderBuffer;
	base.EncoderBuffer = __webpack_require__(993).EncoderBuffer;
	base.Node = __webpack_require__(994);


/***/ },
/* 992 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	
	function Reporter(options) {
	  this._reporterState = {
	    obj: null,
	    path: [],
	    options: options || {},
	    errors: []
	  };
	}
	exports.Reporter = Reporter;
	
	Reporter.prototype.isError = function isError(obj) {
	  return obj instanceof ReporterError;
	};
	
	Reporter.prototype.save = function save() {
	  var state = this._reporterState;
	
	  return { obj: state.obj, pathLen: state.path.length };
	};
	
	Reporter.prototype.restore = function restore(data) {
	  var state = this._reporterState;
	
	  state.obj = data.obj;
	  state.path = state.path.slice(0, data.pathLen);
	};
	
	Reporter.prototype.enterKey = function enterKey(key) {
	  return this._reporterState.path.push(key);
	};
	
	Reporter.prototype.exitKey = function exitKey(index) {
	  var state = this._reporterState;
	
	  state.path = state.path.slice(0, index - 1);
	};
	
	Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
	  var state = this._reporterState;
	
	  this.exitKey(index);
	  if (state.obj !== null)
	    state.obj[key] = value;
	};
	
	Reporter.prototype.path = function path() {
	  return this._reporterState.path.join('/');
	};
	
	Reporter.prototype.enterObject = function enterObject() {
	  var state = this._reporterState;
	
	  var prev = state.obj;
	  state.obj = {};
	  return prev;
	};
	
	Reporter.prototype.leaveObject = function leaveObject(prev) {
	  var state = this._reporterState;
	
	  var now = state.obj;
	  state.obj = prev;
	  return now;
	};
	
	Reporter.prototype.error = function error(msg) {
	  var err;
	  var state = this._reporterState;
	
	  var inherited = msg instanceof ReporterError;
	  if (inherited) {
	    err = msg;
	  } else {
	    err = new ReporterError(state.path.map(function(elem) {
	      return '[' + JSON.stringify(elem) + ']';
	    }).join(''), msg.message || msg, msg.stack);
	  }
	
	  if (!state.options.partial)
	    throw err;
	
	  if (!inherited)
	    state.errors.push(err);
	
	  return err;
	};
	
	Reporter.prototype.wrapResult = function wrapResult(result) {
	  var state = this._reporterState;
	  if (!state.options.partial)
	    return result;
	
	  return {
	    result: this.isError(result) ? null : result,
	    errors: state.errors
	  };
	};
	
	function ReporterError(path, msg) {
	  this.path = path;
	  this.rethrow(msg);
	};
	inherits(ReporterError, Error);
	
	ReporterError.prototype.rethrow = function rethrow(msg) {
	  this.message = msg + ' at: ' + (this.path || '(shallow)');
	  if (Error.captureStackTrace)
	    Error.captureStackTrace(this, ReporterError);
	
	  if (!this.stack) {
	    try {
	      // IE only adds stack when thrown
	      throw new Error(this.message);
	    } catch (e) {
	      this.stack = e.stack;
	    }
	  }
	  return this;
	};


/***/ },
/* 993 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Reporter = __webpack_require__(991).Reporter;
	var Buffer = __webpack_require__(820).Buffer;
	
	function DecoderBuffer(base, options) {
	  Reporter.call(this, options);
	  if (!Buffer.isBuffer(base)) {
	    this.error('Input not Buffer');
	    return;
	  }
	
	  this.base = base;
	  this.offset = 0;
	  this.length = base.length;
	}
	inherits(DecoderBuffer, Reporter);
	exports.DecoderBuffer = DecoderBuffer;
	
	DecoderBuffer.prototype.save = function save() {
	  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
	};
	
	DecoderBuffer.prototype.restore = function restore(save) {
	  // Return skipped data
	  var res = new DecoderBuffer(this.base);
	  res.offset = save.offset;
	  res.length = this.offset;
	
	  this.offset = save.offset;
	  Reporter.prototype.restore.call(this, save.reporter);
	
	  return res;
	};
	
	DecoderBuffer.prototype.isEmpty = function isEmpty() {
	  return this.offset === this.length;
	};
	
	DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
	  if (this.offset + 1 <= this.length)
	    return this.base.readUInt8(this.offset++, true);
	  else
	    return this.error(fail || 'DecoderBuffer overrun');
	}
	
	DecoderBuffer.prototype.skip = function skip(bytes, fail) {
	  if (!(this.offset + bytes <= this.length))
	    return this.error(fail || 'DecoderBuffer overrun');
	
	  var res = new DecoderBuffer(this.base);
	
	  // Share reporter state
	  res._reporterState = this._reporterState;
	
	  res.offset = this.offset;
	  res.length = this.offset + bytes;
	  this.offset += bytes;
	  return res;
	}
	
	DecoderBuffer.prototype.raw = function raw(save) {
	  return this.base.slice(save ? save.offset : this.offset, this.length);
	}
	
	function EncoderBuffer(value, reporter) {
	  if (Array.isArray(value)) {
	    this.length = 0;
	    this.value = value.map(function(item) {
	      if (!(item instanceof EncoderBuffer))
	        item = new EncoderBuffer(item, reporter);
	      this.length += item.length;
	      return item;
	    }, this);
	  } else if (typeof value === 'number') {
	    if (!(0 <= value && value <= 0xff))
	      return reporter.error('non-byte EncoderBuffer value');
	    this.value = value;
	    this.length = 1;
	  } else if (typeof value === 'string') {
	    this.value = value;
	    this.length = Buffer.byteLength(value);
	  } else if (Buffer.isBuffer(value)) {
	    this.value = value;
	    this.length = value.length;
	  } else {
	    return reporter.error('Unsupported type: ' + typeof value);
	  }
	}
	exports.EncoderBuffer = EncoderBuffer;
	
	EncoderBuffer.prototype.join = function join(out, offset) {
	  if (!out)
	    out = new Buffer(this.length);
	  if (!offset)
	    offset = 0;
	
	  if (this.length === 0)
	    return out;
	
	  if (Array.isArray(this.value)) {
	    this.value.forEach(function(item) {
	      item.join(out, offset);
	      offset += item.length;
	    });
	  } else {
	    if (typeof this.value === 'number')
	      out[offset] = this.value;
	    else if (typeof this.value === 'string')
	      out.write(this.value, offset);
	    else if (Buffer.isBuffer(this.value))
	      this.value.copy(out, offset);
	    offset += this.length;
	  }
	
	  return out;
	};


/***/ },
/* 994 */
/***/ function(module, exports, __webpack_require__) {

	var Reporter = __webpack_require__(991).Reporter;
	var EncoderBuffer = __webpack_require__(991).EncoderBuffer;
	var DecoderBuffer = __webpack_require__(991).DecoderBuffer;
	var assert = __webpack_require__(944);
	
	// Supported tags
	var tags = [
	  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
	  'gentime', 'utctime', 'null_', 'enum', 'int',
	  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
	  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
	];
	
	// Public methods list
	var methods = [
	  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
	  'any', 'contains'
	].concat(tags);
	
	// Overrided methods list
	var overrided = [
	  '_peekTag', '_decodeTag', '_use',
	  '_decodeStr', '_decodeObjid', '_decodeTime',
	  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',
	
	  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
	  '_encodeNull', '_encodeInt', '_encodeBool'
	];
	
	function Node(enc, parent) {
	  var state = {};
	  this._baseState = state;
	
	  state.enc = enc;
	
	  state.parent = parent || null;
	  state.children = null;
	
	  // State
	  state.tag = null;
	  state.args = null;
	  state.reverseArgs = null;
	  state.choice = null;
	  state.optional = false;
	  state.any = false;
	  state.obj = false;
	  state.use = null;
	  state.useDecoder = null;
	  state.key = null;
	  state['default'] = null;
	  state.explicit = null;
	  state.implicit = null;
	  state.contains = null;
	
	  // Should create new instance on each method
	  if (!state.parent) {
	    state.children = [];
	    this._wrap();
	  }
	}
	module.exports = Node;
	
	var stateProps = [
	  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
	  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
	  'implicit', 'contains'
	];
	
	Node.prototype.clone = function clone() {
	  var state = this._baseState;
	  var cstate = {};
	  stateProps.forEach(function(prop) {
	    cstate[prop] = state[prop];
	  });
	  var res = new this.constructor(cstate.parent);
	  res._baseState = cstate;
	  return res;
	};
	
	Node.prototype._wrap = function wrap() {
	  var state = this._baseState;
	  methods.forEach(function(method) {
	    this[method] = function _wrappedMethod() {
	      var clone = new this.constructor(this);
	      state.children.push(clone);
	      return clone[method].apply(clone, arguments);
	    };
	  }, this);
	};
	
	Node.prototype._init = function init(body) {
	  var state = this._baseState;
	
	  assert(state.parent === null);
	  body.call(this);
	
	  // Filter children
	  state.children = state.children.filter(function(child) {
	    return child._baseState.parent === this;
	  }, this);
	  assert.equal(state.children.length, 1, 'Root node can have only one child');
	};
	
	Node.prototype._useArgs = function useArgs(args) {
	  var state = this._baseState;
	
	  // Filter children and args
	  var children = args.filter(function(arg) {
	    return arg instanceof this.constructor;
	  }, this);
	  args = args.filter(function(arg) {
	    return !(arg instanceof this.constructor);
	  }, this);
	
	  if (children.length !== 0) {
	    assert(state.children === null);
	    state.children = children;
	
	    // Replace parent to maintain backward link
	    children.forEach(function(child) {
	      child._baseState.parent = this;
	    }, this);
	  }
	  if (args.length !== 0) {
	    assert(state.args === null);
	    state.args = args;
	    state.reverseArgs = args.map(function(arg) {
	      if (typeof arg !== 'object' || arg.constructor !== Object)
	        return arg;
	
	      var res = {};
	      Object.keys(arg).forEach(function(key) {
	        if (key == (key | 0))
	          key |= 0;
	        var value = arg[key];
	        res[value] = key;
	      });
	      return res;
	    });
	  }
	};
	
	//
	// Overrided methods
	//
	
	overrided.forEach(function(method) {
	  Node.prototype[method] = function _overrided() {
	    var state = this._baseState;
	    throw new Error(method + ' not implemented for encoding: ' + state.enc);
	  };
	});
	
	//
	// Public methods
	//
	
	tags.forEach(function(tag) {
	  Node.prototype[tag] = function _tagMethod() {
	    var state = this._baseState;
	    var args = Array.prototype.slice.call(arguments);
	
	    assert(state.tag === null);
	    state.tag = tag;
	
	    this._useArgs(args);
	
	    return this;
	  };
	});
	
	Node.prototype.use = function use(item) {
	  var state = this._baseState;
	
	  assert(state.use === null);
	  state.use = item;
	
	  return this;
	};
	
	Node.prototype.optional = function optional() {
	  var state = this._baseState;
	
	  state.optional = true;
	
	  return this;
	};
	
	Node.prototype.def = function def(val) {
	  var state = this._baseState;
	
	  assert(state['default'] === null);
	  state['default'] = val;
	  state.optional = true;
	
	  return this;
	};
	
	Node.prototype.explicit = function explicit(num) {
	  var state = this._baseState;
	
	  assert(state.explicit === null && state.implicit === null);
	  state.explicit = num;
	
	  return this;
	};
	
	Node.prototype.implicit = function implicit(num) {
	  var state = this._baseState;
	
	  assert(state.explicit === null && state.implicit === null);
	  state.implicit = num;
	
	  return this;
	};
	
	Node.prototype.obj = function obj() {
	  var state = this._baseState;
	  var args = Array.prototype.slice.call(arguments);
	
	  state.obj = true;
	
	  if (args.length !== 0)
	    this._useArgs(args);
	
	  return this;
	};
	
	Node.prototype.key = function key(newKey) {
	  var state = this._baseState;
	
	  assert(state.key === null);
	  state.key = newKey;
	
	  return this;
	};
	
	Node.prototype.any = function any() {
	  var state = this._baseState;
	
	  state.any = true;
	
	  return this;
	};
	
	Node.prototype.choice = function choice(obj) {
	  var state = this._baseState;
	
	  assert(state.choice === null);
	  state.choice = obj;
	  this._useArgs(Object.keys(obj).map(function(key) {
	    return obj[key];
	  }));
	
	  return this;
	};
	
	Node.prototype.contains = function contains(item) {
	  var state = this._baseState;
	
	  assert(state.use === null);
	  state.contains = item;
	
	  return this;
	};
	
	//
	// Decoding
	//
	
	Node.prototype._decode = function decode(input, options) {
	  var state = this._baseState;
	
	  // Decode root node
	  if (state.parent === null)
	    return input.wrapResult(state.children[0]._decode(input, options));
	
	  var result = state['default'];
	  var present = true;
	
	  var prevKey = null;
	  if (state.key !== null)
	    prevKey = input.enterKey(state.key);
	
	  // Check if tag is there
	  if (state.optional) {
	    var tag = null;
	    if (state.explicit !== null)
	      tag = state.explicit;
	    else if (state.implicit !== null)
	      tag = state.implicit;
	    else if (state.tag !== null)
	      tag = state.tag;
	
	    if (tag === null && !state.any) {
	      // Trial and Error
	      var save = input.save();
	      try {
	        if (state.choice === null)
	          this._decodeGeneric(state.tag, input, options);
	        else
	          this._decodeChoice(input, options);
	        present = true;
	      } catch (e) {
	        present = false;
	      }
	      input.restore(save);
	    } else {
	      present = this._peekTag(input, tag, state.any);
	
	      if (input.isError(present))
	        return present;
	    }
	  }
	
	  // Push object on stack
	  var prevObj;
	  if (state.obj && present)
	    prevObj = input.enterObject();
	
	  if (present) {
	    // Unwrap explicit values
	    if (state.explicit !== null) {
	      var explicit = this._decodeTag(input, state.explicit);
	      if (input.isError(explicit))
	        return explicit;
	      input = explicit;
	    }
	
	    var start = input.offset;
	
	    // Unwrap implicit and normal values
	    if (state.use === null && state.choice === null) {
	      if (state.any)
	        var save = input.save();
	      var body = this._decodeTag(
	        input,
	        state.implicit !== null ? state.implicit : state.tag,
	        state.any
	      );
	      if (input.isError(body))
	        return body;
	
	      if (state.any)
	        result = input.raw(save);
	      else
	        input = body;
	    }
	
	    if (options && options.track && state.tag !== null)
	      options.track(input.path(), start, input.length, 'tagged');
	
	    if (options && options.track && state.tag !== null)
	      options.track(input.path(), input.offset, input.length, 'content');
	
	    // Select proper method for tag
	    if (state.any)
	      result = result;
	    else if (state.choice === null)
	      result = this._decodeGeneric(state.tag, input, options);
	    else
	      result = this._decodeChoice(input, options);
	
	    if (input.isError(result))
	      return result;
	
	    // Decode children
	    if (!state.any && state.choice === null && state.children !== null) {
	      state.children.forEach(function decodeChildren(child) {
	        // NOTE: We are ignoring errors here, to let parser continue with other
	        // parts of encoded data
	        child._decode(input, options);
	      });
	    }
	
	    // Decode contained/encoded by schema, only in bit or octet strings
	    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
	      var data = new DecoderBuffer(result);
	      result = this._getUse(state.contains, input._reporterState.obj)
	          ._decode(data, options);
	    }
	  }
	
	  // Pop object
	  if (state.obj && present)
	    result = input.leaveObject(prevObj);
	
	  // Set key
	  if (state.key !== null && (result !== null || present === true))
	    input.leaveKey(prevKey, state.key, result);
	  else if (prevKey !== null)
	    input.exitKey(prevKey);
	
	  return result;
	};
	
	Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
	  var state = this._baseState;
	
	  if (tag === 'seq' || tag === 'set')
	    return null;
	  if (tag === 'seqof' || tag === 'setof')
	    return this._decodeList(input, tag, state.args[0], options);
	  else if (/str$/.test(tag))
	    return this._decodeStr(input, tag, options);
	  else if (tag === 'objid' && state.args)
	    return this._decodeObjid(input, state.args[0], state.args[1], options);
	  else if (tag === 'objid')
	    return this._decodeObjid(input, null, null, options);
	  else if (tag === 'gentime' || tag === 'utctime')
	    return this._decodeTime(input, tag, options);
	  else if (tag === 'null_')
	    return this._decodeNull(input, options);
	  else if (tag === 'bool')
	    return this._decodeBool(input, options);
	  else if (tag === 'int' || tag === 'enum')
	    return this._decodeInt(input, state.args && state.args[0], options);
	
	  if (state.use !== null) {
	    return this._getUse(state.use, input._reporterState.obj)
	        ._decode(input, options);
	  } else {
	    return input.error('unknown tag: ' + tag);
	  }
	};
	
	Node.prototype._getUse = function _getUse(entity, obj) {
	
	  var state = this._baseState;
	  // Create altered use decoder if implicit is set
	  state.useDecoder = this._use(entity, obj);
	  assert(state.useDecoder._baseState.parent === null);
	  state.useDecoder = state.useDecoder._baseState.children[0];
	  if (state.implicit !== state.useDecoder._baseState.implicit) {
	    state.useDecoder = state.useDecoder.clone();
	    state.useDecoder._baseState.implicit = state.implicit;
	  }
	  return state.useDecoder;
	};
	
	Node.prototype._decodeChoice = function decodeChoice(input, options) {
	  var state = this._baseState;
	  var result = null;
	  var match = false;
	
	  Object.keys(state.choice).some(function(key) {
	    var save = input.save();
	    var node = state.choice[key];
	    try {
	      var value = node._decode(input, options);
	      if (input.isError(value))
	        return false;
	
	      result = { type: key, value: value };
	      match = true;
	    } catch (e) {
	      input.restore(save);
	      return false;
	    }
	    return true;
	  }, this);
	
	  if (!match)
	    return input.error('Choice not matched');
	
	  return result;
	};
	
	//
	// Encoding
	//
	
	Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
	  return new EncoderBuffer(data, this.reporter);
	};
	
	Node.prototype._encode = function encode(data, reporter, parent) {
	  var state = this._baseState;
	  if (state['default'] !== null && state['default'] === data)
	    return;
	
	  var result = this._encodeValue(data, reporter, parent);
	  if (result === undefined)
	    return;
	
	  if (this._skipDefault(result, reporter, parent))
	    return;
	
	  return result;
	};
	
	Node.prototype._encodeValue = function encode(data, reporter, parent) {
	  var state = this._baseState;
	
	  // Decode root node
	  if (state.parent === null)
	    return state.children[0]._encode(data, reporter || new Reporter());
	
	  var result = null;
	
	  // Set reporter to share it with a child class
	  this.reporter = reporter;
	
	  // Check if data is there
	  if (state.optional && data === undefined) {
	    if (state['default'] !== null)
	      data = state['default']
	    else
	      return;
	  }
	
	  // Encode children first
	  var content = null;
	  var primitive = false;
	  if (state.any) {
	    // Anything that was given is translated to buffer
	    result = this._createEncoderBuffer(data);
	  } else if (state.choice) {
	    result = this._encodeChoice(data, reporter);
	  } else if (state.contains) {
	    content = this._getUse(state.contains, parent)._encode(data, reporter);
	    primitive = true;
	  } else if (state.children) {
	    content = state.children.map(function(child) {
	      if (child._baseState.tag === 'null_')
	        return child._encode(null, reporter, data);
	
	      if (child._baseState.key === null)
	        return reporter.error('Child should have a key');
	      var prevKey = reporter.enterKey(child._baseState.key);
	
	      if (typeof data !== 'object')
	        return reporter.error('Child expected, but input is not object');
	
	      var res = child._encode(data[child._baseState.key], reporter, data);
	      reporter.leaveKey(prevKey);
	
	      return res;
	    }, this).filter(function(child) {
	      return child;
	    });
	    content = this._createEncoderBuffer(content);
	  } else {
	    if (state.tag === 'seqof' || state.tag === 'setof') {
	      // TODO(indutny): this should be thrown on DSL level
	      if (!(state.args && state.args.length === 1))
	        return reporter.error('Too many args for : ' + state.tag);
	
	      if (!Array.isArray(data))
	        return reporter.error('seqof/setof, but data is not Array');
	
	      var child = this.clone();
	      child._baseState.implicit = null;
	      content = this._createEncoderBuffer(data.map(function(item) {
	        var state = this._baseState;
	
	        return this._getUse(state.args[0], data)._encode(item, reporter);
	      }, child));
	    } else if (state.use !== null) {
	      result = this._getUse(state.use, parent)._encode(data, reporter);
	    } else {
	      content = this._encodePrimitive(state.tag, data);
	      primitive = true;
	    }
	  }
	
	  // Encode data itself
	  var result;
	  if (!state.any && state.choice === null) {
	    var tag = state.implicit !== null ? state.implicit : state.tag;
	    var cls = state.implicit === null ? 'universal' : 'context';
	
	    if (tag === null) {
	      if (state.use === null)
	        reporter.error('Tag could be ommited only for .use()');
	    } else {
	      if (state.use === null)
	        result = this._encodeComposite(tag, primitive, cls, content);
	    }
	  }
	
	  // Wrap in explicit
	  if (state.explicit !== null)
	    result = this._encodeComposite(state.explicit, false, 'context', result);
	
	  return result;
	};
	
	Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
	  var state = this._baseState;
	
	  var node = state.choice[data.type];
	  if (!node) {
	    assert(
	        false,
	        data.type + ' not found in ' +
	            JSON.stringify(Object.keys(state.choice)));
	  }
	  return node._encode(data.value, reporter);
	};
	
	Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
	  var state = this._baseState;
	
	  if (/str$/.test(tag))
	    return this._encodeStr(data, tag);
	  else if (tag === 'objid' && state.args)
	    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
	  else if (tag === 'objid')
	    return this._encodeObjid(data, null, null);
	  else if (tag === 'gentime' || tag === 'utctime')
	    return this._encodeTime(data, tag);
	  else if (tag === 'null_')
	    return this._encodeNull();
	  else if (tag === 'int' || tag === 'enum')
	    return this._encodeInt(data, state.args && state.reverseArgs[0]);
	  else if (tag === 'bool')
	    return this._encodeBool(data);
	  else
	    throw new Error('Unsupported tag: ' + tag);
	};
	
	Node.prototype._isNumstr = function isNumstr(str) {
	  return /^[0-9 ]*$/.test(str);
	};
	
	Node.prototype._isPrintstr = function isPrintstr(str) {
	  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
	};


/***/ },
/* 995 */
/***/ function(module, exports, __webpack_require__) {

	var constants = exports;
	
	// Helper
	constants._reverse = function reverse(map) {
	  var res = {};
	
	  Object.keys(map).forEach(function(key) {
	    // Convert key to integer if it is stringified
	    if ((key | 0) == key)
	      key = key | 0;
	
	    var value = map[key];
	    res[value] = key;
	  });
	
	  return res;
	};
	
	constants.der = __webpack_require__(996);


/***/ },
/* 996 */
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(995);
	
	exports.tagClass = {
	  0: 'universal',
	  1: 'application',
	  2: 'context',
	  3: 'private'
	};
	exports.tagClassByName = constants._reverse(exports.tagClass);
	
	exports.tag = {
	  0x00: 'end',
	  0x01: 'bool',
	  0x02: 'int',
	  0x03: 'bitstr',
	  0x04: 'octstr',
	  0x05: 'null_',
	  0x06: 'objid',
	  0x07: 'objDesc',
	  0x08: 'external',
	  0x09: 'real',
	  0x0a: 'enum',
	  0x0b: 'embed',
	  0x0c: 'utf8str',
	  0x0d: 'relativeOid',
	  0x10: 'seq',
	  0x11: 'set',
	  0x12: 'numstr',
	  0x13: 'printstr',
	  0x14: 't61str',
	  0x15: 'videostr',
	  0x16: 'ia5str',
	  0x17: 'utctime',
	  0x18: 'gentime',
	  0x19: 'graphstr',
	  0x1a: 'iso646str',
	  0x1b: 'genstr',
	  0x1c: 'unistr',
	  0x1d: 'charstr',
	  0x1e: 'bmpstr'
	};
	exports.tagByName = constants._reverse(exports.tag);


/***/ },
/* 997 */
/***/ function(module, exports, __webpack_require__) {

	var decoders = exports;
	
	decoders.der = __webpack_require__(998);
	decoders.pem = __webpack_require__(999);


/***/ },
/* 998 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	
	var asn1 = __webpack_require__(987);
	var base = asn1.base;
	var bignum = asn1.bignum;
	
	// Import DER constants
	var der = asn1.constants.der;
	
	function DERDecoder(entity) {
	  this.enc = 'der';
	  this.name = entity.name;
	  this.entity = entity;
	
	  // Construct base tree
	  this.tree = new DERNode();
	  this.tree._init(entity.body);
	};
	module.exports = DERDecoder;
	
	DERDecoder.prototype.decode = function decode(data, options) {
	  if (!(data instanceof base.DecoderBuffer))
	    data = new base.DecoderBuffer(data, options);
	
	  return this.tree._decode(data, options);
	};
	
	// Tree methods
	
	function DERNode(parent) {
	  base.Node.call(this, 'der', parent);
	}
	inherits(DERNode, base.Node);
	
	DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
	  if (buffer.isEmpty())
	    return false;
	
	  var state = buffer.save();
	  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
	  if (buffer.isError(decodedTag))
	    return decodedTag;
	
	  buffer.restore(state);
	
	  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
	    (decodedTag.tagStr + 'of') === tag || any;
	};
	
	DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
	  var decodedTag = derDecodeTag(buffer,
	                                'Failed to decode tag of "' + tag + '"');
	  if (buffer.isError(decodedTag))
	    return decodedTag;
	
	  var len = derDecodeLen(buffer,
	                         decodedTag.primitive,
	                         'Failed to get length of "' + tag + '"');
	
	  // Failure
	  if (buffer.isError(len))
	    return len;
	
	  if (!any &&
	      decodedTag.tag !== tag &&
	      decodedTag.tagStr !== tag &&
	      decodedTag.tagStr + 'of' !== tag) {
	    return buffer.error('Failed to match tag: "' + tag + '"');
	  }
	
	  if (decodedTag.primitive || len !== null)
	    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
	
	  // Indefinite length... find END tag
	  var state = buffer.save();
	  var res = this._skipUntilEnd(
	      buffer,
	      'Failed to skip indefinite length body: "' + this.tag + '"');
	  if (buffer.isError(res))
	    return res;
	
	  len = buffer.offset - state.offset;
	  buffer.restore(state);
	  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
	};
	
	DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
	  while (true) {
	    var tag = derDecodeTag(buffer, fail);
	    if (buffer.isError(tag))
	      return tag;
	    var len = derDecodeLen(buffer, tag.primitive, fail);
	    if (buffer.isError(len))
	      return len;
	
	    var res;
	    if (tag.primitive || len !== null)
	      res = buffer.skip(len)
	    else
	      res = this._skipUntilEnd(buffer, fail);
	
	    // Failure
	    if (buffer.isError(res))
	      return res;
	
	    if (tag.tagStr === 'end')
	      break;
	  }
	};
	
	DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
	                                                    options) {
	  var result = [];
	  while (!buffer.isEmpty()) {
	    var possibleEnd = this._peekTag(buffer, 'end');
	    if (buffer.isError(possibleEnd))
	      return possibleEnd;
	
	    var res = decoder.decode(buffer, 'der', options);
	    if (buffer.isError(res) && possibleEnd)
	      break;
	    result.push(res);
	  }
	  return result;
	};
	
	DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
	  if (tag === 'bitstr') {
	    var unused = buffer.readUInt8();
	    if (buffer.isError(unused))
	      return unused;
	    return { unused: unused, data: buffer.raw() };
	  } else if (tag === 'bmpstr') {
	    var raw = buffer.raw();
	    if (raw.length % 2 === 1)
	      return buffer.error('Decoding of string type: bmpstr length mismatch');
	
	    var str = '';
	    for (var i = 0; i < raw.length / 2; i++) {
	      str += String.fromCharCode(raw.readUInt16BE(i * 2));
	    }
	    return str;
	  } else if (tag === 'numstr') {
	    var numstr = buffer.raw().toString('ascii');
	    if (!this._isNumstr(numstr)) {
	      return buffer.error('Decoding of string type: ' +
	                          'numstr unsupported characters');
	    }
	    return numstr;
	  } else if (tag === 'octstr') {
	    return buffer.raw();
	  } else if (tag === 'printstr') {
	    var printstr = buffer.raw().toString('ascii');
	    if (!this._isPrintstr(printstr)) {
	      return buffer.error('Decoding of string type: ' +
	                          'printstr unsupported characters');
	    }
	    return printstr;
	  } else if (/str$/.test(tag)) {
	    return buffer.raw().toString();
	  } else {
	    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
	  }
	};
	
	DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
	  var result;
	  var identifiers = [];
	  var ident = 0;
	  while (!buffer.isEmpty()) {
	    var subident = buffer.readUInt8();
	    ident <<= 7;
	    ident |= subident & 0x7f;
	    if ((subident & 0x80) === 0) {
	      identifiers.push(ident);
	      ident = 0;
	    }
	  }
	  if (subident & 0x80)
	    identifiers.push(ident);
	
	  var first = (identifiers[0] / 40) | 0;
	  var second = identifiers[0] % 40;
	
	  if (relative)
	    result = identifiers;
	  else
	    result = [first, second].concat(identifiers.slice(1));
	
	  if (values) {
	    var tmp = values[result.join(' ')];
	    if (tmp === undefined)
	      tmp = values[result.join('.')];
	    if (tmp !== undefined)
	      result = tmp;
	  }
	
	  return result;
	};
	
	DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
	  var str = buffer.raw().toString();
	  if (tag === 'gentime') {
	    var year = str.slice(0, 4) | 0;
	    var mon = str.slice(4, 6) | 0;
	    var day = str.slice(6, 8) | 0;
	    var hour = str.slice(8, 10) | 0;
	    var min = str.slice(10, 12) | 0;
	    var sec = str.slice(12, 14) | 0;
	  } else if (tag === 'utctime') {
	    var year = str.slice(0, 2) | 0;
	    var mon = str.slice(2, 4) | 0;
	    var day = str.slice(4, 6) | 0;
	    var hour = str.slice(6, 8) | 0;
	    var min = str.slice(8, 10) | 0;
	    var sec = str.slice(10, 12) | 0;
	    if (year < 70)
	      year = 2000 + year;
	    else
	      year = 1900 + year;
	  } else {
	    return buffer.error('Decoding ' + tag + ' time is not supported yet');
	  }
	
	  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
	};
	
	DERNode.prototype._decodeNull = function decodeNull(buffer) {
	  return null;
	};
	
	DERNode.prototype._decodeBool = function decodeBool(buffer) {
	  var res = buffer.readUInt8();
	  if (buffer.isError(res))
	    return res;
	  else
	    return res !== 0;
	};
	
	DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
	  // Bigint, return as it is (assume big endian)
	  var raw = buffer.raw();
	  var res = new bignum(raw);
	
	  if (values)
	    res = values[res.toString(10)] || res;
	
	  return res;
	};
	
	DERNode.prototype._use = function use(entity, obj) {
	  if (typeof entity === 'function')
	    entity = entity(obj);
	  return entity._getDecoder('der').tree;
	};
	
	// Utility methods
	
	function derDecodeTag(buf, fail) {
	  var tag = buf.readUInt8(fail);
	  if (buf.isError(tag))
	    return tag;
	
	  var cls = der.tagClass[tag >> 6];
	  var primitive = (tag & 0x20) === 0;
	
	  // Multi-octet tag - load
	  if ((tag & 0x1f) === 0x1f) {
	    var oct = tag;
	    tag = 0;
	    while ((oct & 0x80) === 0x80) {
	      oct = buf.readUInt8(fail);
	      if (buf.isError(oct))
	        return oct;
	
	      tag <<= 7;
	      tag |= oct & 0x7f;
	    }
	  } else {
	    tag &= 0x1f;
	  }
	  var tagStr = der.tag[tag];
	
	  return {
	    cls: cls,
	    primitive: primitive,
	    tag: tag,
	    tagStr: tagStr
	  };
	}
	
	function derDecodeLen(buf, primitive, fail) {
	  var len = buf.readUInt8(fail);
	  if (buf.isError(len))
	    return len;
	
	  // Indefinite form
	  if (!primitive && len === 0x80)
	    return null;
	
	  // Definite form
	  if ((len & 0x80) === 0) {
	    // Short form
	    return len;
	  }
	
	  // Long form
	  var num = len & 0x7f;
	  if (num >= 4)
	    return buf.error('length octect is too long');
	
	  len = 0;
	  for (var i = 0; i < num; i++) {
	    len <<= 8;
	    var j = buf.readUInt8(fail);
	    if (buf.isError(j))
	      return j;
	    len |= j;
	  }
	
	  return len;
	}


/***/ },
/* 999 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Buffer = __webpack_require__(820).Buffer;
	
	var DERDecoder = __webpack_require__(998);
	
	function PEMDecoder(entity) {
	  DERDecoder.call(this, entity);
	  this.enc = 'pem';
	};
	inherits(PEMDecoder, DERDecoder);
	module.exports = PEMDecoder;
	
	PEMDecoder.prototype.decode = function decode(data, options) {
	  var lines = data.toString().split(/[\r\n]+/g);
	
	  var label = options.label.toUpperCase();
	
	  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
	  var start = -1;
	  var end = -1;
	  for (var i = 0; i < lines.length; i++) {
	    var match = lines[i].match(re);
	    if (match === null)
	      continue;
	
	    if (match[2] !== label)
	      continue;
	
	    if (start === -1) {
	      if (match[1] !== 'BEGIN')
	        break;
	      start = i;
	    } else {
	      if (match[1] !== 'END')
	        break;
	      end = i;
	      break;
	    }
	  }
	  if (start === -1 || end === -1)
	    throw new Error('PEM section not found for: ' + label);
	
	  var base64 = lines.slice(start + 1, end).join('');
	  // Remove excessive symbols
	  base64.replace(/[^a-z0-9\+\/=]+/gi, '');
	
	  var input = new Buffer(base64, 'base64');
	  return DERDecoder.prototype.decode.call(this, input, options);
	};


/***/ },
/* 1000 */
/***/ function(module, exports, __webpack_require__) {

	var encoders = exports;
	
	encoders.der = __webpack_require__(1001);
	encoders.pem = __webpack_require__(1002);


/***/ },
/* 1001 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Buffer = __webpack_require__(820).Buffer;
	
	var asn1 = __webpack_require__(987);
	var base = asn1.base;
	
	// Import DER constants
	var der = asn1.constants.der;
	
	function DEREncoder(entity) {
	  this.enc = 'der';
	  this.name = entity.name;
	  this.entity = entity;
	
	  // Construct base tree
	  this.tree = new DERNode();
	  this.tree._init(entity.body);
	};
	module.exports = DEREncoder;
	
	DEREncoder.prototype.encode = function encode(data, reporter) {
	  return this.tree._encode(data, reporter).join();
	};
	
	// Tree methods
	
	function DERNode(parent) {
	  base.Node.call(this, 'der', parent);
	}
	inherits(DERNode, base.Node);
	
	DERNode.prototype._encodeComposite = function encodeComposite(tag,
	                                                              primitive,
	                                                              cls,
	                                                              content) {
	  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
	
	  // Short form
	  if (content.length < 0x80) {
	    var header = new Buffer(2);
	    header[0] = encodedTag;
	    header[1] = content.length;
	    return this._createEncoderBuffer([ header, content ]);
	  }
	
	  // Long form
	  // Count octets required to store length
	  var lenOctets = 1;
	  for (var i = content.length; i >= 0x100; i >>= 8)
	    lenOctets++;
	
	  var header = new Buffer(1 + 1 + lenOctets);
	  header[0] = encodedTag;
	  header[1] = 0x80 | lenOctets;
	
	  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
	    header[i] = j & 0xff;
	
	  return this._createEncoderBuffer([ header, content ]);
	};
	
	DERNode.prototype._encodeStr = function encodeStr(str, tag) {
	  if (tag === 'bitstr') {
	    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
	  } else if (tag === 'bmpstr') {
	    var buf = new Buffer(str.length * 2);
	    for (var i = 0; i < str.length; i++) {
	      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
	    }
	    return this._createEncoderBuffer(buf);
	  } else if (tag === 'numstr') {
	    if (!this._isNumstr(str)) {
	      return this.reporter.error('Encoding of string type: numstr supports ' +
	                                 'only digits and space');
	    }
	    return this._createEncoderBuffer(str);
	  } else if (tag === 'printstr') {
	    if (!this._isPrintstr(str)) {
	      return this.reporter.error('Encoding of string type: printstr supports ' +
	                                 'only latin upper and lower case letters, ' +
	                                 'digits, space, apostrophe, left and rigth ' +
	                                 'parenthesis, plus sign, comma, hyphen, ' +
	                                 'dot, slash, colon, equal sign, ' +
	                                 'question mark');
	    }
	    return this._createEncoderBuffer(str);
	  } else if (/str$/.test(tag)) {
	    return this._createEncoderBuffer(str);
	  } else {
	    return this.reporter.error('Encoding of string type: ' + tag +
	                               ' unsupported');
	  }
	};
	
	DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
	  if (typeof id === 'string') {
	    if (!values)
	      return this.reporter.error('string objid given, but no values map found');
	    if (!values.hasOwnProperty(id))
	      return this.reporter.error('objid not found in values map');
	    id = values[id].split(/[\s\.]+/g);
	    for (var i = 0; i < id.length; i++)
	      id[i] |= 0;
	  } else if (Array.isArray(id)) {
	    id = id.slice();
	    for (var i = 0; i < id.length; i++)
	      id[i] |= 0;
	  }
	
	  if (!Array.isArray(id)) {
	    return this.reporter.error('objid() should be either array or string, ' +
	                               'got: ' + JSON.stringify(id));
	  }
	
	  if (!relative) {
	    if (id[1] >= 40)
	      return this.reporter.error('Second objid identifier OOB');
	    id.splice(0, 2, id[0] * 40 + id[1]);
	  }
	
	  // Count number of octets
	  var size = 0;
	  for (var i = 0; i < id.length; i++) {
	    var ident = id[i];
	    for (size++; ident >= 0x80; ident >>= 7)
	      size++;
	  }
	
	  var objid = new Buffer(size);
	  var offset = objid.length - 1;
	  for (var i = id.length - 1; i >= 0; i--) {
	    var ident = id[i];
	    objid[offset--] = ident & 0x7f;
	    while ((ident >>= 7) > 0)
	      objid[offset--] = 0x80 | (ident & 0x7f);
	  }
	
	  return this._createEncoderBuffer(objid);
	};
	
	function two(num) {
	  if (num < 10)
	    return '0' + num;
	  else
	    return num;
	}
	
	DERNode.prototype._encodeTime = function encodeTime(time, tag) {
	  var str;
	  var date = new Date(time);
	
	  if (tag === 'gentime') {
	    str = [
	      two(date.getFullYear()),
	      two(date.getUTCMonth() + 1),
	      two(date.getUTCDate()),
	      two(date.getUTCHours()),
	      two(date.getUTCMinutes()),
	      two(date.getUTCSeconds()),
	      'Z'
	    ].join('');
	  } else if (tag === 'utctime') {
	    str = [
	      two(date.getFullYear() % 100),
	      two(date.getUTCMonth() + 1),
	      two(date.getUTCDate()),
	      two(date.getUTCHours()),
	      two(date.getUTCMinutes()),
	      two(date.getUTCSeconds()),
	      'Z'
	    ].join('');
	  } else {
	    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
	  }
	
	  return this._encodeStr(str, 'octstr');
	};
	
	DERNode.prototype._encodeNull = function encodeNull() {
	  return this._createEncoderBuffer('');
	};
	
	DERNode.prototype._encodeInt = function encodeInt(num, values) {
	  if (typeof num === 'string') {
	    if (!values)
	      return this.reporter.error('String int or enum given, but no values map');
	    if (!values.hasOwnProperty(num)) {
	      return this.reporter.error('Values map doesn\'t contain: ' +
	                                 JSON.stringify(num));
	    }
	    num = values[num];
	  }
	
	  // Bignum, assume big endian
	  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
	    var numArray = num.toArray();
	    if (!num.sign && numArray[0] & 0x80) {
	      numArray.unshift(0);
	    }
	    num = new Buffer(numArray);
	  }
	
	  if (Buffer.isBuffer(num)) {
	    var size = num.length;
	    if (num.length === 0)
	      size++;
	
	    var out = new Buffer(size);
	    num.copy(out);
	    if (num.length === 0)
	      out[0] = 0
	    return this._createEncoderBuffer(out);
	  }
	
	  if (num < 0x80)
	    return this._createEncoderBuffer(num);
	
	  if (num < 0x100)
	    return this._createEncoderBuffer([0, num]);
	
	  var size = 1;
	  for (var i = num; i >= 0x100; i >>= 8)
	    size++;
	
	  var out = new Array(size);
	  for (var i = out.length - 1; i >= 0; i--) {
	    out[i] = num & 0xff;
	    num >>= 8;
	  }
	  if(out[0] & 0x80) {
	    out.unshift(0);
	  }
	
	  return this._createEncoderBuffer(new Buffer(out));
	};
	
	DERNode.prototype._encodeBool = function encodeBool(value) {
	  return this._createEncoderBuffer(value ? 0xff : 0);
	};
	
	DERNode.prototype._use = function use(entity, obj) {
	  if (typeof entity === 'function')
	    entity = entity(obj);
	  return entity._getEncoder('der').tree;
	};
	
	DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
	  var state = this._baseState;
	  var i;
	  if (state['default'] === null)
	    return false;
	
	  var data = dataBuffer.join();
	  if (state.defaultBuffer === undefined)
	    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
	
	  if (data.length !== state.defaultBuffer.length)
	    return false;
	
	  for (i=0; i < data.length; i++)
	    if (data[i] !== state.defaultBuffer[i])
	      return false;
	
	  return true;
	};
	
	// Utility methods
	
	function encodeTag(tag, primitive, cls, reporter) {
	  var res;
	
	  if (tag === 'seqof')
	    tag = 'seq';
	  else if (tag === 'setof')
	    tag = 'set';
	
	  if (der.tagByName.hasOwnProperty(tag))
	    res = der.tagByName[tag];
	  else if (typeof tag === 'number' && (tag | 0) === tag)
	    res = tag;
	  else
	    return reporter.error('Unknown tag: ' + tag);
	
	  if (res >= 0x1f)
	    return reporter.error('Multi-octet tag encoding unsupported');
	
	  if (!primitive)
	    res |= 0x20;
	
	  res |= (der.tagClassByName[cls || 'universal'] << 6);
	
	  return res;
	}


/***/ },
/* 1002 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	
	var DEREncoder = __webpack_require__(1001);
	
	function PEMEncoder(entity) {
	  DEREncoder.call(this, entity);
	  this.enc = 'pem';
	};
	inherits(PEMEncoder, DEREncoder);
	module.exports = PEMEncoder;
	
	PEMEncoder.prototype.encode = function encode(data, options) {
	  var buf = DEREncoder.prototype.encode.call(this, data);
	
	  var p = buf.toString('base64');
	  var out = [ '-----BEGIN ' + options.label + '-----' ];
	  for (var i = 0; i < p.length; i += 64)
	    out.push(p.slice(i, i + 64));
	  out.push('-----END ' + options.label + '-----');
	  return out.join('\n');
	};


/***/ },
/* 1003 */
/***/ function(module, exports) {

	module.exports = {
		"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
		"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
		"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
		"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
		"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
		"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
		"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
		"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
		"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
		"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
		"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
		"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
	};

/***/ },
/* 1004 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// adapted from https://github.com/apatil/pemstrip
	var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
	var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
	var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
	var evp = __webpack_require__(923)
	var ciphers = __webpack_require__(924)
	module.exports = function (okey, password) {
	  var key = okey.toString()
	  var match = key.match(findProc)
	  var decrypted
	  if (!match) {
	    var match2 = key.match(fullRegex)
	    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
	  } else {
	    var suite = 'aes' + match[1]
	    var iv = new Buffer(match[2], 'hex')
	    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
	    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
	    var out = []
	    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
	    out.push(cipher.update(cipherText))
	    out.push(cipher.final())
	    decrypted = Buffer.concat(out)
	  }
	  var tag = key.match(startRegex)[1] + ' KEY'
	  return {
	    tag: tag,
	    data: decrypted
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1005 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
	var curves = __webpack_require__(961)
	var elliptic = __webpack_require__(962)
	var parseKeys = __webpack_require__(985)
	
	var BN = __webpack_require__(951)
	var EC = elliptic.ec
	
	function verify (sig, hash, key, signType) {
	  var pub = parseKeys(key)
	  if (pub.type === 'ec') {
	    if (signType !== 'ecdsa') {
	      throw new Error('wrong public key type')
	    }
	    return ecVerify(sig, hash, pub)
	  } else if (pub.type === 'dsa') {
	    if (signType !== 'dsa') {
	      throw new Error('wrong public key type')
	    }
	    return dsaVerify(sig, hash, pub)
	  } else {
	    if (signType !== 'rsa') {
	      throw new Error('wrong public key type')
	    }
	  }
	  var len = pub.modulus.byteLength()
	  var pad = [ 1 ]
	  var padNum = 0
	  while (hash.length + pad.length + 2 < len) {
	    pad.push(0xff)
	    padNum++
	  }
	  pad.push(0x00)
	  var i = -1
	  while (++i < hash.length) {
	    pad.push(hash[i])
	  }
	  pad = new Buffer(pad)
	  var red = BN.mont(pub.modulus)
	  sig = new BN(sig).toRed(red)
	
	  sig = sig.redPow(new BN(pub.publicExponent))
	
	  sig = new Buffer(sig.fromRed().toArray())
	  var out = 0
	  if (padNum < 8) {
	    out = 1
	  }
	  len = Math.min(sig.length, pad.length)
	  if (sig.length !== pad.length) {
	    out = 1
	  }
	
	  i = -1
	  while (++i < len) {
	    out |= (sig[i] ^ pad[i])
	  }
	  return out === 0
	}
	
	function ecVerify (sig, hash, pub) {
	  var curveId = curves[pub.data.algorithm.curve.join('.')]
	  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))
	
	  var curve = new EC(curveId)
	  var pubkey = pub.data.subjectPrivateKey.data
	
	  return curve.verify(hash, sig, pubkey)
	}
	
	function dsaVerify (sig, hash, pub) {
	  var p = pub.data.p
	  var q = pub.data.q
	  var g = pub.data.g
	  var y = pub.data.pub_key
	  var unpacked = parseKeys.signature.decode(sig, 'der')
	  var s = unpacked.s
	  var r = unpacked.r
	  checkValue(s, q)
	  checkValue(r, q)
	  var montp = BN.mont(p)
	  var w = s.invm(q)
	  var v = g.toRed(montp)
	    .redPow(new BN(hash).mul(w).mod(q))
	    .fromRed()
	    .mul(
	      y.toRed(montp)
	        .redPow(r.mul(w).mod(q))
	        .fromRed()
	  ).mod(p).mod(q)
	  return !v.cmp(r)
	}
	
	function checkValue (b, q) {
	  if (b.cmpn(0) <= 0) {
	    throw new Error('invalid sig')
	  }
	  if (b.cmp(q) >= q) {
	    throw new Error('invalid sig')
	  }
	}
	
	module.exports = verify
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1006 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(962)
	var BN = __webpack_require__(951)
	
	module.exports = function createECDH (curve) {
	  return new ECDH(curve)
	}
	
	var aliases = {
	  secp256k1: {
	    name: 'secp256k1',
	    byteLength: 32
	  },
	  secp224r1: {
	    name: 'p224',
	    byteLength: 28
	  },
	  prime256v1: {
	    name: 'p256',
	    byteLength: 32
	  },
	  prime192v1: {
	    name: 'p192',
	    byteLength: 24
	  },
	  ed25519: {
	    name: 'ed25519',
	    byteLength: 32
	  },
	  secp384r1: {
	    name: 'p384',
	    byteLength: 48
	  },
	  secp521r1: {
	    name: 'p521',
	    byteLength: 66
	  }
	}
	
	aliases.p224 = aliases.secp224r1
	aliases.p256 = aliases.secp256r1 = aliases.prime256v1
	aliases.p192 = aliases.secp192r1 = aliases.prime192v1
	aliases.p384 = aliases.secp384r1
	aliases.p521 = aliases.secp521r1
	
	function ECDH (curve) {
	  this.curveType = aliases[curve]
	  if (!this.curveType) {
	    this.curveType = {
	      name: curve
	    }
	  }
	  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
	  this.keys = void 0
	}
	
	ECDH.prototype.generateKeys = function (enc, format) {
	  this.keys = this.curve.genKeyPair()
	  return this.getPublicKey(enc, format)
	}
	
	ECDH.prototype.computeSecret = function (other, inenc, enc) {
	  inenc = inenc || 'utf8'
	  if (!Buffer.isBuffer(other)) {
	    other = new Buffer(other, inenc)
	  }
	  var otherPub = this.curve.keyFromPublic(other).getPublic()
	  var out = otherPub.mul(this.keys.getPrivate()).getX()
	  return formatReturnValue(out, enc, this.curveType.byteLength)
	}
	
	ECDH.prototype.getPublicKey = function (enc, format) {
	  var key = this.keys.getPublic(format === 'compressed', true)
	  if (format === 'hybrid') {
	    if (key[key.length - 1] % 2) {
	      key[0] = 7
	    } else {
	      key[0] = 6
	    }
	  }
	  return formatReturnValue(key, enc)
	}
	
	ECDH.prototype.getPrivateKey = function (enc) {
	  return formatReturnValue(this.keys.getPrivate(), enc)
	}
	
	ECDH.prototype.setPublicKey = function (pub, enc) {
	  enc = enc || 'utf8'
	  if (!Buffer.isBuffer(pub)) {
	    pub = new Buffer(pub, enc)
	  }
	  this.keys._importPublic(pub)
	  return this
	}
	
	ECDH.prototype.setPrivateKey = function (priv, enc) {
	  enc = enc || 'utf8'
	  if (!Buffer.isBuffer(priv)) {
	    priv = new Buffer(priv, enc)
	  }
	
	  if (this.keys) {
	    var _priv = new BN(priv)
	    _priv = _priv.toString(16)
	    this.keys._importPrivate(_priv)
	  } else {
	    this.keys = this.curve.keyFromPrivate(priv)
	  }
	  return this
	}
	
	function formatReturnValue (bn, enc, len) {
	  if (!Array.isArray(bn)) {
	    bn = bn.toArray()
	  }
	  var buf = new Buffer(bn)
	  if (len && buf.length < len) {
	    var zeros = new Buffer(len - buf.length)
	    zeros.fill(0)
	    buf = Buffer.concat([zeros, buf])
	  }
	  if (!enc) {
	    return buf
	  } else {
	    return buf.toString(enc)
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1007 */
/***/ function(module, exports, __webpack_require__) {

	exports.publicEncrypt = __webpack_require__(1008);
	exports.privateDecrypt = __webpack_require__(1012);
	
	exports.privateEncrypt = function privateEncrypt(key, buf) {
	  return exports.publicEncrypt(key, buf, true);
	};
	
	exports.publicDecrypt = function publicDecrypt(key, buf) {
	  return exports.privateDecrypt(key, buf, true);
	};

/***/ },
/* 1008 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(985);
	var randomBytes = __webpack_require__(905);
	var createHash = __webpack_require__(906);
	var mgf = __webpack_require__(1009);
	var xor = __webpack_require__(1010);
	var bn = __webpack_require__(951);
	var withPublic = __webpack_require__(1011);
	var crt = __webpack_require__(960);
	
	var constants = {
	  RSA_PKCS1_OAEP_PADDING: 4,
	  RSA_PKCS1_PADDIN: 1,
	  RSA_NO_PADDING: 3
	};
	
	module.exports = function publicEncrypt(public_key, msg, reverse) {
	  var padding;
	  if (public_key.padding) {
	    padding = public_key.padding;
	  } else if (reverse) {
	    padding = 1;
	  } else {
	    padding = 4;
	  }
	  var key = parseKeys(public_key);
	  var paddedMsg;
	  if (padding === 4) {
	    paddedMsg = oaep(key, msg);
	  } else if (padding === 1) {
	    paddedMsg = pkcs1(key, msg, reverse);
	  } else if (padding === 3) {
	    paddedMsg = new bn(msg);
	    if (paddedMsg.cmp(key.modulus) >= 0) {
	      throw new Error('data too long for modulus');
	    }
	  } else {
	    throw new Error('unknown padding');
	  }
	  if (reverse) {
	    return crt(paddedMsg, key);
	  } else {
	    return withPublic(paddedMsg, key);
	  }
	};
	
	function oaep(key, msg){
	  var k = key.modulus.byteLength();
	  var mLen = msg.length;
	  var iHash = createHash('sha1').update(new Buffer('')).digest();
	  var hLen = iHash.length;
	  var hLen2 = 2 * hLen;
	  if (mLen > k - hLen2 - 2) {
	    throw new Error('message too long');
	  }
	  var ps = new Buffer(k - mLen - hLen2 - 2);
	  ps.fill(0);
	  var dblen = k - hLen - 1;
	  var seed = randomBytes(hLen);
	  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
	  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
	  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
	}
	function pkcs1(key, msg, reverse){
	  var mLen = msg.length;
	  var k = key.modulus.byteLength();
	  if (mLen > k - 11) {
	    throw new Error('message too long');
	  }
	  var ps;
	  if (reverse) {
	    ps = new Buffer(k - mLen - 3);
	    ps.fill(0xff);
	  } else {
	    ps = nonZero(k - mLen - 3);
	  }
	  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
	}
	function nonZero(len, crypto) {
	  var out = new Buffer(len);
	  var i = 0;
	  var cache = randomBytes(len*2);
	  var cur = 0;
	  var num;
	  while (i < len) {
	    if (cur === cache.length) {
	      cache = randomBytes(len*2);
	      cur = 0;
	    }
	    num = cache[cur++];
	    if (num) {
	      out[i++] = num;
	    }
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1009 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(906);
	module.exports = function (seed, len) {
	  var t = new Buffer('');
	  var  i = 0, c;
	  while (t.length < len) {
	    c = i2ops(i++);
	    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
	  }
	  return t.slice(0, len);
	};
	
	function i2ops(c) {
	  var out = new Buffer(4);
	  out.writeUInt32BE(c,0);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1010 */
/***/ function(module, exports) {

	module.exports = function xor(a, b) {
	  var len = a.length;
	  var i = -1;
	  while (++i < len) {
	    a[i] ^= b[i];
	  }
	  return a
	};

/***/ },
/* 1011 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(951);
	function withPublic(paddedMsg, key) {
	  return new Buffer(paddedMsg
	    .toRed(bn.mont(key.modulus))
	    .redPow(new bn(key.publicExponent))
	    .fromRed()
	    .toArray());
	}
	
	module.exports = withPublic;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1012 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(985);
	var mgf = __webpack_require__(1009);
	var xor = __webpack_require__(1010);
	var bn = __webpack_require__(951);
	var crt = __webpack_require__(960);
	var createHash = __webpack_require__(906);
	var withPublic = __webpack_require__(1011);
	module.exports = function privateDecrypt(private_key, enc, reverse) {
	  var padding;
	  if (private_key.padding) {
	    padding = private_key.padding;
	  } else if (reverse) {
	    padding = 1;
	  } else {
	    padding = 4;
	  }
	  
	  var key = parseKeys(private_key);
	  var k = key.modulus.byteLength();
	  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
	    throw new Error('decryption error');
	  }
	  var msg;
	  if (reverse) {
	    msg = withPublic(new bn(enc), key);
	  } else {
	    msg = crt(enc, key);
	  }
	  var zBuffer = new Buffer(k - msg.length);
	  zBuffer.fill(0);
	  msg = Buffer.concat([zBuffer, msg], k);
	  if (padding === 4) {
	    return oaep(key, msg);
	  } else if (padding === 1) {
	    return pkcs1(key, msg, reverse);
	  } else if (padding === 3) {
	    return msg;
	  } else {
	    throw new Error('unknown padding');
	  }
	};
	
	function oaep(key, msg){
	  var n = key.modulus;
	  var k = key.modulus.byteLength();
	  var mLen = msg.length;
	  var iHash = createHash('sha1').update(new Buffer('')).digest();
	  var hLen = iHash.length;
	  var hLen2 = 2 * hLen;
	  if (msg[0] !== 0) {
	    throw new Error('decryption error');
	  }
	  var maskedSeed = msg.slice(1, hLen + 1);
	  var maskedDb =  msg.slice(hLen + 1);
	  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
	  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
	  if (compare(iHash, db.slice(0, hLen))) {
	    throw new Error('decryption error');
	  }
	  var i = hLen;
	  while (db[i] === 0) {
	    i++;
	  }
	  if (db[i++] !== 1) {
	    throw new Error('decryption error');
	  }
	  return db.slice(i);
	}
	
	function pkcs1(key, msg, reverse){
	  var p1 = msg.slice(0, 2);
	  var i = 2;
	  var status = 0;
	  while (msg[i++] !== 0) {
	    if (i >= msg.length) {
	      status++;
	      break;
	    }
	  }
	  var ps = msg.slice(2, i - 1);
	  var p2 = msg.slice(i - 1, i);
	
	  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
	    status++;
	  }
	  if (ps.length < 8) {
	    status++;
	  }
	  if (status) {
	    throw new Error('decryption error');
	  }
	  return  msg.slice(i);
	}
	function compare(a, b){
	  a = new Buffer(a);
	  b = new Buffer(b);
	  var dif = 0;
	  var len = a.length;
	  if (a.length !== b.length) {
	    dif++;
	    len = Math.min(a.length, b.length);
	  }
	  var i = -1;
	  while (++i < len) {
	    dif += (a[i] ^ b[i]);
	  }
	  return dif;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1013 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*!The MIT License (MIT)
	 *
	 * Copyright (c) 2014 Petka Antonov
	 *
	 * With parts by 2009-2014 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:</p>
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var Promise = __webpack_require__(1014)();
	var scheduler = __webpack_require__(1018);
	var THIS = {};
	var INSTANCE = {};
	
	var aliasMap = {
	    thenReturn: "thenResolve",
	    thenThrow: "thenReject",
	    caught: "fail",
	    progressed: "progress",
	    lastly: "fin",
	    call: "send mcall invoke".split(" ")
	};
	
	var staticAliasMap = {
	    reject: "reject rejected".split(" "),
	    resolve: "resolve resolved fulfill fulfilled".split(" "),
	    is: "isPromise",
	    race: "race",
	    async: "coroutine",
	    spawn: "spawn",
	    delay: "delay",
	
	    timeout: INSTANCE,
	    join: INSTANCE,
	    spread: INSTANCE,
	    tap: INSTANCE,
	    thenReject: INSTANCE,
	    thenResolve: INSTANCE,
	    isPending: INSTANCE,
	    isFulfilled: INSTANCE,
	    isRejected: INSTANCE,
	    get: INSTANCE,
	    set: INSTANCE,
	    del: INSTANCE,
	    'delete': INSTANCE,
	    'try': INSTANCE,
	    keys: INSTANCE,
	    allResolved: INSTANCE,
	    allSettled: INSTANCE,
	    fail: INSTANCE,
	    "catch": INSTANCE,
	    progress: INSTANCE,
	    fin: INSTANCE,
	    "finally": INSTANCE,
	    done: INSTANCE,
	    timeout: INSTANCE,
	    nodeify: INSTANCE,
	    nfapply: INSTANCE,
	    nfcall: INSTANCE,
	    nfbind: INSTANCE,
	    npost: INSTANCE,
	    nsend: INSTANCE,
	    ninvoke: INSTANCE,
	    nbind: INSTANCE,
	    nmcall: INSTANCE,
	    fapply: INSTANCE,
	    fcall: INSTANCE,
	    fbind: INSTANCE,
	    denodeify: INSTANCE,
	    nmapply: INSTANCE,
	    mapply: INSTANCE,
	    post: INSTANCE,
	    send: INSTANCE,
	    mcall: INSTANCE,
	    invoke: INSTANCE
	};
	
	function Q(value) {
	    return Promise.resolve(value);
	}
	
	Q.all = Promise.all;
	
	Q.Promise = function(resolver) {
	    var ret = Q.defer();
	    try {
	        resolver(ret.resolve, ret.reject, ret.notify);
	    } catch (e) {
	        ret.reject(e);
	    }
	    return ret.promise;
	};
	Q.promise = Q.Promise;
	Q.isPromiseAlike = function(value) {
	    if (value instanceof Promise) return true;
	    // If it was a thenable it will always pending
	    // If it was a value it will always be fulfilled synchronously
	    return Promise.resolve(value).isPending();
	};
	var map = Promise.map;
	var resolve = Promise.resolve;
	Q.promised = function(func) {
	    return function() {
	        var args = [].slice.call(arguments);
	        args.unshift(this);
	        return map(args, resolve).then(function(args) {
	            return func.apply(args.shift(), args);
	        });
	    };
	};
	
	Q.when = function(a, b, c, d) {
	    return Q(a).then(b, c, d);
	};
	
	Q.nearer = function(value) {
	    if (value instanceof Promise) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	};
	Q.passByCopy = function(arg) {return arg;};
	
	Q.defer = function() {
	    var ret = {};
	    var promise = new Promise(function(resolve, reject) {
	        ret.resolve = ret.fulfill = resolve;
	        ret.reject = reject;
	    });
	    ret.promise = promise;
	    ret.notify = bind(promise._progress, promise);
	    ret.makeNodeResolver = function() {
	        return function(err, result) {
	            if (err) return ret.reject(err);
	            if (arguments.length > 2) return ret.resolve([].slice.call(arguments, 1));
	            return ret.resolve(result);
	        };
	    };
	    return ret;
	};
	Q.deferred = Q.pending = Q.defer;
	
	
	var settle = Promise.settle;
	var map = Promise.map;
	Promise.prototype.allSettled = function() {
	    return map(settle(this), bluebirdInspectionToQInspection);
	};
	
	Promise.prototype.allResolved = function() {
	    return map(settle(this), function(i) {
	        if (i.isFulfilled()) return Q(i.value());
	        if (i.isRejected()) return Q.reject(i.reason());
	    });
	};
	
	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};
	
	Promise.prototype.fbind = function() {
	    var args = [].slice.call(arguments);
	    var promise = this;
	    return function() {
	        args = args.concat([].slice.call(arguments));
	        var self = this;
	        return promise.then(function(fn) {
	            return fn.apply(self, args);
	        });
	    };
	};
	
	Promise.prototype.fapply = function(args) {
	    return this.then(function(f) {
	        return f.apply(undefined, args);
	    });
	};
	
	Promise.prototype["try"] = Promise.prototype.fcall = function() {
	    return this.fapply.call(this, [].slice.call(arguments));
	};
	
	Promise.prototype.nfapply = function(args) {
	    return this.then(function(nodeFn) {
	        return doNode(nodeFn, undefined, args);
	    });
	};
	
	Promise.prototype.nfcall = function() {
	    return this.nfapply.call(this, [].slice.call(arguments));
	};
	
	Promise.prototype.nfbind = Promise.prototype.denodeify = function() {
	    var nodeFn = this;
	    var args = [].slice.call(arguments);
	    return function() {
	        var self = this;
	        args = args.concat([].slice.call(arguments));
	        return nodeFn.then(function(nodeFn) {
	            return doNode(nodeFn, self, args);
	        });
	    };
	};
	
	Promise.prototype.nbind = function(ctx) {
	    var nodeFn = this;
	    var args = [].slice.call(arguments, 1);
	    return function() {
	        args = args.concat([].slice.call(arguments));
	        return nodeFn.then(function(nodeFn) {
	            return doNode(nodeFn, ctx, args);
	        });
	    };
	};
	
	Promise.prototype.npost = Promise.prototype.nmapply = function(name, args) {
	    return this.then(function(object) {
	        return doNode(object[name], object, args);
	    });
	};
	
	Promise.prototype.ninvoke = Promise.prototype.nsend =
	Promise.prototype.nmcall = function(name) {
	    var args = [].slice.call(arguments, 1);
	    return this.then(function(object) {
	        return doNode(object[name], object, args);
	    });
	};
	
	Promise.prototype.mapply = Promise.prototype.post = function(methodName, args) {
	    if (!methodName) return this.fapply(args);
	    args.unshift(methodName);
	    return this.invoke.apply(this, args);
	};
	
	var nodeify = Promise.prototype.nodeify;
	Promise.prototype.nodeify = function(callback) {
	    if (typeof callback === "function") {
	        nodeify.call(this, callback);
	        return;
	    }
	    return this;
	};
	
	Promise.prototype.inspect = function() {
	    if (this.isPending()) return {state: "pending"};
	    else if(this.isFulfilled()) return {state: "fulfilled", value: this.value()}
	    else return {state: "rejected", reason: this.reason()}
	};
	
	Promise.prototype.passByCopy = function() {
	    return this;
	};
	
	Promise.prototype.set = function(key, val) {
	    return this.then(function(object) {
	        object[key] = val;
	    });
	};
	
	Promise.prototype["delete"] = Promise.prototype.del = function(key) {
	    return this.then(function(object) {
	        delete object[key];
	    });
	};
	
	Promise.prototype.keys = function() {
	    return this.then(function(o) {
	        return Object.keys(o);
	    });
	};
	
	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};
	
	var caught = Promise.prototype.caught;
	var timeout = Promise.prototype.timeout;
	Promise.prototype.timeout = function(time, customErr) {
	    var result = timeout.apply(this, arguments);
	    return caught.call(result, Promise.TimeoutError, function(e) {
	        e.code = "ETIMEDOUT";
	        if (customErr instanceof Error) {
	            throw customErr;
	        }
	        throw e;
	    });
	};
	
	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        var onerror = Q.onerror;
	        scheduler(function () {
	            promise._attachExtraTrace(error);
	            if (onerror) {
	                onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };
	
	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;
	
	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }
	
	    promise.then(void 0, onUnhandledError);
	};
	
	
	var defaultScheduler = scheduler;
	Object.defineProperty(Q, "nextTick", {
	    get: function() {
	        return scheduler;
	    },
	
	    set: function(val) {
	        if (typeof val === "function") {
	            scheduler = val;
	            Promise.setScheduler(val);
	        } else {
	            scheduler = defaultScheduler;
	            Promise.setScheduler(defaultScheduler);
	        }
	    }
	});
	
	Object.defineProperty(Q, "longStackSupport", {
	    set: function(val) {
	        if (val) {
	            Promise.longStackTraces();
	        }
	    },
	    get: function() {
	        return Promise.haveLongStackTraces();
	    }
	});
	
	var unhandledReasons = [];
	var unhandledRejections = [];
	var unhandledReasonsDisplayed = false;
	var trackUnhandledRejections = true;
	function displayUnhandledReasons() {
	    if (
	        !unhandledReasonsDisplayed &&
	        typeof window !== "undefined" &&
	        window.console
	    ) {
	        console.warn("[bluebird-Q] Unhandled rejection reasons (should be empty):",
	                     unhandledReasons);
	    }
	
	    unhandledReasonsDisplayed = true;
	}
	
	function logUnhandledReasons() {
	    for (var i = 0; i < unhandledReasons.length; i++) {
	        var reason = unhandledReasons[i];
	        console.warn("Unhandled rejection reason:", reason);
	    }
	}
	
	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;
	    unhandledReasonsDisplayed = false;
	
	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	
	        // Show unhandled rejection reasons if Node exits without handling an
	        // outstanding rejection.  (Note that Browserify presently produces a
	        // `process` global without the `EventEmitter` `on` method.)
	        if (typeof process !== "undefined" && process.on) {
	            process.on("exit", logUnhandledReasons);
	        }
	    }
	}
	
	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	    displayUnhandledReasons();
	}
	
	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    var at = unhandledRejections.indexOf(promise);
	    if (at !== -1) {
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}
	
	Q.resetUnhandledRejections = resetUnhandledRejections;
	
	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};
	
	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    if (typeof process !== "undefined" && process.on) {
	        process.removeListener("exit", logUnhandledReasons);
	    }
	    trackUnhandledRejections = false;
	};
	
	resetUnhandledRejections();
	
	Promise.onPossiblyUnhandledRejection(function(reason, promise) {
	    trackRejection(promise, reason);
	});
	Promise.onUnhandledRejectionHandled(untrackRejection);
	
	Object.keys(aliasMap).forEach(function(key) {
	    var Qmethods = aliasMap[key];
	    if (!Array.isArray(Qmethods)) Qmethods = [Qmethods];
	    Qmethods.forEach(function(Qmethod) {
	        Promise.prototype[Qmethod] = Promise.prototype[key];
	    });
	});
	
	Object.keys(staticAliasMap).forEach(function(key) {
	    var Qmethods = staticAliasMap[key];
	    if (Qmethods === INSTANCE) {
	        if (typeof Promise.prototype[key] !== "function")
	            throw new Error("unimplemented Promise.prototype." + key);
	        Q[key] = function(promise) {
	            var instance = Q(promise);
	            return instance[key].apply(instance, [].slice.call(arguments, 1));
	        };
	    } else {
	        if (!Array.isArray(Qmethods)) Qmethods = [Qmethods];
	        Qmethods.forEach(function(Qmethod) {
	            Q[Qmethod] = Promise[key];
	        });
	    }
	});
	
	if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
	    Q.longStackSupport = true;
	}
	
	function f() {};
	f.prototype = Q;
	f.prototype = Promise.prototype;
	
	function doNode(fn, ctx, args) {
	    ctx = ctx === THIS ? this : ctx;
	    var d = Q.defer();
	    args.push(d.makeNodeResolver());
	    try {
	        fn.apply(ctx, args);
	    } catch (e) {
	        d.reject(e);
	    }
	    return d.promise;
	}
	
	function bind(fn, ctx) {
	    return function() {
	        return fn.apply(ctx, arguments);
	    };
	}
	
	function bluebirdInspectionToQInspection(i) {
	    if (i.isFulfilled()) {
	        return {state: "fulfilled", value: i.value()};
	    } else if (i.isRejected()) {
	        return {state: "rejected", reason: i.reason()};
	    } else {
	        return {state: "pending"};
	    }
	}
	
	module.exports = Q;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1014 */,
/* 1015 */,
/* 1016 */,
/* 1017 */,
/* 1018 */,
/* 1019 */,
/* 1020 */,
/* 1021 */,
/* 1022 */,
/* 1023 */,
/* 1024 */,
/* 1025 */,
/* 1026 */,
/* 1027 */,
/* 1028 */,
/* 1029 */,
/* 1030 */,
/* 1031 */,
/* 1032 */,
/* 1033 */,
/* 1034 */,
/* 1035 */,
/* 1036 */,
/* 1037 */,
/* 1038 */,
/* 1039 */,
/* 1040 */,
/* 1041 */,
/* 1042 */,
/* 1043 */,
/* 1044 */,
/* 1045 */,
/* 1046 */,
/* 1047 */,
/* 1048 */,
/* 1049 */,
/* 1050 */,
/* 1051 */
/***/ function(module, exports, __webpack_require__) {

	var once = __webpack_require__(1052)
	
	module.exports = function(stream, cb) {
	  if (!cb) return stream
	
	  var list = []
	
	  cb = once(cb)
	
	  stream.on('data', function(data) {
	    list.push(data)
	  })
	
	  stream.on('end', function() {
	    cb(null, list)
	  })
	
	  stream.on('close', function() {
	    cb(new Error('Premature close'))
	  })
	
	  stream.on('error', cb)
	
	  return stream
	}

/***/ },
/* 1052 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(1053)
	module.exports = wrappy(once)
	module.exports.strict = wrappy(onceStrict)
	
	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	
	  Object.defineProperty(Function.prototype, 'onceStrict', {
	    value: function () {
	      return onceStrict(this)
	    },
	    configurable: true
	  })
	})
	
	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}
	
	function onceStrict (fn) {
	  var f = function () {
	    if (f.called)
	      throw new Error(f.onceError)
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  var name = fn.name || 'Function wrapped with `once`'
	  f.onceError = name + " shouldn't be called more than once"
	  f.called = false
	  return f
	}


/***/ },
/* 1053 */
/***/ function(module, exports) {

	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	module.exports = wrappy
	function wrappy (fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb)
	
	  if (typeof fn !== 'function')
	    throw new TypeError('need wrapper function')
	
	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k]
	  })
	
	  return wrapper
	
	  function wrapper() {
	    var args = new Array(arguments.length)
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i]
	    }
	    var ret = fn.apply(this, args)
	    var cb = args[args.length-1]
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k]
	      })
	    }
	    return ret
	  }
	}


/***/ },
/* 1054 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var inherits = __webpack_require__(828)
	
	function TfTypeError (type, value) {
	  this.tfError = Error.call(this)
	
	  if (arguments.length === 1 && typeof type === 'string') {
	    this.message = type
	  } else {
	    this.tfType = type
	    this.tfValue = value
	
	    var message
	    Object.defineProperty(this, 'message', {
	      get: function () {
	        if (message) return message
	        message = tfErrorString(type, value)
	
	        return message
	      }
	    })
	  }
	}
	
	inherits(TfTypeError, Error)
	Object.defineProperty(TfTypeError, 'stack', { get: function () { return this.tfError.stack } })
	
	function TfPropertyTypeError (type, property, value, error) {
	  this.tfError = error || Error.call(this)
	  this.tfProperty = property
	  this.tfType = type
	  this.tfValue = value
	
	  var message
	  Object.defineProperty(this, 'message', {
	    get: function () {
	      if (message) return message
	      if (type) {
	        message = tfPropertyErrorString(type, property, value)
	      } else {
	        message = 'Unexpected property "' + property + '"'
	      }
	
	      return message
	    }
	  })
	}
	
	inherits(TfPropertyTypeError, Error)
	Object.defineProperty(TfPropertyTypeError, 'stack', { get: function () { return this.tfError.stack } })
	
	TfPropertyTypeError.prototype.asChildOf = function (property) {
	  return new TfPropertyTypeError(this.tfType, property + '.' + this.tfProperty, this.tfValue, this.tfError)
	}
	
	function getFunctionName (fn) {
	  return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1]
	}
	
	function getValueTypeName (value) {
	  if (nativeTypes.Null(value)) return ''
	
	  return getFunctionName(value.constructor)
	}
	
	function getValue (value) {
	  if (nativeTypes.Function(value)) return ''
	  if (nativeTypes.String(value)) return JSON.stringify(value)
	  if (value && nativeTypes.Object(value)) return ''
	
	  return value
	}
	
	function tfJSON (type) {
	  if (nativeTypes.Function(type)) return type.toJSON ? type.toJSON() : getFunctionName(type)
	  if (nativeTypes.Array(type)) return 'Array'
	  if (type && nativeTypes.Object(type)) return 'Object'
	
	  return type || ''
	}
	
	function stfJSON (type) {
	  type = tfJSON(type)
	
	  return nativeTypes.Object(type) ? JSON.stringify(type) : type
	}
	
	function tfErrorString (type, value) {
	  var valueTypeName = getValueTypeName(value)
	  var valueValue = getValue(value)
	
	  return 'Expected ' + stfJSON(type) + ', got' + (valueTypeName !== '' ? ' ' + valueTypeName : '') + (valueValue !== '' ? ' ' + valueValue : '')
	}
	
	function tfPropertyErrorString (type, name, value) {
	  return tfErrorString('property \"' + stfJSON(name) + '\" of type ' + stfJSON(type), value)
	}
	
	var nativeTypes = {
	  Array: function (value) { return value !== null && value !== undefined && value.constructor === Array },
	  Boolean: function (value) { return typeof value === 'boolean' },
	  Buffer: function (value) { return Buffer.isBuffer(value) },
	  Function: function (value) { return typeof value === 'function' },
	  Null: function (value) { return value === undefined || value === null },
	  Number: function (value) { return typeof value === 'number' },
	  Object: function (value) { return typeof value === 'object' },
	  String: function (value) { return typeof value === 'string' },
	  '': function () { return true }
	}
	
	var otherTypes = {
	  arrayOf: function arrayOf (type) {
	    function arrayOf (value, strict) {
	      if (!nativeTypes.Array(value)) return false
	
	      return value.every(function (x) {
	        return typeforce(type, x, strict, arrayOf)
	      })
	    }
	    arrayOf.toJSON = function () { return [tfJSON(type)] }
	
	    return arrayOf
	  },
	
	  maybe: function maybe (type) {
	    function maybe (value, strict) {
	      return nativeTypes.Null(value) || typeforce(type, value, strict, maybe)
	    }
	    maybe.toJSON = function () { return '?' + stfJSON(type) }
	
	    return maybe
	  },
	
	  object: function object (type) {
	    function object (value, strict) {
	      if (!nativeTypes.Object(value)) return false
	      if (nativeTypes.Null(value)) return false
	
	      var propertyName
	
	      try {
	        for (propertyName in type) {
	          var propertyType = type[propertyName]
	          var propertyValue = value[propertyName]
	
	          typeforce(propertyType, propertyValue, strict)
	        }
	      } catch (e) {
	        if (e instanceof TfPropertyTypeError) {
	          throw e.asChildOf(propertyName)
	        } else if (e instanceof TfTypeError) {
	          throw new TfPropertyTypeError(e.tfType, propertyName, e.tfValue, e.tfError)
	        }
	
	        throw e
	      }
	
	      if (strict) {
	        for (propertyName in value) {
	          if (type[propertyName]) continue
	
	          throw new TfPropertyTypeError(undefined, propertyName)
	        }
	      }
	
	      return true
	    }
	    object.toJSON = function () { return tfJSON(type) }
	
	    return object
	  },
	
	  map: function map (propertyType, propertyKeyType) {
	    function map (value, strict) {
	      typeforce(nativeTypes.Object, value, strict)
	      if (nativeTypes.Null(value)) return false
	
	      var propertyName
	
	      try {
	        for (propertyName in value) {
	          if (propertyKeyType) {
	            typeforce(propertyKeyType, propertyName, strict)
	          }
	
	          var propertyValue = value[propertyName]
	          typeforce(propertyType, propertyValue, strict)
	        }
	      } catch (e) {
	        if (e instanceof TfPropertyTypeError) {
	          throw e.asChildOf(propertyName)
	        } else if (e instanceof TfTypeError) {
	          throw new TfPropertyTypeError(e.tfType, propertyKeyType || propertyName, e.tfValue)
	        }
	
	        throw e
	      }
	
	      return true
	    }
	
	    if (propertyKeyType) {
	      map.toJSON = function () { return '{' + stfJSON(propertyKeyType) + ': ' + stfJSON(propertyType) + '}' }
	    } else {
	      map.toJSON = function () { return '{' + stfJSON(propertyType) + '}' }
	    }
	
	    return map
	  },
	
	  oneOf: function oneOf () {
	    var types = [].slice.call(arguments)
	
	    function oneOf (value, strict) {
	      return types.some(function (type) {
	        try {
	          return typeforce(type, value, strict)
	        } catch (e) {
	          if (e instanceof TfTypeError || e instanceof TfPropertyTypeError) return false
	
	          throw e
	        }
	      })
	    }
	    oneOf.toJSON = function () { return types.map(stfJSON).join('|') }
	
	    return oneOf
	  },
	
	  quacksLike: function quacksLike (type) {
	    function quacksLike (value) {
	      return type === getValueTypeName(value)
	    }
	    quacksLike.toJSON = function () { return type }
	
	    return quacksLike
	  },
	
	  tuple: function tuple () {
	    var types = [].slice.call(arguments)
	
	    function tuple (value, strict) {
	      return types.every(function (type, i) {
	        return typeforce(type, value[i], strict)
	      })
	    }
	    tuple.toJSON = function () { return '(' + types.map(stfJSON).join(', ') + ')' }
	
	    return tuple
	  },
	
	  value: function value (expected) {
	    function value (actual) {
	      return actual === expected
	    }
	    value.toJSON = function () { return expected }
	
	    return value
	  }
	}
	
	function compile (type) {
	  if (nativeTypes.String(type)) {
	    if (type[0] === '?') return otherTypes.maybe(compile(type.slice(1)))
	
	    return nativeTypes[type] || otherTypes.quacksLike(type)
	  } else if (type && nativeTypes.Object(type)) {
	    if (nativeTypes.Array(type)) return otherTypes.arrayOf(compile(type[0]))
	
	    var compiled = {}
	
	    for (var propertyName in type) {
	      compiled[propertyName] = compile(type[propertyName])
	    }
	
	    return otherTypes.object(compiled)
	  } else if (nativeTypes.Function(type)) {
	    return type
	  }
	
	  return otherTypes.value(type)
	}
	
	function typeforce (type, value, strict, surrogate) {
	  if (nativeTypes.Function(type)) {
	    if (type(value, strict)) return true
	
	    throw new TfTypeError(surrogate || type, value)
	  }
	
	  // JIT
	  return typeforce(compile(type), value, strict)
	}
	
	// assign all types to typeforce function
	var typeName
	Object.keys(nativeTypes).forEach(function (typeName) {
	  var nativeType = nativeTypes[typeName]
	  nativeType.toJSON = function () { return typeName }
	
	  typeforce[typeName] = nativeType
	})
	
	for (typeName in otherTypes) {
	  typeforce[typeName] = otherTypes[typeName]
	}
	
	module.exports = typeforce
	module.exports.compile = compile
	
	// export Error objects
	module.exports.TfTypeError = TfTypeError
	module.exports.TfPropertyTypeError = TfPropertyTypeError
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1055 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _lib = __webpack_require__(1056);
	
	var _lib2 = _interopRequireDefault(_lib);
	
	var _en = __webpack_require__(1116);
	
	var _en2 = _interopRequireDefault(_en);
	
	var _bootstrap = __webpack_require__(1117);
	
	var _bootstrap2 = _interopRequireDefault(_bootstrap);
	
	var _bootstrap3 = __webpack_require__(1124);
	
	var _bootstrap4 = _interopRequireDefault(_bootstrap3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_lib2.default.form.Form.templates = _bootstrap2.default;
	_lib2.default.form.Form.stylesheet = _bootstrap4.default;
	_lib2.default.form.Form.i18n = _en2.default;
	
	_lib2.default.form.Form.defaultProps = {
	  templates: _lib2.default.form.Form.templates,
	  stylesheet: _lib2.default.form.Form.stylesheet,
	  i18n: _lib2.default.form.Form.i18n
	};
	
	module.exports = _lib2.default;

/***/ },
/* 1056 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var t = __webpack_require__(1057);
	var form = __webpack_require__(1114);
	
	t.form = form;
	
	module.exports = t;

/***/ },
/* 1057 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var t = __webpack_require__(1058);
	var stringify = t.stringify;
	
	var noobj = {};
	
	var ValidationError = t.struct({
	  message: t.String,
	  actual: t.Any,
	  expected: t.Any,
	  path: t.list(t.union([t.String, t.Number]))
	}, 'ValidationError');
	
	function getDefaultValidationErrorMessage(actual, expected, path) {
	  var expectedName = t.getTypeName(expected);
	  var to = path.length ? '/' + path.join('/') + ': ' + expectedName : expectedName;
	  return 'Invalid value ' + stringify(actual) + ' supplied to ' + to;
	}
	
	function getValidationErrorMessage(actual, expected, path, context) {
	  if (t.Function.is(expected.getValidationErrorMessage)) {
	    return expected.getValidationErrorMessage(actual, path, context);
	  } else {
	    return getDefaultValidationErrorMessage(actual, expected, path);
	  }
	}
	
	ValidationError.of = function (actual, expected, path, context) {
	  return new ValidationError({
	    message: getValidationErrorMessage(actual, expected, path, context),
	    actual: actual,
	    expected: expected,
	    path: path
	  });
	};
	
	var ValidationResult = t.struct({
	  errors: t.list(ValidationError),
	  value: t.Any
	}, 'ValidationResult');
	
	ValidationResult.prototype.isValid = function () {
	  return !this.errors.length;
	};
	
	ValidationResult.prototype.firstError = function () {
	  return this.isValid() ? null : this.errors[0];
	};
	
	ValidationResult.prototype.toString = function () {
	  if (this.isValid()) {
	    return '[ValidationResult, true, ' + stringify(this.value) + ']';
	  } else {
	    return '[ValidationResult, false, (' + this.errors.map(function (err) {
	      return err.message;
	    }).join(', ') + ')]';
	  }
	};
	
	function validate(x, type, options) {
	  options = options || {};
	  var path = t.Array.is(options) ? options : options.path || [];
	  return new ValidationResult(recurse(x, type, path, options));
	}
	
	function recurse(x, type, path, options) {
	  if (t.isType(type)) {
	    return validators[type.meta.kind](x, type, path, options);
	  } else {
	    return validators.es6classes(x, type, path, options);
	  }
	}
	
	var validators = validate.validators = {};
	
	validators.es6classes = function validateES6Classes(x, type, path, options) {
	  return {
	    value: x,
	    errors: x instanceof type ? [] : [ValidationError.of(x, type, path, options.context)]
	  };
	};
	
	// irreducibles and enums
	validators.irreducible = validators.enums = function validateIrreducible(x, type, path, options) {
	  return {
	    value: x,
	    errors: type.is(x) ? [] : [ValidationError.of(x, type, path, options.context)]
	  };
	};
	
	validators.list = function validateList(x, type, path, options) {
	
	  // x should be an array
	  if (!t.Array.is(x)) {
	    return { value: x, errors: [ValidationError.of(x, type, path, options.context)] };
	  }
	
	  var ret = { value: [], errors: [] };
	  // every item should be of type `type.meta.type`
	  for (var i = 0, len = x.length; i < len; i++) {
	    var item = recurse(x[i], type.meta.type, path.concat(i), options);
	    ret.value[i] = item.value;
	    ret.errors = ret.errors.concat(item.errors);
	  }
	  return ret;
	};
	
	validators.subtype = function validateSubtype(x, type, path, options) {
	
	  // x should be a valid inner type
	  var ret = recurse(x, type.meta.type, path, options);
	  if (ret.errors.length) {
	    return ret;
	  }
	
	  // x should satisfy the predicate
	  if (!type.meta.predicate(ret.value)) {
	    ret.errors = [ValidationError.of(x, type, path, options.context)];
	  }
	
	  return ret;
	};
	
	validators.maybe = function validateMaybe(x, type, path, options) {
	  return t.Nil.is(x) ? { value: null, errors: [] } : recurse(x, type.meta.type, path, options);
	};
	
	validators.struct = function validateStruct(x, type, path, options) {
	
	  // x should be an object
	  if (!t.Object.is(x)) {
	    return { value: x, errors: [ValidationError.of(x, type, path, options.context)] };
	  }
	
	  // [optimization]
	  if (type.is(x)) {
	    return { value: x, errors: [] };
	  }
	
	  var ret = { value: {}, errors: [] };
	  var props = type.meta.props;
	  var defaultProps = type.meta.defaultProps || noobj;
	  // every item should be of type `props[name]`
	  for (var name in props) {
	    if (props.hasOwnProperty(name)) {
	      var actual = x[name];
	      // apply defaults
	      if (actual === undefined) {
	        actual = defaultProps[name];
	      }
	      var prop = recurse(actual, props[name], path.concat(name), options);
	      ret.value[name] = prop.value;
	      ret.errors = ret.errors.concat(prop.errors);
	    }
	  }
	  var strict = options.hasOwnProperty('strict') ? options.strict : type.meta.strict;
	  if (strict) {
	    for (var field in x) {
	      if (x.hasOwnProperty(field) && !props.hasOwnProperty(field)) {
	        ret.errors.push(ValidationError.of(x[field], t.Nil, path.concat(field), options.context));
	      }
	    }
	  }
	  if (!ret.errors.length) {
	    ret.value = new type(ret.value);
	  }
	  return ret;
	};
	
	validators.tuple = function validateTuple(x, type, path, options) {
	
	  var types = type.meta.types;
	  var len = types.length;
	
	  // x should be an array of at most `len` items
	  if (!t.Array.is(x) || x.length > len) {
	    return { value: x, errors: [ValidationError.of(x, type, path, options.context)] };
	  }
	
	  var ret = { value: [], errors: [] };
	  // every item should be of type `types[i]`
	  for (var i = 0; i < len; i++) {
	    var item = recurse(x[i], types[i], path.concat(i), options);
	    ret.value[i] = item.value;
	    ret.errors = ret.errors.concat(item.errors);
	  }
	  return ret;
	};
	
	validators.dict = function validateDict(x, type, path, options) {
	
	  // x should be an object
	  if (!t.Object.is(x)) {
	    return { value: x, errors: [ValidationError.of(x, type, path, options.context)] };
	  }
	
	  var ret = { value: {}, errors: [] };
	  // every key should be of type `domain`
	  // every value should be of type `codomain`
	  for (var k in x) {
	    if (x.hasOwnProperty(k)) {
	      var subpath = path.concat(k);
	      var key = recurse(k, type.meta.domain, subpath, options);
	      var item = recurse(x[k], type.meta.codomain, subpath, options);
	      ret.value[k] = item.value;
	      ret.errors = ret.errors.concat(key.errors, item.errors);
	    }
	  }
	  return ret;
	};
	
	validators.union = function validateUnion(x, type, path, options) {
	  var ctor = type.dispatch(x);
	  return t.Function.is(ctor) ? recurse(x, ctor, path.concat(type.meta.types.indexOf(ctor)), options) : { value: x, errors: [ValidationError.of(x, type, path, options.context)] };
	};
	
	validators.intersection = function validateIntersection(x, type, path, options) {
	
	  var types = type.meta.types;
	  var len = types.length;
	
	  var ret = { value: x, errors: [] };
	  var nrOfStructs = 0;
	  // x should be of type `types[i]` for all i
	  for (var i = 0; i < len; i++) {
	    if (types[i].meta.kind === 'struct') {
	      nrOfStructs++;
	    }
	    var item = recurse(x, types[i], path, options);
	    ret.errors = ret.errors.concat(item.errors);
	  }
	  if (nrOfStructs > 1) {
	    ret.errors.push(ValidationError.of(x, type, path, options.context));
	  }
	  return ret;
	};
	
	validators['interface'] = function validateInterface(x, type, path, options) {
	  // eslint-disable-line dot-notation
	
	  // x should be an object
	  if (!t.Object.is(x)) {
	    return { value: x, errors: [ValidationError.of(x, type, path, options.context)] };
	  }
	
	  var ret = { value: {}, errors: [] };
	  var props = type.meta.props;
	  // every item should be of type `props[name]`
	  for (var name in props) {
	    var prop = recurse(x[name], props[name], path.concat(name), options);
	    ret.value[name] = prop.value;
	    ret.errors = ret.errors.concat(prop.errors);
	  }
	  var strict = options.hasOwnProperty('strict') ? options.strict : type.meta.strict;
	  if (strict) {
	    for (var field in x) {
	      if (!props.hasOwnProperty(field) && !t.Nil.is(x[field])) {
	        ret.errors.push(ValidationError.of(x[field], t.Nil, path.concat(field), options.context));
	      }
	    }
	  }
	  return ret;
	};
	
	t.mixin(t, {
	  ValidationError: ValidationError,
	  ValidationResult: ValidationResult,
	  validate: validate
	});
	
	module.exports = t;

/***/ },
/* 1058 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*! @preserve
	 *
	 * tcomb.js - Type checking and DDD for JavaScript
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2014-2016 Giulio Canti
	 *
	 */
	
	// core
	var t = __webpack_require__(1059);
	
	// types
	t.Any = __webpack_require__(1065);
	t.Array = __webpack_require__(1073);
	t.Boolean = __webpack_require__(1074);
	t.Date = __webpack_require__(1076);
	t.Error = __webpack_require__(1077);
	t.Function = __webpack_require__(1078);
	t.Nil = __webpack_require__(1079);
	t.Number = __webpack_require__(1080);
	t.Integer = __webpack_require__(1082);
	t.IntegerT = t.Integer;
	t.Object = __webpack_require__(1088);
	t.RegExp = __webpack_require__(1089);
	t.String = __webpack_require__(1090);
	t.Type = __webpack_require__(1091);
	t.TypeT = t.Type;
	
	// short alias are deprecated
	t.Arr = t.Array;
	t.Bool = t.Boolean;
	t.Dat = t.Date;
	t.Err = t.Error;
	t.Func = t.Function;
	t.Num = t.Number;
	t.Obj = t.Object;
	t.Re = t.RegExp;
	t.Str = t.String;
	
	// combinators
	t.dict = __webpack_require__(1092);
	t.declare = __webpack_require__(1093);
	t.enums = __webpack_require__(1096);
	t.irreducible = __webpack_require__(1066);
	t.list = __webpack_require__(1097);
	t.maybe = __webpack_require__(1098);
	t.refinement = __webpack_require__(1083);
	t.struct = __webpack_require__(1100);
	t.tuple = __webpack_require__(1106);
	t.union = __webpack_require__(1107);
	t.func = __webpack_require__(1108);
	t.intersection = __webpack_require__(1109);
	t.subtype = t.refinement;
	t.inter = __webpack_require__(1110); // IE8 alias
	t['interface'] = t.inter;
	
	// functions
	t.assert = t;
	t.update = __webpack_require__(1112);
	t.mixin = __webpack_require__(1094);
	t.isType = __webpack_require__(1070);
	t.is = __webpack_require__(1087);
	t.getTypeName = __webpack_require__(1069);
	t.match = __webpack_require__(1113);
	
	module.exports = t;

/***/ },
/* 1059 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isFunction = __webpack_require__(1060);
	var isNil = __webpack_require__(1061);
	var fail = __webpack_require__(1062);
	var stringify = __webpack_require__(1063);
	
	function assert(guard, message) {
	  if (guard !== true) {
	    if (isFunction(message)) {
	      // handle lazy messages
	      message = message();
	    } else if (isNil(message)) {
	      // use a default message
	      message = 'Assert failed (turn on "Pause on exceptions" in your Source panel)';
	    }
	    assert.fail(message);
	  }
	}
	
	assert.fail = fail;
	assert.stringify = stringify;
	
	module.exports = assert;

/***/ },
/* 1060 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function isFunction(x) {
	  return typeof x === 'function';
	};

/***/ },
/* 1061 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function isNil(x) {
	  return x === null || x === void 0;
	};

/***/ },
/* 1062 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function fail(message) {
	  throw new TypeError('[tcomb] ' + message);
	};

/***/ },
/* 1063 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getFunctionName = __webpack_require__(1064);
	
	function replacer(key, value) {
	  if (typeof value === 'function') {
	    return getFunctionName(value);
	  }
	  return value;
	}
	
	module.exports = function stringify(x) {
	  try {
	    // handle "Converting circular structure to JSON" error
	    return JSON.stringify(x, replacer, 2);
	  } catch (e) {
	    return String(x);
	  }
	};

/***/ },
/* 1064 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function getFunctionName(f) {
	  return f.displayName || f.name || '<function' + f.length + '>';
	};

/***/ },
/* 1065 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	
	module.exports = irreducible('Any', function () {
	  return true;
	});

/***/ },
/* 1066 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isString = __webpack_require__(1067);
	var isFunction = __webpack_require__(1060);
	var forbidNewOperator = __webpack_require__(1068);
	
	module.exports = function irreducible(name, predicate) {
	
	  if (true) {
	    assert(isString(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to irreducible(name, predicate) (expected a string)';
	    });
	    assert(isFunction(predicate), 'Invalid argument predicate ' + assert.stringify(predicate) + ' supplied to irreducible(name, predicate) (expected a function)');
	  }
	
	  function Irreducible(value, path) {
	
	    if (true) {
	      forbidNewOperator(this, Irreducible);
	      path = path || [name];
	      assert(predicate(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
	      });
	    }
	
	    return value;
	  }
	
	  Irreducible.meta = {
	    kind: 'irreducible',
	    name: name,
	    predicate: predicate,
	    identity: true
	  };
	
	  Irreducible.displayName = name;
	
	  Irreducible.is = predicate;
	
	  return Irreducible;
	};

/***/ },
/* 1067 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function isString(x) {
	  return typeof x === 'string';
	};

/***/ },
/* 1068 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var getTypeName = __webpack_require__(1069);
	
	module.exports = function forbidNewOperator(x, type) {
	  assert(!(x instanceof type), function () {
	    return 'Cannot use the new operator to instantiate the type ' + getTypeName(type);
	  });
	};

/***/ },
/* 1069 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	var getFunctionName = __webpack_require__(1064);
	
	module.exports = function getTypeName(ctor) {
	  if (isType(ctor)) {
	    return ctor.displayName;
	  }
	  return getFunctionName(ctor);
	};

/***/ },
/* 1070 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isFunction = __webpack_require__(1060);
	var isObject = __webpack_require__(1071);
	
	module.exports = function isType(x) {
	  return isFunction(x) && isObject(x.meta);
	};

/***/ },
/* 1071 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var isNil = __webpack_require__(1061);
	var isArray = __webpack_require__(1072);
	
	module.exports = function isObject(x) {
	  return !isNil(x) && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && !isArray(x);
	};

/***/ },
/* 1072 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function isArray(x) {
	  return Array.isArray ? Array.isArray(x) : x instanceof Array;
	};

/***/ },
/* 1073 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isArray = __webpack_require__(1072);
	
	module.exports = irreducible('Array', isArray);

/***/ },
/* 1074 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isBoolean = __webpack_require__(1075);
	
	module.exports = irreducible('Boolean', isBoolean);

/***/ },
/* 1075 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function isBoolean(x) {
	  return x === true || x === false;
	};

/***/ },
/* 1076 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	
	module.exports = irreducible('Date', function (x) {
	  return x instanceof Date;
	});

/***/ },
/* 1077 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	
	module.exports = irreducible('Error', function (x) {
	  return x instanceof Error;
	});

/***/ },
/* 1078 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isFunction = __webpack_require__(1060);
	
	module.exports = irreducible('Function', isFunction);

/***/ },
/* 1079 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isNil = __webpack_require__(1061);
	
	module.exports = irreducible('Nil', isNil);

/***/ },
/* 1080 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isNumber = __webpack_require__(1081);
	
	module.exports = irreducible('Number', isNumber);

/***/ },
/* 1081 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function isNumber(x) {
	  return typeof x === 'number' && isFinite(x) && !isNaN(x);
	};

/***/ },
/* 1082 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var refinement = __webpack_require__(1083);
	var Number = __webpack_require__(1080);
	
	module.exports = refinement(Number, function (x) {
	  return x % 1 === 0;
	}, 'Integer');

/***/ },
/* 1083 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var forbidNewOperator = __webpack_require__(1068);
	var isIdentity = __webpack_require__(1085);
	var create = __webpack_require__(1086);
	var is = __webpack_require__(1087);
	var getTypeName = __webpack_require__(1069);
	var getFunctionName = __webpack_require__(1064);
	
	function getDefaultName(type, predicate) {
	  return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';
	}
	
	function refinement(type, predicate, name) {
	
	  if (true) {
	    assert(isFunction(type), function () {
	      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)';
	    });
	    assert(isFunction(predicate), function () {
	      return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(type, predicate);
	  var identity = isIdentity(type);
	
	  function Refinement(value, path) {
	
	    if (true) {
	      if (identity) {
	        forbidNewOperator(this, Refinement);
	      }
	      path = path || [displayName];
	    }
	
	    var x = create(type, value, path);
	
	    if (true) {
	      assert(predicate(x), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
	      });
	    }
	
	    return x;
	  }
	
	  Refinement.meta = {
	    kind: 'subtype',
	    type: type,
	    predicate: predicate,
	    name: name,
	    identity: identity
	  };
	
	  Refinement.displayName = displayName;
	
	  Refinement.is = function (x) {
	    return is(x, type) && predicate(x);
	  };
	
	  Refinement.update = function (instance, patch) {
	    return Refinement(assert.update(instance, patch));
	  };
	
	  return Refinement;
	}
	
	refinement.getDefaultName = getDefaultName;
	module.exports = refinement;

/***/ },
/* 1084 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isNil = __webpack_require__(1061);
	var isString = __webpack_require__(1067);
	
	module.exports = function isTypeName(name) {
	  return isNil(name) || isString(name);
	};

/***/ },
/* 1085 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var Boolean = __webpack_require__(1074);
	var isType = __webpack_require__(1070);
	var getTypeName = __webpack_require__(1069);
	
	// return true if the type constructor behaves like the identity function
	module.exports = function isIdentity(type) {
	  if (isType(type)) {
	    if (true) {
	      assert(Boolean.is(type.meta.identity), function () {
	        return 'Invalid meta identity ' + assert.stringify(type.meta.identity) + ' supplied to type ' + getTypeName(type);
	      });
	    }
	    return type.meta.identity;
	  }
	  // for tcomb the other constructors, like ES6 classes, are identity-like
	  return true;
	};

/***/ },
/* 1086 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var isType = __webpack_require__(1070);
	var getFunctionName = __webpack_require__(1064);
	var assert = __webpack_require__(1059);
	var stringify = __webpack_require__(1063);
	
	// creates an instance of a type, handling the optional new operator
	module.exports = function create(type, value, path) {
	  if (isType(type)) {
	    return !type.meta.identity && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null ? new type(value, path) : type(value, path);
	  }
	
	  if (true) {
	    // here type should be a class constructor and value some instance, just check membership and return the value
	    path = path || [getFunctionName(type)];
	    assert(value instanceof type, function () {
	      return 'Invalid value ' + stringify(value) + ' supplied to ' + path.join('/');
	    });
	  }
	
	  return value;
	};

/***/ },
/* 1087 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	
	// returns true if x is an instance of type
	module.exports = function is(x, type) {
	  if (isType(type)) {
	    return type.is(x);
	  }
	  return x instanceof type; // type should be a class constructor
	};

/***/ },
/* 1088 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isObject = __webpack_require__(1071);
	
	module.exports = irreducible('Object', isObject);

/***/ },
/* 1089 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	
	module.exports = irreducible('RegExp', function (x) {
	  return x instanceof RegExp;
	});

/***/ },
/* 1090 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isString = __webpack_require__(1067);
	
	module.exports = irreducible('String', isString);

/***/ },
/* 1091 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var irreducible = __webpack_require__(1066);
	var isType = __webpack_require__(1070);
	
	module.exports = irreducible('Type', isType);

/***/ },
/* 1092 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var getTypeName = __webpack_require__(1069);
	var isIdentity = __webpack_require__(1085);
	var isObject = __webpack_require__(1071);
	var create = __webpack_require__(1086);
	var is = __webpack_require__(1087);
	
	function getDefaultName(domain, codomain) {
	  return '{[key: ' + getTypeName(domain) + ']: ' + getTypeName(codomain) + '}';
	}
	
	function dict(domain, codomain, name) {
	
	  if (true) {
	    assert(isFunction(domain), function () {
	      return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';
	    });
	    assert(isFunction(codomain), function () {
	      return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to dict(domain, codomain, [name]) combinator (expected a type)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to dict(domain, codomain, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(domain, codomain);
	  var domainNameCache = getTypeName(domain);
	  var codomainNameCache = getTypeName(codomain);
	  var identity = isIdentity(domain) && isIdentity(codomain);
	
	  function Dict(value, path) {
	
	    if (false) {
	      if (identity) {
	        return value; // just trust the input if elements must not be hydrated
	      }
	    }
	
	    if (true) {
	      path = path || [displayName];
	      assert(isObject(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
	      });
	    }
	
	    var idempotent = true; // will remain true if I can reutilise the input
	    var ret = {}; // make a temporary copy, will be discarded if idempotent remains true
	    for (var k in value) {
	      if (value.hasOwnProperty(k)) {
	        k = create(domain, k,  true ? path.concat(domainNameCache) : null);
	        var actual = value[k];
	        var instance = create(codomain, actual,  true ? path.concat(k + ': ' + codomainNameCache) : null);
	        idempotent = idempotent && actual === instance;
	        ret[k] = instance;
	      }
	    }
	
	    if (idempotent) {
	      // implements idempotency
	      ret = value;
	    }
	
	    if (true) {
	      Object.freeze(ret);
	    }
	
	    return ret;
	  }
	
	  Dict.meta = {
	    kind: 'dict',
	    domain: domain,
	    codomain: codomain,
	    name: name,
	    identity: identity
	  };
	
	  Dict.displayName = displayName;
	
	  Dict.is = function (x) {
	    if (!isObject(x)) {
	      return false;
	    }
	    for (var k in x) {
	      if (x.hasOwnProperty(k)) {
	        if (!is(k, domain) || !is(x[k], codomain)) {
	          return false;
	        }
	      }
	    }
	    return true;
	  };
	
	  Dict.update = function (instance, patch) {
	    return Dict(assert.update(instance, patch));
	  };
	
	  return Dict;
	}
	
	dict.getDefaultName = getDefaultName;
	module.exports = dict;

/***/ },
/* 1093 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isType = __webpack_require__(1070);
	var isNil = __webpack_require__(1061);
	var mixin = __webpack_require__(1094);
	var getTypeName = __webpack_require__(1069);
	var isUnion = __webpack_require__(1095);
	
	// All the .declare-d types should be clearly different from each other thus they should have
	// different names when a name was not explicitly provided.
	var nextDeclareUniqueId = 1;
	
	module.exports = function declare(name) {
	  if (true) {
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + name + ' supplied to declare([name]) (expected a string)';
	    });
	  }
	
	  var type;
	
	  function Declare(value, path) {
	    if (true) {
	      assert(!isNil(type), function () {
	        return 'Type declared but not defined, don\'t forget to call .define on every declared type';
	      });
	      if (isUnion(type)) {
	        assert(type.dispatch === Declare.dispatch, function () {
	          return 'Please define the custom ' + name + '.dispatch function before calling ' + name + '.define()';
	        });
	      }
	    }
	    return type(value, path);
	  }
	
	  Declare.define = function (spec) {
	    if (true) {
	      assert(isType(spec), function () {
	        return 'Invalid argument type ' + assert.stringify(spec) + ' supplied to define(type) (expected a type)';
	      });
	      assert(isNil(type), function () {
	        return 'Declare.define(type) can only be invoked once';
	      });
	      assert(isNil(spec.meta.name) && Object.keys(spec.prototype).length === 0, function () {
	        return 'Invalid argument type ' + assert.stringify(spec) + ' supplied to define(type) (expected a fresh, unnamed type)';
	      });
	    }
	
	    if (isUnion(spec) && Declare.hasOwnProperty('dispatch')) {
	      spec.dispatch = Declare.dispatch;
	    }
	    type = spec;
	    mixin(Declare, type, true); // true because it overwrites Declare.displayName
	    if (name) {
	      type.displayName = Declare.displayName = name;
	      Declare.meta.name = name;
	    }
	    Declare.meta.identity = type.meta.identity;
	    Declare.prototype = type.prototype;
	    return Declare;
	  };
	
	  Declare.displayName = name || getTypeName(Declare) + "$" + nextDeclareUniqueId++;
	  // in general I can't say if this type will be an identity, for safety setting to false
	  Declare.meta = { identity: false };
	  Declare.prototype = null;
	  return Declare;
	};

/***/ },
/* 1094 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isNil = __webpack_require__(1061);
	var assert = __webpack_require__(1059);
	
	// safe mixin, cannot override props unless specified
	module.exports = function mixin(target, source, overwrite) {
	  if (isNil(source)) {
	    return target;
	  }
	  for (var k in source) {
	    if (source.hasOwnProperty(k)) {
	      if (overwrite !== true) {
	        if (true) {
	          assert(!target.hasOwnProperty(k) || target[k] === source[k], function () {
	            return 'Invalid call to mixin(target, source, [overwrite]): cannot overwrite property "' + k + '" of target object';
	          });
	        }
	      }
	      target[k] = source[k];
	    }
	  }
	  return target;
	};

/***/ },
/* 1095 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	
	module.exports = function isUnion(x) {
	  return isType(x) && x.meta.kind === 'union';
	};

/***/ },
/* 1096 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var forbidNewOperator = __webpack_require__(1068);
	var isString = __webpack_require__(1067);
	var isObject = __webpack_require__(1071);
	
	function getDefaultName(map) {
	  return Object.keys(map).map(function (k) {
	    return assert.stringify(k);
	  }).join(' | ');
	}
	
	function enums(map, name) {
	
	  if (true) {
	    assert(isObject(map), function () {
	      return 'Invalid argument map ' + assert.stringify(map) + ' supplied to enums(map, [name]) combinator (expected a dictionary of String -> String | Number)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to enums(map, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(map);
	
	  function Enums(value, path) {
	
	    if (true) {
	      forbidNewOperator(this, Enums);
	      path = path || [displayName];
	      assert(Enums.is(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected one of ' + assert.stringify(Object.keys(map)) + ')';
	      });
	    }
	
	    return value;
	  }
	
	  Enums.meta = {
	    kind: 'enums',
	    map: map,
	    name: name,
	    identity: true
	  };
	
	  Enums.displayName = displayName;
	
	  Enums.is = function (x) {
	    return map.hasOwnProperty(x);
	  };
	
	  return Enums;
	}
	
	enums.of = function (keys, name) {
	  keys = isString(keys) ? keys.split(' ') : keys;
	  var value = {};
	  keys.forEach(function (k) {
	    value[k] = k;
	  });
	  return enums(value, name);
	};
	
	enums.getDefaultName = getDefaultName;
	module.exports = enums;

/***/ },
/* 1097 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var getTypeName = __webpack_require__(1069);
	var isIdentity = __webpack_require__(1085);
	var create = __webpack_require__(1086);
	var is = __webpack_require__(1087);
	var isArray = __webpack_require__(1072);
	
	function getDefaultName(type) {
	  return 'Array<' + getTypeName(type) + '>';
	}
	
	function list(type, name) {
	
	  if (true) {
	    assert(isFunction(type), function () {
	      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to list(type, [name]) combinator (expected a type)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to list(type, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(type);
	  var typeNameCache = getTypeName(type);
	  var identity = isIdentity(type); // the list is identity iif type is identity
	
	  function List(value, path) {
	
	    if (false) {
	      if (identity) {
	        return value; // just trust the input if elements must not be hydrated
	      }
	    }
	
	    if (true) {
	      path = path || [displayName];
	      assert(isArray(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of ' + typeNameCache + ')';
	      });
	    }
	
	    var idempotent = true; // will remain true if I can reutilise the input
	    var ret = []; // make a temporary copy, will be discarded if idempotent remains true
	    for (var i = 0, len = value.length; i < len; i++) {
	      var actual = value[i];
	      var instance = create(type, actual,  true ? path.concat(i + ': ' + typeNameCache) : null);
	      idempotent = idempotent && actual === instance;
	      ret.push(instance);
	    }
	
	    if (idempotent) {
	      // implements idempotency
	      ret = value;
	    }
	
	    if (true) {
	      Object.freeze(ret);
	    }
	
	    return ret;
	  }
	
	  List.meta = {
	    kind: 'list',
	    type: type,
	    name: name,
	    identity: identity
	  };
	
	  List.displayName = displayName;
	
	  List.is = function (x) {
	    return isArray(x) && x.every(function (e) {
	      return is(e, type);
	    });
	  };
	
	  List.update = function (instance, patch) {
	    return List(assert.update(instance, patch));
	  };
	
	  return List;
	}
	
	list.getDefaultName = getDefaultName;
	module.exports = list;

/***/ },
/* 1098 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var isMaybe = __webpack_require__(1099);
	var isIdentity = __webpack_require__(1085);
	var Any = __webpack_require__(1065);
	var create = __webpack_require__(1086);
	var Nil = __webpack_require__(1079);
	var forbidNewOperator = __webpack_require__(1068);
	var is = __webpack_require__(1087);
	var getTypeName = __webpack_require__(1069);
	
	function getDefaultName(type) {
	  return '?' + getTypeName(type);
	}
	
	function maybe(type, name) {
	
	  if (isMaybe(type) || type === Any || type === Nil) {
	    // makes the combinator idempotent and handle Any, Nil
	    return type;
	  }
	
	  if (true) {
	    assert(isFunction(type), function () {
	      return 'Invalid argument type ' + assert.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(type);
	  var identity = isIdentity(type);
	
	  function Maybe(value, path) {
	    if (true) {
	      if (identity) {
	        forbidNewOperator(this, Maybe);
	      }
	    }
	    return Nil.is(value) ? value : create(type, value, path);
	  }
	
	  Maybe.meta = {
	    kind: 'maybe',
	    type: type,
	    name: name,
	    identity: identity
	  };
	
	  Maybe.displayName = displayName;
	
	  Maybe.is = function (x) {
	    return Nil.is(x) || is(x, type);
	  };
	
	  return Maybe;
	}
	
	maybe.getDefaultName = getDefaultName;
	module.exports = maybe;

/***/ },
/* 1099 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	
	module.exports = function isMaybe(x) {
	  return isType(x) && x.meta.kind === 'maybe';
	};

/***/ },
/* 1100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var String = __webpack_require__(1090);
	var Function = __webpack_require__(1078);
	var isBoolean = __webpack_require__(1075);
	var isObject = __webpack_require__(1071);
	var isNil = __webpack_require__(1061);
	var create = __webpack_require__(1086);
	var getTypeName = __webpack_require__(1069);
	var dict = __webpack_require__(1092);
	var getDefaultInterfaceName = __webpack_require__(1101);
	var extend = __webpack_require__(1102);
	
	function getDefaultName(props) {
	  return 'Struct' + getDefaultInterfaceName(props);
	}
	
	function extendStruct(mixins, name) {
	  return extend(struct, mixins, name);
	}
	
	function getOptions(options) {
	  if (!isObject(options)) {
	    options = isNil(options) ? {} : { name: options };
	  }
	  if (!options.hasOwnProperty('strict')) {
	    options.strict = struct.strict;
	  }
	  if (!options.hasOwnProperty('defaultProps')) {
	    options.defaultProps = {};
	  }
	  return options;
	}
	
	function struct(props, options) {
	
	  options = getOptions(options);
	  var name = options.name;
	  var strict = options.strict;
	  var defaultProps = options.defaultProps;
	
	  if (true) {
	    assert(dict(String, Function).is(props), function () {
	      return 'Invalid argument props ' + assert.stringify(props) + ' supplied to struct(props, [options]) combinator (expected a dictionary String -> Type)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to struct(props, [options]) combinator (expected a string)';
	    });
	    assert(isBoolean(strict), function () {
	      return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';
	    });
	    assert(isObject(defaultProps), function () {
	      return 'Invalid argument defaultProps ' + assert.stringify(defaultProps) + ' supplied to struct(props, [options]) combinator (expected an object)';
	    });
	  }
	
	  var displayName = name || getDefaultName(props);
	
	  function Struct(value, path) {
	
	    if (Struct.is(value)) {
	      // implements idempotency
	      return value;
	    }
	
	    if (true) {
	      path = path || [displayName];
	      assert(isObject(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an object)';
	      });
	      // strictness
	      if (strict) {
	        for (k in value) {
	          if (value.hasOwnProperty(k)) {
	            assert(props.hasOwnProperty(k), function () {
	              return 'Invalid additional prop "' + k + '" supplied to ' + path.join('/');
	            });
	          }
	        }
	      }
	    }
	
	    if (!(this instanceof Struct)) {
	      // `new` is optional
	      return new Struct(value, path);
	    }
	
	    for (var k in props) {
	      if (props.hasOwnProperty(k)) {
	        var expected = props[k];
	        var actual = value[k];
	        // apply defaults
	        if (actual === undefined) {
	          actual = defaultProps[k];
	        }
	        this[k] = create(expected, actual,  true ? path.concat(k + ': ' + getTypeName(expected)) : null);
	      }
	    }
	
	    if (true) {
	      Object.freeze(this);
	    }
	  }
	
	  Struct.meta = {
	    kind: 'struct',
	    props: props,
	    name: name,
	    identity: false,
	    strict: strict,
	    defaultProps: defaultProps
	  };
	
	  Struct.displayName = displayName;
	
	  Struct.is = function (x) {
	    return x instanceof Struct;
	  };
	
	  Struct.update = function (instance, patch) {
	    return new Struct(assert.update(instance, patch));
	  };
	
	  Struct.extend = function (xs, name) {
	    return extendStruct([Struct].concat(xs), name);
	  };
	
	  return Struct;
	}
	
	struct.strict = false;
	struct.getOptions = getOptions;
	struct.getDefaultName = getDefaultName;
	struct.extend = extendStruct;
	module.exports = struct;

/***/ },
/* 1101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getTypeName = __webpack_require__(1069);
	
	function getDefaultInterfaceName(props) {
	  return '{' + Object.keys(props).map(function (prop) {
	    return prop + ': ' + getTypeName(props[prop]);
	  }).join(', ') + '}';
	}
	
	module.exports = getDefaultInterfaceName;

/***/ },
/* 1102 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(1059);
	var isFunction = __webpack_require__(1060);
	var isArray = __webpack_require__(1072);
	var mixin = __webpack_require__(1094);
	var isStruct = __webpack_require__(1103);
	var isInterface = __webpack_require__(1104);
	var isObject = __webpack_require__(1071);
	var refinement = __webpack_require__(1083);
	var decompose = __webpack_require__(1105);
	
	function compose(predicates, unrefinedType) {
	  return predicates.reduce(function (type, predicate) {
	    return refinement(type, predicate);
	  }, unrefinedType);
	}
	
	function getProps(type) {
	  return isObject(type) ? type : type.meta.props;
	}
	
	function getDefaultProps(type) {
	  return isObject(type) ? null : type.meta.defaultProps;
	}
	
	function pushAll(arr, elements) {
	  Array.prototype.push.apply(arr, elements);
	}
	
	function extend(combinator, mixins, options) {
	  if (true) {
	    assert(isFunction(combinator), function () { return 'Invalid argument combinator supplied to extend(combinator, mixins, options), expected a function'; });
	    assert(isArray(mixins), function () { return 'Invalid argument mixins supplied to extend(combinator, mixins, options), expected an array'; });
	  }
	  var props = {};
	  var prototype = {};
	  var predicates = [];
	  var defaultProps = {};
	  mixins.forEach(function (x, i) {
	    var decomposition = decompose(x);
	    var unrefinedType = decomposition.unrefinedType;
	    if (true) {
	      assert(isObject(unrefinedType) || isStruct(unrefinedType) || isInterface(unrefinedType), function () { return 'Invalid argument mixins[' + i + '] supplied to extend(combinator, mixins, options), expected an object, struct, interface or a refinement (of struct or interface)'; });
	    }
	    pushAll(predicates, decomposition.predicates);
	    mixin(props, getProps(unrefinedType));
	    mixin(prototype, unrefinedType.prototype);
	    mixin(defaultProps, getDefaultProps(unrefinedType), true);
	  });
	  options = combinator.getOptions(options);
	  options.defaultProps = mixin(defaultProps, options.defaultProps, true);
	  var result = compose(predicates, combinator(props, options));
	  mixin(result.prototype, prototype);
	  return result;
	}
	
	module.exports = extend;

/***/ },
/* 1103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	
	module.exports = function isStruct(x) {
	  return isType(x) && x.meta.kind === 'struct';
	};

/***/ },
/* 1104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	
	module.exports = function isInterface(x) {
	  return isType(x) && x.meta.kind === 'interface';
	};

/***/ },
/* 1105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isType = __webpack_require__(1070);
	
	function isRefinement(type) {
	  return isType(type) && type.meta.kind === 'subtype';
	}
	
	function getPredicates(type) {
	  return isRefinement(type) ? [type.meta.predicate].concat(getPredicates(type.meta.type)) : [];
	}
	
	function getUnrefinedType(type) {
	  return isRefinement(type) ? getUnrefinedType(type.meta.type) : type;
	}
	
	function decompose(type) {
	  return {
	    predicates: getPredicates(type),
	    unrefinedType: getUnrefinedType(type)
	  };
	}
	
	module.exports = decompose;

/***/ },
/* 1106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var getTypeName = __webpack_require__(1069);
	var isIdentity = __webpack_require__(1085);
	var isArray = __webpack_require__(1072);
	var create = __webpack_require__(1086);
	var is = __webpack_require__(1087);
	
	function getDefaultName(types) {
	  return '[' + types.map(getTypeName).join(', ') + ']';
	}
	
	function tuple(types, name) {
	
	  if (true) {
	    assert(isArray(types) && types.every(isFunction), function () {
	      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to tuple(types, [name]) combinator (expected an array of types)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to tuple(types, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(types);
	  var identity = types.every(isIdentity);
	
	  function Tuple(value, path) {
	
	    if (false) {
	      if (identity) {
	        return value;
	      }
	    }
	
	    if (true) {
	      path = path || [displayName];
	      assert(isArray(value) && value.length === types.length, function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of length ' + types.length + ')';
	      });
	    }
	
	    var idempotent = true;
	    var ret = [];
	    for (var i = 0, len = types.length; i < len; i++) {
	      var expected = types[i];
	      var actual = value[i];
	      var instance = create(expected, actual,  true ? path.concat(i + ': ' + getTypeName(expected)) : null);
	      idempotent = idempotent && actual === instance;
	      ret.push(instance);
	    }
	
	    if (idempotent) {
	      // implements idempotency
	      ret = value;
	    }
	
	    if (true) {
	      Object.freeze(ret);
	    }
	
	    return ret;
	  }
	
	  Tuple.meta = {
	    kind: 'tuple',
	    types: types,
	    name: name,
	    identity: identity
	  };
	
	  Tuple.displayName = displayName;
	
	  Tuple.is = function (x) {
	    return isArray(x) && x.length === types.length && types.every(function (type, i) {
	      return is(x[i], type);
	    });
	  };
	
	  Tuple.update = function (instance, patch) {
	    return Tuple(assert.update(instance, patch));
	  };
	
	  return Tuple;
	}
	
	tuple.getDefaultName = getDefaultName;
	module.exports = tuple;

/***/ },
/* 1107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var getTypeName = __webpack_require__(1069);
	var isIdentity = __webpack_require__(1085);
	var isArray = __webpack_require__(1072);
	var create = __webpack_require__(1086);
	var is = __webpack_require__(1087);
	var forbidNewOperator = __webpack_require__(1068);
	var isUnion = __webpack_require__(1095);
	var isNil = __webpack_require__(1061);
	
	function getDefaultName(types) {
	  return types.map(getTypeName).join(' | ');
	}
	
	function union(types, name) {
	
	  if (true) {
	    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () {
	      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to union(types, [name]) combinator (expected an array of at least 2 types)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to union(types, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(types);
	  var identity = types.every(isIdentity);
	
	  function Union(value, path) {
	
	    if (false) {
	      if (identity) {
	        return value;
	      }
	    }
	
	    var type = Union.dispatch(value);
	    if (!type && Union.is(value)) {
	      return value;
	    }
	
	    if (true) {
	      if (identity) {
	        forbidNewOperator(this, Union);
	      }
	      path = path || [displayName];
	      assert(isFunction(type), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (no constructor returned by dispatch)';
	      });
	      path[path.length - 1] += '(' + getTypeName(type) + ')';
	    }
	
	    return create(type, value, path);
	  }
	
	  Union.meta = {
	    kind: 'union',
	    types: types,
	    name: name,
	    identity: identity
	  };
	
	  Union.displayName = displayName;
	
	  Union.is = function (x) {
	    return types.some(function (type) {
	      return is(x, type);
	    });
	  };
	
	  Union.dispatch = function (x) {
	    // default dispatch implementation
	    for (var i = 0, len = types.length; i < len; i++) {
	      var type = types[i];
	      if (isUnion(type)) {
	        // handle union of unions
	        var t = type.dispatch(x);
	        if (!isNil(t)) {
	          return t;
	        }
	      } else if (is(x, type)) {
	        return type;
	      }
	    }
	  };
	
	  Union.update = function (instance, patch) {
	    return Union(assert.update(instance, patch));
	  };
	
	  return Union;
	}
	
	union.getDefaultName = getDefaultName;
	module.exports = union;

/***/ },
/* 1108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var FunctionType = __webpack_require__(1078);
	var isArray = __webpack_require__(1072);
	var list = __webpack_require__(1097);
	var isObject = __webpack_require__(1071);
	var create = __webpack_require__(1086);
	var isNil = __webpack_require__(1061);
	var isBoolean = __webpack_require__(1075);
	var tuple = __webpack_require__(1106);
	var getFunctionName = __webpack_require__(1064);
	var getTypeName = __webpack_require__(1069);
	var isType = __webpack_require__(1070);
	
	function getDefaultName(domain, codomain) {
	  return '(' + domain.map(getTypeName).join(', ') + ') => ' + getTypeName(codomain);
	}
	
	function isInstrumented(f) {
	  return FunctionType.is(f) && isObject(f.instrumentation);
	}
	
	function getOptionalArgumentsIndex(types) {
	  var end = types.length;
	  var areAllMaybes = false;
	  for (var i = end - 1; i >= 0; i--) {
	    var type = types[i];
	    if (!isType(type) || type.meta.kind !== 'maybe') {
	      return i + 1;
	    } else {
	      areAllMaybes = true;
	    }
	  }
	  return areAllMaybes ? 0 : end;
	}
	
	function func(domain, codomain, name) {
	
	  domain = isArray(domain) ? domain : [domain]; // handle handy syntax for unary functions
	
	  if (true) {
	    assert(list(FunctionType).is(domain), function () {
	      return 'Invalid argument domain ' + assert.stringify(domain) + ' supplied to func(domain, codomain, [name]) combinator (expected an array of types)';
	    });
	    assert(FunctionType.is(codomain), function () {
	      return 'Invalid argument codomain ' + assert.stringify(codomain) + ' supplied to func(domain, codomain, [name]) combinator (expected a type)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to func(domain, codomain, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(domain, codomain);
	  var domainLength = domain.length;
	  var optionalArgumentsIndex = getOptionalArgumentsIndex(domain);
	
	  function FuncType(value, path) {
	
	    if (!isInstrumented(value)) {
	      // automatically instrument the function
	      return FuncType.of(value);
	    }
	
	    if (true) {
	      path = path || [displayName];
	      assert(FuncType.is(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
	      });
	    }
	
	    return value;
	  }
	
	  FuncType.meta = {
	    kind: 'func',
	    domain: domain,
	    codomain: codomain,
	    name: name,
	    identity: true
	  };
	
	  FuncType.displayName = displayName;
	
	  FuncType.is = function (x) {
	    return isInstrumented(x) && x.instrumentation.domain.length === domainLength && x.instrumentation.domain.every(function (type, i) {
	      return type === domain[i];
	    }) && x.instrumentation.codomain === codomain;
	  };
	
	  FuncType.of = function (f, curried) {
	
	    if (true) {
	      assert(FunctionType.is(f), function () {
	        return 'Invalid argument f supplied to func.of ' + displayName + ' (expected a function)';
	      });
	      assert(isNil(curried) || isBoolean(curried), function () {
	        return 'Invalid argument curried ' + assert.stringify(curried) + ' supplied to func.of ' + displayName + ' (expected a boolean)';
	      });
	    }
	
	    if (FuncType.is(f)) {
	      // makes FuncType.of idempotent
	      return f;
	    }
	
	    function fn() {
	      var args = Array.prototype.slice.call(arguments);
	      var argsLength = args.length;
	
	      if (true) {
	        // type-check arguments
	        var tupleLength = curried ? argsLength : Math.max(argsLength, optionalArgumentsIndex);
	        tuple(domain.slice(0, tupleLength), 'arguments of function ' + displayName)(args);
	      }
	
	      if (curried && argsLength < domainLength) {
	        if (true) {
	          assert(argsLength > 0, 'Invalid arguments.length = 0 for curried function ' + displayName);
	        }
	        var g = Function.prototype.bind.apply(f, [this].concat(args));
	        var newDomain = func(domain.slice(argsLength), codomain);
	        return newDomain.of(g, true);
	      } else {
	        return create(codomain, f.apply(this, args));
	      }
	    }
	
	    fn.instrumentation = {
	      domain: domain,
	      codomain: codomain,
	      f: f
	    };
	
	    fn.displayName = getFunctionName(f);
	
	    return fn;
	  };
	
	  return FuncType;
	}
	
	func.getDefaultName = getDefaultName;
	func.getOptionalArgumentsIndex = getOptionalArgumentsIndex;
	module.exports = func;

/***/ },
/* 1109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var isFunction = __webpack_require__(1060);
	var isArray = __webpack_require__(1072);
	var forbidNewOperator = __webpack_require__(1085);
	var is = __webpack_require__(1087);
	var getTypeName = __webpack_require__(1069);
	var isIdentity = __webpack_require__(1085);
	
	function getDefaultName(types) {
	  return types.map(getTypeName).join(' & ');
	}
	
	function intersection(types, name) {
	
	  if (true) {
	    assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () {
	      return 'Invalid argument types ' + assert.stringify(types) + ' supplied to intersection(types, [name]) combinator (expected an array of at least 2 types)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to intersection(types, [name]) combinator (expected a string)';
	    });
	  }
	
	  var displayName = name || getDefaultName(types);
	  var identity = types.every(isIdentity);
	
	  function Intersection(value, path) {
	
	    if (true) {
	      if (identity) {
	        forbidNewOperator(this, Intersection);
	      }
	      path = path || [displayName];
	      assert(Intersection.is(value), function () {
	        return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
	      });
	    }
	
	    return value;
	  }
	
	  Intersection.meta = {
	    kind: 'intersection',
	    types: types,
	    name: name,
	    identity: identity
	  };
	
	  Intersection.displayName = displayName;
	
	  Intersection.is = function (x) {
	    return types.every(function (type) {
	      return is(x, type);
	    });
	  };
	
	  Intersection.update = function (instance, patch) {
	    return Intersection(assert.update(instance, patch));
	  };
	
	  return Intersection;
	}
	
	intersection.getDefaultName = getDefaultName;
	module.exports = intersection;

/***/ },
/* 1110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isTypeName = __webpack_require__(1084);
	var String = __webpack_require__(1090);
	var Function = __webpack_require__(1078);
	var isBoolean = __webpack_require__(1075);
	var isObject = __webpack_require__(1071);
	var isNil = __webpack_require__(1061);
	var create = __webpack_require__(1086);
	var getTypeName = __webpack_require__(1069);
	var dict = __webpack_require__(1092);
	var getDefaultInterfaceName = __webpack_require__(1101);
	var isIdentity = __webpack_require__(1085);
	var is = __webpack_require__(1087);
	var extend = __webpack_require__(1102);
	var assign = __webpack_require__(1111);
	
	function extendInterface(mixins, name) {
	  return extend(inter, mixins, name);
	}
	
	function getOptions(options) {
	  if (!isObject(options)) {
	    options = isNil(options) ? {} : { name: options };
	  }
	  if (!options.hasOwnProperty('strict')) {
	    options.strict = inter.strict;
	  }
	  return options;
	}
	
	function inter(props, options) {
	
	  options = getOptions(options);
	  var name = options.name;
	  var strict = options.strict;
	
	  if (true) {
	    assert(dict(String, Function).is(props), function () {
	      return 'Invalid argument props ' + assert.stringify(props) + ' supplied to interface(props, [options]) combinator (expected a dictionary String -> Type)';
	    });
	    assert(isTypeName(name), function () {
	      return 'Invalid argument name ' + assert.stringify(name) + ' supplied to interface(props, [options]) combinator (expected a string)';
	    });
	    assert(isBoolean(strict), function () {
	      return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';
	    });
	  }
	
	  var displayName = name || getDefaultInterfaceName(props);
	  var identity = Object.keys(props).map(function (prop) {
	    return props[prop];
	  }).every(isIdentity);
	
	  function Interface(value, path) {
	
	    if (false) {
	      if (identity) {
	        return value; // just trust the input if elements must not be hydrated
	      }
	    }
	
	    if (true) {
	      path = path || [displayName];
	      assert(!isNil(value), function () {
	        return 'Invalid value ' + value + ' supplied to ' + path.join('/');
	      });
	      // strictness
	      if (strict) {
	        for (var k in value) {
	          assert(props.hasOwnProperty(k), function () {
	            return 'Invalid additional prop "' + k + '" supplied to ' + path.join('/');
	          });
	        }
	      }
	    }
	
	    var idempotent = true;
	    var ret = identity ? {} : assign({}, value);
	    for (var prop in props) {
	      var expected = props[prop];
	      var actual = value[prop];
	      var instance = create(expected, actual,  true ? path.concat(prop + ': ' + getTypeName(expected)) : null);
	      idempotent = idempotent && actual === instance;
	      ret[prop] = instance;
	    }
	
	    if (idempotent) {
	      // implements idempotency
	      ret = value;
	    }
	
	    if (true) {
	      Object.freeze(ret);
	    }
	
	    return ret;
	  }
	
	  Interface.meta = {
	    kind: 'interface',
	    props: props,
	    name: name,
	    identity: identity,
	    strict: strict
	  };
	
	  Interface.displayName = displayName;
	
	  Interface.is = function (x) {
	    if (isNil(x)) {
	      return false;
	    }
	    if (strict) {
	      for (var k in x) {
	        if (!props.hasOwnProperty(k)) {
	          return false;
	        }
	      }
	    }
	    for (var prop in props) {
	      if (!is(x[prop], props[prop])) {
	        return false;
	      }
	    }
	    return true;
	  };
	
	  Interface.update = function (instance, patch) {
	    return Interface(assert.update(instance, patch));
	  };
	
	  Interface.extend = function (xs, name) {
	    return extendInterface([Interface].concat(xs), name);
	  };
	
	  return Interface;
	}
	
	inter.strict = false;
	inter.getOptions = getOptions;
	inter.getDefaultName = getDefaultInterfaceName;
	inter.extend = extendInterface;
	module.exports = inter;

/***/ },
/* 1111 */
/***/ function(module, exports) {

	"use strict";
	
	function assign(x, y) {
	  for (var k in y) {
	    x[k] = y[k];
	  }
	  return x;
	}
	
	module.exports = assign;

/***/ },
/* 1112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isObject = __webpack_require__(1071);
	var isFunction = __webpack_require__(1060);
	var isArray = __webpack_require__(1072);
	var isNumber = __webpack_require__(1081);
	var assign = __webpack_require__(1111);
	
	function getShallowCopy(x) {
	  if (isObject(x)) {
	    if (x instanceof Date || x instanceof RegExp) {
	      return x;
	    }
	    return assign({}, x);
	  }
	  if (isArray(x)) {
	    return x.concat();
	  }
	  return x;
	}
	
	function isCommand(k) {
	  return update.commands.hasOwnProperty(k);
	}
	
	function getCommand(k) {
	  return update.commands[k];
	}
	
	function update(instance, patch) {
	
	  if (true) {
	    assert(isObject(patch), function () {
	      return 'Invalid argument patch ' + assert.stringify(patch) + ' supplied to function update(instance, patch): expected an object containing commands';
	    });
	  }
	
	  var value = instance;
	  var isChanged = false;
	  var newValue;
	  for (var k in patch) {
	    if (patch.hasOwnProperty(k)) {
	      if (isCommand(k)) {
	        newValue = getCommand(k)(patch[k], value);
	        if (newValue !== instance) {
	          isChanged = true;
	          value = newValue;
	        } else {
	          value = instance;
	        }
	      } else {
	        if (value === instance) {
	          value = getShallowCopy(instance);
	        }
	        newValue = update(value[k], patch[k]);
	        isChanged = isChanged || newValue !== value[k];
	        value[k] = newValue;
	      }
	    }
	  }
	  return isChanged ? value : instance;
	}
	
	// built-in commands
	
	function $apply(f, value) {
	  if (true) {
	    assert(isFunction(f), 'Invalid argument f supplied to immutability helper { $apply: f } (expected a function)');
	  }
	  return f(value);
	}
	
	function $push(elements, arr) {
	  if (true) {
	    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper { $push: elements } (expected an array)');
	    assert(isArray(arr), 'Invalid value supplied to immutability helper $push (expected an array)');
	  }
	  if (elements.length > 0) {
	    return arr.concat(elements);
	  }
	  return arr;
	}
	
	function $remove(keys, obj) {
	  if (true) {
	    assert(isArray(keys), 'Invalid argument keys supplied to immutability helper { $remove: keys } (expected an array)');
	    assert(isObject(obj), 'Invalid value supplied to immutability helper $remove (expected an object)');
	  }
	  if (keys.length > 0) {
	    obj = getShallowCopy(obj);
	    for (var i = 0, len = keys.length; i < len; i++) {
	      delete obj[keys[i]];
	    }
	  }
	  return obj;
	}
	
	function $set(value) {
	  return value;
	}
	
	function $splice(splices, arr) {
	  if (true) {
	    assert(isArray(splices) && splices.every(isArray), 'Invalid argument splices supplied to immutability helper { $splice: splices } (expected an array of arrays)');
	    assert(isArray(arr), 'Invalid value supplied to immutability helper $splice (expected an array)');
	  }
	  if (splices.length > 0) {
	    arr = getShallowCopy(arr);
	    return splices.reduce(function (acc, splice) {
	      acc.splice.apply(acc, splice);
	      return acc;
	    }, arr);
	  }
	  return arr;
	}
	
	function $swap(config, arr) {
	  if (true) {
	    assert(isObject(config), 'Invalid argument config supplied to immutability helper { $swap: config } (expected an object)');
	    assert(isNumber(config.from), 'Invalid argument config.from supplied to immutability helper { $swap: config } (expected a number)');
	    assert(isNumber(config.to), 'Invalid argument config.to supplied to immutability helper { $swap: config } (expected a number)');
	    assert(isArray(arr), 'Invalid value supplied to immutability helper $swap (expected an array)');
	  }
	  if (config.from !== config.to) {
	    arr = getShallowCopy(arr);
	    var element = arr[config.to];
	    arr[config.to] = arr[config.from];
	    arr[config.from] = element;
	  }
	  return arr;
	}
	
	function $unshift(elements, arr) {
	  if (true) {
	    assert(isArray(elements), 'Invalid argument elements supplied to immutability helper {$unshift: elements} (expected an array)');
	    assert(isArray(arr), 'Invalid value supplied to immutability helper $unshift (expected an array)');
	  }
	  if (elements.length > 0) {
	    return elements.concat(arr);
	  }
	  return arr;
	}
	
	function $merge(whatToMerge, value) {
	  var isChanged = false;
	  var result = getShallowCopy(value);
	  for (var k in whatToMerge) {
	    if (whatToMerge.hasOwnProperty(k)) {
	      result[k] = whatToMerge[k];
	      isChanged = isChanged || result[k] !== value[k];
	    }
	  }
	  return isChanged ? result : value;
	}
	
	update.commands = {
	  $apply: $apply,
	  $push: $push,
	  $remove: $remove,
	  $set: $set,
	  $splice: $splice,
	  $swap: $swap,
	  $unshift: $unshift,
	  $merge: $merge
	};
	
	module.exports = update;

/***/ },
/* 1113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var assert = __webpack_require__(1059);
	var isFunction = __webpack_require__(1060);
	var isType = __webpack_require__(1070);
	var Any = __webpack_require__(1065);
	
	module.exports = function match(x) {
	  var type, guard, f, count;
	  for (var i = 1, len = arguments.length; i < len;) {
	    type = arguments[i];
	    guard = arguments[i + 1];
	    f = arguments[i + 2];
	
	    if (isFunction(f) && !isType(f)) {
	      i = i + 3;
	    } else {
	      f = guard;
	      guard = Any.is;
	      i = i + 2;
	    }
	
	    if (true) {
	      count = (count || 0) + 1;
	      assert(isType(type), function () {
	        return 'Invalid type in clause #' + count;
	      });
	      assert(isFunction(guard), function () {
	        return 'Invalid guard in clause #' + count;
	      });
	      assert(isFunction(f), function () {
	        return 'Invalid block in clause #' + count;
	      });
	    }
	
	    if (type.is(x) && guard(x)) {
	      return f(x);
	    }
	  }
	  assert.fail('Match error');
	};

/***/ },
/* 1114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.List = undefined;
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _tcombValidation = __webpack_require__(1057);
	
	var _tcombValidation2 = _interopRequireDefault(_tcombValidation);
	
	var _util = __webpack_require__(1115);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Component: {
	    displayName: 'Component'
	  },
	  Form: {
	    displayName: 'Form'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/tcomb-form-native/lib/components.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var SOURCE = 'tcomb-form-native';
	var nooptions = Object.freeze({});
	var noop = function noop() {};
	var noobj = Object.freeze({});
	var noarr = Object.freeze([]);
	var Nil = _tcombValidation2.default.Nil;
	
	function getFormComponent(type, options) {
	  if (options.factory) {
	    return options.factory;
	  }
	  if (type.getTcombFormFactory) {
	    return type.getTcombFormFactory(options);
	  }
	  var name = _tcombValidation2.default.getTypeName(type);
	  switch (type.meta.kind) {
	    case 'irreducible':
	      return type === _tcombValidation2.default.Boolean ? Checkbox : type === _tcombValidation2.default.Date ? DatePicker : Textbox;
	    case 'struct':
	      return Struct;
	    case 'list':
	      return List;
	    case 'enums':
	      return Select;
	    case 'maybe':
	    case 'subtype':
	      return getFormComponent(type.meta.type, options);
	    default:
	      _tcombValidation2.default.fail('[' + SOURCE + '] unsupported type ' + name);
	  }
	}
	
	function sortByText(a, b) {
	  return a.text < b.text ? -1 : a.text > b.text ? 1 : 0;
	}
	
	function getComparator(order) {
	  return {
	    asc: sortByText,
	    desc: function desc(a, b) {
	      return -sortByText(a, b);
	    }
	  }[order];
	}
	
	var Component = _wrapComponent('Component')(function (_React$Component) {
	  _inherits(Component, _React$Component);
	
	  function Component(props) {
	    _classCallCheck(this, Component);
	
	    var _this = _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).call(this, props));
	
	    _this.typeInfo = (0, _util.getTypeInfo)(props.type);
	    _this.state = {
	      hasError: false,
	      value: _this.getTransformer().format(props.value)
	    };
	    return _this;
	  }
	
	  _createClass(Component, [{
	    key: 'getTransformer',
	    value: function getTransformer() {
	      return this.props.options.transformer || this.constructor.transformer;
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      var should = nextState.value !== this.state.value || nextState.hasError !== this.state.hasError || nextProps.options !== this.props.options || nextProps.type !== this.props.type;
	      return should;
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.type !== this.props.type) {
	        this.typeInfo = (0, _util.getTypeInfo)(props.type);
	      }
	      this.setState({ value: this.getTransformer().format(props.value) });
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(value) {
	      var _this2 = this;
	
	      this.setState({ value: value }, function () {
	        return _this2.props.onChange(value, _this2.props.ctx.path);
	      });
	    }
	  }, {
	    key: 'getValidationOptions',
	    value: function getValidationOptions() {
	      return {
	        path: this.props.ctx.path,
	        context: _tcombValidation2.default.mixin(_tcombValidation2.default.mixin({}, this.props.context || this.props.ctx.context), { options: this.props.options })
	      };
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this.getTransformer().parse(this.state.value);
	    }
	  }, {
	    key: 'isValueNully',
	    value: function isValueNully() {
	      return Nil.is(this.getValue());
	    }
	  }, {
	    key: 'removeErrors',
	    value: function removeErrors() {
	      this.setState({ hasError: false });
	    }
	  }, {
	    key: 'pureValidate',
	    value: function pureValidate() {
	      return _tcombValidation2.default.validate(this.getValue(), this.props.type, this.getValidationOptions());
	    }
	  }, {
	    key: 'validate',
	    value: function validate() {
	      var result = this.pureValidate();
	      this.setState({ hasError: !result.isValid() });
	      return result;
	    }
	  }, {
	    key: 'getAuto',
	    value: function getAuto() {
	      return this.props.options.auto || this.props.ctx.auto;
	    }
	  }, {
	    key: 'getI18n',
	    value: function getI18n() {
	      return this.props.options.i18n || this.props.ctx.i18n;
	    }
	  }, {
	    key: 'getDefaultLabel',
	    value: function getDefaultLabel() {
	      var ctx = this.props.ctx;
	      if (ctx.label) {
	        return ctx.label + (this.typeInfo.isMaybe ? this.getI18n().optional : this.getI18n().required);
	      }
	    }
	  }, {
	    key: 'getLabel',
	    value: function getLabel() {
	      var label = this.props.options.label || this.props.options.legend;
	      if (Nil.is(label) && this.getAuto() === 'labels') {
	        label = this.getDefaultLabel();
	      }
	      return label;
	    }
	  }, {
	    key: 'getError',
	    value: function getError() {
	      if (this.hasError()) {
	        var error = this.props.options.error || this.typeInfo.getValidationErrorMessage;
	        if (_tcombValidation2.default.Function.is(error)) {
	          var validationOptions = this.getValidationOptions();
	          return error(this.getValue(), validationOptions.path, validationOptions.context);
	        }
	        return error;
	      }
	    }
	  }, {
	    key: 'hasError',
	    value: function hasError() {
	      return this.props.options.hasError || this.state.hasError;
	    }
	  }, {
	    key: 'getConfig',
	    value: function getConfig() {
	      return (0, _util.merge)(this.props.ctx.config, this.props.options.config);
	    }
	  }, {
	    key: 'getStylesheet',
	    value: function getStylesheet() {
	      return this.props.options.stylesheet || this.props.ctx.stylesheet;
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      return {
	        path: this.props.ctx.path,
	        error: this.getError(),
	        hasError: this.hasError(),
	        label: this.getLabel(),
	        onChange: this.onChange.bind(this),
	        config: this.getConfig(),
	        value: this.state.value,
	        hidden: this.props.options.hidden,
	        stylesheet: this.getStylesheet()
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var locals = this.getLocals();
	      // getTemplate is the only required implementation when extending Component
	      _tcombValidation2.default.assert(_tcombValidation2.default.Function.is(this.getTemplate), '[' + SOURCE + '] missing getTemplate method of component ' + this.constructor.name);
	      var template = this.getTemplate();
	      return template(locals);
	    }
	  }]);
	
	  return Component;
	}(_react3.default.Component));
	
	Component.transformer = {
	  format: function format(value) {
	    return Nil.is(value) ? null : value;
	  },
	  parse: function parse(value) {
	    return value;
	  }
	};
	
	function toNull(value) {
	  return _tcombValidation2.default.String.is(value) && value.trim() === '' || Nil.is(value) ? null : value;
	}
	
	function parseNumber(value) {
	  var n = parseFloat(value);
	  var isNumeric = value - n + 1 >= 0;
	  return isNumeric ? n : toNull(value);
	}
	
	var Textbox = function (_Component) {
	  _inherits(Textbox, _Component);
	
	  function Textbox() {
	    _classCallCheck(this, Textbox);
	
	    return _possibleConstructorReturn(this, (Textbox.__proto__ || Object.getPrototypeOf(Textbox)).apply(this, arguments));
	  }
	
	  _createClass(Textbox, [{
	    key: 'getTransformer',
	    value: function getTransformer() {
	      var options = this.props.options;
	      return options.transformer ? options.transformer : this.typeInfo.innerType === _tcombValidation2.default.Number ? Textbox.numberTransformer : Textbox.transformer;
	    }
	  }, {
	    key: 'getTemplate',
	    value: function getTemplate() {
	      return this.props.options.template || this.props.ctx.templates.textbox;
	    }
	  }, {
	    key: 'getPlaceholder',
	    value: function getPlaceholder() {
	      var placeholder = this.props.options.placeholder;
	      if (Nil.is(placeholder) && this.getAuto() === 'placeholders') {
	        placeholder = this.getDefaultLabel();
	      }
	      return placeholder;
	    }
	  }, {
	    key: 'getKeyboardType',
	    value: function getKeyboardType() {
	      var keyboardType = this.props.options.keyboardType;
	      if (_tcombValidation2.default.Nil.is(keyboardType) && this.typeInfo.innerType === _tcombValidation2.default.Number) {
	        return 'numeric';
	      }
	      return keyboardType;
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      var _this4 = this;
	
	      var locals = _get(Textbox.prototype.__proto__ || Object.getPrototypeOf(Textbox.prototype), 'getLocals', this).call(this);
	      locals.placeholder = this.getPlaceholder();
	      locals.onChangeNative = this.props.options.onChange;
	      locals.keyboardType = this.getKeyboardType();
	
	      ['help', 'autoCapitalize', 'autoCorrect', 'autoFocus', 'blurOnSubmit', 'editable', 'maxLength', 'multiline', 'onBlur', 'onEndEditing', 'onFocus', 'onLayout', 'onSelectionChange', 'onSubmitEditing', 'placeholderTextColor', 'secureTextEntry', 'selectTextOnFocus', 'selectionColor', 'numberOfLines', 'underlineColorAndroid', 'clearButtonMode', 'clearTextOnFocus', 'enablesReturnKeyAutomatically', 'keyboardAppearance', 'onKeyPress', 'returnKeyType', 'selectionState'].forEach(function (name) {
	        return locals[name] = _this4.props.options[name];
	      });
	
	      return locals;
	    }
	  }]);
	
	  return Textbox;
	}(Component);
	
	Textbox.transformer = {
	  format: function format(value) {
	    return Nil.is(value) ? '' : value;
	  },
	  parse: toNull
	};
	
	Textbox.numberTransformer = {
	  format: function format(value) {
	    return Nil.is(value) ? '' : String(value);
	  },
	  parse: parseNumber
	};
	
	var Checkbox = function (_Component2) {
	  _inherits(Checkbox, _Component2);
	
	  function Checkbox() {
	    _classCallCheck(this, Checkbox);
	
	    return _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).apply(this, arguments));
	  }
	
	  _createClass(Checkbox, [{
	    key: 'getTemplate',
	    value: function getTemplate() {
	      return this.props.options.template || this.props.ctx.templates.checkbox;
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      var _this6 = this;
	
	      var locals = _get(Checkbox.prototype.__proto__ || Object.getPrototypeOf(Checkbox.prototype), 'getLocals', this).call(this);
	      // checkboxes must always have a label
	      locals.label = locals.label || this.getDefaultLabel();
	
	      ['help', 'disabled', 'onTintColor', 'thumbTintColor', 'tintColor'].forEach(function (name) {
	        return locals[name] = _this6.props.options[name];
	      });
	
	      return locals;
	    }
	  }]);
	
	  return Checkbox;
	}(Component);
	
	Checkbox.transformer = {
	  format: function format(value) {
	    return Nil.is(value) ? false : value;
	  },
	  parse: function parse(value) {
	    return value;
	  }
	};
	
	var Select = function (_Component3) {
	  _inherits(Select, _Component3);
	
	  function Select() {
	    _classCallCheck(this, Select);
	
	    return _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).apply(this, arguments));
	  }
	
	  _createClass(Select, [{
	    key: 'getTransformer',
	    value: function getTransformer() {
	      var options = this.props.options;
	      if (options.transformer) {
	        return options.transformer;
	      }
	      return Select.transformer(this.getNullOption());
	    }
	  }, {
	    key: 'getTemplate',
	    value: function getTemplate() {
	      return this.props.options.template || this.props.ctx.templates.select;
	    }
	  }, {
	    key: 'getNullOption',
	    value: function getNullOption() {
	      return this.props.options.nullOption || { value: '', text: '-' };
	    }
	  }, {
	    key: 'getEnum',
	    value: function getEnum() {
	      return this.typeInfo.innerType;
	    }
	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      var options = this.props.options;
	      var items = options.options ? options.options.slice() : (0, _util.getOptionsOfEnum)(this.getEnum());
	      if (options.order) {
	        items.sort(getComparator(options.order));
	      }
	      var nullOption = this.getNullOption();
	      if (options.nullOption !== false) {
	        items.unshift(nullOption);
	      }
	      return items;
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      var _this8 = this;
	
	      var locals = _get(Select.prototype.__proto__ || Object.getPrototypeOf(Select.prototype), 'getLocals', this).call(this);
	      locals.options = this.getOptions();
	
	      ['help', 'enabled', 'mode', 'prompt', 'itemStyle'].forEach(function (name) {
	        return locals[name] = _this8.props.options[name];
	      });
	
	      return locals;
	    }
	  }]);
	
	  return Select;
	}(Component);
	
	Select.transformer = function (nullOption) {
	  return {
	    format: function format(value) {
	      return Nil.is(value) && nullOption ? nullOption.value : String(value);
	    },
	    parse: function parse(value) {
	      return nullOption && nullOption.value === value ? null : value;
	    }
	  };
	};
	
	var DatePicker = function (_Component4) {
	  _inherits(DatePicker, _Component4);
	
	  function DatePicker() {
	    _classCallCheck(this, DatePicker);
	
	    return _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).apply(this, arguments));
	  }
	
	  _createClass(DatePicker, [{
	    key: 'getTemplate',
	    value: function getTemplate() {
	      return this.props.options.template || this.props.ctx.templates.datepicker;
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      var _this10 = this;
	
	      var locals = _get(DatePicker.prototype.__proto__ || Object.getPrototypeOf(DatePicker.prototype), 'getLocals', this).call(this);
	      ['help', 'maximumDate', 'minimumDate', 'minuteInterval', 'mode', 'timeZoneOffsetInMinutes'].forEach(function (name) {
	        return locals[name] = _this10.props.options[name];
	      });
	
	      return locals;
	    }
	  }]);
	
	  return DatePicker;
	}(Component);
	
	DatePicker.transformer = {
	  format: function format(value) {
	    return Nil.is(value) ? new Date() : value;
	  },
	  parse: function parse(value) {
	    return value;
	  }
	};
	
	var Struct = function (_Component5) {
	  _inherits(Struct, _Component5);
	
	  function Struct() {
	    _classCallCheck(this, Struct);
	
	    return _possibleConstructorReturn(this, (Struct.__proto__ || Object.getPrototypeOf(Struct)).apply(this, arguments));
	  }
	
	  _createClass(Struct, [{
	    key: 'isValueNully',
	    value: function isValueNully() {
	      var _this12 = this;
	
	      return Object.keys(this.refs).every(function (ref) {
	        return _this12.refs[ref].isValueNully();
	      });
	    }
	  }, {
	    key: 'removeErrors',
	    value: function removeErrors() {
	      var _this13 = this;
	
	      this.setState({ hasError: false });
	      Object.keys(this.refs).forEach(function (ref) {
	        return _this13.refs[ref].removeErrors();
	      });
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      var value = {};
	      for (var ref in this.refs) {
	        value[ref] = this.refs[ref].getValue();
	      }
	      return this.getTransformer().parse(value);
	    }
	  }, {
	    key: 'validate',
	    value: function validate() {
	      var value = {};
	      var errors = [];
	      var hasError = false;
	      var result = void 0;
	
	      if (this.typeInfo.isMaybe && this.isValueNully()) {
	        this.removeErrors();
	        return new _tcombValidation2.default.ValidationResult({ errors: [], value: null });
	      }
	
	      for (var ref in this.refs) {
	        if (this.refs.hasOwnProperty(ref)) {
	          result = this.refs[ref].validate();
	          errors = errors.concat(result.errors);
	          value[ref] = result.value;
	        }
	      }
	
	      if (errors.length === 0) {
	        var InnerType = this.typeInfo.innerType;
	        value = new InnerType(value);
	        if (this.typeInfo.isSubtype && errors.length === 0) {
	          result = _tcombValidation2.default.validate(value, this.props.type, this.getValidationOptions());
	          hasError = !result.isValid();
	          errors = errors.concat(result.errors);
	        }
	      }
	
	      this.setState({ hasError: hasError });
	      return new _tcombValidation2.default.ValidationResult({ errors: errors, value: value });
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(fieldName, fieldValue, path) {
	      var _this14 = this;
	
	      var value = _tcombValidation2.default.mixin({}, this.state.value);
	      value[fieldName] = fieldValue;
	      this.setState({ value: value }, function () {
	        _this14.props.onChange(value, path);
	      });
	    }
	  }, {
	    key: 'getTemplates',
	    value: function getTemplates() {
	      return (0, _util.merge)(this.props.ctx.templates, this.props.options.templates);
	    }
	  }, {
	    key: 'getTemplate',
	    value: function getTemplate() {
	      return this.props.options.template || this.getTemplates().struct;
	    }
	  }, {
	    key: 'getTypeProps',
	    value: function getTypeProps() {
	      return this.typeInfo.innerType.meta.props;
	    }
	  }, {
	    key: 'getOrder',
	    value: function getOrder() {
	      return this.props.options.order || Object.keys(this.getTypeProps());
	    }
	  }, {
	    key: 'getInputs',
	    value: function getInputs() {
	      var _props = this.props,
	          ctx = _props.ctx,
	          options = _props.options;
	
	      var props = this.getTypeProps();
	      var auto = this.getAuto();
	      var i18n = this.getI18n();
	      var config = this.getConfig();
	      var value = this.state.value || {};
	      var templates = this.getTemplates();
	      var stylesheet = this.getStylesheet();
	      var inputs = {};
	      for (var prop in props) {
	        if (props.hasOwnProperty(prop)) {
	          var type = props[prop];
	          var propValue = value[prop];
	          var propType = (0, _util.getTypeFromUnion)(type, propValue);
	          var fieldsOptions = options.fields || noobj;
	          var propOptions = (0, _util.getComponentOptions)(fieldsOptions[prop], noobj, propValue, type);
	          inputs[prop] = _react3.default.createElement(getFormComponent(propType, propOptions), {
	            key: prop,
	            ref: prop,
	            type: propType,
	            options: propOptions,
	            value: value[prop],
	            onChange: this.onChange.bind(this, prop),
	            ctx: {
	              context: ctx.context,
	              uidGenerator: ctx.uidGenerator,
	              auto: auto,
	              config: config,
	              label: (0, _util.humanize)(prop),
	              i18n: i18n,
	              stylesheet: stylesheet,
	              templates: templates,
	              path: this.props.ctx.path.concat(prop)
	            }
	          });
	        }
	      }
	      return inputs;
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      var templates = this.getTemplates();
	      var locals = _get(Struct.prototype.__proto__ || Object.getPrototypeOf(Struct.prototype), 'getLocals', this).call(this);
	      locals.order = this.getOrder();
	      locals.inputs = this.getInputs();
	      locals.template = templates.struct;
	      return locals;
	    }
	  }]);
	
	  return Struct;
	}(Component);
	
	function toSameLength(value, keys, uidGenerator) {
	  if (value.length === keys.length) {
	    return keys;
	  }
	  var ret = [];
	  for (var i = 0, len = value.length; i < len; i++) {
	    ret[i] = keys[i] || uidGenerator.next();
	  }
	  return ret;
	}
	
	var List = exports.List = function (_Component6) {
	  _inherits(List, _Component6);
	
	  function List(props) {
	    _classCallCheck(this, List);
	
	    var _this15 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));
	
	    _this15.state.keys = _this15.state.value.map(function () {
	      return props.ctx.uidGenerator.next();
	    });
	    return _this15;
	  }
	
	  _createClass(List, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.type !== this.props.type) {
	        this.typeInfo = (0, _util.getTypeInfo)(props.type);
	      }
	      var value = this.getTransformer().format(props.value);
	      this.setState({
	        value: value,
	        keys: toSameLength(value, this.state.keys, props.ctx.uidGenerator)
	      });
	    }
	  }, {
	    key: 'isValueNully',
	    value: function isValueNully() {
	      return this.state.value.length === 0;
	    }
	  }, {
	    key: 'removeErrors',
	    value: function removeErrors() {
	      var _this16 = this;
	
	      this.setState({ hasError: false });
	      Object.keys(this.refs).forEach(function (ref) {
	        return _this16.refs[ref].removeErrors();
	      });
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      var value = [];
	      for (var i = 0, len = this.state.value.length; i < len; i++) {
	        if (this.refs.hasOwnProperty(i)) {
	          value.push(this.refs[i].getValue());
	        }
	      }
	      return this.getTransformer().parse(value);
	    }
	  }, {
	    key: 'validate',
	    value: function validate() {
	      var value = [];
	      var errors = [];
	      var hasError = false;
	      var result = void 0;
	
	      if (this.typeInfo.isMaybe && this.isValueNully()) {
	        this.removeErrors();
	        return new _tcombValidation2.default.ValidationResult({ errors: [], value: null });
	      }
	
	      for (var i = 0, len = this.state.value.length; i < len; i++) {
	        result = this.refs[i].validate();
	        errors = errors.concat(result.errors);
	        value.push(result.value);
	      }
	
	      // handle subtype
	      if (this.typeInfo.isSubtype && errors.length === 0) {
	        result = _tcombValidation2.default.validate(value, this.props.type, this.getValidationOptions());
	        hasError = !result.isValid();
	        errors = errors.concat(result.errors);
	      }
	
	      this.setState({ hasError: hasError });
	      return new _tcombValidation2.default.ValidationResult({ errors: errors, value: value });
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(value, keys, path, kind) {
	      var _this17 = this;
	
	      var allkeys = toSameLength(value, keys, this.props.ctx.uidGenerator);
	      this.setState({ value: value, keys: allkeys, isPristine: false }, function () {
	        _this17.props.onChange(value, path, kind);
	      });
	    }
	  }, {
	    key: 'addItem',
	    value: function addItem() {
	      var value = this.state.value.concat(undefined);
	      var keys = this.state.keys.concat(this.props.ctx.uidGenerator.next());
	      this.onChange(value, keys, this.props.ctx.path.concat(value.length - 1), 'add');
	    }
	  }, {
	    key: 'onItemChange',
	    value: function onItemChange(itemIndex, itemValue, path, kind) {
	      var value = this.state.value.slice();
	      value[itemIndex] = itemValue;
	      this.onChange(value, this.state.keys, path, kind);
	    }
	  }, {
	    key: 'removeItem',
	    value: function removeItem(i) {
	      var value = this.state.value.slice();
	      value.splice(i, 1);
	      var keys = this.state.keys.slice();
	      keys.splice(i, 1);
	      this.onChange(value, keys, this.props.ctx.path.concat(i), 'remove');
	    }
	  }, {
	    key: 'moveUpItem',
	    value: function moveUpItem(i) {
	      if (i > 0) {
	        this.onChange((0, _util.move)(this.state.value.slice(), i, i - 1), (0, _util.move)(this.state.keys.slice(), i, i - 1), this.props.ctx.path.concat(i), 'moveUp');
	      }
	    }
	  }, {
	    key: 'moveDownItem',
	    value: function moveDownItem(i) {
	      if (i < this.state.value.length - 1) {
	        this.onChange((0, _util.move)(this.state.value.slice(), i, i + 1), (0, _util.move)(this.state.keys.slice(), i, i + 1), this.props.ctx.path.concat(i), 'moveDown');
	      }
	    }
	  }, {
	    key: 'getTemplates',
	    value: function getTemplates() {
	      return (0, _util.merge)(this.props.ctx.templates, this.props.options.templates);
	    }
	  }, {
	    key: 'getTemplate',
	    value: function getTemplate() {
	      return this.props.options.template || this.getTemplates().list;
	    }
	  }, {
	    key: 'getItems',
	    value: function getItems() {
	      var _this18 = this;
	
	      var _props2 = this.props,
	          options = _props2.options,
	          ctx = _props2.ctx;
	
	      var auto = this.getAuto();
	      var i18n = this.getI18n();
	      var config = this.getConfig();
	      var stylesheet = this.getStylesheet();
	      var templates = this.getTemplates();
	      var value = this.state.value;
	      return value.map(function (itemValue, i) {
	        var type = _this18.typeInfo.innerType.meta.type;
	        var itemType = (0, _util.getTypeFromUnion)(type, itemValue);
	        var itemOptions = (0, _util.getComponentOptions)(options.item, noobj, itemValue, type);
	        var ItemComponent = getFormComponent(itemType, itemOptions);
	        var buttons = [];
	        if (!options.disableRemove) {
	          buttons.push({
	            type: 'remove',
	            label: i18n.remove,
	            click: _this18.removeItem.bind(_this18, i)
	          });
	        }
	        if (!options.disableOrder) {
	          buttons.push({
	            type: 'move-up',
	            label: i18n.up,
	            click: _this18.moveUpItem.bind(_this18, i)
	          }, {
	            type: 'move-down',
	            label: i18n.down,
	            click: _this18.moveDownItem.bind(_this18, i)
	          });
	        }
	        return {
	          input: _react3.default.createElement(ItemComponent, {
	            ref: i,
	            type: itemType,
	            options: itemOptions,
	            value: itemValue,
	            onChange: _this18.onItemChange.bind(_this18, i),
	            ctx: {
	              context: ctx.context,
	              uidGenerator: ctx.uidGenerator,
	              auto: auto,
	              config: config,
	              label: ctx.label ? ctx.label + '[' + (i + 1) + ']' : String(i + 1),
	              i18n: i18n,
	              stylesheet: stylesheet,
	              templates: templates,
	              path: ctx.path.concat(i)
	            }
	          }),
	          key: _this18.state.keys[i],
	          buttons: buttons
	        };
	      });
	    }
	  }, {
	    key: 'getLocals',
	    value: function getLocals() {
	      var options = this.props.options;
	      var i18n = this.getI18n();
	      var locals = _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'getLocals', this).call(this);
	      locals.add = options.disableAdd ? null : {
	        type: 'add',
	        label: i18n.add,
	        click: this.addItem.bind(this)
	      };
	      locals.items = this.getItems();
	      locals.className = options.className;
	      return locals;
	    }
	  }]);
	
	  return List;
	}(Component);
	
	List.transformer = {
	  format: function format(value) {
	    return Nil.is(value) ? noarr : value;
	  },
	  parse: function parse(value) {
	    return value;
	  }
	};
	
	var Form = _wrapComponent('Form')(function (_React$Component2) {
	  _inherits(Form, _React$Component2);
	
	  function Form() {
	    _classCallCheck(this, Form);
	
	    return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
	  }
	
	  _createClass(Form, [{
	    key: 'validate',
	    value: function validate() {
	      return this.refs.input.validate();
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      var result = this.validate();
	      return result.isValid() ? result.value : null;
	    }
	  }, {
	    key: 'getComponent',
	    value: function getComponent(path) {
	      path = _tcombValidation2.default.String.is(path) ? path.split('.') : path;
	      return path.reduce(function (input, name) {
	        return input.refs[name];
	      }, this.refs.input);
	    }
	  }, {
	    key: 'getSeed',
	    value: function getSeed() {
	      var rii = this._reactInternalInstance;
	      if (rii) {
	        if (rii._hostContainerInfo) {
	          return rii._hostContainerInfo._idCounter;
	        }
	        if (rii._nativeContainerInfo) {
	          return rii._nativeContainerInfo._idCounter;
	        }
	        if (rii._rootNodeID) {
	          return rii._rootNodeID;
	        }
	      }
	      return '0';
	    }
	  }, {
	    key: 'getUIDGenerator',
	    value: function getUIDGenerator() {
	      this.uidGenerator = this.uidGenerator || new _util.UIDGenerator(this.getSeed());
	      return this.uidGenerator;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	
	      var stylesheet = this.props.stylesheet || Form.stylesheet;
	      var templates = this.props.templates || Form.templates;
	      var i18n = this.props.i18n || Form.i18n;
	
	      if (true) {
	        _tcombValidation2.default.assert(_tcombValidation2.default.isType(this.props.type), '[' + SOURCE + '] missing required prop type');
	        _tcombValidation2.default.assert(_tcombValidation2.default.maybe(_tcombValidation2.default.Object).is(this.props.options) || _tcombValidation2.default.Function.is(this.props.options) || _tcombValidation2.default.list(_tcombValidation2.default.maybe(_tcombValidation2.default.Object)).is(this.props.options), '[' + SOURCE + '] prop options, if specified, must be an object, a function returning the options or a list of options for unions');
	        _tcombValidation2.default.assert(_tcombValidation2.default.Object.is(stylesheet), '[' + SOURCE + '] missing stylesheet config');
	        _tcombValidation2.default.assert(_tcombValidation2.default.Object.is(templates), '[' + SOURCE + '] missing templates config');
	        _tcombValidation2.default.assert(_tcombValidation2.default.Object.is(i18n), '[' + SOURCE + '] missing i18n config');
	      }
	
	      var value = this.props.value;
	      var type = (0, _util.getTypeFromUnion)(this.props.type, value);
	      var options = (0, _util.getComponentOptions)(this.props.options, noobj, value, this.props.type);
	
	      // this is in the render method because I need this._reactInternalInstance._rootNodeID in React ^0.14.0
	      // and this._reactInternalInstance._nativeContainerInfo._idCounter in React ^15.0.0
	      var uidGenerator = this.getUIDGenerator();
	
	      return _react3.default.createElement(getFormComponent(type, options), {
	        ref: 'input',
	        type: type,
	        options: options,
	        value: this.props.value,
	        onChange: this.props.onChange || noop,
	        ctx: {
	          context: this.props.context,
	          uidGenerator: uidGenerator,
	          auto: 'labels',
	          stylesheet: stylesheet,
	          templates: templates,
	          i18n: i18n,
	          path: []
	        }
	      });
	    }
	  }]);
	
	  return Form;
	}(_react3.default.Component));
	
	module.exports = {
	  getComponent: getFormComponent,
	  Component: Component,
	  Textbox: Textbox,
	  Checkbox: Checkbox,
	  Select: Select,
	  DatePicker: DatePicker,
	  Struct: Struct,
	  List: List,
	  Form: Form
	};

/***/ },
/* 1115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UIDGenerator = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.getOptionsOfEnum = getOptionsOfEnum;
	exports.getTypeInfo = getTypeInfo;
	exports.humanize = humanize;
	exports.merge = merge;
	exports.move = move;
	exports.getTypeFromUnion = getTypeFromUnion;
	exports.getComponentOptions = getComponentOptions;
	
	var _tcombValidation = __webpack_require__(1057);
	
	var _tcombValidation2 = _interopRequireDefault(_tcombValidation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function getOptionsOfEnum(type) {
	  var enums = type.meta.map;
	  return Object.keys(enums).map(function (value) {
	    return {
	      value: value,
	      text: enums[value]
	    };
	  });
	}
	
	function getTypeInfo(type) {
	  var innerType = type;
	  var isMaybe = false;
	  var isSubtype = false;
	  var kind = void 0;
	  var innerGetValidationErrorMessage = void 0;
	
	  while (innerType) {
	    kind = innerType.meta.kind;
	    if (_tcombValidation2.default.Function.is(innerType.getValidationErrorMessage)) {
	      innerGetValidationErrorMessage = innerType.getValidationErrorMessage;
	    }
	    if (kind === 'maybe') {
	      isMaybe = true;
	      innerType = innerType.meta.type;
	      continue;
	    }
	    if (kind === 'subtype') {
	      isSubtype = true;
	      innerType = innerType.meta.type;
	      continue;
	    }
	    break;
	  }
	
	  var getValidationErrorMessage = innerGetValidationErrorMessage ? function (value, path, context) {
	    var result = _tcombValidation2.default.validate(value, type, { path: path, context: context });
	    if (!result.isValid()) {
	      for (var i = 0, len = result.errors.length; i < len; i++) {
	        if (_tcombValidation2.default.Function.is(result.errors[i].expected.getValidationErrorMessage)) {
	          return result.errors[i].message;
	        }
	      }
	      return innerGetValidationErrorMessage(value, path, context);
	    }
	  } : undefined;
	
	  return {
	    type: type,
	    isMaybe: isMaybe,
	    isSubtype: isSubtype,
	    innerType: innerType,
	    getValidationErrorMessage: getValidationErrorMessage
	  };
	}
	
	// thanks to https://github.com/epeli/underscore.string
	
	function underscored(s) {
	  return s.trim().replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
	}
	
	function capitalize(s) {
	  return s.charAt(0).toUpperCase() + s.slice(1);
	}
	
	function humanize(s) {
	  return capitalize(underscored(s).replace(/_id$/, '').replace(/_/g, ' '));
	}
	
	function merge(a, b) {
	  return (0, _tcombValidation.mixin)((0, _tcombValidation.mixin)({}, a), b, true);
	}
	
	function move(arr, fromIndex, toIndex) {
	  var element = arr.splice(fromIndex, 1)[0];
	  arr.splice(toIndex, 0, element);
	  return arr;
	}
	
	var UIDGenerator = exports.UIDGenerator = function () {
	  function UIDGenerator(seed) {
	    _classCallCheck(this, UIDGenerator);
	
	    this.seed = 'tfid-' + seed + '-';
	    this.counter = 0;
	  }
	
	  _createClass(UIDGenerator, [{
	    key: 'next',
	    value: function next() {
	      return this.seed + this.counter++; // eslint-disable-line space-unary-ops
	    }
	  }]);
	
	  return UIDGenerator;
	}();
	
	function containsUnion(type) {
	  switch (type.meta.kind) {
	    case 'union':
	      return true;
	    case 'maybe':
	    case 'subtype':
	      return containsUnion(type.meta.type);
	    default:
	      return false;
	  }
	}
	
	function getUnionConcreteType(type, value) {
	  var kind = type.meta.kind;
	  if (kind === 'union') {
	    var concreteType = type.dispatch(value);
	    if (true) {
	      _tcombValidation2.default.assert(_tcombValidation2.default.isType(concreteType), function () {
	        return 'Invalid value ' + _tcombValidation2.default.assert.stringify(value) + ' supplied to ' + _tcombValidation2.default.getTypeName(type) + ' (no constructor returned by dispatch)';
	      });
	    }
	    return concreteType;
	  } else if (kind === 'maybe') {
	    return _tcombValidation2.default.maybe(getUnionConcreteType(type.meta.type, value), type.meta.name);
	  } else if (kind === 'subtype') {
	    return _tcombValidation2.default.subtype(getUnionConcreteType(type.meta.type, value), type.meta.predicate, type.meta.name);
	  }
	}
	
	function getTypeFromUnion(type, value) {
	  if (containsUnion(type)) {
	    return getUnionConcreteType(type, value);
	  }
	  return type;
	}
	
	function getUnion(type) {
	  if (type.meta.kind === 'union') {
	    return type;
	  }
	  return getUnion(type.meta.type);
	}
	
	function findIndex(arr, element) {
	  for (var i = 0, len = arr.length; i < len; i++) {
	    if (arr[i] === element) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	function getComponentOptions(options, defaultOptions, value, type) {
	  if (_tcombValidation2.default.Nil.is(options)) {
	    return defaultOptions;
	  }
	  if (_tcombValidation2.default.Function.is(options)) {
	    return options(value);
	  }
	  if (_tcombValidation2.default.Array.is(options) && containsUnion(type)) {
	    var union = getUnion(type);
	    var concreteType = union.dispatch(value);
	    var index = findIndex(union.meta.types, concreteType);
	    // recurse
	    return getComponentOptions(options[index], defaultOptions, value, concreteType);
	  }
	  return options;
	}

/***/ },
/* 1116 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  optional: ' (optional)',
	  required: '',
	  add: 'Add',
	  remove: '✘',
	  up: '↑',
	  down: '↓'
	};

/***/ },
/* 1117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	  textbox: __webpack_require__(1118),
	  checkbox: __webpack_require__(1119),
	  select: __webpack_require__(1120),
	  datepicker: __webpack_require__(1121),
	  struct: __webpack_require__(1122),
	  list: __webpack_require__(1123)
	};

/***/ },
/* 1118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    Text = _require.Text,
	    TextInput = _require.TextInput;
	
	function textbox(locals) {
	  if (locals.hidden) {
	    return null;
	  }
	
	  var stylesheet = locals.stylesheet;
	  var formGroupStyle = stylesheet.formGroup.normal;
	  var controlLabelStyle = stylesheet.controlLabel.normal;
	  var textboxStyle = stylesheet.textbox.normal;
	  var helpBlockStyle = stylesheet.helpBlock.normal;
	  var errorBlockStyle = stylesheet.errorBlock;
	
	  if (locals.hasError) {
	    formGroupStyle = stylesheet.formGroup.error;
	    controlLabelStyle = stylesheet.controlLabel.error;
	    textboxStyle = stylesheet.textbox.error;
	    helpBlockStyle = stylesheet.helpBlock.error;
	  }
	
	  if (locals.editable === false) {
	    textboxStyle = stylesheet.textbox.notEditable;
	  }
	
	  var label = locals.label ? React.createElement(
	    Text,
	    { style: controlLabelStyle },
	    locals.label
	  ) : null;
	  var help = locals.help ? React.createElement(
	    Text,
	    { style: helpBlockStyle },
	    locals.help
	  ) : null;
	  var error = locals.hasError && locals.error ? React.createElement(
	    Text,
	    { accessibilityLiveRegion: 'polite', style: errorBlockStyle },
	    locals.error
	  ) : null;
	
	  return React.createElement(
	    View,
	    { style: formGroupStyle },
	    label,
	    React.createElement(TextInput, {
	      accessibilityLabel: locals.label,
	      ref: 'input',
	      autoCapitalize: locals.autoCapitalize,
	      autoCorrect: locals.autoCorrect,
	      autoFocus: locals.autoFocus,
	      blurOnSubmit: locals.blurOnSubmit,
	      editable: locals.editable,
	      keyboardType: locals.keyboardType,
	      maxLength: locals.maxLength,
	      multiline: locals.multiline,
	      onBlur: locals.onBlur,
	      onEndEditing: locals.onEndEditing,
	      onFocus: locals.onFocus,
	      onLayout: locals.onLayout,
	      onSelectionChange: locals.onSelectionChange,
	      onSubmitEditing: locals.onSubmitEditing,
	      placeholderTextColor: locals.placeholderTextColor,
	      secureTextEntry: locals.secureTextEntry,
	      selectTextOnFocus: locals.selectTextOnFocus,
	      selectionColor: locals.selectionColor,
	      numberOfLines: locals.numberOfLines,
	      underlineColorAndroid: locals.underlineColorAndroid,
	      clearButtonMode: locals.clearButtonMode,
	      clearTextOnFocus: locals.clearTextOnFocus,
	      enablesReturnKeyAutomatically: locals.enablesReturnKeyAutomatically,
	      keyboardAppearance: locals.keyboardAppearance,
	      onKeyPress: locals.onKeyPress,
	      returnKeyType: locals.returnKeyType,
	      selectionState: locals.selectionState,
	      onChangeText: function onChangeText(value) {
	        return locals.onChange(value);
	      },
	      onChange: locals.onChangeNative,
	      placeholder: locals.placeholder,
	      style: textboxStyle,
	      value: locals.value
	    }),
	    help,
	    error
	  );
	}
	
	module.exports = textbox;

/***/ },
/* 1119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    Text = _require.Text,
	    Switch = _require.Switch;
	
	function checkbox(locals) {
	  if (locals.hidden) {
	    return null;
	  }
	
	  var stylesheet = locals.stylesheet;
	  var formGroupStyle = stylesheet.formGroup.normal;
	  var controlLabelStyle = stylesheet.controlLabel.normal;
	  var checkboxStyle = stylesheet.checkbox.normal;
	  var helpBlockStyle = stylesheet.helpBlock.normal;
	  var errorBlockStyle = stylesheet.errorBlock;
	
	  if (locals.hasError) {
	    formGroupStyle = stylesheet.formGroup.error;
	    controlLabelStyle = stylesheet.controlLabel.error;
	    checkboxStyle = stylesheet.checkbox.error;
	    helpBlockStyle = stylesheet.helpBlock.error;
	  }
	
	  var label = locals.label ? React.createElement(
	    Text,
	    { style: controlLabelStyle },
	    locals.label
	  ) : null;
	  var help = locals.help ? React.createElement(
	    Text,
	    { style: helpBlockStyle },
	    locals.help
	  ) : null;
	  var error = locals.hasError && locals.error ? React.createElement(
	    Text,
	    { accessibilityLiveRegion: 'polite', style: errorBlockStyle },
	    locals.error
	  ) : null;
	
	  return React.createElement(
	    View,
	    { style: formGroupStyle },
	    label,
	    React.createElement(Switch, {
	      accessibilityLabel: locals.label,
	      ref: 'input',
	      disabled: locals.disabled,
	      onTintColor: locals.onTintColor,
	      thumbTintColor: locals.thumbTintColor,
	      tintColor: locals.tintColor,
	      style: checkboxStyle,
	      onValueChange: function onValueChange(value) {
	        return locals.onChange(value);
	      },
	      value: locals.value
	    }),
	    help,
	    error
	  );
	}
	
	module.exports = checkbox;

/***/ },
/* 1120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  CollapsiblePickerIOS: {
	    displayName: 'CollapsiblePickerIOS'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/tcomb-form-native/lib/templates/bootstrap/select.web.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var UIPICKER_HEIGHT = 216;
	
	var CollapsiblePickerIOS = _wrapComponent('CollapsiblePickerIOS')(function (_React$Component) {
	  _inherits(CollapsiblePickerIOS, _React$Component);
	
	  function CollapsiblePickerIOS(props) {
	    _classCallCheck(this, CollapsiblePickerIOS);
	
	    var _this = _possibleConstructorReturn(this, (CollapsiblePickerIOS.__proto__ || Object.getPrototypeOf(CollapsiblePickerIOS)).call(this, props));
	
	    _this.state = {
	      isCollapsed: true,
	      height: new _reactNative.Animated.Value(0)
	    };
	    return _this;
	  }
	
	  _createClass(CollapsiblePickerIOS, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var locals = this.props.locals;
	      var stylesheet = locals.stylesheet;
	
	      var selectStyle = stylesheet.select.normal;
	      var touchableStyle = stylesheet.pickerTouchable.normal;
	      var pickerValue = stylesheet.pickerValue.normal;
	      if (locals.hasError) {
	        selectStyle = stylesheet.select.error;
	        touchableStyle = stylesheet.pickerTouchable.error;
	        pickerValue = stylesheet.pickerValue.error;
	      }
	
	      var animation = _reactNative.Animated.timing;
	      var animationConfig = {
	        duration: 200
	      };
	      if (locals.config) {
	        if (locals.config.animation) {
	          animation = locals.config.animation;
	        }
	        if (locals.config.animationConfig) {
	          animationConfig = locals.config.animationConfig;
	        }
	      }
	
	      var options = locals.options.map(function (_ref) {
	        var value = _ref.value,
	            text = _ref.text;
	        return _react3.default.createElement(_reactNative.Picker.Item, { key: value, value: value, label: text });
	      });
	      var selectedOption = locals.options.find(function (option) {
	        return option.value === locals.value;
	      });
	
	      var height = this.state.isCollapsed ? 0 : UIPICKER_HEIGHT;
	      return _react3.default.createElement(
	        _reactNative.View,
	        null,
	        _react3.default.createElement(
	          _reactNative.TouchableOpacity,
	          { style: touchableStyle,
	            onPress: function onPress() {
	              animation(_this2.state.height, Object.assign({
	                toValue: _this2.state.isCollapsed ? UIPICKER_HEIGHT : 0
	              }, animationConfig)).start();
	              _this2.setState({ isCollapsed: !_this2.state.isCollapsed });
	            } },
	          _react3.default.createElement(
	            _reactNative.Text,
	            { style: pickerValue },
	            selectedOption.text
	          )
	        ),
	        _react3.default.createElement(
	          _reactNative.Animated.View,
	          { style: { height: this.state.height, overflow: 'hidden' } },
	          _react3.default.createElement(
	            _reactNative.Picker,
	            {
	              accessibilityLabel: locals.label,
	              ref: 'input',
	              style: selectStyle,
	              selectedValue: locals.value,
	              onValueChange: locals.onChange,
	              help: locals.help,
	              enabled: locals.enabled,
	              mode: locals.mode,
	              prompt: locals.prompt,
	              itemStyle: locals.itemStyle
	            },
	            options
	          )
	        )
	      );
	    }
	  }]);
	
	  return CollapsiblePickerIOS;
	}(_react3.default.Component));
	
	CollapsiblePickerIOS.propTypes = {
	  locals: _react2.PropTypes.object.isRequired
	};
	
	function select(locals) {
	  if (locals.hidden) {
	    return null;
	  }
	
	  var stylesheet = locals.stylesheet;
	  var formGroupStyle = stylesheet.formGroup.normal;
	  var controlLabelStyle = stylesheet.controlLabel.normal;
	  var selectStyle = stylesheet.select.normal;
	  var helpBlockStyle = stylesheet.helpBlock.normal;
	  var errorBlockStyle = stylesheet.errorBlock;
	
	  if (locals.hasError) {
	    formGroupStyle = stylesheet.formGroup.error;
	    controlLabelStyle = stylesheet.controlLabel.error;
	    selectStyle = stylesheet.select.error;
	    helpBlockStyle = stylesheet.helpBlock.error;
	  }
	
	  var label = locals.label ? _react3.default.createElement(
	    _reactNative.Text,
	    { style: controlLabelStyle },
	    locals.label
	  ) : null;
	  var help = locals.help ? _react3.default.createElement(
	    _reactNative.Text,
	    { style: helpBlockStyle },
	    locals.help
	  ) : null;
	  var error = locals.hasError && locals.error ? _react3.default.createElement(
	    _reactNative.Text,
	    { accessibilityLiveRegion: 'polite', style: errorBlockStyle },
	    locals.error
	  ) : null;
	
	  var options = locals.options.map(function (_ref2) {
	    var value = _ref2.value,
	        text = _ref2.text;
	    return _react3.default.createElement(_reactNative.Picker.Item, { key: value, value: value, label: text });
	  });
	
	  return _react3.default.createElement(
	    _reactNative.View,
	    { style: formGroupStyle },
	    label,
	    _react3.default.createElement(CollapsiblePickerIOS, { locals: locals }),
	    help,
	    error
	  );
	}
	
	module.exports = select;

/***/ },
/* 1121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  CollapsibleDatePickerIOS: {
	    displayName: 'CollapsibleDatePickerIOS'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/tcomb-form-native/lib/templates/bootstrap/datepicker.web.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var UIPICKER_HEIGHT = 216;
	
	var CollapsibleDatePickerIOS = _wrapComponent('CollapsibleDatePickerIOS')(function (_React$Component) {
	  _inherits(CollapsibleDatePickerIOS, _React$Component);
	
	  function CollapsibleDatePickerIOS(props) {
	    _classCallCheck(this, CollapsibleDatePickerIOS);
	
	    var _this = _possibleConstructorReturn(this, (CollapsibleDatePickerIOS.__proto__ || Object.getPrototypeOf(CollapsibleDatePickerIOS)).call(this, props));
	
	    _this.state = {
	      isCollapsed: true,
	      height: new _reactNative.Animated.Value(0)
	    };
	    return _this;
	  }
	
	  _createClass(CollapsibleDatePickerIOS, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var locals = this.props.locals;
	      var stylesheet = locals.stylesheet;
	      var touchableStyle = stylesheet.dateTouchable.normal;
	      var datepickerStyle = stylesheet.datepicker.normal;
	      var dateValueStyle = stylesheet.dateValue.normal;
	      if (locals.hasError) {
	        touchableStyle = stylesheet.dateTouchable.error;
	        datepickerStyle = stylesheet.datepicker.error;
	        dateValueStyle = stylesheet.dateValue.error;
	      }
	      var formattedValue = String(locals.value);
	      var animation = _reactNative.Animated.timing;
	      var animationConfig = {
	        duration: 200
	      };
	      if (locals.config) {
	        if (locals.config.format) {
	          formattedValue = locals.config.format(locals.value);
	        }
	        if (locals.config.animation) {
	          animation = locals.config.animation;
	        }
	        if (locals.config.animationConfig) {
	          animationConfig = locals.config.animationConfig;
	        }
	      }
	      var height = this.state.isCollapsed ? 0 : UIPICKER_HEIGHT;
	      return _react3.default.createElement(
	        _reactNative.View,
	        null,
	        _react3.default.createElement(
	          _reactNative.TouchableOpacity,
	          { style: touchableStyle,
	            onPress: function onPress() {
	              animation(_this2.state.height, Object.assign({
	                toValue: _this2.state.isCollapsed ? UIPICKER_HEIGHT : 0
	              }, animationConfig)).start();
	              _this2.setState({ isCollapsed: !_this2.state.isCollapsed });
	            } },
	          _react3.default.createElement(
	            _reactNative.Text,
	            { style: dateValueStyle },
	            formattedValue
	          )
	        ),
	        _react3.default.createElement(
	          _reactNative.Animated.View,
	          { style: { height: this.state.height, overflow: 'hidden' } },
	          _react3.default.createElement(_reactNative.DatePickerIOS, {
	            ref: 'input',
	            accessibilityLabel: locals.label,
	            date: locals.value,
	            maximumDate: locals.maximumDate,
	            minimumDate: locals.minimumDate,
	            minuteInterval: locals.minuteInterval,
	            mode: locals.mode,
	            onDateChange: function onDateChange(value) {
	              return locals.onChange(value);
	            },
	            timeZoneOffsetInMinutes: locals.timeZoneOffsetInMinutes,
	            style: [datepickerStyle, { height: height }]
	          })
	        )
	      );
	    }
	  }]);
	
	  return CollapsibleDatePickerIOS;
	}(_react3.default.Component));
	
	CollapsibleDatePickerIOS.propTypes = {
	  locals: _react2.PropTypes.object.isRequired
	};
	
	function datepicker(locals) {
	  if (locals.hidden) {
	    return null;
	  }
	
	  var stylesheet = locals.stylesheet;
	  var formGroupStyle = stylesheet.formGroup.normal;
	  var controlLabelStyle = stylesheet.controlLabel.normal;
	  var helpBlockStyle = stylesheet.helpBlock.normal;
	  var errorBlockStyle = stylesheet.errorBlock;
	
	  if (locals.hasError) {
	    formGroupStyle = stylesheet.formGroup.error;
	    controlLabelStyle = stylesheet.controlLabel.error;
	    helpBlockStyle = stylesheet.helpBlock.error;
	  }
	
	  var label = locals.label ? _react3.default.createElement(
	    _reactNative.Text,
	    { style: controlLabelStyle },
	    locals.label
	  ) : null;
	  var help = locals.help ? _react3.default.createElement(
	    _reactNative.Text,
	    { style: helpBlockStyle },
	    locals.help
	  ) : null;
	  var error = locals.hasError && locals.error ? _react3.default.createElement(
	    _reactNative.Text,
	    { accessibilityLiveRegion: 'polite', style: errorBlockStyle },
	    locals.error
	  ) : null;
	
	  return _react3.default.createElement(
	    _reactNative.View,
	    { style: formGroupStyle },
	    label,
	    _react3.default.createElement(CollapsibleDatePickerIOS, { locals: locals }),
	    help,
	    error
	  );
	}
	
	module.exports = datepicker;

/***/ },
/* 1122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    Text = _require.Text;
	
	function struct(locals) {
	  if (locals.hidden) {
	    return null;
	  }
	
	  var stylesheet = locals.stylesheet;
	  var fieldsetStyle = stylesheet.fieldset;
	  var controlLabelStyle = stylesheet.controlLabel.normal;
	
	  if (locals.hasError) {
	    controlLabelStyle = stylesheet.controlLabel.error;
	  }
	
	  var label = locals.label ? React.createElement(
	    Text,
	    { style: controlLabelStyle },
	    locals.label
	  ) : null;
	  var error = locals.hasError && locals.error ? React.createElement(
	    Text,
	    { accessibilityLiveRegion: 'polite', style: stylesheet.errorBlock },
	    locals.error
	  ) : null;
	
	  var rows = locals.order.map(function (name) {
	    return locals.inputs[name];
	  });
	
	  return React.createElement(
	    View,
	    { style: fieldsetStyle },
	    label,
	    error,
	    rows
	  );
	}
	
	module.exports = struct;

/***/ },
/* 1123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    Text = _require.Text,
	    TouchableHighlight = _require.TouchableHighlight;
	
	function renderRowWithoutButtons(item) {
	  return React.createElement(
	    View,
	    { key: item.key },
	    item.input
	  );
	}
	
	function renderRowButton(button, stylesheet, style) {
	  return React.createElement(
	    TouchableHighlight,
	    { key: button.type, style: [stylesheet.button, style], onPress: button.click },
	    React.createElement(
	      Text,
	      { style: stylesheet.buttonText },
	      button.label
	    )
	  );
	}
	
	function renderButtonGroup(buttons, stylesheet) {
	  return React.createElement(
	    View,
	    { style: { flexDirection: 'row' } },
	    buttons.map(function (button) {
	      return renderRowButton(button, stylesheet, { width: 50 });
	    })
	  );
	}
	
	function renderRow(item, stylesheet) {
	  return React.createElement(
	    View,
	    { key: item.key, style: { flexDirection: 'row' } },
	    React.createElement(
	      View,
	      { style: { flex: 1 } },
	      item.input
	    ),
	    React.createElement(
	      View,
	      { style: { flex: 1 } },
	      renderButtonGroup(item.buttons, stylesheet)
	    )
	  );
	}
	
	function list(locals) {
	  if (locals.hidden) {
	    return null;
	  }
	
	  var stylesheet = locals.stylesheet;
	  var fieldsetStyle = stylesheet.fieldset;
	  var controlLabelStyle = stylesheet.controlLabel.normal;
	
	  if (locals.hasError) {
	    controlLabelStyle = stylesheet.controlLabel.error;
	  }
	
	  var label = locals.label ? React.createElement(
	    Text,
	    { style: controlLabelStyle },
	    locals.label
	  ) : null;
	  var error = locals.hasError && locals.error ? React.createElement(
	    Text,
	    { accessibilityLiveRegion: 'polite', style: stylesheet.errorBlock },
	    locals.error
	  ) : null;
	
	  var rows = locals.items.map(function (item) {
	    return item.buttons.length === 0 ? renderRowWithoutButtons(item) : renderRow(item, stylesheet);
	  });
	
	  var addButton = locals.add ? renderRowButton(locals.add, stylesheet) : null;
	
	  return React.createElement(
	    View,
	    { style: fieldsetStyle },
	    label,
	    error,
	    rows,
	    addButton
	  );
	}
	
	module.exports = list;

/***/ },
/* 1124 */
/***/ function(module, exports) {

	/*
	
	  a bootstrap like style
	
	*/
	'use strict';
	
	var LABEL_COLOR = '#000000';
	var INPUT_COLOR = '#000000';
	var ERROR_COLOR = '#a94442';
	var HELP_COLOR = '#999999';
	var BORDER_COLOR = '#cccccc';
	var DISABLED_COLOR = '#777777';
	var DISABLED_BACKGROUND_COLOR = '#eeeeee';
	var FONT_SIZE = 17;
	var FONT_WEIGHT = '500';
	
	var stylesheet = Object.freeze({
	  fieldset: {},
	  // the style applied to the container of all inputs
	  formGroup: {
	    normal: {
	      marginBottom: 10
	    },
	    error: {
	      marginBottom: 10
	    }
	  },
	  controlLabel: {
	    normal: {
	      color: LABEL_COLOR,
	      fontSize: FONT_SIZE,
	      marginBottom: 7,
	      fontWeight: FONT_WEIGHT
	    },
	    // the style applied when a validation error occours
	    error: {
	      color: ERROR_COLOR,
	      fontSize: FONT_SIZE,
	      marginBottom: 7,
	      fontWeight: FONT_WEIGHT
	    }
	  },
	  helpBlock: {
	    normal: {
	      color: HELP_COLOR,
	      fontSize: FONT_SIZE,
	      marginBottom: 2
	    },
	    // the style applied when a validation error occours
	    error: {
	      color: HELP_COLOR,
	      fontSize: FONT_SIZE,
	      marginBottom: 2
	    }
	  },
	  errorBlock: {
	    fontSize: FONT_SIZE,
	    marginBottom: 2,
	    color: ERROR_COLOR
	  },
	  textbox: {
	    normal: {
	      color: INPUT_COLOR,
	      fontSize: FONT_SIZE,
	      height: 36,
	      padding: 7,
	      borderRadius: 4,
	      borderColor: BORDER_COLOR,
	      borderWidth: 1,
	      marginBottom: 5
	    },
	    // the style applied when a validation error occours
	    error: {
	      color: INPUT_COLOR,
	      fontSize: FONT_SIZE,
	      height: 36,
	      padding: 7,
	      borderRadius: 4,
	      borderColor: ERROR_COLOR,
	      borderWidth: 1,
	      marginBottom: 5
	    },
	    // the style applied when the textbox is not editable
	    notEditable: {
	      fontSize: FONT_SIZE,
	      height: 36,
	      padding: 7,
	      borderRadius: 4,
	      borderColor: BORDER_COLOR,
	      borderWidth: 1,
	      marginBottom: 5,
	      color: DISABLED_COLOR,
	      backgroundColor: DISABLED_BACKGROUND_COLOR
	    }
	  },
	  checkbox: {
	    normal: {
	      marginBottom: 4
	    },
	    // the style applied when a validation error occours
	    error: {
	      marginBottom: 4
	    }
	  },
	  select: {
	    normal: {
	      marginBottom: 4
	    },
	    // the style applied when a validation error occours
	    error: {
	      marginBottom: 4
	    }
	  },
	  pickerTouchable: {
	    normal: {
	      height: 44,
	      flexDirection: 'row',
	      alignItems: 'center'
	    },
	    error: {
	      height: 44,
	      flexDirection: 'row',
	      alignItems: 'center'
	    }
	  },
	  pickerValue: {
	    normal: {
	      fontSize: FONT_SIZE,
	      paddingLeft: 7
	    },
	    error: {
	      fontSize: FONT_SIZE,
	      paddingLeft: 7
	    }
	  },
	  datepicker: {
	    normal: {
	      marginBottom: 4
	    },
	    // the style applied when a validation error occours
	    error: {
	      marginBottom: 4
	    }
	  },
	  dateTouchable: {
	    normal: {},
	    error: {}
	  },
	  dateValue: {
	    normal: {
	      color: INPUT_COLOR,
	      fontSize: FONT_SIZE,
	      padding: 7,
	      marginBottom: 5
	    },
	    error: {
	      color: ERROR_COLOR,
	      fontSize: FONT_SIZE,
	      padding: 7,
	      marginBottom: 5
	    }
	  },
	  buttonText: {
	    fontSize: 18,
	    color: 'white',
	    alignSelf: 'center'
	  },
	  button: {
	    height: 36,
	    backgroundColor: '#48BBEC',
	    borderColor: '#48BBEC',
	    borderWidth: 1,
	    borderRadius: 8,
	    marginBottom: 10,
	    alignSelf: 'stretch',
	    justifyContent: 'center'
	  }
	});
	
	module.exports = stylesheet;

/***/ },
/* 1125 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Date Format 1.2.3
	 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
	 * MIT license
	 *
	 * Includes enhancements by Scott Trenda <scott.trenda.net>
	 * and Kris Kowal <cixar.com/~kris.kowal/>
	 *
	 * Accepts a date, a mask, or a date and a mask.
	 * Returns a formatted version of the given date.
	 * The date defaults to the current date/time.
	 * The mask defaults to dateFormat.masks.default.
	 */
	
	(function(global) {
	  'use strict';
	
	  var dateFormat = (function() {
	      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|'[^']*'|'[^']*'/g;
	      var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
	      var timezoneClip = /[^-+\dA-Z]/g;
	  
	      // Regexes and supporting functions are cached through closure
	      return function (date, mask, utc, gmt) {
	  
	        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
	        if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
	          mask = date;
	          date = undefined;
	        }
	  
	        date = date || new Date;
	  
	        if(!(date instanceof Date)) {
	          date = new Date(date);
	        }
	  
	        if (isNaN(date)) {
	          throw TypeError('Invalid date');
	        }
	  
	        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);
	  
	        // Allow setting the utc/gmt argument via the mask
	        var maskSlice = mask.slice(0, 4);
	        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
	          mask = mask.slice(4);
	          utc = true;
	          if (maskSlice === 'GMT:') {
	            gmt = true;
	          }
	        }
	  
	        var _ = utc ? 'getUTC' : 'get';
	        var d = date[_ + 'Date']();
	        var D = date[_ + 'Day']();
	        var m = date[_ + 'Month']();
	        var y = date[_ + 'FullYear']();
	        var H = date[_ + 'Hours']();
	        var M = date[_ + 'Minutes']();
	        var s = date[_ + 'Seconds']();
	        var L = date[_ + 'Milliseconds']();
	        var o = utc ? 0 : date.getTimezoneOffset();
	        var W = getWeek(date);
	        var N = getDayOfWeek(date);
	        var flags = {
	          d:    d,
	          dd:   pad(d),
	          ddd:  dateFormat.i18n.dayNames[D],
	          dddd: dateFormat.i18n.dayNames[D + 7],
	          m:    m + 1,
	          mm:   pad(m + 1),
	          mmm:  dateFormat.i18n.monthNames[m],
	          mmmm: dateFormat.i18n.monthNames[m + 12],
	          yy:   String(y).slice(2),
	          yyyy: y,
	          h:    H % 12 || 12,
	          hh:   pad(H % 12 || 12),
	          H:    H,
	          HH:   pad(H),
	          M:    M,
	          MM:   pad(M),
	          s:    s,
	          ss:   pad(s),
	          l:    pad(L, 3),
	          L:    pad(Math.round(L / 10)),
	          t:    H < 12 ? 'a'  : 'p',
	          tt:   H < 12 ? 'am' : 'pm',
	          T:    H < 12 ? 'A'  : 'P',
	          TT:   H < 12 ? 'AM' : 'PM',
	          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
	          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
	          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
	          W:    W,
	          N:    N
	        };
	  
	        return mask.replace(token, function (match) {
	          if (match in flags) {
	            return flags[match];
	          }
	          return match.slice(1, match.length - 1);
	        });
	      };
	    })();
	
	  dateFormat.masks = {
	    'default':               'ddd mmm dd yyyy HH:MM:ss',
	    'shortDate':             'm/d/yy',
	    'mediumDate':            'mmm d, yyyy',
	    'longDate':              'mmmm d, yyyy',
	    'fullDate':              'dddd, mmmm d, yyyy',
	    'shortTime':             'h:MM TT',
	    'mediumTime':            'h:MM:ss TT',
	    'longTime':              'h:MM:ss TT Z',
	    'isoDate':               'yyyy-mm-dd',
	    'isoTime':               'HH:MM:ss',
	    'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
	    'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
	    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
	  };
	
	  // Internationalization strings
	  dateFormat.i18n = {
	    dayNames: [
	      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
	      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
	    ],
	    monthNames: [
	      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
	      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
	    ]
	  };
	
	function pad(val, len) {
	  val = String(val);
	  len = len || 2;
	  while (val.length < len) {
	    val = '0' + val;
	  }
	  return val;
	}
	
	/**
	 * Get the ISO 8601 week number
	 * Based on comments from
	 * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
	 *
	 * @param  {Object} `date`
	 * @return {Number}
	 */
	function getWeek(date) {
	  // Remove time components of date
	  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());
	
	  // Change date to Thursday same week
	  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);
	
	  // Take January 4th as it is always in week 1 (see ISO 8601)
	  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);
	
	  // Change date to Thursday same week
	  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);
	
	  // Check if daylight-saving-time-switch occured and correct for it
	  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
	  targetThursday.setHours(targetThursday.getHours() - ds);
	
	  // Number of weeks between target Thursday and first Thursday
	  var weekDiff = (targetThursday - firstThursday) / (86400000*7);
	  return 1 + Math.floor(weekDiff);
	}
	
	/**
	 * Get ISO-8601 numeric representation of the day of the week
	 * 1 (for Monday) through 7 (for Sunday)
	 * 
	 * @param  {Object} `date`
	 * @return {Number}
	 */
	function getDayOfWeek(date) {
	  var dow = date.getDay();
	  if(dow === 0) {
	    dow = 7;
	  }
	  return dow;
	}
	
	/**
	 * kind-of shortcut
	 * @param  {*} val
	 * @return {String}
	 */
	function kindOf(val) {
	  if (val === null) {
	    return 'null';
	  }
	
	  if (val === undefined) {
	    return 'undefined';
	  }
	
	  if (typeof val !== 'object') {
	    return typeof val;
	  }
	
	  if (Array.isArray(val)) {
	    return 'array';
	  }
	
	  return {}.toString.call(val)
	    .slice(8, -1).toLowerCase();
	};
	
	
	
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return dateFormat;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = dateFormat;
	  } else {
	    global.dateFormat = dateFormat;
	  }
	})(this);


/***/ },
/* 1126 */
/***/ function(module, exports, __webpack_require__) {

	//      Copyright (c) 2012 Mathieu Turcotte
	//      Licensed under the MIT license.
	
	var Backoff = __webpack_require__(1127);
	var ExponentialBackoffStrategy = __webpack_require__(1134);
	var FibonacciBackoffStrategy = __webpack_require__(1136);
	var FunctionCall = __webpack_require__(1137);
	
	module.exports.Backoff = Backoff;
	module.exports.FunctionCall = FunctionCall;
	module.exports.FibonacciStrategy = FibonacciBackoffStrategy;
	module.exports.ExponentialStrategy = ExponentialBackoffStrategy;
	
	// Constructs a Fibonacci backoff.
	module.exports.fibonacci = function(options) {
	    return new Backoff(new FibonacciBackoffStrategy(options));
	};
	
	// Constructs an exponential backoff.
	module.exports.exponential = function(options) {
	    return new Backoff(new ExponentialBackoffStrategy(options));
	};
	
	// Constructs a FunctionCall for the given function and arguments.
	module.exports.call = function(fn, vargs, callback) {
	    var args = Array.prototype.slice.call(arguments);
	    fn = args[0];
	    vargs = args.slice(1, args.length - 1);
	    callback = args[args.length - 1];
	    return new FunctionCall(fn, vargs, callback);
	};


/***/ },
/* 1127 */
/***/ function(module, exports, __webpack_require__) {

	//      Copyright (c) 2012 Mathieu Turcotte
	//      Licensed under the MIT license.
	
	var events = __webpack_require__(786);
	var precond = __webpack_require__(1128);
	var util = __webpack_require__(1130);
	
	// A class to hold the state of a backoff operation. Accepts a backoff strategy
	// to generate the backoff delays.
	function Backoff(backoffStrategy) {
	    events.EventEmitter.call(this);
	
	    this.backoffStrategy_ = backoffStrategy;
	    this.maxNumberOfRetry_ = -1;
	    this.backoffNumber_ = 0;
	    this.backoffDelay_ = 0;
	    this.timeoutID_ = -1;
	
	    this.handlers = {
	        backoff: this.onBackoff_.bind(this)
	    };
	}
	util.inherits(Backoff, events.EventEmitter);
	
	// Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'
	// event will be emitted when the limit is reached.
	Backoff.prototype.failAfter = function(maxNumberOfRetry) {
	    precond.checkArgument(maxNumberOfRetry > 0,
	        'Expected a maximum number of retry greater than 0 but got %s.',
	        maxNumberOfRetry);
	
	    this.maxNumberOfRetry_ = maxNumberOfRetry;
	};
	
	// Starts a backoff operation. Accepts an optional parameter to let the
	// listeners know why the backoff operation was started.
	Backoff.prototype.backoff = function(err) {
	    precond.checkState(this.timeoutID_ === -1, 'Backoff in progress.');
	
	    if (this.backoffNumber_ === this.maxNumberOfRetry_) {
	        this.emit('fail', err);
	        this.reset();
	    } else {
	        this.backoffDelay_ = this.backoffStrategy_.next();
	        this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);
	        this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);
	    }
	};
	
	// Handles the backoff timeout completion.
	Backoff.prototype.onBackoff_ = function() {
	    this.timeoutID_ = -1;
	    this.emit('ready', this.backoffNumber_, this.backoffDelay_);
	    this.backoffNumber_++;
	};
	
	// Stops any backoff operation and resets the backoff delay to its inital value.
	Backoff.prototype.reset = function() {
	    this.backoffNumber_ = 0;
	    this.backoffStrategy_.reset();
	    clearTimeout(this.timeoutID_);
	    this.timeoutID_ = -1;
	};
	
	module.exports = Backoff;


/***/ },
/* 1128 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2012 Mathieu Turcotte
	 * Licensed under the MIT license.
	 */
	
	module.exports = __webpack_require__(1129);

/***/ },
/* 1129 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2012 Mathieu Turcotte
	 * Licensed under the MIT license.
	 */
	
	var util = __webpack_require__(1130);
	
	var errors = module.exports = __webpack_require__(1133);
	
	function failCheck(ExceptionConstructor, callee, messageFormat, formatArgs) {
	    messageFormat = messageFormat || '';
	    var message = util.format.apply(this, [messageFormat].concat(formatArgs));
	    var error = new ExceptionConstructor(message);
	    Error.captureStackTrace(error, callee);
	    throw error;
	}
	
	function failArgumentCheck(callee, message, formatArgs) {
	    failCheck(errors.IllegalArgumentError, callee, message, formatArgs);
	}
	
	function failStateCheck(callee, message, formatArgs) {
	    failCheck(errors.IllegalStateError, callee, message, formatArgs);
	}
	
	module.exports.checkArgument = function(value, message) {
	    if (!value) {
	        failArgumentCheck(arguments.callee, message,
	            Array.prototype.slice.call(arguments, 2));
	    }
	};
	
	module.exports.checkState = function(value, message) {
	    if (!value) {
	        failStateCheck(arguments.callee, message,
	            Array.prototype.slice.call(arguments, 2));
	    }
	};
	
	module.exports.checkIsDef = function(value, message) {
	    if (value !== undefined) {
	        return value;
	    }
	
	    failArgumentCheck(arguments.callee, message ||
	        'Expected value to be defined but was undefined.',
	        Array.prototype.slice.call(arguments, 2));
	};
	
	module.exports.checkIsDefAndNotNull = function(value, message) {
	    // Note that undefined == null.
	    if (value != null) {
	        return value;
	    }
	
	    failArgumentCheck(arguments.callee, message ||
	        'Expected value to be defined and not null but got "' +
	        typeOf(value) + '".', Array.prototype.slice.call(arguments, 2));
	};
	
	// Fixed version of the typeOf operator which returns 'null' for null values
	// and 'array' for arrays.
	function typeOf(value) {
	    var s = typeof value;
	    if (s == 'object') {
	        if (!value) {
	            return 'null';
	        } else if (value instanceof Array) {
	            return 'array';
	        }
	    }
	    return s;
	}
	
	function typeCheck(expect) {
	    return function(value, message) {
	        var type = typeOf(value);
	
	        if (type == expect) {
	            return value;
	        }
	
	        failArgumentCheck(arguments.callee, message ||
	            'Expected "' + expect + '" but got "' + type + '".',
	            Array.prototype.slice.call(arguments, 2));
	    };
	}
	
	module.exports.checkIsString = typeCheck('string');
	module.exports.checkIsArray = typeCheck('array');
	module.exports.checkIsNumber = typeCheck('number');
	module.exports.checkIsBoolean = typeCheck('boolean');
	module.exports.checkIsFunction = typeCheck('function');
	module.exports.checkIsObject = typeCheck('object');


/***/ },
/* 1130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(1131);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(1132);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(294)))

/***/ },
/* 1131 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 1132 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 1133 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2012 Mathieu Turcotte
	 * Licensed under the MIT license.
	 */
	
	var util = __webpack_require__(1130);
	
	function IllegalArgumentError(message) {
	    Error.call(this, message);
	    this.message = message;
	}
	util.inherits(IllegalArgumentError, Error);
	
	IllegalArgumentError.prototype.name = 'IllegalArgumentError';
	
	function IllegalStateError(message) {
	    Error.call(this, message);
	    this.message = message;
	}
	util.inherits(IllegalStateError, Error);
	
	IllegalStateError.prototype.name = 'IllegalStateError';
	
	module.exports.IllegalStateError = IllegalStateError;
	module.exports.IllegalArgumentError = IllegalArgumentError;

/***/ },
/* 1134 */
/***/ function(module, exports, __webpack_require__) {

	//      Copyright (c) 2012 Mathieu Turcotte
	//      Licensed under the MIT license.
	
	var util = __webpack_require__(1130);
	var precond = __webpack_require__(1128);
	
	var BackoffStrategy = __webpack_require__(1135);
	
	// Exponential backoff strategy.
	function ExponentialBackoffStrategy(options) {
	    BackoffStrategy.call(this, options);
	    this.backoffDelay_ = 0;
	    this.nextBackoffDelay_ = this.getInitialDelay();
	    this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;
	
	    if (options && options.factor !== undefined) {
	        precond.checkArgument(options.factor > 1,
	            'Exponential factor should be greater than 1 but got %s.',
	            options.factor);
	        this.factor_ = options.factor;
	    }
	}
	util.inherits(ExponentialBackoffStrategy, BackoffStrategy);
	
	// Default multiplication factor used to compute the next backoff delay from
	// the current one. The value can be overridden by passing a custom factor as
	// part of the options.
	ExponentialBackoffStrategy.DEFAULT_FACTOR = 2;
	
	ExponentialBackoffStrategy.prototype.next_ = function() {
	    this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());
	    this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;
	    return this.backoffDelay_;
	};
	
	ExponentialBackoffStrategy.prototype.reset_ = function() {
	    this.backoffDelay_ = 0;
	    this.nextBackoffDelay_ = this.getInitialDelay();
	};
	
	module.exports = ExponentialBackoffStrategy;


/***/ },
/* 1135 */
/***/ function(module, exports, __webpack_require__) {

	//      Copyright (c) 2012 Mathieu Turcotte
	//      Licensed under the MIT license.
	
	var events = __webpack_require__(786);
	var util = __webpack_require__(1130);
	
	function isDef(value) {
	    return value !== undefined && value !== null;
	}
	
	// Abstract class defining the skeleton for the backoff strategies. Accepts an
	// object holding the options for the backoff strategy:
	//
	//  * `randomisationFactor`: The randomisation factor which must be between 0
	//     and 1 where 1 equates to a randomization factor of 100% and 0 to no
	//     randomization.
	//  * `initialDelay`: The backoff initial delay in milliseconds.
	//  * `maxDelay`: The backoff maximal delay in milliseconds.
	function BackoffStrategy(options) {
	    options = options || {};
	
	    if (isDef(options.initialDelay) && options.initialDelay < 1) {
	        throw new Error('The initial timeout must be greater than 0.');
	    } else if (isDef(options.maxDelay) && options.maxDelay < 1) {
	        throw new Error('The maximal timeout must be greater than 0.');
	    }
	
	    this.initialDelay_ = options.initialDelay || 100;
	    this.maxDelay_ = options.maxDelay || 10000;
	
	    if (this.maxDelay_ <= this.initialDelay_) {
	        throw new Error('The maximal backoff delay must be ' +
	                        'greater than the initial backoff delay.');
	    }
	
	    if (isDef(options.randomisationFactor) &&
	        (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {
	        throw new Error('The randomisation factor must be between 0 and 1.');
	    }
	
	    this.randomisationFactor_ = options.randomisationFactor || 0;
	}
	
	// Gets the maximal backoff delay.
	BackoffStrategy.prototype.getMaxDelay = function() {
	    return this.maxDelay_;
	};
	
	// Gets the initial backoff delay.
	BackoffStrategy.prototype.getInitialDelay = function() {
	    return this.initialDelay_;
	};
	
	// Template method that computes and returns the next backoff delay in
	// milliseconds.
	BackoffStrategy.prototype.next = function() {
	    var backoffDelay = this.next_();
	    var randomisationMultiple = 1 + Math.random() * this.randomisationFactor_;
	    var randomizedDelay = Math.round(backoffDelay * randomisationMultiple);
	    return randomizedDelay;
	};
	
	// Computes and returns the next backoff delay. Intended to be overridden by
	// subclasses.
	BackoffStrategy.prototype.next_ = function() {
	    throw new Error('BackoffStrategy.next_() unimplemented.');
	};
	
	// Template method that resets the backoff delay to its initial value.
	BackoffStrategy.prototype.reset = function() {
	    this.reset_();
	};
	
	// Resets the backoff delay to its initial value. Intended to be overridden by
	// subclasses.
	BackoffStrategy.prototype.reset_ = function() {
	    throw new Error('BackoffStrategy.reset_() unimplemented.');
	};
	
	module.exports = BackoffStrategy;


/***/ },
/* 1136 */
/***/ function(module, exports, __webpack_require__) {

	//      Copyright (c) 2012 Mathieu Turcotte
	//      Licensed under the MIT license.
	
	var util = __webpack_require__(1130);
	
	var BackoffStrategy = __webpack_require__(1135);
	
	// Fibonacci backoff strategy.
	function FibonacciBackoffStrategy(options) {
	    BackoffStrategy.call(this, options);
	    this.backoffDelay_ = 0;
	    this.nextBackoffDelay_ = this.getInitialDelay();
	}
	util.inherits(FibonacciBackoffStrategy, BackoffStrategy);
	
	FibonacciBackoffStrategy.prototype.next_ = function() {
	    var backoffDelay = Math.min(this.nextBackoffDelay_, this.getMaxDelay());
	    this.nextBackoffDelay_ += this.backoffDelay_;
	    this.backoffDelay_ = backoffDelay;
	    return backoffDelay;
	};
	
	FibonacciBackoffStrategy.prototype.reset_ = function() {
	    this.nextBackoffDelay_ = this.getInitialDelay();
	    this.backoffDelay_ = 0;
	};
	
	module.exports = FibonacciBackoffStrategy;


/***/ },
/* 1137 */
/***/ function(module, exports, __webpack_require__) {

	//      Copyright (c) 2012 Mathieu Turcotte
	//      Licensed under the MIT license.
	
	var events = __webpack_require__(786);
	var precond = __webpack_require__(1128);
	var util = __webpack_require__(1130);
	
	var Backoff = __webpack_require__(1127);
	var FibonacciBackoffStrategy = __webpack_require__(1136);
	
	// Wraps a function to be called in a backoff loop.
	function FunctionCall(fn, args, callback) {
	    events.EventEmitter.call(this);
	
	    precond.checkIsFunction(fn, 'Expected fn to be a function.');
	    precond.checkIsArray(args, 'Expected args to be an array.');
	    precond.checkIsFunction(callback, 'Expected callback to be a function.');
	
	    this.function_ = fn;
	    this.arguments_ = args;
	    this.callback_ = callback;
	    this.lastResult_ = [];
	    this.numRetries_ = 0;
	
	    this.backoff_ = null;
	    this.strategy_ = null;
	    this.failAfter_ = -1;
	    this.retryPredicate_ = FunctionCall.DEFAULT_RETRY_PREDICATE_;
	
	    this.state_ = FunctionCall.State_.PENDING;
	}
	util.inherits(FunctionCall, events.EventEmitter);
	
	// States in which the call can be.
	FunctionCall.State_ = {
	    // Call isn't started yet.
	    PENDING: 0,
	    // Call is in progress.
	    RUNNING: 1,
	    // Call completed successfully which means that either the wrapped function
	    // returned successfully or the maximal number of backoffs was reached.
	    COMPLETED: 2,
	    // The call was aborted.
	    ABORTED: 3
	};
	
	// The default retry predicate which considers any error as retriable.
	FunctionCall.DEFAULT_RETRY_PREDICATE_ = function(err) {
	  return true;
	};
	
	// Checks whether the call is pending.
	FunctionCall.prototype.isPending = function() {
	    return this.state_ == FunctionCall.State_.PENDING;
	};
	
	// Checks whether the call is in progress.
	FunctionCall.prototype.isRunning = function() {
	    return this.state_ == FunctionCall.State_.RUNNING;
	};
	
	// Checks whether the call is completed.
	FunctionCall.prototype.isCompleted = function() {
	    return this.state_ == FunctionCall.State_.COMPLETED;
	};
	
	// Checks whether the call is aborted.
	FunctionCall.prototype.isAborted = function() {
	    return this.state_ == FunctionCall.State_.ABORTED;
	};
	
	// Sets the backoff strategy to use. Can only be called before the call is
	// started otherwise an exception will be thrown.
	FunctionCall.prototype.setStrategy = function(strategy) {
	    precond.checkState(this.isPending(), 'FunctionCall in progress.');
	    this.strategy_ = strategy;
	    return this; // Return this for chaining.
	};
	
	// Sets the predicate which will be used to determine whether the errors
	// returned from the wrapped function should be retried or not, e.g. a
	// network error would be retriable while a type error would stop the
	// function call.
	FunctionCall.prototype.retryIf = function(retryPredicate) {
	    precond.checkState(this.isPending(), 'FunctionCall in progress.');
	    this.retryPredicate_ = retryPredicate;
	    return this;
	};
	
	// Returns all intermediary results returned by the wrapped function since
	// the initial call.
	FunctionCall.prototype.getLastResult = function() {
	    return this.lastResult_.concat();
	};
	
	// Returns the number of times the wrapped function call was retried.
	FunctionCall.prototype.getNumRetries = function() {
	    return this.numRetries_;
	};
	
	// Sets the backoff limit.
	FunctionCall.prototype.failAfter = function(maxNumberOfRetry) {
	    precond.checkState(this.isPending(), 'FunctionCall in progress.');
	    this.failAfter_ = maxNumberOfRetry;
	    return this; // Return this for chaining.
	};
	
	// Aborts the call.
	FunctionCall.prototype.abort = function() {
	    if (this.isCompleted() || this.isAborted()) {
	      return;
	    }
	
	    if (this.isRunning()) {
	        this.backoff_.reset();
	    }
	
	    this.state_ = FunctionCall.State_.ABORTED;
	    this.lastResult_ = [new Error('Backoff aborted.')];
	    this.emit('abort');
	    this.doCallback_();
	};
	
	// Initiates the call to the wrapped function. Accepts an optional factory
	// function used to create the backoff instance; used when testing.
	FunctionCall.prototype.start = function(backoffFactory) {
	    precond.checkState(!this.isAborted(), 'FunctionCall is aborted.');
	    precond.checkState(this.isPending(), 'FunctionCall already started.');
	
	    var strategy = this.strategy_ || new FibonacciBackoffStrategy();
	
	    this.backoff_ = backoffFactory ?
	        backoffFactory(strategy) :
	        new Backoff(strategy);
	
	    this.backoff_.on('ready', this.doCall_.bind(this, true /* isRetry */));
	    this.backoff_.on('fail', this.doCallback_.bind(this));
	    this.backoff_.on('backoff', this.handleBackoff_.bind(this));
	
	    if (this.failAfter_ > 0) {
	        this.backoff_.failAfter(this.failAfter_);
	    }
	
	    this.state_ = FunctionCall.State_.RUNNING;
	    this.doCall_(false /* isRetry */);
	};
	
	// Calls the wrapped function.
	FunctionCall.prototype.doCall_ = function(isRetry) {
	    if (isRetry) {
	        this.numRetries_++;
	    }
	    var eventArgs = ['call'].concat(this.arguments_);
	    events.EventEmitter.prototype.emit.apply(this, eventArgs);
	    var callback = this.handleFunctionCallback_.bind(this);
	    this.function_.apply(null, this.arguments_.concat(callback));
	};
	
	// Calls the wrapped function's callback with the last result returned by the
	// wrapped function.
	FunctionCall.prototype.doCallback_ = function() {
	    this.callback_.apply(null, this.lastResult_);
	};
	
	// Handles wrapped function's completion. This method acts as a replacement
	// for the original callback function.
	FunctionCall.prototype.handleFunctionCallback_ = function() {
	    if (this.isAborted()) {
	        return;
	    }
	
	    var args = Array.prototype.slice.call(arguments);
	    this.lastResult_ = args; // Save last callback arguments.
	    events.EventEmitter.prototype.emit.apply(this, ['callback'].concat(args));
	
	    var err = args[0];
	    if (err && this.retryPredicate_(err)) {
	        this.backoff_.backoff(err);
	    } else {
	        this.state_ = FunctionCall.State_.COMPLETED;
	        this.doCallback_();
	    }
	};
	
	// Handles the backoff event by reemitting it.
	FunctionCall.prototype.handleBackoff_ = function(number, delay, err) {
	    this.emit('backoff', number, delay, err);
	};
	
	module.exports = FunctionCall;


/***/ },
/* 1138 */,
/* 1139 */
/***/ function(module, exports, __webpack_require__) {

	var all = module.exports.all = [
	  {
	    errno: -2,
	    code: 'ENOENT',
	    description: 'no such file or directory'
	  },
	  {
	    errno: -1,
	    code: 'UNKNOWN',
	    description: 'unknown error'
	  },
	  {
	    errno: 0,
	    code: 'OK',
	    description: 'success'
	  },
	  {
	    errno: 1,
	    code: 'EOF',
	    description: 'end of file'
	  },
	  {
	    errno: 2,
	    code: 'EADDRINFO',
	    description: 'getaddrinfo error'
	  },
	  {
	    errno: 3,
	    code: 'EACCES',
	    description: 'permission denied'
	  },
	  {
	    errno: 4,
	    code: 'EAGAIN',
	    description: 'resource temporarily unavailable'
	  },
	  {
	    errno: 5,
	    code: 'EADDRINUSE',
	    description: 'address already in use'
	  },
	  {
	    errno: 6,
	    code: 'EADDRNOTAVAIL',
	    description: 'address not available'
	  },
	  {
	    errno: 7,
	    code: 'EAFNOSUPPORT',
	    description: 'address family not supported'
	  },
	  {
	    errno: 8,
	    code: 'EALREADY',
	    description: 'connection already in progress'
	  },
	  {
	    errno: 9,
	    code: 'EBADF',
	    description: 'bad file descriptor'
	  },
	  {
	    errno: 10,
	    code: 'EBUSY',
	    description: 'resource busy or locked'
	  },
	  {
	    errno: 11,
	    code: 'ECONNABORTED',
	    description: 'software caused connection abort'
	  },
	  {
	    errno: 12,
	    code: 'ECONNREFUSED',
	    description: 'connection refused'
	  },
	  {
	    errno: 13,
	    code: 'ECONNRESET',
	    description: 'connection reset by peer'
	  },
	  {
	    errno: 14,
	    code: 'EDESTADDRREQ',
	    description: 'destination address required'
	  },
	  {
	    errno: 15,
	    code: 'EFAULT',
	    description: 'bad address in system call argument'
	  },
	  {
	    errno: 16,
	    code: 'EHOSTUNREACH',
	    description: 'host is unreachable'
	  },
	  {
	    errno: 17,
	    code: 'EINTR',
	    description: 'interrupted system call'
	  },
	  {
	    errno: 18,
	    code: 'EINVAL',
	    description: 'invalid argument'
	  },
	  {
	    errno: 19,
	    code: 'EISCONN',
	    description: 'socket is already connected'
	  },
	  {
	    errno: 20,
	    code: 'EMFILE',
	    description: 'too many open files'
	  },
	  {
	    errno: 21,
	    code: 'EMSGSIZE',
	    description: 'message too long'
	  },
	  {
	    errno: 22,
	    code: 'ENETDOWN',
	    description: 'network is down'
	  },
	  {
	    errno: 23,
	    code: 'ENETUNREACH',
	    description: 'network is unreachable'
	  },
	  {
	    errno: 24,
	    code: 'ENFILE',
	    description: 'file table overflow'
	  },
	  {
	    errno: 25,
	    code: 'ENOBUFS',
	    description: 'no buffer space available'
	  },
	  {
	    errno: 26,
	    code: 'ENOMEM',
	    description: 'not enough memory'
	  },
	  {
	    errno: 27,
	    code: 'ENOTDIR',
	    description: 'not a directory'
	  },
	  {
	    errno: 28,
	    code: 'EISDIR',
	    description: 'illegal operation on a directory'
	  },
	  {
	    errno: 29,
	    code: 'ENONET',
	    description: 'machine is not on the network'
	  },
	  {
	    errno: 31,
	    code: 'ENOTCONN',
	    description: 'socket is not connected'
	  },
	  {
	    errno: 32,
	    code: 'ENOTSOCK',
	    description: 'socket operation on non-socket'
	  },
	  {
	    errno: 33,
	    code: 'ENOTSUP',
	    description: 'operation not supported on socket'
	  },
	  {
	    errno: 34,
	    code: 'ENOENT',
	    description: 'no such file or directory'
	  },
	  {
	    errno: 35,
	    code: 'ENOSYS',
	    description: 'function not implemented'
	  },
	  {
	    errno: 36,
	    code: 'EPIPE',
	    description: 'broken pipe'
	  },
	  {
	    errno: 37,
	    code: 'EPROTO',
	    description: 'protocol error'
	  },
	  {
	    errno: 38,
	    code: 'EPROTONOSUPPORT',
	    description: 'protocol not supported'
	  },
	  {
	    errno: 39,
	    code: 'EPROTOTYPE',
	    description: 'protocol wrong type for socket'
	  },
	  {
	    errno: 40,
	    code: 'ETIMEDOUT',
	    description: 'connection timed out'
	  },
	  {
	    errno: 41,
	    code: 'ECHARSET',
	    description: 'invalid Unicode character'
	  },
	  {
	    errno: 42,
	    code: 'EAIFAMNOSUPPORT',
	    description: 'address family for hostname not supported'
	  },
	  {
	    errno: 44,
	    code: 'EAISERVICE',
	    description: 'servname not supported for ai_socktype'
	  },
	  {
	    errno: 45,
	    code: 'EAISOCKTYPE',
	    description: 'ai_socktype not supported'
	  },
	  {
	    errno: 46,
	    code: 'ESHUTDOWN',
	    description: 'cannot send after transport endpoint shutdown'
	  },
	  {
	    errno: 47,
	    code: 'EEXIST',
	    description: 'file already exists'
	  },
	  {
	    errno: 48,
	    code: 'ESRCH',
	    description: 'no such process'
	  },
	  {
	    errno: 49,
	    code: 'ENAMETOOLONG',
	    description: 'name too long'
	  },
	  {
	    errno: 50,
	    code: 'EPERM',
	    description: 'operation not permitted'
	  },
	  {
	    errno: 51,
	    code: 'ELOOP',
	    description: 'too many symbolic links encountered'
	  },
	  {
	    errno: 52,
	    code: 'EXDEV',
	    description: 'cross-device link not permitted'
	  },
	  {
	    errno: 53,
	    code: 'ENOTEMPTY',
	    description: 'directory not empty'
	  },
	  {
	    errno: 54,
	    code: 'ENOSPC',
	    description: 'no space left on device'
	  },
	  {
	    errno: 55,
	    code: 'EIO',
	    description: 'i/o error'
	  },
	  {
	    errno: 56,
	    code: 'EROFS',
	    description: 'read-only file system'
	  },
	  {
	    errno: 57,
	    code: 'ENODEV',
	    description: 'no such device'
	  },
	  {
	    errno: 58,
	    code: 'ESPIPE',
	    description: 'invalid seek'
	  },
	  {
	    errno: 59,
	    code: 'ECANCELED',
	    description: 'operation canceled'
	  }
	]
	
	module.exports.errno = {}
	module.exports.code = {}
	
	all.forEach(function (error) {
	  module.exports.errno[error.errno] = error
	  module.exports.code[error.code] = error
	})
	
	module.exports.custom = __webpack_require__(1140)(module.exports)
	module.exports.create = module.exports.custom.createError


/***/ },
/* 1140 */
/***/ function(module, exports, __webpack_require__) {

	var prr = __webpack_require__(1141)
	
	function init (type, message, cause) {
	  prr(this, {
	      type    : type
	    , name    : type
	      // can be passed just a 'cause'
	    , cause   : typeof message != 'string' ? message : cause
	    , message : !!message && typeof message != 'string' ? message.message : message
	
	  }, 'ewr')
	}
	
	// generic prototype, not intended to be actually used - helpful for `instanceof`
	function CustomError (message, cause) {
	  Error.call(this)
	  if (Error.captureStackTrace)
	    Error.captureStackTrace(this, arguments.callee)
	  init.call(this, 'CustomError', message, cause)
	}
	
	CustomError.prototype = new Error()
	
	function createError (errno, type, proto) {
	  var err = function (message, cause) {
	    init.call(this, type, message, cause)
	    //TODO: the specificity here is stupid, errno should be available everywhere
	    if (type == 'FilesystemError') {
	      this.code    = this.cause.code
	      this.path    = this.cause.path
	      this.errno   = this.cause.errno
	      this.message =
	        (errno.errno[this.cause.errno]
	          ? errno.errno[this.cause.errno].description
	          : this.cause.message)
	        + (this.cause.path ? ' [' + this.cause.path + ']' : '')
	    }
	    Error.call(this)
	    if (Error.captureStackTrace)
	      Error.captureStackTrace(this, arguments.callee)
	  }
	  err.prototype = !!proto ? new proto() : new CustomError()
	  return err
	}
	
	module.exports = function (errno) {
	  var ce = function (type, proto) {
	    return createError(errno, type, proto)
	  }
	  return {
	      CustomError     : CustomError
	    , FilesystemError : ce('FilesystemError')
	    , createError     : ce
	  }
	}


/***/ },
/* 1141 */
/***/ function(module, exports) {

	/*!
	  * prr
	  * (c) 2013 Rod Vagg <rod@vagg.org>
	  * https://github.com/rvagg/prr
	  * License: MIT
	  */
	
	(function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports)
	    module.exports = definition()
	  else
	    context[name] = definition()
	})('prr', this, function() {
	
	  var setProperty = typeof Object.defineProperty == 'function'
	      ? function (obj, key, options) {
	          Object.defineProperty(obj, key, options)
	          return obj
	        }
	      : function (obj, key, options) { // < es5
	          obj[key] = options.value
	          return obj
	        }
	
	    , makeOptions = function (value, options) {
	        var oo = typeof options == 'object'
	          , os = !oo && typeof options == 'string'
	          , op = function (p) {
	              return oo
	                ? !!options[p]
	                : os
	                  ? options.indexOf(p[0]) > -1
	                  : false
	            }
	
	        return {
	            enumerable   : op('enumerable')
	          , configurable : op('configurable')
	          , writable     : op('writable')
	          , value        : value
	        }
	      }
	
	    , prr = function (obj, key, value, options) {
	        var k
	
	        options = makeOptions(value, options)
	
	        if (typeof key == 'object') {
	          for (k in key) {
	            if (Object.hasOwnProperty.call(key, k)) {
	              options.value = key[k]
	              setProperty(obj, k, options)
	            }
	          }
	          return obj
	        }
	
	        return setProperty(obj, key, options)
	      }
	
	  return prr
	})

/***/ },
/* 1142 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = LRUCache
	
	// This will be a proper iterable 'Map' in engines that support it,
	// or a fakey-fake PseudoMap in older versions.
	var Map = __webpack_require__(1143)
	var util = __webpack_require__(1130)
	
	// A linked list to keep track of recently-used-ness
	var Yallist = __webpack_require__(1145)
	
	// use symbols if possible, otherwise just _props
	var symbols = {}
	var hasSymbol = typeof Symbol === 'function'
	var makeSymbol
	/* istanbul ignore if */
	if (hasSymbol) {
	  makeSymbol = function (key) {
	    return Symbol.for(key)
	  }
	} else {
	  makeSymbol = function (key) {
	    return '_' + key
	  }
	}
	
	function priv (obj, key, val) {
	  var sym
	  if (symbols[key]) {
	    sym = symbols[key]
	  } else {
	    sym = makeSymbol(key)
	    symbols[key] = sym
	  }
	  if (arguments.length === 2) {
	    return obj[sym]
	  } else {
	    obj[sym] = val
	    return val
	  }
	}
	
	function naiveLength () { return 1 }
	
	// lruList is a yallist where the head is the youngest
	// item, and the tail is the oldest.  the list contains the Hit
	// objects as the entries.
	// Each Hit object has a reference to its Yallist.Node.  This
	// never changes.
	//
	// cache is a Map (or PseudoMap) that matches the keys to
	// the Yallist.Node object.
	function LRUCache (options) {
	  if (!(this instanceof LRUCache)) {
	    return new LRUCache(options)
	  }
	
	  if (typeof options === 'number') {
	    options = { max: options }
	  }
	
	  if (!options) {
	    options = {}
	  }
	
	  var max = priv(this, 'max', options.max)
	  // Kind of weird to have a default max of Infinity, but oh well.
	  if (!max ||
	      !(typeof max === 'number') ||
	      max <= 0) {
	    priv(this, 'max', Infinity)
	  }
	
	  var lc = options.length || naiveLength
	  if (typeof lc !== 'function') {
	    lc = naiveLength
	  }
	  priv(this, 'lengthCalculator', lc)
	
	  priv(this, 'allowStale', options.stale || false)
	  priv(this, 'maxAge', options.maxAge || 0)
	  priv(this, 'dispose', options.dispose)
	  this.reset()
	}
	
	// resize the cache when the max changes.
	Object.defineProperty(LRUCache.prototype, 'max', {
	  set: function (mL) {
	    if (!mL || !(typeof mL === 'number') || mL <= 0) {
	      mL = Infinity
	    }
	    priv(this, 'max', mL)
	    trim(this)
	  },
	  get: function () {
	    return priv(this, 'max')
	  },
	  enumerable: true
	})
	
	Object.defineProperty(LRUCache.prototype, 'allowStale', {
	  set: function (allowStale) {
	    priv(this, 'allowStale', !!allowStale)
	  },
	  get: function () {
	    return priv(this, 'allowStale')
	  },
	  enumerable: true
	})
	
	Object.defineProperty(LRUCache.prototype, 'maxAge', {
	  set: function (mA) {
	    if (!mA || !(typeof mA === 'number') || mA < 0) {
	      mA = 0
	    }
	    priv(this, 'maxAge', mA)
	    trim(this)
	  },
	  get: function () {
	    return priv(this, 'maxAge')
	  },
	  enumerable: true
	})
	
	// resize the cache when the lengthCalculator changes.
	Object.defineProperty(LRUCache.prototype, 'lengthCalculator', {
	  set: function (lC) {
	    if (typeof lC !== 'function') {
	      lC = naiveLength
	    }
	    if (lC !== priv(this, 'lengthCalculator')) {
	      priv(this, 'lengthCalculator', lC)
	      priv(this, 'length', 0)
	      priv(this, 'lruList').forEach(function (hit) {
	        hit.length = priv(this, 'lengthCalculator').call(this, hit.value, hit.key)
	        priv(this, 'length', priv(this, 'length') + hit.length)
	      }, this)
	    }
	    trim(this)
	  },
	  get: function () { return priv(this, 'lengthCalculator') },
	  enumerable: true
	})
	
	Object.defineProperty(LRUCache.prototype, 'length', {
	  get: function () { return priv(this, 'length') },
	  enumerable: true
	})
	
	Object.defineProperty(LRUCache.prototype, 'itemCount', {
	  get: function () { return priv(this, 'lruList').length },
	  enumerable: true
	})
	
	LRUCache.prototype.rforEach = function (fn, thisp) {
	  thisp = thisp || this
	  for (var walker = priv(this, 'lruList').tail; walker !== null;) {
	    var prev = walker.prev
	    forEachStep(this, fn, walker, thisp)
	    walker = prev
	  }
	}
	
	function forEachStep (self, fn, node, thisp) {
	  var hit = node.value
	  if (isStale(self, hit)) {
	    del(self, node)
	    if (!priv(self, 'allowStale')) {
	      hit = undefined
	    }
	  }
	  if (hit) {
	    fn.call(thisp, hit.value, hit.key, self)
	  }
	}
	
	LRUCache.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this
	  for (var walker = priv(this, 'lruList').head; walker !== null;) {
	    var next = walker.next
	    forEachStep(this, fn, walker, thisp)
	    walker = next
	  }
	}
	
	LRUCache.prototype.keys = function () {
	  return priv(this, 'lruList').toArray().map(function (k) {
	    return k.key
	  }, this)
	}
	
	LRUCache.prototype.values = function () {
	  return priv(this, 'lruList').toArray().map(function (k) {
	    return k.value
	  }, this)
	}
	
	LRUCache.prototype.reset = function () {
	  if (priv(this, 'dispose') &&
	      priv(this, 'lruList') &&
	      priv(this, 'lruList').length) {
	    priv(this, 'lruList').forEach(function (hit) {
	      priv(this, 'dispose').call(this, hit.key, hit.value)
	    }, this)
	  }
	
	  priv(this, 'cache', new Map()) // hash of items by key
	  priv(this, 'lruList', new Yallist()) // list of items in order of use recency
	  priv(this, 'length', 0) // length of items in the list
	}
	
	LRUCache.prototype.dump = function () {
	  return priv(this, 'lruList').map(function (hit) {
	    if (!isStale(this, hit)) {
	      return {
	        k: hit.key,
	        v: hit.value,
	        e: hit.now + (hit.maxAge || 0)
	      }
	    }
	  }, this).toArray().filter(function (h) {
	    return h
	  })
	}
	
	LRUCache.prototype.dumpLru = function () {
	  return priv(this, 'lruList')
	}
	
	LRUCache.prototype.inspect = function (n, opts) {
	  var str = 'LRUCache {'
	  var extras = false
	
	  var as = priv(this, 'allowStale')
	  if (as) {
	    str += '\n  allowStale: true'
	    extras = true
	  }
	
	  var max = priv(this, 'max')
	  if (max && max !== Infinity) {
	    if (extras) {
	      str += ','
	    }
	    str += '\n  max: ' + util.inspect(max, opts)
	    extras = true
	  }
	
	  var maxAge = priv(this, 'maxAge')
	  if (maxAge) {
	    if (extras) {
	      str += ','
	    }
	    str += '\n  maxAge: ' + util.inspect(maxAge, opts)
	    extras = true
	  }
	
	  var lc = priv(this, 'lengthCalculator')
	  if (lc && lc !== naiveLength) {
	    if (extras) {
	      str += ','
	    }
	    str += '\n  length: ' + util.inspect(priv(this, 'length'), opts)
	    extras = true
	  }
	
	  var didFirst = false
	  priv(this, 'lruList').forEach(function (item) {
	    if (didFirst) {
	      str += ',\n  '
	    } else {
	      if (extras) {
	        str += ',\n'
	      }
	      didFirst = true
	      str += '\n  '
	    }
	    var key = util.inspect(item.key).split('\n').join('\n  ')
	    var val = { value: item.value }
	    if (item.maxAge !== maxAge) {
	      val.maxAge = item.maxAge
	    }
	    if (lc !== naiveLength) {
	      val.length = item.length
	    }
	    if (isStale(this, item)) {
	      val.stale = true
	    }
	
	    val = util.inspect(val, opts).split('\n').join('\n  ')
	    str += key + ' => ' + val
	  })
	
	  if (didFirst || extras) {
	    str += '\n'
	  }
	  str += '}'
	
	  return str
	}
	
	LRUCache.prototype.set = function (key, value, maxAge) {
	  maxAge = maxAge || priv(this, 'maxAge')
	
	  var now = maxAge ? Date.now() : 0
	  var len = priv(this, 'lengthCalculator').call(this, value, key)
	
	  if (priv(this, 'cache').has(key)) {
	    if (len > priv(this, 'max')) {
	      del(this, priv(this, 'cache').get(key))
	      return false
	    }
	
	    var node = priv(this, 'cache').get(key)
	    var item = node.value
	
	    // dispose of the old one before overwriting
	    if (priv(this, 'dispose')) {
	      priv(this, 'dispose').call(this, key, item.value)
	    }
	
	    item.now = now
	    item.maxAge = maxAge
	    item.value = value
	    priv(this, 'length', priv(this, 'length') + (len - item.length))
	    item.length = len
	    this.get(key)
	    trim(this)
	    return true
	  }
	
	  var hit = new Entry(key, value, len, now, maxAge)
	
	  // oversized objects fall out of cache automatically.
	  if (hit.length > priv(this, 'max')) {
	    if (priv(this, 'dispose')) {
	      priv(this, 'dispose').call(this, key, value)
	    }
	    return false
	  }
	
	  priv(this, 'length', priv(this, 'length') + hit.length)
	  priv(this, 'lruList').unshift(hit)
	  priv(this, 'cache').set(key, priv(this, 'lruList').head)
	  trim(this)
	  return true
	}
	
	LRUCache.prototype.has = function (key) {
	  if (!priv(this, 'cache').has(key)) return false
	  var hit = priv(this, 'cache').get(key).value
	  if (isStale(this, hit)) {
	    return false
	  }
	  return true
	}
	
	LRUCache.prototype.get = function (key) {
	  return get(this, key, true)
	}
	
	LRUCache.prototype.peek = function (key) {
	  return get(this, key, false)
	}
	
	LRUCache.prototype.pop = function () {
	  var node = priv(this, 'lruList').tail
	  if (!node) return null
	  del(this, node)
	  return node.value
	}
	
	LRUCache.prototype.del = function (key) {
	  del(this, priv(this, 'cache').get(key))
	}
	
	LRUCache.prototype.load = function (arr) {
	  // reset the cache
	  this.reset()
	
	  var now = Date.now()
	  // A previous serialized cache has the most recent items first
	  for (var l = arr.length - 1; l >= 0; l--) {
	    var hit = arr[l]
	    var expiresAt = hit.e || 0
	    if (expiresAt === 0) {
	      // the item was created without expiration in a non aged cache
	      this.set(hit.k, hit.v)
	    } else {
	      var maxAge = expiresAt - now
	      // dont add already expired items
	      if (maxAge > 0) {
	        this.set(hit.k, hit.v, maxAge)
	      }
	    }
	  }
	}
	
	LRUCache.prototype.prune = function () {
	  var self = this
	  priv(this, 'cache').forEach(function (value, key) {
	    get(self, key, false)
	  })
	}
	
	function get (self, key, doUse) {
	  var node = priv(self, 'cache').get(key)
	  if (node) {
	    var hit = node.value
	    if (isStale(self, hit)) {
	      del(self, node)
	      if (!priv(self, 'allowStale')) hit = undefined
	    } else {
	      if (doUse) {
	        priv(self, 'lruList').unshiftNode(node)
	      }
	    }
	    if (hit) hit = hit.value
	  }
	  return hit
	}
	
	function isStale (self, hit) {
	  if (!hit || (!hit.maxAge && !priv(self, 'maxAge'))) {
	    return false
	  }
	  var stale = false
	  var diff = Date.now() - hit.now
	  if (hit.maxAge) {
	    stale = diff > hit.maxAge
	  } else {
	    stale = priv(self, 'maxAge') && (diff > priv(self, 'maxAge'))
	  }
	  return stale
	}
	
	function trim (self) {
	  if (priv(self, 'length') > priv(self, 'max')) {
	    for (var walker = priv(self, 'lruList').tail;
	         priv(self, 'length') > priv(self, 'max') && walker !== null;) {
	      // We know that we're about to delete this one, and also
	      // what the next least recently used key will be, so just
	      // go ahead and set it now.
	      var prev = walker.prev
	      del(self, walker)
	      walker = prev
	    }
	  }
	}
	
	function del (self, node) {
	  if (node) {
	    var hit = node.value
	    if (priv(self, 'dispose')) {
	      priv(self, 'dispose').call(this, hit.key, hit.value)
	    }
	    priv(self, 'length', priv(self, 'length') - hit.length)
	    priv(self, 'cache').delete(hit.key)
	    priv(self, 'lruList').removeNode(node)
	  }
	}
	
	// classy, since V8 prefers predictable objects.
	function Entry (key, value, length, now, maxAge) {
	  this.key = key
	  this.value = value
	  this.length = length
	  this.now = now
	  this.maxAge = maxAge || 0
	}


/***/ },
/* 1143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {if (process.env.npm_package_name === 'pseudomap' &&
	    process.env.npm_lifecycle_script === 'test')
	  process.env.TEST_PSEUDOMAP = 'true'
	
	if (typeof Map === 'function' && !process.env.TEST_PSEUDOMAP) {
	  module.exports = Map
	} else {
	  module.exports = __webpack_require__(1144)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1144 */
/***/ function(module, exports) {

	var hasOwnProperty = Object.prototype.hasOwnProperty
	
	module.exports = PseudoMap
	
	function PseudoMap (set) {
	  if (!(this instanceof PseudoMap)) // whyyyyyyy
	    throw new TypeError("Constructor PseudoMap requires 'new'")
	
	  this.clear()
	
	  if (set) {
	    if ((set instanceof PseudoMap) ||
	        (typeof Map === 'function' && set instanceof Map))
	      set.forEach(function (value, key) {
	        this.set(key, value)
	      }, this)
	    else if (Array.isArray(set))
	      set.forEach(function (kv) {
	        this.set(kv[0], kv[1])
	      }, this)
	    else
	      throw new TypeError('invalid argument')
	  }
	}
	
	PseudoMap.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this
	  Object.keys(this._data).forEach(function (k) {
	    if (k !== 'size')
	      fn.call(thisp, this._data[k].value, this._data[k].key)
	  }, this)
	}
	
	PseudoMap.prototype.has = function (k) {
	  return !!find(this._data, k)
	}
	
	PseudoMap.prototype.get = function (k) {
	  var res = find(this._data, k)
	  return res && res.value
	}
	
	PseudoMap.prototype.set = function (k, v) {
	  set(this._data, k, v)
	}
	
	PseudoMap.prototype.delete = function (k) {
	  var res = find(this._data, k)
	  if (res) {
	    delete this._data[res._index]
	    this._data.size--
	  }
	}
	
	PseudoMap.prototype.clear = function () {
	  var data = Object.create(null)
	  data.size = 0
	
	  Object.defineProperty(this, '_data', {
	    value: data,
	    enumerable: false,
	    configurable: true,
	    writable: false
	  })
	}
	
	Object.defineProperty(PseudoMap.prototype, 'size', {
	  get: function () {
	    return this._data.size
	  },
	  set: function (n) {},
	  enumerable: true,
	  configurable: true
	})
	
	PseudoMap.prototype.values =
	PseudoMap.prototype.keys =
	PseudoMap.prototype.entries = function () {
	  throw new Error('iterators are not implemented in this version')
	}
	
	// Either identical, or both NaN
	function same (a, b) {
	  return a === b || a !== a && b !== b
	}
	
	function Entry (k, v, i) {
	  this.key = k
	  this.value = v
	  this._index = i
	}
	
	function find (data, k) {
	  for (var i = 0, s = '_' + k, key = s;
	       hasOwnProperty.call(data, key);
	       key = s + i++) {
	    if (same(data[key].key, k))
	      return data[key]
	  }
	}
	
	function set (data, k, v) {
	  for (var i = 0, s = '_' + k, key = s;
	       hasOwnProperty.call(data, key);
	       key = s + i++) {
	    if (same(data[key].key, k)) {
	      data[key].value = v
	      return
	    }
	  }
	  data.size++
	  data[key] = new Entry(k, v, key)
	}


/***/ },
/* 1145 */
/***/ function(module, exports) {

	module.exports = Yallist
	
	Yallist.Node = Node
	Yallist.create = Yallist
	
	function Yallist (list) {
	  var self = this
	  if (!(self instanceof Yallist)) {
	    self = new Yallist()
	  }
	
	  self.tail = null
	  self.head = null
	  self.length = 0
	
	  if (list && typeof list.forEach === 'function') {
	    list.forEach(function (item) {
	      self.push(item)
	    })
	  } else if (arguments.length > 0) {
	    for (var i = 0, l = arguments.length; i < l; i++) {
	      self.push(arguments[i])
	    }
	  }
	
	  return self
	}
	
	Yallist.prototype.removeNode = function (node) {
	  if (node.list !== this) {
	    throw new Error('removing node which does not belong to this list')
	  }
	
	  var next = node.next
	  var prev = node.prev
	
	  if (next) {
	    next.prev = prev
	  }
	
	  if (prev) {
	    prev.next = next
	  }
	
	  if (node === this.head) {
	    this.head = next
	  }
	  if (node === this.tail) {
	    this.tail = prev
	  }
	
	  node.list.length --
	  node.next = null
	  node.prev = null
	  node.list = null
	}
	
	Yallist.prototype.unshiftNode = function (node) {
	  if (node === this.head) {
	    return
	  }
	
	  if (node.list) {
	    node.list.removeNode(node)
	  }
	
	  var head = this.head
	  node.list = this
	  node.next = head
	  if (head) {
	    head.prev = node
	  }
	
	  this.head = node
	  if (!this.tail) {
	    this.tail = node
	  }
	  this.length ++
	}
	
	Yallist.prototype.pushNode = function (node) {
	  if (node === this.tail) {
	    return
	  }
	
	  if (node.list) {
	    node.list.removeNode(node)
	  }
	
	  var tail = this.tail
	  node.list = this
	  node.prev = tail
	  if (tail) {
	    tail.next = node
	  }
	
	  this.tail = node
	  if (!this.head) {
	    this.head = node
	  }
	  this.length ++
	}
	
	Yallist.prototype.push = function () {
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    push(this, arguments[i])
	  }
	  return this.length
	}
	
	Yallist.prototype.unshift = function () {
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    unshift(this, arguments[i])
	  }
	  return this.length
	}
	
	Yallist.prototype.pop = function () {
	  if (!this.tail)
	    return undefined
	
	  var res = this.tail.value
	  this.tail = this.tail.prev
	  this.tail.next = null
	  this.length --
	  return res
	}
	
	Yallist.prototype.shift = function () {
	  if (!this.head)
	    return undefined
	
	  var res = this.head.value
	  this.head = this.head.next
	  this.head.prev = null
	  this.length --
	  return res
	}
	
	Yallist.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this
	  for (var walker = this.head, i = 0; walker !== null; i++) {
	    fn.call(thisp, walker.value, i, this)
	    walker = walker.next
	  }
	}
	
	Yallist.prototype.forEachReverse = function (fn, thisp) {
	  thisp = thisp || this
	  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
	    fn.call(thisp, walker.value, i, this)
	    walker = walker.prev
	  }
	}
	
	Yallist.prototype.get = function (n) {
	  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
	    // abort out of the list early if we hit a cycle
	    walker = walker.next
	  }
	  if (i === n && walker !== null) {
	    return walker.value
	  }
	}
	
	Yallist.prototype.getReverse = function (n) {
	  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
	    // abort out of the list early if we hit a cycle
	    walker = walker.prev
	  }
	  if (i === n && walker !== null) {
	    return walker.value
	  }
	}
	
	Yallist.prototype.map = function (fn, thisp) {
	  thisp = thisp || this
	  var res = new Yallist()
	  for (var walker = this.head; walker !== null; ) {
	    res.push(fn.call(thisp, walker.value, this))
	    walker = walker.next
	  }
	  return res
	}
	
	Yallist.prototype.mapReverse = function (fn, thisp) {
	  thisp = thisp || this
	  var res = new Yallist()
	  for (var walker = this.tail; walker !== null;) {
	    res.push(fn.call(thisp, walker.value, this))
	    walker = walker.prev
	  }
	  return res
	}
	
	Yallist.prototype.reduce = function (fn, initial) {
	  var acc
	  var walker = this.head
	  if (arguments.length > 1) {
	    acc = initial
	  } else if (this.head) {
	    walker = this.head.next
	    acc = this.head.value
	  } else {
	    throw new TypeError('Reduce of empty list with no initial value')
	  }
	
	  for (var i = 0; walker !== null; i++) {
	    acc = fn(acc, walker.value, i)
	    walker = walker.next
	  }
	
	  return acc
	}
	
	Yallist.prototype.reduceReverse = function (fn, initial) {
	  var acc
	  var walker = this.tail
	  if (arguments.length > 1) {
	    acc = initial
	  } else if (this.tail) {
	    walker = this.tail.prev
	    acc = this.tail.value
	  } else {
	    throw new TypeError('Reduce of empty list with no initial value')
	  }
	
	  for (var i = this.length - 1; walker !== null; i--) {
	    acc = fn(acc, walker.value, i)
	    walker = walker.prev
	  }
	
	  return acc
	}
	
	Yallist.prototype.toArray = function () {
	  var arr = new Array(this.length)
	  for (var i = 0, walker = this.head; walker !== null; i++) {
	    arr[i] = walker.value
	    walker = walker.next
	  }
	  return arr
	}
	
	Yallist.prototype.toArrayReverse = function () {
	  var arr = new Array(this.length)
	  for (var i = 0, walker = this.tail; walker !== null; i++) {
	    arr[i] = walker.value
	    walker = walker.prev
	  }
	  return arr
	}
	
	Yallist.prototype.slice = function (from, to) {
	  to = to || this.length
	  if (to < 0) {
	    to += this.length
	  }
	  from = from || 0
	  if (from < 0) {
	    from += this.length
	  }
	  var ret = new Yallist()
	  if (to < from || to < 0) {
	    return ret
	  }
	  if (from < 0) {
	    from = 0
	  }
	  if (to > this.length) {
	    to = this.length
	  }
	  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
	    walker = walker.next
	  }
	  for (; walker !== null && i < to; i++, walker = walker.next) {
	    ret.push(walker.value)
	  }
	  return ret
	}
	
	Yallist.prototype.sliceReverse = function (from, to) {
	  to = to || this.length
	  if (to < 0) {
	    to += this.length
	  }
	  from = from || 0
	  if (from < 0) {
	    from += this.length
	  }
	  var ret = new Yallist()
	  if (to < from || to < 0) {
	    return ret
	  }
	  if (from < 0) {
	    from = 0
	  }
	  if (to > this.length) {
	    to = this.length
	  }
	  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
	    walker = walker.prev
	  }
	  for (; walker !== null && i > from; i--, walker = walker.prev) {
	    ret.push(walker.value)
	  }
	  return ret
	}
	
	Yallist.prototype.reverse = function () {
	  var head = this.head
	  var tail = this.tail
	  for (var walker = head; walker !== null; walker = walker.prev) {
	    var p = walker.prev
	    walker.prev = walker.next
	    walker.next = p
	  }
	  this.head = tail
	  this.tail = head
	  return this
	}
	
	function push (self, item) {
	  self.tail = new Node(item, self.tail, null, self)
	  if (!self.head) {
	    self.head = self.tail
	  }
	  self.length ++
	}
	
	function unshift (self, item) {
	  self.head = new Node(item, null, self.head, self)
	  if (!self.tail) {
	    self.tail = self.head
	  }
	  self.length ++
	}
	
	function Node (value, prev, next, list) {
	  if (!(this instanceof Node)) {
	    return new Node(value, prev, next, list)
	  }
	
	  this.list = list
	  this.value = value
	
	  if (prev) {
	    prev.next = this
	    this.prev = prev
	  } else {
	    this.prev = null
	  }
	
	  if (next) {
	    next.prev = this
	    this.next = next
	  } else {
	    this.next = null
	  }
	}


/***/ },
/* 1146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var mutexify = function() {
	  var queue = []
	  var used = null
	
	  var call = function () {
	    used(release)
	  }
	
	  var acquire = function (fn) {
	    if (used) return queue.push(fn)
	    used = fn
	    process.nextTick(call)
	    return 0
	  }
	
	  var release = function (fn, err, value) {
	    used = null
	    if (queue.length) acquire(queue.shift())
	    if (fn) fn(err, value)
	  }
	
	  return acquire
	}
	
	module.exports = mutexify
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1147 */,
/* 1148 */,
/* 1149 */,
/* 1150 */,
/* 1151 */
/***/ function(module, exports) {

	module.exports = extend
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend(target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}


/***/ },
/* 1152 */
/***/ function(module, exports, __webpack_require__) {

	var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(1153);
	
	module.exports = function (obj, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var space = opts.space || '';
	    if (typeof space === 'number') space = Array(space+1).join(' ');
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
	    var replacer = opts.replacer || function(key, value) { return value; };
	
	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);
	
	    var seen = [];
	    return (function stringify (parent, key, node, level) {
	        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
	        var colonSeparator = space ? ': ' : ':';
	
	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }
	
	        node = replacer.call(parent, key, node);
	
	        if (node === undefined) {
	            return;
	        }
	        if (typeof node !== 'object' || node === null) {
	            return json.stringify(node);
	        }
	        if (isArray(node)) {
	            var out = [];
	            for (var i = 0; i < node.length; i++) {
	                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
	                out.push(indent + space + item);
	            }
	            return '[' + out.join(',') + indent + ']';
	        }
	        else {
	            if (seen.indexOf(node) !== -1) {
	                if (cycles) return json.stringify('__cycle__');
	                throw new TypeError('Converting circular structure to JSON');
	            }
	            else seen.push(node);
	
	            var keys = objectKeys(node).sort(cmp && cmp(node));
	            var out = [];
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var value = stringify(node, key, node[key], level+1);
	
	                if(!value) continue;
	
	                var keyValue = json.stringify(key)
	                    + colonSeparator
	                    + value;
	                ;
	                out.push(indent + space + keyValue);
	            }
	            seen.splice(seen.indexOf(node), 1);
	            return '{' + out.join(',') + indent + '}';
	        }
	    })({ '': obj }, '', obj, 0);
	};
	
	var isArray = Array.isArray || function (x) {
	    return {}.toString.call(x) === '[object Array]';
	};
	
	var objectKeys = Object.keys || function (obj) {
	    var has = Object.prototype.hasOwnProperty || function () { return true };
	    var keys = [];
	    for (var key in obj) {
	        if (has.call(obj, key)) keys.push(key);
	    }
	    return keys;
	};


/***/ },
/* 1153 */
/***/ function(module, exports, __webpack_require__) {

	exports.parse = __webpack_require__(1154);
	exports.stringify = __webpack_require__(1155);


/***/ },
/* 1154 */
/***/ function(module, exports) {

	var at, // The index of the current character
	    ch, // The current character
	    escapee = {
	        '"':  '"',
	        '\\': '\\',
	        '/':  '/',
	        b:    '\b',
	        f:    '\f',
	        n:    '\n',
	        r:    '\r',
	        t:    '\t'
	    },
	    text,
	
	    error = function (m) {
	        // Call error when something is wrong.
	        throw {
	            name:    'SyntaxError',
	            message: m,
	            at:      at,
	            text:    text
	        };
	    },
	    
	    next = function (c) {
	        // If a c parameter is provided, verify that it matches the current character.
	        if (c && c !== ch) {
	            error("Expected '" + c + "' instead of '" + ch + "'");
	        }
	        
	        // Get the next character. When there are no more characters,
	        // return the empty string.
	        
	        ch = text.charAt(at);
	        at += 1;
	        return ch;
	    },
	    
	    number = function () {
	        // Parse a number value.
	        var number,
	            string = '';
	        
	        if (ch === '-') {
	            string = '-';
	            next('-');
	        }
	        while (ch >= '0' && ch <= '9') {
	            string += ch;
	            next();
	        }
	        if (ch === '.') {
	            string += '.';
	            while (next() && ch >= '0' && ch <= '9') {
	                string += ch;
	            }
	        }
	        if (ch === 'e' || ch === 'E') {
	            string += ch;
	            next();
	            if (ch === '-' || ch === '+') {
	                string += ch;
	                next();
	            }
	            while (ch >= '0' && ch <= '9') {
	                string += ch;
	                next();
	            }
	        }
	        number = +string;
	        if (!isFinite(number)) {
	            error("Bad number");
	        } else {
	            return number;
	        }
	    },
	    
	    string = function () {
	        // Parse a string value.
	        var hex,
	            i,
	            string = '',
	            uffff;
	        
	        // When parsing for string values, we must look for " and \ characters.
	        if (ch === '"') {
	            while (next()) {
	                if (ch === '"') {
	                    next();
	                    return string;
	                } else if (ch === '\\') {
	                    next();
	                    if (ch === 'u') {
	                        uffff = 0;
	                        for (i = 0; i < 4; i += 1) {
	                            hex = parseInt(next(), 16);
	                            if (!isFinite(hex)) {
	                                break;
	                            }
	                            uffff = uffff * 16 + hex;
	                        }
	                        string += String.fromCharCode(uffff);
	                    } else if (typeof escapee[ch] === 'string') {
	                        string += escapee[ch];
	                    } else {
	                        break;
	                    }
	                } else {
	                    string += ch;
	                }
	            }
	        }
	        error("Bad string");
	    },
	
	    white = function () {
	
	// Skip whitespace.
	
	        while (ch && ch <= ' ') {
	            next();
	        }
	    },
	
	    word = function () {
	
	// true, false, or null.
	
	        switch (ch) {
	        case 't':
	            next('t');
	            next('r');
	            next('u');
	            next('e');
	            return true;
	        case 'f':
	            next('f');
	            next('a');
	            next('l');
	            next('s');
	            next('e');
	            return false;
	        case 'n':
	            next('n');
	            next('u');
	            next('l');
	            next('l');
	            return null;
	        }
	        error("Unexpected '" + ch + "'");
	    },
	
	    value,  // Place holder for the value function.
	
	    array = function () {
	
	// Parse an array value.
	
	        var array = [];
	
	        if (ch === '[') {
	            next('[');
	            white();
	            if (ch === ']') {
	                next(']');
	                return array;   // empty array
	            }
	            while (ch) {
	                array.push(value());
	                white();
	                if (ch === ']') {
	                    next(']');
	                    return array;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad array");
	    },
	
	    object = function () {
	
	// Parse an object value.
	
	        var key,
	            object = {};
	
	        if (ch === '{') {
	            next('{');
	            white();
	            if (ch === '}') {
	                next('}');
	                return object;   // empty object
	            }
	            while (ch) {
	                key = string();
	                white();
	                next(':');
	                if (Object.hasOwnProperty.call(object, key)) {
	                    error('Duplicate key "' + key + '"');
	                }
	                object[key] = value();
	                white();
	                if (ch === '}') {
	                    next('}');
	                    return object;
	                }
	                next(',');
	                white();
	            }
	        }
	        error("Bad object");
	    };
	
	value = function () {
	
	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.
	
	    white();
	    switch (ch) {
	    case '{':
	        return object();
	    case '[':
	        return array();
	    case '"':
	        return string();
	    case '-':
	        return number();
	    default:
	        return ch >= '0' && ch <= '9' ? number() : word();
	    }
	};
	
	// Return the json_parse function. It will have access to all of the above
	// functions and variables.
	
	module.exports = function (source, reviver) {
	    var result;
	    
	    text = source;
	    at = 0;
	    ch = ' ';
	    result = value();
	    white();
	    if (ch) {
	        error("Syntax error");
	    }
	
	    // If there is a reviver function, we recursively walk the new structure,
	    // passing each name/value pair to the reviver function for possible
	    // transformation, starting with a temporary root object that holds the result
	    // in an empty key. If there is not a reviver function, we simply return the
	    // result.
	
	    return typeof reviver === 'function' ? (function walk(holder, key) {
	        var k, v, value = holder[key];
	        if (value && typeof value === 'object') {
	            for (k in value) {
	                if (Object.prototype.hasOwnProperty.call(value, k)) {
	                    v = walk(value, k);
	                    if (v !== undefined) {
	                        value[k] = v;
	                    } else {
	                        delete value[k];
	                    }
	                }
	            }
	        }
	        return reviver.call(holder, key, value);
	    }({'': result}, '')) : result;
	};


/***/ },
/* 1155 */
/***/ function(module, exports) {

	var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	    gap,
	    indent,
	    meta = {    // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    },
	    rep;
	
	function quote(string) {
	    // If the string contains no control characters, no quote characters, and no
	    // backslash characters, then we can safely slap some quotes around it.
	    // Otherwise we must also replace the offending characters with safe escape
	    // sequences.
	    
	    escapable.lastIndex = 0;
	    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	        var c = meta[a];
	        return typeof c === 'string' ? c :
	            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    }) + '"' : '"' + string + '"';
	}
	
	function str(key, holder) {
	    // Produce a string from holder[key].
	    var i,          // The loop counter.
	        k,          // The member key.
	        v,          // The member value.
	        length,
	        mind = gap,
	        partial,
	        value = holder[key];
	    
	    // If the value has a toJSON method, call it to obtain a replacement value.
	    if (value && typeof value === 'object' &&
	            typeof value.toJSON === 'function') {
	        value = value.toJSON(key);
	    }
	    
	    // If we were called with a replacer function, then call the replacer to
	    // obtain a replacement value.
	    if (typeof rep === 'function') {
	        value = rep.call(holder, key, value);
	    }
	    
	    // What happens next depends on the value's type.
	    switch (typeof value) {
	        case 'string':
	            return quote(value);
	        
	        case 'number':
	            // JSON numbers must be finite. Encode non-finite numbers as null.
	            return isFinite(value) ? String(value) : 'null';
	        
	        case 'boolean':
	        case 'null':
	            // If the value is a boolean or null, convert it to a string. Note:
	            // typeof null does not produce 'null'. The case is included here in
	            // the remote chance that this gets fixed someday.
	            return String(value);
	            
	        case 'object':
	            if (!value) return 'null';
	            gap += indent;
	            partial = [];
	            
	            // Array.isArray
	            if (Object.prototype.toString.apply(value) === '[object Array]') {
	                length = value.length;
	                for (i = 0; i < length; i += 1) {
	                    partial[i] = str(i, value) || 'null';
	                }
	                
	                // Join all of the elements together, separated with commas, and
	                // wrap them in brackets.
	                v = partial.length === 0 ? '[]' : gap ?
	                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
	                    '[' + partial.join(',') + ']';
	                gap = mind;
	                return v;
	            }
	            
	            // If the replacer is an array, use it to select the members to be
	            // stringified.
	            if (rep && typeof rep === 'object') {
	                length = rep.length;
	                for (i = 0; i < length; i += 1) {
	                    k = rep[i];
	                    if (typeof k === 'string') {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            else {
	                // Otherwise, iterate through all of the keys in the object.
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                        }
	                    }
	                }
	            }
	            
	        // Join all of the member texts together, separated with commas,
	        // and wrap them in braces.
	
	        v = partial.length === 0 ? '{}' : gap ?
	            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
	            '{' + partial.join(',') + '}';
	        gap = mind;
	        return v;
	    }
	}
	
	module.exports = function (value, replacer, space) {
	    var i;
	    gap = '';
	    indent = '';
	    
	    // If the space parameter is a number, make an indent string containing that
	    // many spaces.
	    if (typeof space === 'number') {
	        for (i = 0; i < space; i += 1) {
	            indent += ' ';
	        }
	    }
	    // If the space parameter is a string, it will be used as the indent string.
	    else if (typeof space === 'string') {
	        indent = space;
	    }
	
	    // If there is a replacer, it must be a function or an array.
	    // Otherwise, throw an error.
	    rep = replacer;
	    if (replacer && typeof replacer !== 'function'
	    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
	        throw new Error('JSON.stringify');
	    }
	    
	    // Make a fake root object containing our value under the key of ''.
	    // Return the result of stringifying the value.
	    return str('', {'': value});
	};


/***/ },
/* 1156 */
/***/ function(module, exports, __webpack_require__) {

	
	exports.proofStream = __webpack_require__(1157)
	exports.proofGenerator = __webpack_require__(1170)
	exports.verifier = __webpack_require__(1172)


/***/ },
/* 1157 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(1158).Transform
	var util = __webpack_require__(1130)
	var generator = __webpack_require__(1170)
	
	module.exports = MerkleTreeProof
	
	function MerkleTreeProof (opts) {
	  if (!(this instanceof MerkleTreeProof)) return new MerkleTreeProof(opts)
	  if (!opts || !opts.nodes) throw new Error('expected merkle tree nodes')
	  this._generator = generator(opts.nodes)
	  this.destroyed = false
	  var hwm = opts.highWaterMark || 16
	  Transform.call(this, {objectMode: true, highWaterMark: hwm})
	}
	
	util.inherits(MerkleTreeProof, Transform)
	
	MerkleTreeProof.prototype.destroy = function (err) {
	  if (this.destroyed) return
	  this.destroyed = true
	  if (err) this.emit('error', err)
	  this.emit('close')
	}
	
	MerkleTreeProof.prototype._transform = function (idx, enc, cb) {
	  var nodes = this._generator.add(idx)
	  for (var i = 0; i < nodes.length; i++) this.push(nodes[i])
	  cb()
	}
	
	MerkleTreeProof.prototype.end = function () {
	  this.push(this._generator._root)
	  return Transform.prototype.end.apply(this, arguments)
	}


/***/ },
/* 1158 */,
/* 1159 */,
/* 1160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1161 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __webpack_require__(820);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1163 */,
/* 1164 */,
/* 1165 */,
/* 1166 */,
/* 1167 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1168 */,
/* 1169 */,
/* 1170 */
/***/ function(module, exports, __webpack_require__) {

	
	var flat = __webpack_require__(1171)
	
	module.exports = MerkleProofGenerator
	
	function MerkleProofGenerator (nodes) {
	  if (!(this instanceof MerkleProofGenerator)) return new MerkleProofGenerator(nodes)
	
	  this._indicesInProof = {}
	  this._nodes = new Array(nodes.length)
	
	  // order tree
	  for (var i = 0; i < nodes.length; i++) {
	    var idx = nodes[i].index
	    this._nodes[idx] = nodes[i]
	  }
	
	  var height = nearestPowerOf2(nodes.length)
	  this._rootIdx = Math.pow(2, height - 1) - 1
	  this._root = this._nodes[this._rootIdx]
	  this._proof = []
	}
	
	MerkleProofGenerator.prototype.add = function (idx) {
	  // accept node or index as parameter
	  if (typeof idx !== 'number') {
	    if (this._nodes.indexOf(idx) === -1) throw new Error('expected index or node')
	
	    idx = idx.index
	  }
	
	  var added = []
	  var path = getPath(idx, this._nodes, this._rootIdx)
	  for (var i = 0; i < path.length; i++) {
	    var nodeIdx = path[i]
	    if (nodeIdx in this._indicesInProof) continue
	
	    this._indicesInProof[nodeIdx] = true
	    var node = this._nodes[nodeIdx]
	    node = minify(node)
	    added.push(node)
	    this._proof.push(node)
	  }
	
	  return added
	}
	
	MerkleProofGenerator.prototype.proof = function () {
	  var proof = this._proof.slice()
	  proof.push(minify(this._root))
	  return proof
	}
	
	function getPath (leafIdx, nodeByIdx, rootIdx) {
	  var path = []
	  while (leafIdx !== rootIdx) {
	    var sib = flat.sibling(leafIdx)
	    path.push(sib in nodeByIdx ? sib : leafIdx)
	    leafIdx = flat.parent(leafIdx)
	  }
	
	  return path
	}
	
	function nearestPowerOf2 (n) {
	  return Math.ceil(Math.log(n) / Math.log(2))
	}
	
	function minify (node) {
	  return {
	    index: node.index,
	    hash: node.hash
	  }
	}


/***/ },
/* 1171 */
/***/ function(module, exports) {

	exports.fullRoots = function (index, result) {
	  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')
	  if (!result) result = []
	
	  index /= 2
	
	  var offset = 0
	  var factor = 1
	
	  while (true) {
	    if (!index) return result
	    while (factor * 2 <= index) factor *= 2
	    result.push(offset + factor - 1)
	    offset = offset + 2 * factor
	    index -= factor
	    factor = 1
	  }
	}
	
	exports.depth = function (index) {
	  var depth = 0
	
	  index += 1
	  while (!(index & 1)) {
	    depth++
	    index = rightShift(index)
	  }
	
	  return depth
	}
	
	exports.sibling = function (index) {
	  var depth = exports.depth(index)
	  var offset = exports.offset(index, depth)
	
	  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)
	}
	
	exports.parent = function (index) {
	  var depth = exports.depth(index)
	  var offset = exports.offset(index, depth)
	
	  return exports.index(depth + 1, rightShift(offset))
	}
	
	exports.leftChild = function (index, depth) {
	  if (!(index & 1)) return -1
	  if (!depth) depth = exports.depth(index)
	  return exports.index(depth - 1, exports.offset(index, depth) * 2)
	}
	
	exports.rightChild = function (index, depth) {
	  if (!(index & 1)) return -1
	  if (!depth) depth = exports.depth(index)
	  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))
	}
	
	exports.children = function (index, depth) {
	  if (!(index & 1)) return null
	
	  if (!depth) depth = exports.depth(index)
	  var offset = exports.offset(index, depth) * 2
	
	  return [
	    exports.index(depth - 1, offset),
	    exports.index(depth - 1, offset + 1)
	  ]
	}
	
	exports.leftSpan = function (index, depth) {
	  if (!(index & 1)) return index
	  if (!depth) depth = exports.depth(index)
	  return exports.offset(index, depth) * twoPow(depth + 1)
	}
	
	exports.rightSpan = function (index, depth) {
	  if (!(index & 1)) return index
	  if (!depth) depth = exports.depth(index)
	  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2
	}
	
	exports.count = function (index, depth) {
	  if (!(index & 1)) return 1
	  if (!depth) depth = exports.depth(index)
	
	  var offset = exports.offset(index, depth)
	  return twoPow(depth + 1) - 1
	}
	
	exports.spans = function (index, depth) {
	  if (!(index & 1)) return [index, index]
	  if (!depth) depth = exports.depth(index)
	
	  var offset = exports.offset(index, depth)
	  var width = twoPow(depth + 1)
	
	  return [offset * width, (offset + 1) * width - 2]
	}
	
	exports.index = function (depth, offset) {
	  return (1 + 2 * offset) * twoPow(depth) - 1
	}
	
	exports.offset = function (index, depth) {
	  if (!(index & 1)) return index / 2
	  if (!depth) depth = exports.depth(index)
	
	  return ((index + 1) / twoPow(depth) - 1) / 2
	}
	
	function twoPow (n) {
	  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))
	}
	
	function rightShift (n) {
	  return (n - (n & 1)) / 2
	}


/***/ },
/* 1172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var flat = __webpack_require__(1171)
	
	module.exports = merkleProofVerifier
	
	/**
	 * @param {Array} opts.proof      list of nodes including root
	 * @param {Function} opts.leaf    leaf hasher function
	 * @param {Function} opts.parent  parent hasher function
	 */
	function merkleProofVerifier (opts) {
	  var proof = opts.proof
	  var root = proof[proof.length - 1]
	  var rootIdx = root.index
	  var nodeByIndex = {}
	
	  for (var i = 0; i < proof.length; i++) {
	    var node = proof[i]
	    nodeByIndex[node.index] = node
	  }
	
	  var leafHasher = opts.leaf
	  var parentHasher = opts.parent
	
	  return function verify (leaf, idx) {
	    if (typeof leaf === 'object') {
	      // accept node object
	      idx = leaf.index
	      leaf = leaf.data
	    }
	
	    var cur = leafHasher({ data: toBuffer(leaf) })
	    while (idx !== rootIdx) {
	      var siblingIdx = flat.sibling(idx)
	      // node could be an only child
	      var sibling = nodeByIndex[siblingIdx] || nodeByIndex[idx]
	      if (!sibling) return false
	
	      var left = idx < siblingIdx ? cur : sibling
	      var right = left === cur ? sibling : cur
	
	      cur = parentHasher(
	        wrap(left),
	        wrap(right)
	      )
	
	      idx = flat.parent(idx)
	    }
	
	    return equals(cur, root.hash)
	  }
	}
	
	function wrap (hash) {
	  return hash.hash ? hash : { hash: hash }
	}
	
	function equals (a, b) {
	  if (a.length !== b.length) return false
	
	  for (var i = 0, l = a.length; i < l; i++) {
	    if (a[i] !== b[i]) return false
	  }
	
	  return true
	}
	
	function toBuffer (data) {
	  return Buffer.isBuffer(data) ? data : new Buffer(data)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1173 */,
/* 1174 */,
/* 1175 */,
/* 1176 */,
/* 1177 */,
/* 1178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
	// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	// NOTE: SIGHASH byte ignored AND restricted, truncate before use
	
	function check (buffer) {
	  if (buffer.length < 8) return false
	  if (buffer.length > 72) return false
	  if (buffer[0] !== 0x30) return false
	  if (buffer[1] !== buffer.length - 2) return false
	  if (buffer[2] !== 0x02) return false
	
	  var lenR = buffer[3]
	  if (lenR === 0) return false
	  if (5 + lenR >= buffer.length) return false
	  if (buffer[4 + lenR] !== 0x02) return false
	
	  var lenS = buffer[5 + lenR]
	  if (lenS === 0) return false
	  if ((6 + lenR + lenS) !== buffer.length) return false
	
	  if (buffer[4] & 0x80) return false
	  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false
	
	  if (buffer[lenR + 6] & 0x80) return false
	  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false
	  return true
	}
	
	function decode (buffer) {
	  if (buffer.length < 8) throw new Error('DER sequence length is too short')
	  if (buffer.length > 72) throw new Error('DER sequence length is too long')
	  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')
	  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')
	  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')
	
	  var lenR = buffer[3]
	  if (lenR === 0) throw new Error('R length is zero')
	  if (5 + lenR >= buffer.length) throw new Error('R length is too long')
	  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')
	
	  var lenS = buffer[5 + lenR]
	  if (lenS === 0) throw new Error('S length is zero')
	  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')
	
	  if (buffer[4] & 0x80) throw new Error('R value is negative')
	  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')
	
	  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')
	  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')
	
	  // non-BIP66 - extract R, S values
	  return {
	    r: buffer.slice(4, 4 + lenR),
	    s: buffer.slice(6 + lenR)
	  }
	}
	
	/*
	 * Expects r and s to be positive DER integers.
	 *
	 * The DER format uses the most significant bit as a sign bit (& 0x80).
	 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0xff
	 *    127 =>     0x7f
	 *   -127 =>     0x81
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>   0xff01
	 *  16300 =>   0x3fac
	 * -16300 =>   0xc054
	 *  62300 => 0x00f35c
	 * -62300 => 0xff0ca4
	*/
	function encode (r, s) {
	  var lenR = r.length
	  var lenS = s.length
	  if (lenR === 0) throw new Error('R length is zero')
	  if (lenS === 0) throw new Error('S length is zero')
	  if (lenR > 33) throw new Error('R length is too long')
	  if (lenS > 33) throw new Error('S length is too long')
	  if (r[0] & 0x80) throw new Error('R value is negative')
	  if (s[0] & 0x80) throw new Error('S value is negative')
	  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
	  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')
	
	  var signature = new Buffer(6 + lenR + lenS)
	
	  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	  signature[0] = 0x30
	  signature[1] = signature.length - 2
	  signature[2] = 0x02
	  signature[3] = r.length
	  r.copy(signature, 4)
	  signature[4 + lenR] = 0x02
	  signature[5 + lenR] = s.length
	  s.copy(signature, 6 + lenR)
	
	  return signature
	}
	
	module.exports = {
	  check: check,
	  decode: decode,
	  encode: encode
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1179 */,
/* 1180 */,
/* 1181 */,
/* 1182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {module.exports = function (tasks, cb) {
	  var results, pending, keys
	  var isSync = true
	
	  if (Array.isArray(tasks)) {
	    results = []
	    pending = tasks.length
	  } else {
	    keys = Object.keys(tasks)
	    results = {}
	    pending = keys.length
	  }
	
	  function done (err) {
	    function end () {
	      if (cb) cb(err, results)
	      cb = null
	    }
	    if (isSync) process.nextTick(end)
	    else end()
	  }
	
	  function each (i, err, result) {
	    results[i] = result
	    if (--pending === 0 || err) {
	      done(err)
	    }
	  }
	
	  if (!pending) {
	    // empty
	    done(null)
	  } else if (keys) {
	    // object
	    keys.forEach(function (key) {
	      tasks[key](function (err, result) { each(key, err, result) })
	    })
	  } else {
	    // array
	    tasks.forEach(function (task, i) {
	      task(function (err, result) { each(i, err, result) })
	    })
	  }
	
	  isSync = false
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1183 */,
/* 1184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var schema = __webpack_require__(1185)
	var compile = __webpack_require__(1189)
	
	module.exports = function (proto, opts) {
	  if (!opts) opts = {}
	  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object')
	
	  var sch = (typeof proto === 'object' && !Buffer.isBuffer(proto)) ? proto : schema.parse(proto)
	
	  // to not make toString,toJSON enumarable we make a fire-and-forget prototype
	  var Messages = function () {
	    var self = this
	
	    compile(sch, opts.encodings || {}).forEach(function (m) {
	      self[m.name] = m.values || m
	    })
	  }
	
	  Messages.prototype.toString = function () {
	    return schema.stringify(sch)
	  }
	
	  Messages.prototype.toJSON = function () {
	    return sch
	  }
	
	  return new Messages()
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1185 */
/***/ function(module, exports, __webpack_require__) {

	var parse = __webpack_require__(1186)
	var stringify = __webpack_require__(1188)
	
	module.exports = parse
	module.exports.parse = parse
	module.exports.stringify = stringify


/***/ },
/* 1186 */
/***/ function(module, exports, __webpack_require__) {

	var tokenize = __webpack_require__(1187)
	var MAX_RANGE = 0x1FFFFFFF
	
	var onfieldoptions = function (tokens) {
	  var opts = {}
	
	  while (tokens.length) {
	    switch (tokens[0]) {
	      case '[':
	      case ',':
	        tokens.shift()
	        var name = tokens.shift()
	        if (name === '(') {       // handling [(A) = B]
	          name = tokens.shift()
	          tokens.shift()          // remove the end of bracket
	        }
	        if (tokens[0] !== '=') throw new Error('Unexpected token in field options: ' + tokens[0])
	        tokens.shift()
	        if (tokens[0] === ']') throw new Error('Unexpected ] in field option')
	        opts[name] = tokens.shift()
	        break
	      case ']':
	        tokens.shift()
	        return opts
	
	      default:
	        throw new Error('Unexpected token in field options: ' + tokens[0])
	    }
	  }
	
	  throw new Error('No closing tag for field options')
	}
	
	var onfield = function (tokens) {
	  var field = {
	    name: null,
	    type: null,
	    tag: 0,
	    map: null,
	    oneof: null,
	    required: false,
	    repeated: false,
	    options: {}
	  }
	
	  while (tokens.length) {
	    switch (tokens[0]) {
	      case '=':
	        tokens.shift()
	        field.tag = Number(tokens.shift())
	        break
	
	      case 'map':
	        field.type = 'map'
	        field.map = {from: null, to: null}
	        tokens.shift()
	        if (tokens[0] !== '<') throw new Error('Unexpected token in map type: ' + tokens[0])
	        tokens.shift()
	        field.map.from = tokens.shift()
	        if (tokens[0] !== ',') throw new Error('Unexpected token in map type: ' + tokens[0])
	        tokens.shift()
	        field.map.to = tokens.shift()
	        if (tokens[0] !== '>') throw new Error('Unexpected token in map type: ' + tokens[0])
	        tokens.shift()
	        field.name = tokens.shift()
	        break
	
	      case 'repeated':
	      case 'required':
	      case 'optional':
	        var t = tokens.shift()
	        field.required = t === 'required'
	        field.repeated = t === 'repeated'
	        field.type = tokens.shift()
	        field.name = tokens.shift()
	        break
	
	      case '[':
	        field.options = onfieldoptions(tokens)
	        break
	
	      case ';':
	        tokens.shift()
	        return field
	
	      default:
	        throw new Error('Unexpected token in message field: ' + tokens[0])
	    }
	  }
	
	  throw new Error('No ; found for message field')
	}
	
	var onmessagebody = function (tokens) {
	  var body = {
	    enums: [],
	    messages: [],
	    fields: [],
	    extensions: null
	  }
	
	  while (tokens.length) {
	    switch (tokens[0]) {
	      case 'map':
	      case 'repeated':
	      case 'optional':
	      case 'required':
	        body.fields.push(onfield(tokens))
	        break
	
	      case 'enum':
	        body.enums.push(onenum(tokens))
	        break
	
	      case 'message':
	        body.messages.push(onmessage(tokens))
	        break
	
	      case 'extensions':
	        body.extensions = onextensions(tokens)
	        break
	
	      case 'oneof':
	        tokens.shift()
	        var name = tokens.shift()
	        if (tokens[0] !== '{') throw new Error('Unexpected token in oneof: ' + tokens[0])
	        tokens.shift()
	        while (tokens[0] !== '}') {
	          tokens.unshift('optional')
	          var field = onfield(tokens)
	          field.oneof = name
	          body.fields.push(field)
	        }
	        tokens.shift()
	        break
	
	      case ';':
	        tokens.shift()
	        break
	
	      default:
	        // proto3 does not require the use of optional/required, assumed as optional
	        // "singular: a well-formed message can have zero or one of this field (but not more than one)."
	        // https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules
	        tokens.unshift('optional')
	        body.fields.push(onfield(tokens))
	    }
	  }
	
	  return body
	}
	
	var onextend = function (tokens) {
	  var out = {
	    name: tokens[1],
	    message: onmessage(tokens)
	  }
	  return out
	}
	
	var onextensions = function (tokens) {
	  tokens.shift()
	  var from = Number(tokens.shift())
	  if (isNaN(from)) throw new Error('Invalid from in extensions definition')
	  if (tokens.shift() !== 'to') throw new Error("Expected keyword 'to' in extensions definition")
	  var to = tokens.shift()
	  if (to === 'max') to = MAX_RANGE
	  to = Number(to)
	  if (isNaN(to)) throw new Error('Invalid to in extensions definition')
	  if (tokens.shift() !== ';') throw new Error('Missing ; in extensions definition')
	  return {from: from, to: to}
	}
	var onmessage = function (tokens) {
	  tokens.shift()
	
	  var lvl = 1
	  var body = []
	  var msg = {
	    name: tokens.shift(),
	    enums: [],
	    messages: [],
	    fields: []
	  }
	
	  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])
	  tokens.shift()
	
	  while (tokens.length) {
	    if (tokens[0] === '{') lvl++
	    else if (tokens[0] === '}') lvl--
	
	    if (!lvl) {
	      tokens.shift()
	      body = onmessagebody(body)
	      msg.enums = body.enums
	      msg.messages = body.messages
	      msg.fields = body.fields
	      msg.extensions = body.extensions
	      return msg
	    }
	
	    body.push(tokens.shift())
	  }
	
	  if (lvl) throw new Error('No closing tag for message')
	}
	
	var onpackagename = function (tokens) {
	  tokens.shift()
	  var name = tokens.shift()
	  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0])
	  tokens.shift()
	  return name
	}
	
	var onsyntaxversion = function (tokens) {
	  tokens.shift()
	
	  if (tokens[0] !== '=') throw new Error('Expected = but found ' + tokens[0])
	  tokens.shift()
	
	  var version = tokens.shift()
	  switch (version) {
	    case '"proto2"':
	      version = 2
	      break
	
	    case '"proto3"':
	      version = 3
	      break
	
	    default:
	      throw new Error('Expected protobuf syntax version but found ' + version)
	  }
	
	  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0])
	  tokens.shift()
	
	  return version
	}
	
	var onenumvalue = function (tokens) {
	  if (tokens.length < 4) throw new Error('Invalid enum value: ' + tokens.slice(0, 3).join(' '))
	  if (tokens[1] !== '=') throw new Error('Expected = but found ' + tokens[1])
	  if (tokens[3] !== ';') throw new Error('Expected ; but found ' + tokens[1])
	
	  var name = tokens.shift()
	  tokens.shift()
	
	  var value = Number(tokens.shift())
	  tokens.shift()
	
	  return {
	    name: name,
	    value: value
	  }
	}
	
	var onenum = function (tokens) {
	  tokens.shift()
	
	  var e = {
	    name: tokens.shift(),
	    values: {}
	  }
	
	  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])
	  tokens.shift()
	
	  while (tokens.length) {
	    if (tokens[0] === '}') {
	      tokens.shift()
	      // there goes optional semicolon after the enclosing "}"
	      if (tokens[0] === ';') tokens.shift()
	      return e
	    }
	    if (tokens[0] === 'option') {
	      // just skip "option allow_alias = true;"
	      while (tokens.shift() !== ';') {
	        // do nothing
	      }
	    }
	    var val = onenumvalue(tokens)
	    e.values[val.name] = val.value
	  }
	
	  throw new Error('No closing tag for enum')
	}
	
	var onoption = function (tokens) {
	  var name = null
	  var value = null
	
	  var parse = function (value) {
	    if (value === 'true') return true
	    if (value === 'false') return false
	    return value.replace(/^"+|"+$/gm, '')
	  }
	
	  while (tokens.length) {
	    if (tokens[0] === ';') {
	      tokens.shift()
	      return {name: name, value: value}
	    }
	    switch (tokens[0]) {
	      case 'option':
	        tokens.shift()
	
	        var hasBracket = tokens[0] === '('
	        if (hasBracket) tokens.shift()
	
	        name = tokens.shift()
	
	        if (hasBracket) {
	          if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])
	          tokens.shift()
	        }
	        break
	
	      case '=':
	        tokens.shift()
	        if (name === null) throw new Error('Expected key for option with value: ' + tokens[0])
	        value = parse(tokens.shift())
	
	        if (name === 'optimize_for' && !/^(SPEED|CODE_SIZE|LITE_RUNTIME)$/.test(value)) {
	          throw new Error('Unexpected value for option optimize_for: ' + value)
	        } else if (value === '{') {
	          // option foo = {bar: baz}
	          value = onoptionMap(tokens)
	        }
	        break
	
	      default:
	        throw new Error('Unexpected token in option: ' + tokens[0])
	    }
	  }
	}
	
	var onoptionMap = function (tokens) {
	  var parse = function (value) {
	    if (value === 'true') return true
	    if (value === 'false') return false
	    return value.replace(/^"+|"+$/gm, '')
	  }
	
	  var map = {}
	
	  while (tokens.length) {
	    if (tokens[0] === '}') {
	      tokens.shift()
	      return map
	    }
	
	    var hasBracket = tokens[0] === '('
	    if (hasBracket) tokens.shift()
	
	    var key = tokens.shift()
	    if (hasBracket) {
	      if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])
	      tokens.shift()
	    }
	
	    var value = null
	
	    switch (tokens[0]) {
	      case ':':
	        if (map[key] !== undefined) throw new Error('Duplicate option map key ' + key)
	
	        tokens.shift()
	
	        value = parse(tokens.shift())
	
	        if (value === '{') {
	          // option foo = {bar: baz}
	          value = onoptionMap(tokens)
	        }
	
	        map[key] = value
	        break
	
	      case '{':
	        tokens.shift()
	        value = onoptionMap(tokens)
	
	        if (map[key] === undefined) map[key] = []
	        if (!Array.isArray(map[key])) throw new Error('Duplicate option map key ' + key)
	
	        map[key].push(value)
	        break
	
	      default:
	        throw new Error('Unexpected token in option map: ' + tokens[0])
	    }
	  }
	
	  throw new Error('No closing tag for option map')
	}
	
	var onimport = function (tokens) {
	  tokens.shift()
	  var file = tokens.shift().replace(/^"+|"+$/gm, '')
	
	  if (tokens[0] !== ';') throw new Error('Unexpected token: ' + tokens[0] + '. Expected ";"')
	
	  tokens.shift()
	  return file
	}
	
	var onservice = function (tokens) {
	  tokens.shift()
	
	  var service = {
	    name: tokens.shift(),
	    methods: [],
	    options: {}
	  }
	
	  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])
	  tokens.shift()
	
	  while (tokens.length) {
	    if (tokens[0] === '}') {
	      tokens.shift()
	      // there goes optional semicolon after the enclosing "}"
	      if (tokens[0] === ';') tokens.shift()
	      return service
	    }
	
	    switch (tokens[0]) {
	      case 'option':
	        var opt = onoption(tokens)
	        if (service.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name)
	        service.options[opt.name] = opt.value
	        break
	      case 'rpc':
	        service.methods.push(onrpc(tokens))
	        break
	      default:
	        throw new Error('Unexpected token in service: ' + tokens[0])
	    }
	  }
	
	  throw new Error('No closing tag for service')
	}
	
	var onrpc = function (tokens) {
	  tokens.shift()
	
	  var rpc = {
	    name: tokens.shift(),
	    input_type: null,
	    output_type: null,
	    client_streaming: false,
	    server_streaming: false,
	    options: {}
	  }
	
	  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0])
	  tokens.shift()
	
	  if (tokens[0] === 'stream') {
	    tokens.shift()
	    rpc.client_streaming = true
	  }
	
	  rpc.input_type = tokens.shift()
	
	  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])
	  tokens.shift()
	
	  if (tokens[0] !== 'returns') throw new Error('Expected returns but found ' + tokens[0])
	  tokens.shift()
	
	  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0])
	  tokens.shift()
	
	  if (tokens[0] === 'stream') {
	    tokens.shift()
	    rpc.server_streaming = true
	  }
	
	  rpc.output_type = tokens.shift()
	
	  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])
	  tokens.shift()
	
	  if (tokens[0] === ';') {
	    tokens.shift()
	    return rpc
	  }
	
	  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])
	  tokens.shift()
	
	  while (tokens.length) {
	    if (tokens[0] === '}') {
	      tokens.shift()
	      // there goes optional semicolon after the enclosing "}"
	      if (tokens[0] === ';') tokens.shift()
	      return rpc
	    }
	
	    if (tokens[0] === 'option') {
	      var opt = onoption(tokens)
	      if (rpc.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name)
	      rpc.options[opt.name] = opt.value
	    } else {
	      throw new Error('Unexpected token in rpc options: ' + tokens[0])
	    }
	  }
	
	  throw new Error('No closing tag for rpc')
	}
	
	var parse = function (buf) {
	  var tokens = tokenize(buf.toString())
	  // check for isolated strings in tokens by looking for opening quote
	  for (var i = 0; i < tokens.length; i++) {
	    if (/^(\"|\')([^\'\"]*)$/.test(tokens[i])) {
	      var j
	      if (tokens[i].length === 1) {
	        j = i + 1
	      } else {
	        j = i
	      }
	      // look ahead for the closing quote and collapse all
	      // in-between tokens into a single token
	      for (j; j < tokens.length; j++) {
	        if (/^([^\'\"]*)(\"|\')$/.test(tokens[j])) {
	          tokens = tokens.slice(0, i).concat(tokens.slice(i, j + 1).join('')).concat(tokens.slice(j + 1))
	          break
	        }
	      }
	    }
	  }
	  var schema = {
	    syntax: 3,
	    package: null,
	    imports: [],
	    enums: [],
	    messages: [],
	    options: {},
	    extends: []
	  }
	
	  var firstline = true
	
	  while (tokens.length) {
	    switch (tokens[0]) {
	      case 'package':
	        schema.package = onpackagename(tokens)
	        break
	
	      case 'syntax':
	        if (!firstline) throw new Error('Protobuf syntax version should be first thing in file')
	        schema.syntax = onsyntaxversion(tokens)
	        break
	
	      case 'message':
	        schema.messages.push(onmessage(tokens))
	        break
	
	      case 'enum':
	        schema.enums.push(onenum(tokens))
	        break
	
	      case 'option':
	        var opt = onoption(tokens)
	        if (schema.options[opt.name]) throw new Error('Duplicate option ' + opt.name)
	        schema.options[opt.name] = opt.value
	        break
	
	      case 'import':
	        schema.imports.push(onimport(tokens))
	        break
	
	      case 'extend':
	        schema.extends.push(onextend(tokens))
	        break
	
	      case 'service':
	        if (!schema.services) schema.services = []
	        schema.services.push(onservice(tokens))
	        break
	
	      default:
	        throw new Error('Unexpected token: ' + tokens[0])
	    }
	    firstline = false
	  }
	
	  // now iterate over messages and propagate extends
	  schema.extends.forEach(function (ext) {
	    schema.messages.forEach(function (msg) {
	      if (msg.name === ext.name) {
	        ext.message.fields.forEach(function (field) {
	          if (!msg.extensions || field.tag < msg.extensions.from || field.tag > msg.extensions.to) {
	            throw new Error(msg.name + ' does not declare ' + field.tag + ' as an extension number')
	          }
	          msg.fields.push(field)
	        })
	      }
	    })
	  })
	
	  return schema
	}
	
	module.exports = parse


/***/ },
/* 1187 */
/***/ function(module, exports) {

	module.exports = function (sch) {
	  var noComments = function (line) {
	    var i = line.indexOf('//')
	    return i > -1 ? line.slice(0, i) : line
	  }
	
	  var noMultilineComments = function () {
	    var inside = false
	    return function (token) {
	      if (token === '/*') {
	        inside = true
	        return false
	      }
	      if (token === '*/') {
	        inside = false
	        return false
	      }
	      return !inside
	    }
	  }
	
	  var trim = function (line) {
	    return line.trim()
	  }
	
	  return sch
	    .replace(/([;,{}\(\)=\:\[\]<>]|\/\*|\*\/)/g, ' $1 ')
	    .split(/\n/)
	    .map(trim)
	    .filter(Boolean)
	    .map(noComments)
	    .map(trim)
	    .filter(Boolean)
	    .join('\n')
	    .split(/\s+|\n+/gm)
	    .filter(noMultilineComments())
	}


/***/ },
/* 1188 */
/***/ function(module, exports) {

	var onfield = function (f, result) {
	  var prefix = f.repeated ? 'repeated' : f.required ? 'required' : 'optional'
	  if (f.type === 'map') prefix = 'map<' + f.map.from + ',' + f.map.to + '>'
	  if (f.oneof) prefix = ''
	
	  var opts = Object.keys(f.options || {}).map(function (key) {
	    return key + ' = ' + f.options[key]
	  }).join(',')
	
	  if (opts) opts = ' [' + opts + ']'
	
	  result.push((prefix ? prefix + ' ' : '') + (f.map === 'map' ? '' : f.type + ' ') + f.name + ' = ' + f.tag + opts + ';')
	  return result
	}
	
	var onmessage = function (m, result) {
	  result.push('message ' + m.name + ' {')
	
	  if (!m.enums) m.enums = []
	  m.enums.forEach(function (e) {
	    result.push(onenum(e, []))
	  })
	
	  if (!m.messages) m.messages = []
	  m.messages.forEach(function (m) {
	    result.push(onmessage(m, []))
	  })
	
	  var oneofs = {}
	
	  if (!m.fields) m.fields = []
	  m.fields.forEach(function (f) {
	    if (f.oneof) {
	      if (!oneofs[f.oneof]) oneofs[f.oneof] = []
	      oneofs[f.oneof].push(onfield(f, []))
	    } else {
	      result.push(onfield(f, []))
	    }
	  })
	
	  Object.keys(oneofs).forEach(function (n) {
	    oneofs[n].unshift('oneof ' + n + ' {')
	    oneofs[n].push('}')
	    result.push(oneofs[n])
	  })
	
	  result.push('}', '')
	  return result
	}
	
	var onenum = function (e, result) {
	  result.push('enum ' + e.name + ' {')
	
	  var vals = Object.keys(e.values).map(function (key) {
	    return key + ' = ' + e.values[key] + ';'
	  })
	
	  result.push(vals)
	  result.push('}', '')
	  return result
	}
	
	var onoption = function (o, result) {
	  var keys = Object.keys(o)
	  keys.forEach(function (option) {
	    var v = o[option]
	
	    if (~option.indexOf('.')) option = '(' + option + ')'
	
	    var type = typeof v
	
	    if (type === 'object') {
	      v = onoptionMap(v, [])
	      if (v.length) result.push('option ' + option + ' = {', v, '};')
	    } else {
	      if (type === 'string' && option !== 'optimize_for') v = '"' + v + '"'
	      result.push('option ' + option + ' = ' + v + ';')
	    }
	  })
	  if (keys.length > 0) {
	    result.push('')
	  }
	
	  return result
	}
	
	var onoptionMap = function (o, result) {
	  var keys = Object.keys(o)
	  keys.forEach(function (k) {
	    var v = o[k]
	
	    var type = typeof v
	
	    if (type === 'object') {
	      if (Array.isArray(v)) {
	        v.forEach(function (v) {
	          v = onoptionMap(v, [])
	          if (v.length) result.push(k + ' {', v, '}')
	        })
	      } else {
	        v = onoptionMap(v, [])
	        if (v.length) result.push(k + ' {', v, '}')
	      }
	    } else {
	      if (type === 'string') v = '"' + v + '"'
	      result.push(k + ': ' + v)
	    }
	  })
	
	  return result
	}
	
	var onservices = function (s, result) {
	  result.push('service ' + s.name + ' {')
	
	  if (!s.options) s.options = {}
	
	  onoption(s.options, result)
	
	  if (!s.methods) s.methods = []
	  s.methods.forEach(function (m) {
	    result.push(onrpc(m, []))
	  })
	
	  result.push('}', '')
	  return result
	}
	
	var onrpc = function (rpc, result) {
	  var def = 'rpc ' + rpc.name + '('
	  if (rpc.client_streaming) def += 'stream '
	  def += rpc.input_type + ') returns ('
	  if (rpc.server_streaming) def += 'stream '
	  def += rpc.output_type + ')'
	
	  if (!rpc.options) rpc.options = {}
	
	  var options = onoption(rpc.options, [])
	  if (options.length > 1) {
	    result.push(def + ' {', options.slice(0, -1), '}')
	  } else {
	    result.push(def + ';')
	  }
	
	  return result
	}
	
	var indent = function (lvl) {
	  return function (line) {
	    if (Array.isArray(line)) return line.map(indent(lvl + '  ')).join('\n')
	    return lvl + line
	  }
	}
	
	module.exports = function (schema) {
	  var result = []
	
	  result.push('syntax = "proto' + schema.syntax + '";', '')
	
	  if (schema.package) result.push('package ' + schema.package + ';', '')
	
	  if (!schema.options) schema.options = {}
	
	  onoption(schema.options, result)
	
	  if (!schema.enums) schema.enums = []
	  schema.enums.forEach(function (e) {
	    onenum(e, result)
	  })
	
	  if (!schema.messages) schema.messages = []
	  schema.messages.forEach(function (m) {
	    onmessage(m, result)
	  })
	
	  if (schema.services) {
	    schema.services.forEach(function (s) {
	      onservices(s, result)
	    })
	  }
	
	  return result.map(indent('')).join('\n')
	}


/***/ },
/* 1189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/* eslint-disable no-spaced-func */
	/* eslint-disable no-unexpected-multiline */
	var encodings = __webpack_require__(1190)
	var varint = __webpack_require__(1191)
	var genobj = __webpack_require__(1200)
	var genfun = __webpack_require__(1202)
	
	var skip = function (type, buffer, offset) {
	  switch (type) {
	    case 0:
	      varint.decode(buffer, offset)
	      return offset + varint.decode.bytes
	
	    case 1:
	      return offset + 8
	
	    case 2:
	      var len = varint.decode(buffer, offset)
	      return offset + varint.decode.bytes + len
	
	    case 3:
	    case 4:
	      throw new Error('Groups are not supported')
	
	    case 5:
	      return offset + 4
	  }
	
	  throw new Error('Unknown wire type: ' + type)
	}
	
	var defined = function (val) {
	  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
	}
	
	var isString = function (def) {
	  try {
	    return !!def && typeof JSON.parse(def) === 'string'
	  } catch (err) {
	    return false
	  }
	}
	
	var defaultValue = function (f, def) {
	  if (f.map) return '{}'
	  if (f.repeated) return '[]'
	
	  switch (f.type) {
	    case 'string':
	      return isString(def) ? def : '""'
	
	    case 'bool':
	      if (def === 'true') return 'true'
	      return 'false'
	
	    case 'float':
	    case 'double':
	    case 'sfixed32':
	    case 'fixed32':
	    case 'varint':
	    case 'enum':
	    case 'uint64':
	    case 'uint32':
	    case 'int64':
	    case 'int32':
	    case 'sint64':
	    case 'sint32':
	      return '' + Number(def || 0)
	
	    default:
	      return 'null'
	  }
	}
	
	module.exports = function (schema, extraEncodings) {
	  var messages = {}
	  var enums = {}
	  var cache = {}
	
	  var visit = function (schema, prefix) {
	    if (schema.enums) {
	      schema.enums.forEach(function (e) {
	        e.id = prefix + (prefix ? '.' : '') + e.name
	        enums[e.id] = e
	        visit(e, e.id)
	      })
	    }
	    if (schema.messages) {
	      schema.messages.forEach(function (m) {
	        m.id = prefix + (prefix ? '.' : '') + m.name
	        messages[m.id] = m
	        m.fields.forEach(function (f) {
	          if (!f.map) return
	
	          var name = 'Map_' + f.map.from + '_' + f.map.to
	          var map = {
	            name: name,
	            enums: [],
	            messages: [],
	            fields: [{
	              name: 'key',
	              type: f.map.from,
	              tag: 1,
	              repeated: false,
	              required: true
	            }, {
	              name: 'value',
	              type: f.map.to,
	              tag: 2,
	              repeated: false,
	              required: false
	            }],
	            extensions: null,
	            id: prefix + (prefix ? '.' : '') + name
	          }
	
	          if (!messages[map.id]) {
	            messages[map.id] = map
	            schema.messages.push(map)
	          }
	          f.type = name
	          f.repeated = true
	        })
	        visit(m, m.id)
	      })
	    }
	  }
	
	  visit(schema, '')
	
	  var compileEnum = function (e) {
	    var conditions = Object.keys(e.values)
	      .map(function (k) {
	        return 'val !== ' + parseInt(e.values[k], 10)
	      })
	      .join(' && ')
	
	    if (!conditions) conditions = 'true'
	
	    var encode = genfun()
	      ('function encode (val, buf, offset) {')
	        ('if (%s) throw new Error("Invalid enum value: "+val)', conditions)
	        ('varint.encode(val, buf, offset)')
	        ('encode.bytes = varint.encode.bytes')
	        ('return buf')
	      ('}')
	      .toFunction({
	        varint: varint
	      })
	
	    var decode = genfun()
	      ('function decode (buf, offset) {')
	        ('var val = varint.decode(buf, offset)')
	        ('if (%s) throw new Error("Invalid enum value: "+val)', conditions)
	        ('decode.bytes = varint.decode.bytes')
	        ('return val')
	      ('}')
	      .toFunction({
	        varint: varint
	      })
	
	    return encodings.make(0, encode, decode, varint.encodingLength)
	  }
	
	  var compileMessage = function (m, exports) {
	    m.messages.forEach(function (nested) {
	      exports[nested.name] = resolve(nested.name, m.id)
	    })
	
	    m.enums.forEach(function (val) {
	      exports[val.name] = val.values
	    })
	
	    exports.type = 2
	    exports.message = true
	    exports.name = m.name
	
	    var oneofs = {}
	
	    m.fields.forEach(function (f) {
	      if (!f.oneof) return
	      if (!oneofs[f.oneof]) oneofs[f.oneof] = []
	      oneofs[f.oneof].push(f.name)
	    })
	
	    var enc = m.fields.map(function (f) {
	      return resolve(f.type, m.id)
	    })
	
	    var forEach = function (fn) {
	      for (var i = 0; i < enc.length; i++) fn(enc[i], m.fields[i], genobj('obj', m.fields[i].name), i)
	    }
	
	    // compile encodingLength
	
	    var encodingLength = genfun()
	      ('function encodingLength (obj) {')
	        ('var length = 0')
	
	    Object.keys(oneofs).forEach(function (name) {
	      var msg = JSON.stringify('only one of the properties defined in oneof ' + name + ' can be set')
	      var cnt = oneofs[name]
	        .map(function (prop) {
	          return '+defined(' + genobj('obj', prop) + ')'
	        })
	        .join(' + ')
	
	      encodingLength('if ((%s) > 1) throw new Error(%s)', cnt, msg)
	    })
	
	    forEach(function (e, f, val, i) {
	      var packed = f.repeated && f.options && f.options.packed && f.options.packed !== 'false'
	      var hl = varint.encodingLength(f.tag << 3 | e.type)
	
	      if (f.required) encodingLength('if (!defined(%s)) throw new Error(%s)', val, JSON.stringify(f.name + ' is required'))
	      else encodingLength('if (defined(%s)) {', val)
	
	      if (f.map) {
	        encodingLength()
	          ('var tmp = Object.keys(%s)', val)
	          ('for (var i = 0; i < tmp.length; i++) {')
	            ('tmp[i] = {key: tmp[i], value: %s[tmp[i]]}', val)
	          ('}')
	        val = 'tmp'
	      }
	
	      if (packed) {
	        encodingLength()
	          ('var packedLen = 0')
	          ('for (var i = 0; i < %s.length; i++) {', val)
	            ('if (!defined(%s)) continue', val + '[i]')
	            ('var len = enc[%d].encodingLength(%s)', i, val + '[i]')
	            ('packedLen += len')
	
	        if (e.message) encodingLength('packedLen += varint.encodingLength(len)')
	
	        encodingLength('}')
	          ('if (packedLen) {')
	            ('length += %d + packedLen + varint.encodingLength(packedLen)', hl)
	          ('}')
	      } else {
	        if (f.repeated) {
	          encodingLength('for (var i = 0; i < %s.length; i++) {', val)
	          val += '[i]'
	          encodingLength('if (!defined(%s)) continue', val)
	        }
	
	        encodingLength('var len = enc[%d].encodingLength(%s)', i, val)
	        if (e.message) encodingLength('length += varint.encodingLength(len)')
	        encodingLength('length += %d + len', hl)
	        if (f.repeated) encodingLength('}')
	      }
	
	      if (!f.required) encodingLength('}')
	    })
	
	    encodingLength()
	        ('return length')
	      ('}')
	
	    encodingLength = encodingLength.toFunction({
	      defined: defined,
	      varint: varint,
	      enc: enc
	    })
	
	    // compile encode
	
	    var encode = genfun()
	      ('function encode (obj, buf, offset) {')
	        ('if (!offset) offset = 0')
	        ('if (!buf) buf = new Buffer(encodingLength(obj))')
	        ('var oldOffset = offset')
	
	    Object.keys(oneofs).forEach(function (name) {
	      var msg = JSON.stringify('only one of the properties defined in oneof ' + name + ' can be set')
	      var cnt = oneofs[name]
	        .map(function (prop) {
	          return '+defined(' + genobj('obj', prop) + ')'
	        })
	        .join(' + ')
	
	      encode('if ((%s) > 1) throw new Error(%s)', cnt, msg)
	    })
	
	    forEach(function (e, f, val, i) {
	      if (f.required) encode('if (!defined(%s)) throw new Error(%s)', val, JSON.stringify(f.name + ' is required'))
	      else encode('if (defined(%s)) {', val)
	
	      var packed = f.repeated && f.options && f.options.packed && f.options.packed !== 'false'
	      var p = varint.encode(f.tag << 3 | 2)
	      var h = varint.encode(f.tag << 3 | e.type)
	      var j
	
	      if (f.map) {
	        encode()
	          ('var tmp = Object.keys(%s)', val)
	          ('for (var i = 0; i < tmp.length; i++) {')
	            ('tmp[i] = {key: tmp[i], value: %s[tmp[i]]}', val)
	          ('}')
	        val = 'tmp'
	      }
	
	      if (packed) {
	        encode()
	          ('var packedLen = 0')
	          ('for (var i = 0; i < %s.length; i++) {', val)
	            ('if (!defined(%s)) continue', val + '[i]')
	            ('packedLen += enc[%d].encodingLength(%s)', i, val + '[i]')
	          ('}')
	
	        encode('if (packedLen) {')
	        for (j = 0; j < h.length; j++) encode('buf[offset++] = %d', p[j])
	        encode('varint.encode(packedLen, buf, offset)')
	        encode('offset += varint.encode.bytes')
	        encode('}')
	      }
	
	      if (f.repeated) {
	        encode('for (var i = 0; i < %s.length; i++) {', val)
	        val += '[i]'
	        encode('if (!defined(%s)) continue', val)
	      }
	
	      if (!packed) for (j = 0; j < h.length; j++) encode('buf[offset++] = %d', h[j])
	
	      if (e.message) {
	        encode('varint.encode(enc[%d].encodingLength(%s), buf, offset)', i, val)
	        encode('offset += varint.encode.bytes')
	      }
	
	      encode('enc[%d].encode(%s, buf, offset)', i, val)
	      encode('offset += enc[%d].encode.bytes', i)
	
	      if (f.repeated) encode('}')
	      if (!f.required) encode('}')
	    })
	
	    encode()
	        ('encode.bytes = offset - oldOffset')
	        ('return buf')
	      ('}')
	
	    encode = encode.toFunction({
	      encodingLength: encodingLength,
	      defined: defined,
	      varint: varint,
	      enc: enc,
	      Buffer: Buffer
	    })
	
	    // compile decode
	
	    var invalid = m.fields
	      .map(function (f, i) {
	        return f.required && '!found' + i
	      })
	      .filter(function (f) {
	        return f
	      })
	      .join(' || ')
	
	    var decode = genfun()
	
	    var objectKeys = []
	    forEach(function (e, f) {
	      var def = f.options && f.options.default
	      var resolved = resolve(f.type, m.id, false)
	      var vals = resolved && resolved.values
	
	      if (vals) { // is enum
	        if (f.repeated) {
	          objectKeys.push(genobj.property(f.name) + ': []')
	        } else {
	          def = (def && def in vals) ? vals[def] : vals[Object.keys(vals)[0]]
	          objectKeys.push(genobj.property(f.name) + ': ' + parseInt(def || 0, 10))
	        }
	        return
	      }
	
	      if (!f.oneof) {
	        objectKeys.push(genobj.property(f.name) + ': ' + defaultValue(f, def))
	      }
	    })
	
	    decode()
	      ('function decode (buf, offset, end) {')
	        ('if (!offset) offset = 0')
	        ('if (!end) end = buf.length')
	        ('if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")')
	        ('var oldOffset = offset')
	        ('var obj = {')
	
	    objectKeys.forEach(function (prop, i) {
	      decode(prop + (i === objectKeys.length - 1 ? '' : ','))
	    })
	
	    decode('}')
	
	    forEach(function (e, f, val, i) {
	      if (f.required) decode('var found%d = false', i)
	    })
	
	    decode('while (true) {')
	      ('if (end <= offset) {')
	        (invalid && 'if (%s) throw new Error("Decoded message is not valid")', invalid)
	        ('decode.bytes = offset - oldOffset')
	        ('return obj')
	      ('}')
	      ('var prefix = varint.decode(buf, offset)')
	      ('offset += varint.decode.bytes')
	      ('var tag = prefix >> 3')
	      ('switch (tag) {')
	
	    forEach(function (e, f, val, i) {
	      var packed = f.repeated && f.options && f.options.packed && f.options.packed !== 'false'
	
	      decode('case %d:', f.tag)
	
	      if (f.oneof) {
	        m.fields.forEach(function (otherField) {
	          if (otherField.oneof === f.oneof && f.name !== otherField.name) {
	            decode('delete %s', genobj('obj', otherField.name))
	          }
	        })
	      }
	
	      if (packed) {
	        decode()
	          ('var packedEnd = varint.decode(buf, offset)')
	          ('offset += varint.decode.bytes')
	          ('packedEnd += offset')
	          ('while (offset < packedEnd) {')
	      }
	
	      if (e.message) {
	        decode('var len = varint.decode(buf, offset)')
	        decode('offset += varint.decode.bytes')
	        if (f.map) {
	          decode('var tmp = enc[%d].decode(buf, offset, offset + len)', i)
	          decode('%s[tmp.key] = tmp.value', val)
	        } else if (f.repeated) {
	          decode('%s.push(enc[%d].decode(buf, offset, offset + len))', val, i)
	        } else {
	          decode('%s = enc[%d].decode(buf, offset, offset + len)', val, i)
	        }
	      } else {
	        if (f.repeated) {
	          decode('%s.push(enc[%d].decode(buf, offset))', val, i)
	        } else {
	          decode('%s = enc[%d].decode(buf, offset)', val, i)
	        }
	      }
	
	      decode('offset += enc[%d].decode.bytes', i)
	
	      if (packed) decode('}')
	      if (f.required) decode('found%d = true', i)
	      decode('break')
	    })
	
	    decode()
	          ('default:')
	          ('offset = skip(prefix & 7, buf, offset)')
	        ('}')
	      ('}')
	    ('}')
	
	    decode = decode.toFunction({
	      varint: varint,
	      skip: skip,
	      enc: enc
	    })
	
	    // end of compilation - return all the things
	
	    encode.bytes = decode.bytes = 0
	
	    exports.buffer = true
	    exports.encode = encode
	    exports.decode = decode
	    exports.encodingLength = encodingLength
	
	    return exports
	  }
	
	  var resolve = function (name, from, compile) {
	    if (extraEncodings && extraEncodings[name]) return extraEncodings[name]
	    if (encodings[name]) return encodings[name]
	
	    var m = (from ? from + '.' + name : name).split('.')
	      .map(function (part, i, list) {
	        return list.slice(0, i).concat(name).join('.')
	      })
	      .reverse()
	      .reduce(function (result, id) {
	        return result || messages[id] || enums[id]
	      }, null)
	
	    if (compile === false) return m
	    if (!m) throw new Error('Could not resolve ' + name)
	
	    if (m.values) return compileEnum(m)
	    return cache[m.id] || compileMessage(m, cache[m.id] = {})
	  }
	
	  return (schema.enums || []).concat((schema.messages || []).map(function (message) {
	    return resolve(message.id)
	  }))
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1190 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var varint = __webpack_require__(1191)
	var svarint = __webpack_require__(1195)
	
	var encoder = function (type, encode, decode, encodingLength) {
	  encode.bytes = decode.bytes = 0
	
	  return {
	    type: type,
	    encode: encode,
	    decode: decode,
	    encodingLength: encodingLength
	  }
	}
	
	exports.make = encoder
	
	exports.bytes = (function (tag) {
	  var bufferLength = function (val) {
	    return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val)
	  }
	
	  var encodingLength = function (val) {
	    var len = bufferLength(val)
	    return varint.encodingLength(len) + len
	  }
	
	  var encode = function (val, buffer, offset) {
	    var oldOffset = offset
	    var len = bufferLength(val)
	
	    varint.encode(len, buffer, offset)
	    offset += varint.encode.bytes
	
	    if (Buffer.isBuffer(val)) val.copy(buffer, offset)
	    else buffer.write(val, offset, len)
	    offset += len
	
	    encode.bytes = offset - oldOffset
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var oldOffset = offset
	
	    var len = varint.decode(buffer, offset)
	    offset += varint.decode.bytes
	
	    var val = buffer.slice(offset, offset + len)
	    offset += val.length
	
	    decode.bytes = offset - oldOffset
	    return val
	  }
	
	  return encoder(2, encode, decode, encodingLength)
	})()
	
	exports.string = (function () {
	  var encodingLength = function (val) {
	    var len = Buffer.byteLength(val)
	    return varint.encodingLength(len) + len
	  }
	
	  var encode = function (val, buffer, offset) {
	    var oldOffset = offset
	    var len = Buffer.byteLength(val)
	
	    varint.encode(len, buffer, offset, 'utf-8')
	    offset += varint.encode.bytes
	
	    buffer.write(val, offset, len)
	    offset += len
	
	    encode.bytes = offset - oldOffset
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var oldOffset = offset
	
	    var len = varint.decode(buffer, offset)
	    offset += varint.decode.bytes
	
	    var val = buffer.toString('utf-8', offset, offset + len)
	    offset += len
	
	    decode.bytes = offset - oldOffset
	    return val
	  }
	
	  return encoder(2, encode, decode, encodingLength)
	})()
	
	exports.bool = (function () {
	  var encodingLength = function (val) {
	    return 1
	  }
	
	  var encode = function (val, buffer, offset) {
	    buffer[offset] = val ? 1 : 0
	    encode.bytes = 1
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var bool = buffer[offset] > 0
	    decode.bytes = 1
	    return bool
	  }
	
	  return encoder(0, encode, decode, encodingLength)
	})()
	
	exports.int32 = (function () {
	  var decode = function (buffer, offset) {
	    var val = varint.decode(buffer, offset)
	    decode.bytes = varint.decode.bytes
	    return val > 2147483647 ? val - 4294967296 : val
	  }
	
	  var encode = function (val, buffer, offset) {
	    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset)
	    encode.bytes = varint.encode.bytes
	    return buffer
	  }
	
	  var encodingLength = function (val) {
	    return varint.encodingLength(val < 0 ? val + 4294967296 : val)
	  }
	
	  return encoder(0, varint.encode, decode, encodingLength)
	})()
	
	exports.int64 = (function () {
	  var decode = function (buffer, offset) {
	    var val = varint.decode(buffer, offset)
	    if (val >= Math.pow(2, 63)) {
	      var limit = 9
	      while (buffer[offset + limit - 1] === 0xff) limit--
	      limit = limit || 9
	      var subset = new Buffer(limit)
	      buffer.copy(subset, 0, offset, offset + limit)
	      subset[limit - 1] = subset[limit - 1] & 0x7f
	      val = -1 * varint.decode(subset, 0)
	      decode.bytes = 10
	    } else {
	      decode.bytes = varint.decode.bytes
	    }
	    return val
	  }
	
	  var encode = function (val, buffer, offset) {
	    if (val < 0) {
	      var last = offset + 9
	      varint.encode(val * -1, buffer, offset)
	      offset += varint.encode.bytes - 1
	      buffer[offset] = buffer[offset] | 0x80
	      while (offset < last - 1) {
	        offset++
	        buffer[offset] = 0xff
	      }
	      buffer[last] = 0x01
	      encode.bytes = 10
	    } else {
	      varint.encode(val, buffer, offset)
	      encode.bytes = varint.encode.bytes
	    }
	    return buffer
	  }
	
	  var encodingLength = function (val) {
	    return val < 0 ? 10 : varint.encodingLength(val)
	  }
	
	  return encoder(0, encode, decode, encodingLength)
	})()
	
	exports.sint32 =
	exports.sint64 = (function () {
	  return encoder(0, svarint.encode, svarint.decode, svarint.encodingLength)
	})()
	
	exports.uint32 =
	exports.uint64 =
	exports.enum =
	exports.varint = (function () {
	  return encoder(0, varint.encode, varint.decode, varint.encodingLength)
	})()
	
	// we cannot represent these in javascript so we just use buffers
	exports.fixed64 =
	exports.sfixed64 = (function () {
	  var encodingLength = function (val) {
	    return 8
	  }
	
	  var encode = function (val, buffer, offset) {
	    val.copy(buffer, offset)
	    encode.bytes = 8
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var val = buffer.slice(offset, offset + 8)
	    decode.bytes = 8
	    return val
	  }
	
	  return encoder(1, encode, decode, encodingLength)
	})()
	
	exports.double = (function () {
	  var encodingLength = function (val) {
	    return 8
	  }
	
	  var encode = function (val, buffer, offset) {
	    buffer.writeDoubleLE(val, offset)
	    encode.bytes = 8
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var val = buffer.readDoubleLE(offset)
	    decode.bytes = 8
	    return val
	  }
	
	  return encoder(1, encode, decode, encodingLength)
	})()
	
	exports.fixed32 = (function () {
	  var encodingLength = function (val) {
	    return 4
	  }
	
	  var encode = function (val, buffer, offset) {
	    buffer.writeUInt32LE(val, offset)
	    encode.bytes = 4
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var val = buffer.readUInt32LE(offset)
	    decode.bytes = 4
	    return val
	  }
	
	  return encoder(5, encode, decode, encodingLength)
	})()
	
	exports.sfixed32 = (function () {
	  var encodingLength = function (val) {
	    return 4
	  }
	
	  var encode = function (val, buffer, offset) {
	    buffer.writeInt32LE(val, offset)
	    encode.bytes = 4
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var val = buffer.readInt32LE(offset)
	    decode.bytes = 4
	    return val
	  }
	
	  return encoder(5, encode, decode, encodingLength)
	})()
	
	exports.float = (function () {
	  var encodingLength = function (val) {
	    return 4
	  }
	
	  var encode = function (val, buffer, offset) {
	    buffer.writeFloatLE(val, offset)
	    encode.bytes = 4
	    return buffer
	  }
	
	  var decode = function (buffer, offset) {
	    var val = buffer.readFloatLE(offset)
	    decode.bytes = 4
	    return val
	  }
	
	  return encoder(5, encode, decode, encodingLength)
	})()
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1191 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	    encode: __webpack_require__(1192)
	  , decode: __webpack_require__(1193)
	  , encodingLength: __webpack_require__(1194)
	}


/***/ },
/* 1192 */
/***/ function(module, exports) {

	module.exports = encode
	
	var MSB = 0x80
	  , REST = 0x7F
	  , MSBALL = ~REST
	  , INT = Math.pow(2, 31)
	
	function encode(num, out, offset) {
	  out = out || []
	  offset = offset || 0
	  var oldOffset = offset
	
	  while(num >= INT) {
	    out[offset++] = (num & 0xFF) | MSB
	    num /= 128
	  }
	  while(num & MSBALL) {
	    out[offset++] = (num & 0xFF) | MSB
	    num >>>= 7
	  }
	  out[offset] = num | 0
	  
	  encode.bytes = offset - oldOffset + 1
	  
	  return out
	}


/***/ },
/* 1193 */
/***/ function(module, exports) {

	module.exports = read
	
	var MSB = 0x80
	  , REST = 0x7F
	
	function read(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length
	
	  do {
	    if(counter >= l) {
	      read.bytes = 0
	      read.bytesRead = 0 // DEPRECATED
	      return undefined
	    }
	    b = buf[counter++]
	    res += shift < 28
	      ? (b & REST) << shift
	      : (b & REST) * Math.pow(2, shift)
	    shift += 7
	  } while (b >= MSB)
	
	  read.bytes = counter - offset
	
	  return res
	}


/***/ },
/* 1194 */
/***/ function(module, exports) {

	
	var N1 = Math.pow(2,  7)
	var N2 = Math.pow(2, 14)
	var N3 = Math.pow(2, 21)
	var N4 = Math.pow(2, 28)
	var N5 = Math.pow(2, 35)
	var N6 = Math.pow(2, 42)
	var N7 = Math.pow(2, 49)
	var N8 = Math.pow(2, 56)
	var N9 = Math.pow(2, 63)
	
	module.exports = function (value) {
	  return (
	    value < N1 ? 1
	  : value < N2 ? 2
	  : value < N3 ? 3
	  : value < N4 ? 4
	  : value < N5 ? 5
	  : value < N6 ? 6
	  : value < N7 ? 7
	  : value < N8 ? 8
	  : value < N9 ? 9
	  :              10
	  )
	}


/***/ },
/* 1195 */
/***/ function(module, exports, __webpack_require__) {

	var varint = __webpack_require__(1196)
	exports.encode = function encode (v, b, o) {
	  v = v >= 0 ? v*2 : v*-2 - 1
	  var r = varint.encode(v, b, o)
	  encode.bytes = varint.encode.bytes
	  return r
	}
	exports.decode = function decode (b, o) {
	  var v = varint.decode(b, o)
	  decode.bytes = varint.decode.bytes
	  return v & 1 ? (v+1) / -2 : v / 2
	}
	
	exports.encodingLength = function (v) {
	  return varint.encodingLength(v >= 0 ? v*2 : v*-2 - 1)
	}


/***/ },
/* 1196 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	    encode: __webpack_require__(1197)
	  , decode: __webpack_require__(1198)
	  , encodingLength: __webpack_require__(1199)
	}


/***/ },
/* 1197 */
/***/ function(module, exports) {

	module.exports = encode
	
	var MSB = 0x80
	  , REST = 0x7F
	  , MSBALL = ~REST
	  , INT = Math.pow(2, 31)
	
	function encode(num, out, offset) {
	  out = out || []
	  offset = offset || 0
	  var oldOffset = offset
	
	  while(num >= INT) {
	    out[offset++] = (num & 0xFF) | MSB
	    num /= 128
	  }
	  while(num & MSBALL) {
	    out[offset++] = (num & 0xFF) | MSB
	    num >>>= 7
	  }
	  out[offset] = num | 0
	  
	  encode.bytes = offset - oldOffset + 1
	  
	  return out
	}


/***/ },
/* 1198 */
/***/ function(module, exports) {

	module.exports = read
	
	var MSB = 0x80
	  , REST = 0x7F
	
	function read(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length
	  
	  do {
	    if(counter >= l) {
	      read.bytesRead = 0
	      return undefined
	    }
	    b = buf[counter++]
	    res += shift < 28
	      ? (b & REST) << shift
	      : (b & REST) * Math.pow(2, shift)
	    shift += 7
	  } while (b >= MSB)
	  
	  read.bytes = counter - offset
	  
	  return res
	}


/***/ },
/* 1199 */
/***/ function(module, exports) {

	
	var N1 = Math.pow(2,  7)
	var N2 = Math.pow(2, 14)
	var N3 = Math.pow(2, 21)
	var N4 = Math.pow(2, 28)
	var N5 = Math.pow(2, 35)
	var N6 = Math.pow(2, 42)
	var N7 = Math.pow(2, 49)
	
	module.exports = function (value) {
	  return (
	    value < N1 ? 1
	  : value < N2 ? 2
	  : value < N3 ? 3
	  : value < N4 ? 4
	  : value < N5 ? 5
	  : value < N6 ? 6
	  : value < N7 ? 7
	  :              8
	  )
	}


/***/ },
/* 1200 */
/***/ function(module, exports, __webpack_require__) {

	var isProperty = __webpack_require__(1201)
	
	var gen = function(obj, prop) {
	  return isProperty(prop) ? obj+'.'+prop : obj+'['+JSON.stringify(prop)+']'
	}
	
	gen.valid = isProperty
	gen.property = function (prop) {
	 return isProperty(prop) ? prop : JSON.stringify(prop)
	}
	
	module.exports = gen


/***/ },
/* 1201 */
/***/ function(module, exports) {

	"use strict"
	function isProperty(str) {
	  return /^[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*$/.test(str)
	}
	module.exports = isProperty

/***/ },
/* 1202 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(1130)
	
	var INDENT_START = /[\{\[]/
	var INDENT_END = /[\}\]]/
	
	module.exports = function() {
	  var lines = []
	  var indent = 0
	
	  var push = function(str) {
	    var spaces = ''
	    while (spaces.length < indent*2) spaces += '  '
	    lines.push(spaces+str)
	  }
	
	  var line = function(fmt) {
	    if (!fmt) return line
	
	    if (INDENT_END.test(fmt.trim()[0]) && INDENT_START.test(fmt[fmt.length-1])) {
	      indent--
	      push(util.format.apply(util, arguments))
	      indent++
	      return line
	    }
	    if (INDENT_START.test(fmt[fmt.length-1])) {
	      push(util.format.apply(util, arguments))
	      indent++
	      return line
	    }
	    if (INDENT_END.test(fmt.trim()[0])) {
	      indent--
	      push(util.format.apply(util, arguments))
	      return line
	    }
	
	    push(util.format.apply(util, arguments))
	    return line
	  }
	
	  line.toString = function() {
	    return lines.join('\n')
	  }
	
	  line.toFunction = function(scope) {
	    var src = 'return ('+line.toString()+')'
	
	    var keys = Object.keys(scope || {}).map(function(key) {
	      return key
	    })
	
	    var vals = keys.map(function(key) {
	      return scope[key]
	    })
	
	    return Function.apply(null, keys.concat(src)).apply(null, vals)
	  }
	
	  if (arguments.length) line.apply(null, arguments)
	
	  return line
	}


/***/ },
/* 1203 */,
/* 1204 */,
/* 1205 */
/***/ function(module, exports) {

	var traverse = module.exports = function (obj) {
	    return new Traverse(obj);
	};
	
	function Traverse (obj) {
	    this.value = obj;
	}
	
	Traverse.prototype.get = function (ps) {
	    var node = this.value;
	    for (var i = 0; i < ps.length; i ++) {
	        var key = ps[i];
	        if (!node || !hasOwnProperty.call(node, key)) {
	            node = undefined;
	            break;
	        }
	        node = node[key];
	    }
	    return node;
	};
	
	Traverse.prototype.has = function (ps) {
	    var node = this.value;
	    for (var i = 0; i < ps.length; i ++) {
	        var key = ps[i];
	        if (!node || !hasOwnProperty.call(node, key)) {
	            return false;
	        }
	        node = node[key];
	    }
	    return true;
	};
	
	Traverse.prototype.set = function (ps, value) {
	    var node = this.value;
	    for (var i = 0; i < ps.length - 1; i ++) {
	        var key = ps[i];
	        if (!hasOwnProperty.call(node, key)) node[key] = {};
	        node = node[key];
	    }
	    node[ps[i]] = value;
	    return value;
	};
	
	Traverse.prototype.map = function (cb) {
	    return walk(this.value, cb, true);
	};
	
	Traverse.prototype.forEach = function (cb) {
	    this.value = walk(this.value, cb, false);
	    return this.value;
	};
	
	Traverse.prototype.reduce = function (cb, init) {
	    var skip = arguments.length === 1;
	    var acc = skip ? this.value : init;
	    this.forEach(function (x) {
	        if (!this.isRoot || !skip) {
	            acc = cb.call(this, acc, x);
	        }
	    });
	    return acc;
	};
	
	Traverse.prototype.paths = function () {
	    var acc = [];
	    this.forEach(function (x) {
	        acc.push(this.path); 
	    });
	    return acc;
	};
	
	Traverse.prototype.nodes = function () {
	    var acc = [];
	    this.forEach(function (x) {
	        acc.push(this.node);
	    });
	    return acc;
	};
	
	Traverse.prototype.clone = function () {
	    var parents = [], nodes = [];
	    
	    return (function clone (src) {
	        for (var i = 0; i < parents.length; i++) {
	            if (parents[i] === src) {
	                return nodes[i];
	            }
	        }
	        
	        if (typeof src === 'object' && src !== null) {
	            var dst = copy(src);
	            
	            parents.push(src);
	            nodes.push(dst);
	            
	            forEach(objectKeys(src), function (key) {
	                dst[key] = clone(src[key]);
	            });
	            
	            parents.pop();
	            nodes.pop();
	            return dst;
	        }
	        else {
	            return src;
	        }
	    })(this.value);
	};
	
	function walk (root, cb, immutable) {
	    var path = [];
	    var parents = [];
	    var alive = true;
	    
	    return (function walker (node_) {
	        var node = immutable ? copy(node_) : node_;
	        var modifiers = {};
	        
	        var keepGoing = true;
	        
	        var state = {
	            node : node,
	            node_ : node_,
	            path : [].concat(path),
	            parent : parents[parents.length - 1],
	            parents : parents,
	            key : path.slice(-1)[0],
	            isRoot : path.length === 0,
	            level : path.length,
	            circular : null,
	            update : function (x, stopHere) {
	                if (!state.isRoot) {
	                    state.parent.node[state.key] = x;
	                }
	                state.node = x;
	                if (stopHere) keepGoing = false;
	            },
	            'delete' : function (stopHere) {
	                delete state.parent.node[state.key];
	                if (stopHere) keepGoing = false;
	            },
	            remove : function (stopHere) {
	                if (isArray(state.parent.node)) {
	                    state.parent.node.splice(state.key, 1);
	                }
	                else {
	                    delete state.parent.node[state.key];
	                }
	                if (stopHere) keepGoing = false;
	            },
	            keys : null,
	            before : function (f) { modifiers.before = f },
	            after : function (f) { modifiers.after = f },
	            pre : function (f) { modifiers.pre = f },
	            post : function (f) { modifiers.post = f },
	            stop : function () { alive = false },
	            block : function () { keepGoing = false }
	        };
	        
	        if (!alive) return state;
	        
	        function updateState() {
	            if (typeof state.node === 'object' && state.node !== null) {
	                if (!state.keys || state.node_ !== state.node) {
	                    state.keys = objectKeys(state.node)
	                }
	                
	                state.isLeaf = state.keys.length == 0;
	                
	                for (var i = 0; i < parents.length; i++) {
	                    if (parents[i].node_ === node_) {
	                        state.circular = parents[i];
	                        break;
	                    }
	                }
	            }
	            else {
	                state.isLeaf = true;
	                state.keys = null;
	            }
	            
	            state.notLeaf = !state.isLeaf;
	            state.notRoot = !state.isRoot;
	        }
	        
	        updateState();
	        
	        // use return values to update if defined
	        var ret = cb.call(state, state.node);
	        if (ret !== undefined && state.update) state.update(ret);
	        
	        if (modifiers.before) modifiers.before.call(state, state.node);
	        
	        if (!keepGoing) return state;
	        
	        if (typeof state.node == 'object'
	        && state.node !== null && !state.circular) {
	            parents.push(state);
	            
	            updateState();
	            
	            forEach(state.keys, function (key, i) {
	                path.push(key);
	                
	                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
	                
	                var child = walker(state.node[key]);
	                if (immutable && hasOwnProperty.call(state.node, key)) {
	                    state.node[key] = child.node;
	                }
	                
	                child.isLast = i == state.keys.length - 1;
	                child.isFirst = i == 0;
	                
	                if (modifiers.post) modifiers.post.call(state, child);
	                
	                path.pop();
	            });
	            parents.pop();
	        }
	        
	        if (modifiers.after) modifiers.after.call(state, state.node);
	        
	        return state;
	    })(root).node;
	}
	
	function copy (src) {
	    if (typeof src === 'object' && src !== null) {
	        var dst;
	        
	        if (isArray(src)) {
	            dst = [];
	        }
	        else if (isDate(src)) {
	            dst = new Date(src.getTime ? src.getTime() : src);
	        }
	        else if (isRegExp(src)) {
	            dst = new RegExp(src);
	        }
	        else if (isError(src)) {
	            dst = { message: src.message };
	        }
	        else if (isBoolean(src)) {
	            dst = new Boolean(src);
	        }
	        else if (isNumber(src)) {
	            dst = new Number(src);
	        }
	        else if (isString(src)) {
	            dst = new String(src);
	        }
	        else if (Object.create && Object.getPrototypeOf) {
	            dst = Object.create(Object.getPrototypeOf(src));
	        }
	        else if (src.constructor === Object) {
	            dst = {};
	        }
	        else {
	            var proto =
	                (src.constructor && src.constructor.prototype)
	                || src.__proto__
	                || {}
	            ;
	            var T = function () {};
	            T.prototype = proto;
	            dst = new T;
	        }
	        
	        forEach(objectKeys(src), function (key) {
	            dst[key] = src[key];
	        });
	        return dst;
	    }
	    else return src;
	}
	
	var objectKeys = Object.keys || function keys (obj) {
	    var res = [];
	    for (var key in obj) res.push(key)
	    return res;
	};
	
	function toS (obj) { return Object.prototype.toString.call(obj) }
	function isDate (obj) { return toS(obj) === '[object Date]' }
	function isRegExp (obj) { return toS(obj) === '[object RegExp]' }
	function isError (obj) { return toS(obj) === '[object Error]' }
	function isBoolean (obj) { return toS(obj) === '[object Boolean]' }
	function isNumber (obj) { return toS(obj) === '[object Number]' }
	function isString (obj) { return toS(obj) === '[object String]' }
	
	var isArray = Array.isArray || function isArray (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};
	
	forEach(objectKeys(Traverse.prototype), function (key) {
	    traverse[key] = function (obj) {
	        var args = [].slice.call(arguments, 1);
	        var t = new Traverse(obj);
	        return t[key].apply(t, args);
	    };
	});
	
	var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
	    return key in obj;
	};


/***/ },
/* 1206 */,
/* 1207 */,
/* 1208 */
/***/ function(module, exports, __webpack_require__) {

	var once = __webpack_require__(1052)
	var eos = __webpack_require__(1209)
	var fs = __webpack_require__(1211) // we only need fs to get the ReadStream and WriteStream prototypes
	
	var noop = function () {}
	
	var isFn = function (fn) {
	  return typeof fn === 'function'
	}
	
	var isFS = function (stream) {
	  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)
	}
	
	var isRequest = function (stream) {
	  return stream.setHeader && isFn(stream.abort)
	}
	
	var destroyer = function (stream, reading, writing, callback) {
	  callback = once(callback)
	
	  var closed = false
	  stream.on('close', function () {
	    closed = true
	  })
	
	  eos(stream, {readable: reading, writable: writing}, function (err) {
	    if (err) return callback(err)
	    closed = true
	    callback()
	  })
	
	  var destroyed = false
	  return function (err) {
	    if (closed) return
	    if (destroyed) return
	    destroyed = true
	
	    if (isFS(stream)) return stream.close() // use close for fs streams to avoid fd leaks
	    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want
	
	    if (isFn(stream.destroy)) return stream.destroy()
	
	    callback(err || new Error('stream was destroyed'))
	  }
	}
	
	var call = function (fn) {
	  fn()
	}
	
	var pipe = function (from, to) {
	  return from.pipe(to)
	}
	
	var pump = function () {
	  var streams = Array.prototype.slice.call(arguments)
	  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop
	
	  if (Array.isArray(streams[0])) streams = streams[0]
	  if (streams.length < 2) throw new Error('pump requires two streams per minimum')
	
	  var error
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1
	    var writing = i > 0
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err
	      if (err) destroys.forEach(call)
	      if (reading) return
	      destroys.forEach(call)
	      callback(error)
	    })
	  })
	
	  return streams.reduce(pipe)
	}
	
	module.exports = pump


/***/ },
/* 1209 */
/***/ function(module, exports, __webpack_require__) {

	var once = __webpack_require__(1210);
	
	var noop = function() {};
	
	var isRequest = function(stream) {
		return stream.setHeader && typeof stream.abort === 'function';
	};
	
	var isChildProcess = function(stream) {
		return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
	};
	
	var eos = function(stream, opts, callback) {
		if (typeof opts === 'function') return eos(stream, null, opts);
		if (!opts) opts = {};
	
		callback = once(callback || noop);
	
		var ws = stream._writableState;
		var rs = stream._readableState;
		var readable = opts.readable || (opts.readable !== false && stream.readable);
		var writable = opts.writable || (opts.writable !== false && stream.writable);
	
		var onlegacyfinish = function() {
			if (!stream.writable) onfinish();
		};
	
		var onfinish = function() {
			writable = false;
			if (!readable) callback();
		};
	
		var onend = function() {
			readable = false;
			if (!writable) callback();
		};
	
		var onexit = function(exitCode) {
			callback(exitCode ? new Error('exited with error code: ' + exitCode) : null);
		};
	
		var onclose = function() {
			if (readable && !(rs && rs.ended)) return callback(new Error('premature close'));
			if (writable && !(ws && ws.ended)) return callback(new Error('premature close'));
		};
	
		var onrequest = function() {
			stream.req.on('finish', onfinish);
		};
	
		if (isRequest(stream)) {
			stream.on('complete', onfinish);
			stream.on('abort', onclose);
			if (stream.req) onrequest();
			else stream.on('request', onrequest);
		} else if (writable && !ws) { // legacy streams
			stream.on('end', onlegacyfinish);
			stream.on('close', onlegacyfinish);
		}
	
		if (isChildProcess(stream)) stream.on('exit', onexit);
	
		stream.on('end', onend);
		stream.on('finish', onfinish);
		if (opts.error !== false) stream.on('error', callback);
		stream.on('close', onclose);
	
		return function() {
			stream.removeListener('complete', onfinish);
			stream.removeListener('abort', onclose);
			stream.removeListener('request', onrequest);
			if (stream.req) stream.req.removeListener('finish', onfinish);
			stream.removeListener('end', onlegacyfinish);
			stream.removeListener('close', onlegacyfinish);
			stream.removeListener('finish', onfinish);
			stream.removeListener('exit', onexit);
			stream.removeListener('end', onend);
			stream.removeListener('error', callback);
			stream.removeListener('close', onclose);
		};
	};
	
	module.exports = eos;

/***/ },
/* 1210 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(1053)
	module.exports = wrappy(once)
	
	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	})
	
	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}


/***/ },
/* 1211 */
/***/ function(module, exports) {



/***/ },
/* 1212 */
/***/ function(module, exports) {

	var isError = function(err) { // inlined from util so this works in the browser
		return Object.prototype.toString.call(err) === '[object Error]';
	};
	
	var thunky = function(fn) {
		var run = function(callback) {
			var stack = [callback];
	
			state = function(callback) {
				stack.push(callback);
			};
	
			fn(function(err) {
				var args = arguments;
				var apply = function(callback) {
					if (callback) callback.apply(null, args);
				};
	
				state = isError(err) ? run : apply;
				while (stack.length) apply(stack.shift());
			});
		};
	
		var state = run;
	
		return function(callback) {
			state(callback);
		};
	};
	
	module.exports = thunky;

/***/ },
/* 1213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Transform = __webpack_require__(1214)
	  , inherits  = __webpack_require__(1130).inherits
	  , xtend     = __webpack_require__(859)
	
	function DestroyableTransform(opts) {
	  Transform.call(this, opts)
	  this._destroyed = false
	}
	
	inherits(DestroyableTransform, Transform)
	
	DestroyableTransform.prototype.destroy = function(err) {
	  if (this._destroyed) return
	  this._destroyed = true
	  
	  var self = this
	  process.nextTick(function() {
	    if (err)
	      self.emit('error', err)
	    self.emit('close')
	  })
	}
	
	// a noop _transform function
	function noop (chunk, enc, callback) {
	  callback(null, chunk)
	}
	
	
	// create a new export function, used by both the main export and
	// the .ctor export, contains common logic for dealing with arguments
	function through2 (construct) {
	  return function (options, transform, flush) {
	    if (typeof options == 'function') {
	      flush     = transform
	      transform = options
	      options   = {}
	    }
	
	    if (typeof transform != 'function')
	      transform = noop
	
	    if (typeof flush != 'function')
	      flush = null
	
	    return construct(options, transform, flush)
	  }
	}
	
	
	// main export, just make me a transform stream!
	module.exports = through2(function (options, transform, flush) {
	  var t2 = new DestroyableTransform(options)
	
	  t2._transform = transform
	
	  if (flush)
	    t2._flush = flush
	
	  return t2
	})
	
	
	// make me a reusable prototype that I can `new`, or implicitly `new`
	// with a constructor call
	module.exports.ctor = through2(function (options, transform, flush) {
	  function Through2 (override) {
	    if (!(this instanceof Through2))
	      return new Through2(override)
	
	    this.options = xtend(options, override)
	
	    DestroyableTransform.call(this, this.options)
	  }
	
	  inherits(Through2, DestroyableTransform)
	
	  Through2.prototype._transform = transform
	
	  if (flush)
	    Through2.prototype._flush = flush
	
	  return Through2
	})
	
	
	module.exports.obj = through2(function (options, transform, flush) {
	  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))
	
	  t2._transform = transform
	
	  if (flush)
	    t2._flush = flush
	
	  return t2
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1214 */,
/* 1215 */,
/* 1216 */,
/* 1217 */,
/* 1218 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1219 */,
/* 1220 */,
/* 1221 */,
/* 1222 */,
/* 1223 */,
/* 1224 */,
/* 1225 */,
/* 1226 */
/***/ function(module, exports, __webpack_require__) {

	var PassThrough = __webpack_require__(1227).PassThrough
	var Readable = __webpack_require__(1227).Readable
	var duplexer = __webpack_require__(1236)
	
	module.exports = function () {
	  var streams
	  if(arguments.length == 1 && Array.isArray(arguments[0])) {
	    streams = arguments[0]
	  } else {
	    streams = [].slice.call(arguments)
	  }
	  return combine(streams)
	}
	
	module.exports.obj = function () {
	  var streams
	  if(arguments.length == 1 && Array.isArray(arguments[0])) {
	    streams = arguments[0]
	  } else {
	    streams = [].slice.call(arguments)
	  }
	  return combine(streams, { objectMode: true })
	}
	
	  
	function combine (streams, opts) {
	
	  for (var i = 0; i < streams.length; i++)
	    streams[i] = wrap(streams[i], opts)
	
	  if(streams.length == 0)
	    return new PassThrough(opts)
	  else if(streams.length == 1)
	    return streams[0]
	
	  var first = streams[0]
	    , last = streams[streams.length - 1]
	    , thepipe = duplexer(opts, first, last)
	
	  //pipe all the streams together
	
	  function recurse (streams) {
	    if(streams.length < 2)
	      return
	    streams[0].pipe(streams[1])
	    recurse(streams.slice(1))
	  }
	
	  recurse(streams)
	
	  function onerror () {
	    var args = [].slice.call(arguments)
	    args.unshift('error')
	    thepipe.emit.apply(thepipe, args)
	  }
	
	  //es.duplex already reemits the error from the first and last stream.
	  //add a listener for the inner streams in the pipeline.
	  for(var i = 1; i < streams.length - 1; i ++)
	    streams[i].on('error', onerror)
	
	  return thepipe
	}
	
	function wrap (tr, opts) {
	  if (typeof tr.read === 'function') return tr
	  return new Readable(opts).wrap(tr)
	}


/***/ },
/* 1227 */,
/* 1228 */,
/* 1229 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1230 */,
/* 1231 */,
/* 1232 */,
/* 1233 */,
/* 1234 */,
/* 1235 */,
/* 1236 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var stream = __webpack_require__(1227);
	
	function DuplexWrapper(options, writable, readable) {
	  if (typeof readable === "undefined") {
	    readable = writable;
	    writable = options;
	    options = null;
	  }
	
	  stream.Duplex.call(this, options);
	
	  if (typeof readable.read !== "function") {
	    readable = (new stream.Readable(options)).wrap(readable);
	  }
	
	  this._writable = writable;
	  this._readable = readable;
	  this._waiting = false;
	
	  var self = this;
	
	  writable.once("finish", function() {
	    self.end();
	  });
	
	  this.once("finish", function() {
	    writable.end();
	  });
	
	  readable.on("readable", function() {
	    if (self._waiting) {
	      self._waiting = false;
	      self._read();
	    }
	  });
	
	  readable.once("end", function() {
	    self.push(null);
	  });
	
	  if (!options || typeof options.bubbleErrors === "undefined" || options.bubbleErrors) {
	    writable.on("error", function(err) {
	      self.emit("error", err);
	    });
	
	    readable.on("error", function(err) {
	      self.emit("error", err);
	    });
	  }
	}
	
	DuplexWrapper.prototype = Object.create(stream.Duplex.prototype, {constructor: {value: DuplexWrapper}});
	
	DuplexWrapper.prototype._write = function _write(input, encoding, done) {
	  this._writable.write(input, encoding, done);
	};
	
	DuplexWrapper.prototype._read = function _read() {
	  var buf;
	  var reads = 0;
	  while ((buf = this._readable.read()) !== null) {
	    this.push(buf);
	    reads++;
	  }
	  if (reads === 0) {
	    this._waiting = true;
	  }
	};
	
	module.exports = function duplex2(options, writable, readable) {
	  return new DuplexWrapper(options, writable, readable);
	};
	
	module.exports.DuplexWrapper = DuplexWrapper;


/***/ },
/* 1237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'
	
	var base58 = __webpack_require__(1238)
	var createHash = __webpack_require__(906)
	
	// SHA256(SHA256(buffer))
	function sha256x2 (buffer) {
	  var tmp = createHash('sha256').update(buffer).digest()
	  return createHash('sha256').update(tmp).digest()
	}
	
	// Encode a buffer as a base58-check encoded string
	function encode (payload) {
	  var checksum = sha256x2(payload)
	
	  return base58.encode(Buffer.concat([
	    payload,
	    checksum
	  ], payload.length + 4))
	}
	
	// Decode a base58-check encoded string to a buffer
	function decode (string) {
	  var buffer = new Buffer(base58.decode(string))
	
	  var payload = buffer.slice(0, -4)
	  var checksum = buffer.slice(-4)
	  var newChecksum = sha256x2(payload)
	
	  if (checksum[0] ^ newChecksum[0] |
	      checksum[1] ^ newChecksum[1] |
	      checksum[2] ^ newChecksum[2] |
	      checksum[3] ^ newChecksum[3]) throw new Error('Invalid checksum')
	
	  return payload
	}
	
	module.exports = {
	  encode: encode,
	  decode: decode
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1238 */
/***/ function(module, exports) {

	// Base58 encoding/decoding
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc
	
	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	var ALPHABET_MAP = {}
	for(var i = 0; i < ALPHABET.length; i++) {
	  ALPHABET_MAP[ALPHABET.charAt(i)] = i
	}
	var BASE = 58
	
	function encode(buffer) {
	  if (buffer.length === 0) return ''
	
	  var i, j, digits = [0]
	  for (i = 0; i < buffer.length; i++) {
	    for (j = 0; j < digits.length; j++) digits[j] <<= 8
	
	    digits[0] += buffer[i]
	
	    var carry = 0
	    for (j = 0; j < digits.length; ++j) {
	      digits[j] += carry
	
	      carry = (digits[j] / BASE) | 0
	      digits[j] %= BASE
	    }
	
	    while (carry) {
	      digits.push(carry % BASE)
	
	      carry = (carry / BASE) | 0
	    }
	  }
	
	  // deal with leading zeros
	  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0)
	
	  // convert digits to a string
	  var stringOutput = ""
	  for (var i = digits.length - 1; i >= 0; i--) {
	    stringOutput = stringOutput + ALPHABET[digits[i]]
	  }
	  return stringOutput
	}
	
	function decode(string) {
	  if (string.length === 0) return []
	
	  var i, j, bytes = [0]
	  for (i = 0; i < string.length; i++) {
	    var c = string[i]
	    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')
	
	    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
	    bytes[0] += ALPHABET_MAP[c]
	
	    var carry = 0
	    for (j = 0; j < bytes.length; ++j) {
	      bytes[j] += carry
	
	      carry = bytes[j] >> 8
	      bytes[j] &= 0xff
	    }
	
	    while (carry) {
	      bytes.push(carry & 0xff)
	
	      carry >>= 8
	    }
	  }
	
	  // deal with leading zeros
	  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0)
	
	  return bytes.reverse()
	}
	
	module.exports = {
	  encode: encode,
	  decode: decode
	}


/***/ },
/* 1239 */,
/* 1240 */
/***/ function(module, exports, __webpack_require__) {

	var subdown = __webpack_require__(1241)
	var levelup = __webpack_require__(1249)
	
	module.exports = function (db, prefix, opts) {
	  if (typeof prefix === 'object' && !opts) return module.exports(db, null, prefix)
	  if (!opts) opts = {}
	
	  opts.db = function () {
	    return subdown(db, prefix, opts)
	  }
	
	  return levelup(opts)
	}


/***/ },
/* 1241 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var util = __webpack_require__(1130)
	var abstract = __webpack_require__(1242)
	var wrap = __webpack_require__(1247)
	
	var END = new Buffer([0xff])
	
	var concat = function (prefix, key, force) {
	  if (typeof key === 'string' && (force || key.length)) return prefix + key
	  if (Buffer.isBuffer(key) && (force || key.length)) return Buffer.concat([new Buffer(prefix), key])
	  return key
	}
	
	var SubIterator = function (ite, prefix) {
	  this.iterator = ite
	  this.prefix = prefix
	}
	
	SubIterator.prototype.next = function (cb) {
	  var self = this
	  this.iterator.next(cb && function (err, key, value) {
	    if (err) return cb(err)
	    if (key) key = key.slice(self.prefix.length)
	    cb.apply(null, arguments)
	  })
	}
	
	SubIterator.prototype.end = function (cb) {
	  this.iterator.end(cb)
	}
	
	var SubDown = function (db, prefix, opts) {
	  if (!(this instanceof SubDown)) return new SubDown(db, prefix, opts)
	  if (typeof opts === 'string') opts = {separator: opts}
	  if (!opts) opts = {}
	
	  var separator = opts.separator
	
	  if (!prefix) prefix = ''
	  if (!separator) separator = '!'
	  if (prefix[0] === separator) prefix = prefix.slice(1)
	  if (prefix[prefix.length - 1] === separator) prefix = prefix.slice(0, -1)
	
	  this.db = db
	  this.leveldown = null
	  this.prefix = separator + prefix + separator
	  this._beforeOpen = opts.open
	
	  var self = this
	
	  this._wrap = {
	    gt: function (x) {
	      return concat(self.prefix, x || '', true)
	    },
	    lt: function (x) {
	      if (Buffer.isBuffer(x) && !x.length) x = END
	      return concat(self.prefix, x || '\xff')
	    }
	  }
	
	  abstract.AbstractLevelDOWN.call(this, 'no-location')
	}
	
	util.inherits(SubDown, abstract.AbstractLevelDOWN)
	
	SubDown.prototype.type = 'subdown'
	
	SubDown.prototype._open = function (opts, cb) {
	  var self = this
	
	  if (this.db.isOpen()) {
	    if (this.db.db.type === 'subdown' && this.db.db.prefix) {
	      this.prefix = this.db.db.prefix + this.prefix
	      this.leveldown = this.db.db.leveldown
	    } else {
	      this.leveldown = this.db.db
	    }
	    return done()
	  }
	
	  this.db.on('open', this.open.bind(this, opts, done))
	
	  function done (err) {
	    if (err || !self._beforeOpen) return cb(err)
	    self._beforeOpen(cb)
	  }
	}
	
	SubDown.prototype.close = function () {
	  this.leveldown.close.apply(this.leveldown, arguments)
	}
	
	SubDown.prototype.setDb = function () {
	  this.leveldown.setDb.apply(this.leveldown, arguments)
	}
	
	SubDown.prototype.put = function (key, value, opts, cb) {
	  this.leveldown.put(concat(this.prefix, key), value, opts, cb)
	}
	
	SubDown.prototype.get = function (key, opts, cb) {
	  this.leveldown.get(concat(this.prefix, key), opts, cb)
	}
	
	SubDown.prototype.del = function (key, opts, cb) {
	  this.leveldown.del(concat(this.prefix, key), opts, cb)
	}
	
	SubDown.prototype.batch =
	SubDown.prototype._batch = function (operations, opts, cb) {
	  if (arguments.length === 0) return new abstract.AbstractChainedBatch(this)
	  if (!Array.isArray(operations)) return this.leveldown.batch.apply(null, arguments)
	
	  var subops = new Array(operations.length)
	  for (var i = 0; i < operations.length; i++) {
	    var o = operations[i]
	    subops[i] = {type: o.type, key: concat(this.prefix, o.key), value: o.value}
	  }
	
	  this.leveldown.batch(subops, opts, cb)
	}
	
	SubDown.prototype.approximateSize = function (start, end, cb) {
	  this.leveldown.approximateSize.apply(this.leveldown, arguments)
	}
	
	SubDown.prototype.getProperty = function () {
	  return this.leveldown.getProperty.apply(this.leveldown, arguments)
	}
	
	SubDown.prototype.destroy = function () {
	  return this.leveldown.destroy.apply(this.leveldown, arguments)
	}
	
	SubDown.prototype.repair = function () {
	  return this.leveldown.repair.apply(this.leveldown, arguments)
	}
	
	var extend = function (xopts, opts) {
	  xopts.keys = opts.keys
	  xopts.values = opts.values
	  xopts.createIfMissing = opts.createIfMissing
	  xopts.errorIfExists = opts.errorIfExists
	  xopts.keyEncoding = opts.keyEncoding
	  xopts.valueEncoding = opts.valueEncoding
	  xopts.compression = opts.compression
	  xopts.db = opts.db
	  xopts.limit = opts.limit
	  xopts.keyAsBuffer = opts.keyAsBuffer
	  xopts.valueAsBuffer = opts.valueAsBuffer
	  xopts.reverse = opts.reverse
	  return xopts
	}
	
	var fixRange = function (opts) {
	  return (!opts.reverse || (!opts.end && !opts.start)) ? opts : {start: opts.end, end: opts.start}
	}
	
	SubDown.prototype.iterator = function (opts) {
	  if (!opts) opts = {}
	  var xopts = extend(wrap(fixRange(opts), this._wrap), opts)
	  return new SubIterator(this.leveldown.iterator(xopts), this.prefix)
	}
	
	module.exports = SubDown
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1242 */
/***/ function(module, exports, __webpack_require__) {

	exports.AbstractLevelDOWN    = __webpack_require__(1243)
	exports.AbstractIterator     = __webpack_require__(1244)
	exports.AbstractChainedBatch = __webpack_require__(1245)
	exports.isLevelDOWN          = __webpack_require__(1246)


/***/ },
/* 1243 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	var xtend                = __webpack_require__(859)
	  , AbstractIterator     = __webpack_require__(1244)
	  , AbstractChainedBatch = __webpack_require__(1245)
	
	function AbstractLevelDOWN (location) {
	  if (!arguments.length || location === undefined)
	    throw new Error('constructor requires at least a location argument')
	
	  if (typeof location != 'string')
	    throw new Error('constructor requires a location string argument')
	
	  this.location = location
	  this.status = 'new'
	}
	
	AbstractLevelDOWN.prototype.open = function (options, callback) {
	  var self      = this
	    , oldStatus = this.status
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('open() requires a callback argument')
	
	  if (typeof options != 'object')
	    options = {}
	
	  options.createIfMissing = options.createIfMissing != false
	  options.errorIfExists = !!options.errorIfExists
	
	  if (typeof this._open == 'function') {
	    this.status = 'opening'
	    this._open(options, function (err) {
	      if (err) {
	        self.status = oldStatus
	        return callback(err)
	      }
	      self.status = 'open'
	      callback()
	    })
	  } else {
	    this.status = 'open'
	    process.nextTick(callback)
	  }
	}
	
	AbstractLevelDOWN.prototype.close = function (callback) {
	  var self      = this
	    , oldStatus = this.status
	
	  if (typeof callback != 'function')
	    throw new Error('close() requires a callback argument')
	
	  if (typeof this._close == 'function') {
	    this.status = 'closing'
	    this._close(function (err) {
	      if (err) {
	        self.status = oldStatus
	        return callback(err)
	      }
	      self.status = 'closed'
	      callback()
	    })
	  } else {
	    this.status = 'closed'
	    process.nextTick(callback)
	  }
	}
	
	AbstractLevelDOWN.prototype.get = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('get() requires a callback argument')
	
	  if (err = this._checkKey(key, 'key'))
	    return callback(err)
	
	  key = this._serializeKey(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  options.asBuffer = options.asBuffer != false
	
	  if (typeof this._get == 'function')
	    return this._get(key, options, callback)
	
	  process.nextTick(function () { callback(new Error('NotFound')) })
	}
	
	AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('put() requires a callback argument')
	
	  if (err = this._checkKey(key, 'key'))
	    return callback(err)
	
	  key = this._serializeKey(key)
	  value = this._serializeValue(value)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._put == 'function')
	    return this._put(key, value, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.del = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('del() requires a callback argument')
	
	  if (err = this._checkKey(key, 'key'))
	    return callback(err)
	
	  key = this._serializeKey(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._del == 'function')
	    return this._del(key, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
	  if (!arguments.length)
	    return this._chainedBatch()
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof array == 'function')
	    callback = array
	
	  if (typeof callback != 'function')
	    throw new Error('batch(array) requires a callback argument')
	
	  if (!Array.isArray(array))
	    return callback(new Error('batch(array) requires an array argument'))
	
	  if (!options || typeof options != 'object')
	    options = {}
	
	  var i = 0
	    , l = array.length
	    , e
	    , err
	
	  for (; i < l; i++) {
	    e = array[i]
	    if (typeof e != 'object')
	      continue
	
	    if (err = this._checkKey(e.type, 'type'))
	      return callback(err)
	
	    if (err = this._checkKey(e.key, 'key'))
	      return callback(err)
	  }
	
	  if (typeof this._batch == 'function')
	    return this._batch(array, options, callback)
	
	  process.nextTick(callback)
	}
	
	//TODO: remove from here, not a necessary primitive
	AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
	  if (   start == null
	      || end == null
	      || typeof start == 'function'
	      || typeof end == 'function') {
	    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')
	  }
	
	  if (typeof callback != 'function')
	    throw new Error('approximateSize() requires a callback argument')
	
	  start = this._serializeKey(start)
	  end = this._serializeKey(end)
	
	  if (typeof this._approximateSize == 'function')
	    return this._approximateSize(start, end, callback)
	
	  process.nextTick(function () {
	    callback(null, 0)
	  })
	}
	
	AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
	  var self = this
	
	  options = xtend(options)
	
	  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {
	    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)
	      delete options[o]
	  })
	
	  options.reverse = !!options.reverse
	  options.keys = options.keys != false
	  options.values = options.values != false
	  options.limit = 'limit' in options ? options.limit : -1
	  options.keyAsBuffer = options.keyAsBuffer != false
	  options.valueAsBuffer = options.valueAsBuffer != false
	
	  return options
	}
	
	AbstractLevelDOWN.prototype.iterator = function (options) {
	  if (typeof options != 'object')
	    options = {}
	
	  options = this._setupIteratorOptions(options)
	
	  if (typeof this._iterator == 'function')
	    return this._iterator(options)
	
	  return new AbstractIterator(this)
	}
	
	AbstractLevelDOWN.prototype._chainedBatch = function () {
	  return new AbstractChainedBatch(this)
	}
	
	AbstractLevelDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	AbstractLevelDOWN.prototype._serializeKey = function (key) {
	  return this._isBuffer(key)
	    ? key
	    : String(key)
	}
	
	AbstractLevelDOWN.prototype._serializeValue = function (value) {
	  return this._isBuffer(value) || process.browser || value == null
	    ? value
	    : String(value)
	}
	
	AbstractLevelDOWN.prototype._checkKey = function (obj, type) {
	  if (obj === null || obj === undefined)
	    return new Error(type + ' cannot be `null` or `undefined`')
	
	  if (this._isBuffer(obj) && obj.length === 0)
	    return new Error(type + ' cannot be an empty Buffer')
	  else if (String(obj) === '')
	    return new Error(type + ' cannot be an empty String')
	}
	
	module.exports = AbstractLevelDOWN
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1244 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractIterator (db) {
	  this.db = db
	  this._ended = false
	  this._nexting = false
	}
	
	AbstractIterator.prototype.next = function (callback) {
	  var self = this
	
	  if (typeof callback != 'function')
	    throw new Error('next() requires a callback argument')
	
	  if (self._ended)
	    return callback(new Error('cannot call next() after end()'))
	  if (self._nexting)
	    return callback(new Error('cannot call next() before previous next() has completed'))
	
	  self._nexting = true
	  if (typeof self._next == 'function') {
	    return self._next(function () {
	      self._nexting = false
	      callback.apply(null, arguments)
	    })
	  }
	
	  process.nextTick(function () {
	    self._nexting = false
	    callback()
	  })
	}
	
	AbstractIterator.prototype.end = function (callback) {
	  if (typeof callback != 'function')
	    throw new Error('end() requires a callback argument')
	
	  if (this._ended)
	    return callback(new Error('end() already called on iterator'))
	
	  this._ended = true
	
	  if (typeof this._end == 'function')
	    return this._end(callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractIterator
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1245 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractChainedBatch (db) {
	  this._db         = db
	  this._operations = []
	  this._written    = false
	}
	
	AbstractChainedBatch.prototype._serializeKey = function (key) {
	  return this._db._serializeKey(key)
	}
	
	AbstractChainedBatch.prototype._serializeValue = function (value) {
	  return this._db._serializeValue(value)
	}
	
	AbstractChainedBatch.prototype._checkWritten = function () {
	  if (this._written)
	    throw new Error('write() already called on this batch')
	}
	
	AbstractChainedBatch.prototype.put = function (key, value) {
	  this._checkWritten()
	
	  var err = this._db._checkKey(key, 'key', this._db._isBuffer)
	  if (err)
	    throw err
	
	  key = this._serializeKey(key)
	  value = this._serializeValue(value)
	
	  if (typeof this._put == 'function' )
	    this._put(key, value)
	  else
	    this._operations.push({ type: 'put', key: key, value: value })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.del = function (key) {
	  this._checkWritten()
	
	  var err = this._db._checkKey(key, 'key', this._db._isBuffer)
	  if (err) throw err
	
	  key = this._serializeKey(key)
	
	  if (typeof this._del == 'function' )
	    this._del(key)
	  else
	    this._operations.push({ type: 'del', key: key })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.clear = function () {
	  this._checkWritten()
	
	  this._operations = []
	
	  if (typeof this._clear == 'function' )
	    this._clear()
	
	  return this
	}
	
	AbstractChainedBatch.prototype.write = function (options, callback) {
	  this._checkWritten()
	
	  if (typeof options == 'function')
	    callback = options
	  if (typeof callback != 'function')
	    throw new Error('write() requires a callback argument')
	  if (typeof options != 'object')
	    options = {}
	
	  this._written = true
	
	  if (typeof this._write == 'function' )
	    return this._write(callback)
	
	  if (typeof this._db._batch == 'function')
	    return this._db._batch(this._operations, options, callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractChainedBatch
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1246 */
/***/ function(module, exports, __webpack_require__) {

	var AbstractLevelDOWN = __webpack_require__(1243)
	
	function isLevelDOWN (db) {
	  if (!db || typeof db !== 'object')
	    return false
	  return Object.keys(AbstractLevelDOWN.prototype).filter(function (name) {
	    // TODO remove approximateSize check when method is gone
	    return name[0] != '_' && name != 'approximateSize'
	  }).every(function (name) {
	    return typeof db[name] == 'function'
	  })
	}
	
	module.exports = isLevelDOWN


/***/ },
/* 1247 */
/***/ function(module, exports, __webpack_require__) {

	var defined = __webpack_require__(1248);
	
	module.exports = function (opts, prefix) {
	    if (!opts) opts = {};
	    if (!prefix) prefix = {};
	    var xopts = {};
	    var gte = defined(prefix.gte, prefix.ge, prefix.start);
	    var lte = defined(prefix.lte, prefix.le, prefix.end);
	    var ogte = defined(opts.gte, opts.ge, opts.start);
	    var olte = defined(opts.lte, opts.le, opts.end);
	    
	    if (prefix.gt) {
	        if (ogte !== undefined) {
	            xopts.gte = prefix.gt(ogte);
	        }
	        else xopts.gt = prefix.gt(opts.gt);
	    }
	    else if (gte) {
	        if (ogte !== undefined) {
	            xopts.gte = gte(ogte);
	        }
	        else xopts.gt = gte(opts.gt);
	    }
	    
	    if (prefix.lt) {
	        if (olte !== undefined) {
	            xopts.lte = prefix.lt(olte);
	        }
	        else xopts.lt = prefix.lt(opts.lt);
	    }
	    else if (lte) {
	        if (olte !== undefined) {
	            xopts.lte = lte(olte);
	        }
	        else xopts.lt = lte(opts.lt);
	    }
	    
	    if (prefix.limit !== undefined) {
	        xopts.limit = prefix.limit(opts.limit);
	    }
	    else if (opts.limit !== undefined) {
	        xopts.limit = opts.limit;
	    }
	    return xopts;
	};


/***/ },
/* 1248 */
/***/ function(module, exports) {

	module.exports = function () {
	    for (var i = 0; i < arguments.length; i++) {
	        if (arguments[i] !== undefined) return arguments[i];
	    }
	};


/***/ },
/* 1249 */,
/* 1250 */
/***/ function(module, exports) {

	/*!
	  * prr
	  * (c) 2013 Rod Vagg <rod@vagg.org>
	  * https://github.com/rvagg/prr
	  * License: MIT
	  */
	
	(function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports)
	    module.exports = definition()
	  else
	    context[name] = definition()
	})('prr', this, function() {
	
	  var setProperty = typeof Object.defineProperty == 'function'
	      ? function (obj, key, options) {
	          Object.defineProperty(obj, key, options)
	          return obj
	        }
	      : function (obj, key, options) { // < es5
	          obj[key] = options.value
	          return obj
	        }
	
	    , makeOptions = function (value, options) {
	        var oo = typeof options == 'object'
	          , os = !oo && typeof options == 'string'
	          , op = function (p) {
	              return oo
	                ? !!options[p]
	                : os
	                  ? options.indexOf(p[0]) > -1
	                  : false
	            }
	
	        return {
	            enumerable   : op('enumerable')
	          , configurable : op('configurable')
	          , writable     : op('writable')
	          , value        : value
	        }
	      }
	
	    , prr = function (obj, key, value, options) {
	        var k
	
	        options = makeOptions(value, options)
	
	        if (typeof key == 'object') {
	          for (k in key) {
	            if (Object.hasOwnProperty.call(key, k)) {
	              options.value = key[k]
	              setProperty(obj, k, options)
	            }
	          }
	          return obj
	        }
	
	        return setProperty(obj, key, options)
	      }
	
	  return prr
	})

/***/ },
/* 1251 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var util              = __webpack_require__(1130)
	  , AbstractLevelDOWN = __webpack_require__(1252).AbstractLevelDOWN
	  , DeferredIterator  = __webpack_require__(1257)
	
	function DeferredLevelDOWN (location) {
	  AbstractLevelDOWN.call(this, typeof location == 'string' ? location : '') // optional location, who cares?
	  this._db         = undefined
	  this._operations = []
	  this._iterators  = []
	}
	
	util.inherits(DeferredLevelDOWN, AbstractLevelDOWN)
	
	// called by LevelUP when we have a real DB to take its place
	DeferredLevelDOWN.prototype.setDb = function (db) {
	  this._db = db
	  this._operations.forEach(function (op) {
	    db[op.method].apply(db, op.args)
	  })
	  this._iterators.forEach(function (it) {
	    it.setDb(db)
	  })
	}
	
	DeferredLevelDOWN.prototype._open = function (options, callback) {
	  return process.nextTick(callback)
	}
	
	// queue a new deferred operation
	DeferredLevelDOWN.prototype._operation = function (method, args) {
	  if (this._db)
	    return this._db[method].apply(this._db, args)
	  this._operations.push({ method: method, args: args })
	}
	
	// deferrables
	'put get del batch approximateSize'.split(' ').forEach(function (m) {
	  DeferredLevelDOWN.prototype['_' + m] = function () {
	    this._operation(m, arguments)
	  }
	})
	
	DeferredLevelDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	DeferredLevelDOWN.prototype._iterator = function (options) {
	  if (this._db)
	    return this._db.iterator.apply(this._db, arguments)
	  var it = new DeferredIterator(options)
	  this._iterators.push(it)
	  return it
	}
	
	module.exports                  = DeferredLevelDOWN
	module.exports.DeferredIterator = DeferredIterator
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1252 */
/***/ function(module, exports, __webpack_require__) {

	exports.AbstractLevelDOWN    = __webpack_require__(1253)
	exports.AbstractIterator     = __webpack_require__(1254)
	exports.AbstractChainedBatch = __webpack_require__(1255)
	exports.isLevelDOWN          = __webpack_require__(1256)


/***/ },
/* 1253 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	var xtend                = __webpack_require__(859)
	  , AbstractIterator     = __webpack_require__(1254)
	  , AbstractChainedBatch = __webpack_require__(1255)
	
	function AbstractLevelDOWN (location) {
	  if (!arguments.length || location === undefined)
	    throw new Error('constructor requires at least a location argument')
	
	  if (typeof location != 'string')
	    throw new Error('constructor requires a location string argument')
	
	  this.location = location
	  this.status = 'new'
	}
	
	AbstractLevelDOWN.prototype.open = function (options, callback) {
	  var self      = this
	    , oldStatus = this.status
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('open() requires a callback argument')
	
	  if (typeof options != 'object')
	    options = {}
	
	  options.createIfMissing = options.createIfMissing != false
	  options.errorIfExists = !!options.errorIfExists
	
	  if (typeof this._open == 'function') {
	    this.status = 'opening'
	    this._open(options, function (err) {
	      if (err) {
	        self.status = oldStatus
	        return callback(err)
	      }
	      self.status = 'open'
	      callback()
	    })
	  } else {
	    this.status = 'open'
	    process.nextTick(callback)
	  }
	}
	
	AbstractLevelDOWN.prototype.close = function (callback) {
	  var self      = this
	    , oldStatus = this.status
	
	  if (typeof callback != 'function')
	    throw new Error('close() requires a callback argument')
	
	  if (typeof this._close == 'function') {
	    this.status = 'closing'
	    this._close(function (err) {
	      if (err) {
	        self.status = oldStatus
	        return callback(err)
	      }
	      self.status = 'closed'
	      callback()
	    })
	  } else {
	    this.status = 'closed'
	    process.nextTick(callback)
	  }
	}
	
	AbstractLevelDOWN.prototype.get = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('get() requires a callback argument')
	
	  if (err = this._checkKey(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  options.asBuffer = options.asBuffer != false
	
	  if (typeof this._get == 'function')
	    return this._get(key, options, callback)
	
	  process.nextTick(function () { callback(new Error('NotFound')) })
	}
	
	AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('put() requires a callback argument')
	
	  if (err = this._checkKey(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  // coerce value to string in node, don't touch it in browser
	  // (indexeddb can store any JS type)
	  if (value != null && !this._isBuffer(value) && !process.browser)
	    value = String(value)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._put == 'function')
	    return this._put(key, value, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.del = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('del() requires a callback argument')
	
	  if (err = this._checkKey(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._del == 'function')
	    return this._del(key, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
	  if (!arguments.length)
	    return this._chainedBatch()
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof array == 'function')
	    callback = array
	
	  if (typeof callback != 'function')
	    throw new Error('batch(array) requires a callback argument')
	
	  if (!Array.isArray(array))
	    return callback(new Error('batch(array) requires an array argument'))
	
	  if (!options || typeof options != 'object')
	    options = {}
	
	  var i = 0
	    , l = array.length
	    , e
	    , err
	
	  for (; i < l; i++) {
	    e = array[i]
	    if (typeof e != 'object')
	      continue
	
	    if (err = this._checkKey(e.type, 'type', this._isBuffer))
	      return callback(err)
	
	    if (err = this._checkKey(e.key, 'key', this._isBuffer))
	      return callback(err)
	  }
	
	  if (typeof this._batch == 'function')
	    return this._batch(array, options, callback)
	
	  process.nextTick(callback)
	}
	
	//TODO: remove from here, not a necessary primitive
	AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
	  if (   start == null
	      || end == null
	      || typeof start == 'function'
	      || typeof end == 'function') {
	    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')
	  }
	
	  if (typeof callback != 'function')
	    throw new Error('approximateSize() requires a callback argument')
	
	  if (!this._isBuffer(start))
	    start = String(start)
	
	  if (!this._isBuffer(end))
	    end = String(end)
	
	  if (typeof this._approximateSize == 'function')
	    return this._approximateSize(start, end, callback)
	
	  process.nextTick(function () {
	    callback(null, 0)
	  })
	}
	
	AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
	  var self = this
	
	  options = xtend(options)
	
	  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {
	    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)
	      delete options[o]
	  })
	
	  options.reverse = !!options.reverse
	  options.keys = options.keys != false
	  options.values = options.values != false
	  options.limit = 'limit' in options ? options.limit : -1
	  options.keyAsBuffer = options.keyAsBuffer != false
	  options.valueAsBuffer = options.valueAsBuffer != false
	
	  return options
	}
	
	AbstractLevelDOWN.prototype.iterator = function (options) {
	  if (typeof options != 'object')
	    options = {}
	
	  options = this._setupIteratorOptions(options)
	
	  if (typeof this._iterator == 'function')
	    return this._iterator(options)
	
	  return new AbstractIterator(this)
	}
	
	AbstractLevelDOWN.prototype._chainedBatch = function () {
	  return new AbstractChainedBatch(this)
	}
	
	AbstractLevelDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	AbstractLevelDOWN.prototype._checkKey = function (obj, type) {
	
	  if (obj === null || obj === undefined)
	    return new Error(type + ' cannot be `null` or `undefined`')
	
	  if (this._isBuffer(obj)) {
	    if (obj.length === 0)
	      return new Error(type + ' cannot be an empty Buffer')
	  } else if (String(obj) === '')
	    return new Error(type + ' cannot be an empty String')
	}
	
	module.exports = AbstractLevelDOWN
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1254 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractIterator (db) {
	  this.db = db
	  this._ended = false
	  this._nexting = false
	}
	
	AbstractIterator.prototype.next = function (callback) {
	  var self = this
	
	  if (typeof callback != 'function')
	    throw new Error('next() requires a callback argument')
	
	  if (self._ended)
	    return callback(new Error('cannot call next() after end()'))
	  if (self._nexting)
	    return callback(new Error('cannot call next() before previous next() has completed'))
	
	  self._nexting = true
	  if (typeof self._next == 'function') {
	    return self._next(function () {
	      self._nexting = false
	      callback.apply(null, arguments)
	    })
	  }
	
	  process.nextTick(function () {
	    self._nexting = false
	    callback()
	  })
	}
	
	AbstractIterator.prototype.end = function (callback) {
	  if (typeof callback != 'function')
	    throw new Error('end() requires a callback argument')
	
	  if (this._ended)
	    return callback(new Error('end() already called on iterator'))
	
	  this._ended = true
	
	  if (typeof this._end == 'function')
	    return this._end(callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractIterator
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1255 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractChainedBatch (db) {
	  this._db         = db
	  this._operations = []
	  this._written    = false
	}
	
	AbstractChainedBatch.prototype._checkWritten = function () {
	  if (this._written)
	    throw new Error('write() already called on this batch')
	}
	
	AbstractChainedBatch.prototype.put = function (key, value) {
	  this._checkWritten()
	
	  var err = this._db._checkKey(key, 'key', this._db._isBuffer)
	  if (err)
	    throw err
	
	  if (!this._db._isBuffer(key)) key = String(key)
	  if (!this._db._isBuffer(value)) value = String(value)
	
	  if (typeof this._put == 'function' )
	    this._put(key, value)
	  else
	    this._operations.push({ type: 'put', key: key, value: value })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.del = function (key) {
	  this._checkWritten()
	
	  var err = this._db._checkKey(key, 'key', this._db._isBuffer)
	  if (err) throw err
	
	  if (!this._db._isBuffer(key)) key = String(key)
	
	  if (typeof this._del == 'function' )
	    this._del(key)
	  else
	    this._operations.push({ type: 'del', key: key })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.clear = function () {
	  this._checkWritten()
	
	  this._operations = []
	
	  if (typeof this._clear == 'function' )
	    this._clear()
	
	  return this
	}
	
	AbstractChainedBatch.prototype.write = function (options, callback) {
	  this._checkWritten()
	
	  if (typeof options == 'function')
	    callback = options
	  if (typeof callback != 'function')
	    throw new Error('write() requires a callback argument')
	  if (typeof options != 'object')
	    options = {}
	
	  this._written = true
	
	  if (typeof this._write == 'function' )
	    return this._write(callback)
	
	  if (typeof this._db._batch == 'function')
	    return this._db._batch(this._operations, options, callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractChainedBatch
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1256 */
/***/ function(module, exports, __webpack_require__) {

	var AbstractLevelDOWN = __webpack_require__(1253)
	
	function isLevelDOWN (db) {
	  if (!db || typeof db !== 'object')
	    return false
	  return Object.keys(AbstractLevelDOWN.prototype).filter(function (name) {
	    // TODO remove approximateSize check when method is gone
	    return name[0] != '_' && name != 'approximateSize'
	  }).every(function (name) {
	    return typeof db[name] == 'function'
	  })
	}
	
	module.exports = isLevelDOWN


/***/ },
/* 1257 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(1130)
	  , AbstractIterator = __webpack_require__(1252).AbstractIterator
	
	
	function DeferredIterator (options) {
	  AbstractIterator.call(this, options)
	
	  this._options = options
	  this._iterator = null
	  this._operations = []
	}
	
	util.inherits(DeferredIterator, AbstractIterator)
	
	DeferredIterator.prototype.setDb = function (db) {
	  var it = this._iterator = db.iterator(this._options)
	  this._operations.forEach(function (op) {
	    it[op.method].apply(it, op.args)
	  })
	}
	
	DeferredIterator.prototype._operation = function (method, args) {
	  if (this._iterator)
	    return this._iterator[method].apply(this._iterator, args)
	  this._operations.push({ method: method, args: args })
	}
	
	'next end'.split(' ').forEach(function (m) {
	  DeferredIterator.prototype['_' + m] = function () {
	    this._operation(m, arguments)
	  }
	})
	
	module.exports = DeferredIterator;


/***/ },
/* 1258 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Readable = __webpack_require__(829).Readable;
	var extend = __webpack_require__(859);
	var EncodingError = __webpack_require__(1259).EncodingError;
	
	module.exports = ReadStream;
	inherits(ReadStream, Readable);
	
	function ReadStream(iterator, options){
	  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options);
	  Readable.call(this, extend(options, {
	    objectMode: true
	  }));
	  this._iterator = iterator;
	  this._destroyed = false;
	  this._decoder = null;
	  if (options && options.decoder) this._decoder = options.decoder;
	  this.on('end', this._cleanup.bind(this));
	}
	
	ReadStream.prototype._read = function(){
	  var self = this;
	  if (this._destroyed) return;
	
	  this._iterator.next(function(err, key, value){
	    if (self._destroyed) return;
	    if (err) return self.emit('error', err);
	    if (key === undefined && value === undefined) {
	      self.push(null);
	    } else {
	      if (!self._decoder) return self.push({ key: key, value: value });
	
	      try {
	        var value = self._decoder(key, value);
	      } catch (err) {
	        self.emit('error', new EncodingError(err));
	        self.push(null);
	        return;
	      }
	      self.push(value);
	    }
	  });
	};
	
	ReadStream.prototype.destroy =
	ReadStream.prototype._cleanup = function(){
	  var self = this;
	  if (this._destroyed) return;
	  this._destroyed = true;
	
	  this._iterator.end(function(err){
	    if (err) return self.emit('error', err);
	    self.emit('close');
	  });
	};
	


/***/ },
/* 1259 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2012-2015 LevelUP contributors
	 * See list at <https://github.com/rvagg/node-levelup#contributing>
	 * MIT License
	 * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>
	 */
	
	var createError   = __webpack_require__(1139).create
	  , LevelUPError  = createError('LevelUPError')
	  , NotFoundError = createError('NotFoundError', LevelUPError)
	
	NotFoundError.prototype.notFound = true
	NotFoundError.prototype.status   = 404
	
	module.exports = {
	    LevelUPError        : LevelUPError
	  , InitializationError : createError('InitializationError', LevelUPError)
	  , OpenError           : createError('OpenError', LevelUPError)
	  , ReadError           : createError('ReadError', LevelUPError)
	  , WriteError          : createError('WriteError', LevelUPError)
	  , NotFoundError       : NotFoundError
	  , EncodingError       : createError('EncodingError', LevelUPError)
	}


/***/ },
/* 1260 */,
/* 1261 */,
/* 1262 */,
/* 1263 */,
/* 1264 */,
/* 1265 */,
/* 1266 */
/***/ function(module, exports, __webpack_require__) {

	var encodings = __webpack_require__(1267);
	
	module.exports = Codec;
	
	function Codec(opts){
	  this.opts = opts || {};
	  this.encodings = encodings;
	}
	
	Codec.prototype._encoding = function(encoding){
	  if (typeof encoding == 'string') encoding = encodings[encoding];
	  if (!encoding) encoding = encodings.id;
	  return encoding;
	};
	
	Codec.prototype._keyEncoding = function(opts, batchOpts){
	  return this._encoding(batchOpts && batchOpts.keyEncoding
	    || opts && opts.keyEncoding
	    || this.opts.keyEncoding);
	};
	
	Codec.prototype._valueEncoding = function(opts, batchOpts){
	  return this._encoding(
	    batchOpts && (batchOpts.valueEncoding || batchOpts.encoding)
	    || opts && (opts.valueEncoding || opts.encoding)
	    || (this.opts.valueEncoding || this.opts.encoding));
	};
	
	Codec.prototype.encodeKey = function(key, opts, batchOpts){
	  return this._keyEncoding(opts, batchOpts).encode(key);
	};
	
	Codec.prototype.encodeValue = function(value, opts, batchOpts){
	  return this._valueEncoding(opts, batchOpts).encode(value);
	};
	
	Codec.prototype.decodeKey = function(key, opts){
	  return this._keyEncoding(opts).decode(key);
	};
	
	Codec.prototype.decodeValue = function(value, opts){
	  return this._valueEncoding(opts).decode(value);
	};
	
	Codec.prototype.encodeBatch = function(ops, opts){
	  var self = this;
	
	  return ops.map(function(_op){
	    var op = {
	      type: _op.type,
	      key: self.encodeKey(_op.key, opts, _op)
	    };
	    if (self.keyAsBuffer(opts, _op)) op.keyEncoding = 'binary';
	    if (_op.prefix) op.prefix = _op.prefix;
	    if ('value' in _op) {
	      op.value = self.encodeValue(_op.value, opts, _op);
	      if (self.valueAsBuffer(opts, _op)) op.valueEncoding = 'binary';
	    }
	    return op;
	  });
	};
	
	var ltgtKeys = ['lt', 'gt', 'lte', 'gte', 'start', 'end'];
	
	Codec.prototype.encodeLtgt = function(ltgt){
	  var self = this;
	  var ret = {};
	  Object.keys(ltgt).forEach(function(key){
	    ret[key] = ltgtKeys.indexOf(key) > -1
	      ? self.encodeKey(ltgt[key], ltgt)
	      : ltgt[key]
	  });
	  return ret;
	};
	
	Codec.prototype.createStreamDecoder = function(opts){
	  var self = this;
	
	  if (opts.keys && opts.values) {
	    return function(key, value){
	      return {
	        key: self.decodeKey(key, opts),
	        value: self.decodeValue(value, opts)
	      };
	    };
	  } else if (opts.keys) {
	    return function(key) {
	      return self.decodeKey(key, opts);
	    }; 
	  } else if (opts.values) {
	    return function(_, value){
	      return self.decodeValue(value, opts);
	    }
	  } else {
	    return function(){};
	  }
	};
	
	Codec.prototype.keyAsBuffer = function(opts){
	  return this._keyEncoding(opts).buffer;
	};
	
	Codec.prototype.valueAsBuffer = function(opts){
	  return this._valueEncoding(opts).buffer;
	};
	


/***/ },
/* 1267 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	exports.utf8 = exports['utf-8'] = {
	  encode: function(data){
	    return isBinary(data)
	      ? data
	      : String(data);
	  },
	  decode: identity,
	  buffer: false,
	  type: 'utf8'
	};
	
	exports.json = {
	  encode: JSON.stringify,
	  decode: JSON.parse,
	  buffer: false,
	  type: 'json'
	};
	
	exports.binary = {
	  encode: function(data){
	    return isBinary(data)
	      ? data
	      : new Buffer(data);      
	  },
	  decode: identity,
	  buffer: true,
	  type: 'binary'
	};
	
	exports.id = {
	  encode: function(data){
	    return data;
	  },
	  decode: function(data){
	    return data;
	  },
	  buffer: false,
	  type: 'id'
	};
	
	var bufferEncodings = [
	  'hex',
	  'ascii',
	  'base64',
	  'ucs2',
	  'ucs-2',
	  'utf16le',
	  'utf-16le'
	];
	
	bufferEncodings.forEach(function(type){
	  exports[type] = {
	    encode: function(data){
	      return isBinary(data)
	        ? data
	        : new Buffer(data, type);
	    },
	    decode: function(buffer){
	      return buffer.toString(type);
	    },
	    buffer: true,
	    type: type
	  };
	});
	
	function identity(value){
	  return value;
	}
	
	function isBinary(data){
	  return data === undefined
	    || data === null
	    || Buffer.isBuffer(data);
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1268 */,
/* 1269 */,
/* 1270 */,
/* 1271 */,
/* 1272 */,
/* 1273 */,
/* 1274 */,
/* 1275 */
/***/ function(module, exports, __webpack_require__) {

	var pull = __webpack_require__(1276)
	var toStream = __webpack_require__(1291)
	
	var liveStream = module.exports = function (db, opts) {
	  var ts
	  opts = opts || {}
	  opts.tail = opts.tail !== false
	  if(opts.old === false)
	    return toStream(null, pull.live(db, opts))
	
	  opts.onSync = function () {
	    ts.emit('sync')
	  }
	  return ts = toStream(null, pull.read(db, opts))
	}
	
	module.exports.install = function (db) {
	  db.methods = db.methods || {}
	  db.methods['liveStream'] =
	  db.methods['createLiveStream'] = {type: 'readable'}
	
	  db.liveStream =
	  db.createLiveStream =
	    function (opts) {
	      return liveStream(db, opts)
	    }
	}


/***/ },
/* 1276 */
/***/ function(module, exports, __webpack_require__) {

	var pull     = __webpack_require__(1277)
	var Map      = __webpack_require__(1278)
	var AsyncMap = __webpack_require__(1280)
	var Drain    = __webpack_require__(1281)
	
	var toPull   = __webpack_require__(1282)
	var pushable = __webpack_require__(1285)
	var cat      = __webpack_require__(1286)
	var pw       = __webpack_require__(1287)
	var post     = __webpack_require__(1289)
	
	function read(db, opts) {
	  return toPull.read1(db.createReadStream(opts))
	}
	
	var live =
	exports.live =
	function (db, opts) {
	  opts = opts || {}
	
	  var l = pushable(function (err) {
	    if(opts.onAbort) opts.onAbort(err)
	    cleanup()
	  })
	
	  var cleanup = post(db, opts, function (ch) {
	    if(opts.keys === false)
	      l.push(ch.value)
	    else if(opts.values === false)
	      l.push(ch.key)
	    else
	      l.push(ch)
	  })
	
	  return l
	
	}
	
	exports.old = read
	
	exports.read =
	exports.readStream =
	exports.createReadStream = function (db, opts) {
	  opts = opts || {}
	  if(!(opts.tail || opts.live))
	    return read(db, opts)
	
	  //optionally notify when we switch from reading history to realtime
	  var sync = opts.onSync && function (abort, cb) {
	      opts.onSync(abort); cb(abort || true)
	    }
	
	  if(opts.onSync === true || opts.sync === true)
	    sync = pull.values([{sync: true}])
	
	  return cat([read(db, opts), sync, live(db, opts)])
	}
	
	exports.write =
	exports.writeStream =
	exports.createWriteStream = function (db, opts, done) {
	  if('function' === typeof opts)
	    done = opts, opts = null
	  opts = opts || {}
	  return pull(
	    Map(function (e) {
	      if(e.type) return e
	      return {
	        key   : e.key, 
	        value : e.value,
	        type  : e.value == null ? 'del' : 'put'
	      }
	    }),
	    pw.recent(opts.windowSize, opts.windowTime),
	    AsyncMap(function (batch, cb) {
	      db.batch(batch, cb)
	    }),
	    Drain(null, done)
	  )
	}
	
	
	


/***/ },
/* 1277 */
/***/ function(module, exports) {

	'use strict'
	
	module.exports = function pull (a) {
	  var length = arguments.length
	  if (typeof a === 'function' && a.length === 1) {
	    var args = new Array(length)
	    for(var i = 0; i < length; i++)
	      args[i] = arguments[i]
	    return function (read) {
	      if (args == null) {
	        throw new TypeError("partial sink should only be called once!")
	      }
	
	      // Grab the reference after the check, because it's always an array now
	      // (engines like that kind of consistency).
	      var ref = args
	      args = null
	
	      // Prioritize common case of small number of pulls.
	      switch (length) {
	      case 1: return pull(read, ref[0])
	      case 2: return pull(read, ref[0], ref[1])
	      case 3: return pull(read, ref[0], ref[1], ref[2])
	      case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
	      default:
	        ref.unshift(read)
	        return pull.apply(null, ref)
	      }
	    }
	  }
	
	  var read = a
	
	  if (read && typeof read.source === 'function') {
	    read = read.source
	  }
	
	  for (var i = 1; i < length; i++) {
	    var s = arguments[i]
	    if (typeof s === 'function') {
	      read = s(read)
	    } else if (s && typeof s === 'object') {
	      s.sink(read)
	      read = s.source
	    }
	  }
	
	  return read
	}


/***/ },
/* 1278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	function id (e) { return e }
	var prop = __webpack_require__(1279)
	
	module.exports = function map (mapper) {
	  if(!mapper) return id
	  mapper = prop(mapper)
	  return function (read) {
	    return function (abort, cb) {
	      read(abort, function (end, data) {
	        try {
	        data = !end ? mapper(data) : null
	        } catch (err) {
	          return read(err, function () {
	            return cb(err)
	          })
	        }
	        cb(end, data)
	      })
	    }
	  }
	}


/***/ },
/* 1279 */
/***/ function(module, exports) {

	module.exports = function prop (key) {
	  return key && (
	    'string' == typeof key
	    ? function (data) { return data[key] }
	    : 'object' === typeof key && 'function' === typeof key.exec //regexp
	    ? function (data) { var v = key.exec(data); return v && v[0] }
	    : key
	  )
	}


/***/ },
/* 1280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	function id (e) { return e }
	var prop = __webpack_require__(1279)
	
	module.exports = function asyncMap (map) {
	  if(!map) return id
	  map = prop(map)
	  var busy = false, abortCb, aborted
	  return function (read) {
	    return function next (abort, cb) {
	      if(aborted) return cb(aborted)
	      if(abort) {
	        aborted = abort
	        if(!busy) read(abort, cb)
	        else read(abort, function () {
	          //if we are still busy, wait for the mapper to complete.
	          if(busy) abortCb = cb
	          else cb(abort)
	        })
	      }
	      else
	        read(null, function (end, data) {
	          if(end) cb(end)
	          else if(aborted) cb(aborted)
	          else {
	            busy = true
	            map(data, function (err, data) {
	              busy = false
	              if(aborted) {
	                cb(aborted)
	                abortCb(aborted)
	              }
	              else if(err) next (err, cb)
	              else cb(null, data)
	            })
	          }
	        })
	    }
	  }
	}
	
	


/***/ },
/* 1281 */
/***/ function(module, exports) {

	'use strict'
	
	module.exports = function drain (op, done) {
	  var read, abort
	
	  function sink (_read) {
	    read = _read
	    if(abort) return sink.abort()
	    //this function is much simpler to write if you
	    //just use recursion, but by using a while loop
	    //we do not blow the stack if the stream happens to be sync.
	    ;(function next() {
	        var loop = true, cbed = false
	        while(loop) {
	          cbed = false
	          read(null, function (end, data) {
	            cbed = true
	            if(end = end || abort) {
	              loop = false
	              if(done) done(end === true ? null : end)
	              else if(end && end !== true)
	                throw end
	            }
	            else if(op && false === op(data) || abort) {
	              loop = false
	              read(abort || true, done || function () {})
	            }
	            else if(!loop){
	              next()
	            }
	          })
	          if(!cbed) {
	            loop = false
	            return
	          }
	        }
	      })()
	  }
	
	  sink.abort = function (err, cb) {
	    if('function' == typeof err)
	      cb = err, err = true
	    abort = err || true
	    if(read) return read(abort, cb || function () {})
	  }
	
	  return sink
	}


/***/ },
/* 1282 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var pull = __webpack_require__(1283)
	var looper = __webpack_require__(1284)
	
	function destroy(stream, cb) {
	  function onClose () {
	    cleanup(); cb()
	  }
	  function onError (err) {
	    cleanup(); cb(err)
	  }
	  function cleanup() {
	    stream.removeListener('close', onClose)
	    stream.removeListener('error', onError)
	  }
	  stream.on('close', onClose)
	  stream.on('error', onError)
	}
	
	function destroy (stream) {
	  if(!stream.destroy)
	    console.error(
	      'warning, stream-to-pull-stream: \n'
	    + 'the wrapped node-stream does not implement `destroy`, \n'
	    + 'this may cause resource leaks.'
	    )
	  else stream.destroy()
	
	}
	
	function write(read, stream, cb) {
	  var ended, closed = false, did
	  function done () {
	    if(did) return
	    did = true
	    cb && cb(ended === true ? null : ended)
	  }
	
	  function onClose () {
	    if(closed) return
	    closed = true
	    cleanup()
	    if(!ended) read(ended = true, done)
	    else       done()
	  }
	  function onError (err) {
	    cleanup()
	    if(!ended) read(ended = err, done)
	  }
	  function cleanup() {
	    stream.on('finish', onClose)
	    stream.removeListener('close', onClose)
	    stream.removeListener('error', onError)
	  }
	  stream.on('close', onClose)
	  stream.on('finish', onClose)
	  stream.on('error', onError)
	  process.nextTick(function () {
	    looper(function (next) {
	      read(null, function (end, data) {
	        ended = ended || end
	        //you can't "end" a stdout stream, so this needs to be handled specially.
	        if(end === true)
	          return stream._isStdio ? done() : stream.end()
	
	        if(ended = ended || end) {
	          destroy(stream)
	          return done(ended)
	        }
	
	        //I noticed a problem streaming to the terminal:
	        //sometimes the end got cut off, creating invalid output.
	        //it seems that stdout always emits "drain" when it ends.
	        //so this seems to work, but i have been unable to reproduce this test
	        //automatically, so you need to run ./test/stdout.js a few times and the end is valid json.
	        if(stream._isStdio)
	          stream.write(data, function () { next() })
	        else {
	          var pause = stream.write(data)
	          if(pause === false)
	            stream.once('drain', next)
	          else next()
	        }
	      })
	    })
	  })
	}
	
	function first (emitter, events, handler) {
	  function listener (val) {
	    events.forEach(function (e) {
	      emitter.removeListener(e, listener)
	    })
	    handler(val)
	  }
	  events.forEach(function (e) {
	    emitter.on(e, listener)
	  })
	  return emitter
	}
	
	function read2(stream) {
	  var ended = false, waiting = false
	  var _cb
	
	  function read () {
	    var data = stream.read()
	    if(data !== null && _cb) {
	      var cb = _cb; _cb = null
	      cb(null, data)
	    }
	  }
	
	  stream.on('readable', function () {
	    waiting = true
	    _cb && read()
	  })
	  .on('end', function () {
	    ended = true
	    _cb && _cb(ended)
	  })
	  .on('error', function (err) {
	    ended = err
	    _cb && _cb(ended)
	  })
	
	  return function (end, cb) {
	    _cb = cb
	    if(ended)
	      cb(ended)
	    else if(waiting)
	      read()
	  }
	}
	
	function read1(stream) {
	  var buffer = [], cbs = [], ended, paused = false
	
	  var draining
	  function drain() {
	    while((buffer.length || ended) && cbs.length)
	      cbs.shift()(buffer.length ? null : ended, buffer.shift())
	    if(!buffer.length && (paused)) {
	      paused = false
	      stream.resume()
	    }
	  }
	
	  stream.on('data', function (data) {
	    buffer.push(data)
	    drain()
	    if(buffer.length && stream.pause) {
	      paused = true
	      stream.pause()
	    }
	  })
	  stream.on('end', function () {
	    ended = true
	    drain()
	  })
	  stream.on('close', function () {
	    ended = true
	    drain()
	  })
	  stream.on('error', function (err) {
	    ended = err
	    drain()
	  })
	  return function (abort, cb) {
	    if(!cb) throw new Error('*must* provide cb')
	    if(abort) {
	      function onAbort () {
	        while(cbs.length) cbs.shift()(abort)
	        cb(abort)
	      }
	      //if the stream happens to have already ended, then we don't need to abort.
	      if(ended) return onAbort()
	      stream.once('close', onAbort)
	      destroy(stream)
	    }
	    else {
	      cbs.push(cb)
	      drain()
	    }
	  }
	}
	
	var read = read1
	
	var sink = function (stream, cb) {
	  return function (read) {
	    return write(read, stream, cb)
	  }
	}
	
	var source = function (stream) {
	  return read1(stream)
	}
	
	exports = module.exports = function (stream, cb) {
	  return (
	    (stream.writable && stream.write)
	    ? stream.readable
	      ? function(_read) {
	          write(_read, stream, cb);
	          return read1(stream)
	        }
	      : sink(stream, cb)
	    : source(stream)
	  )
	}
	
	exports.sink = sink
	exports.source = source
	exports.read = read
	exports.read1 = read1
	exports.read2 = read2
	exports.duplex = function (stream, cb) {
	  return {
	    source: source(stream),
	    sink: sink(stream, cb)
	  }
	}
	exports.transform = function (stream) {
	  return function (read) {
	    var _source = source(stream)
	    sink(stream)(read); return _source
	  }
	}
	
	
	
	
	
	
	
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1283 */
/***/ function(module, exports) {

	'use strict'
	
	module.exports = function pull (a) {
	  var length = arguments.length
	  if (typeof a === 'function' && a.length === 1) {
	    var args = new Array(length)
	    for(var i = 0; i < length; i++)
	      args[i] = arguments[i]
	    return function (read) {
	      if (args == null) {
	        throw new TypeError("partial sink should only be called once!")
	      }
	
	      // Grab the reference after the check, because it's always an array now
	      // (engines like that kind of consistency).
	      var ref = args
	      args = null
	
	      // Prioritize common case of small number of pulls.
	      switch (length) {
	      case 1: return pull(read, ref[0])
	      case 2: return pull(read, ref[0], ref[1])
	      case 3: return pull(read, ref[0], ref[1], ref[2])
	      case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
	      default:
	        ref.unshift(read)
	        return pull.apply(null, ref)
	      }
	    }
	  }
	
	  var read = a
	
	  if (read && typeof read.source === 'function') {
	    read = read.source
	  }
	
	  for (var i = 1; i < length; i++) {
	    var s = arguments[i]
	    if (typeof s === 'function') {
	      read = s(read)
	    } else if (s && typeof s === 'object') {
	      s.sink(read)
	      read = s.source
	    }
	  }
	
	  return read
	}


/***/ },
/* 1284 */
/***/ function(module, exports) {

	
	var looper = module.exports = function (fun) {
	  (function next () {
	    var loop = true, returned = false, sync = false
	    do {
	      sync = true; loop = false
	      fun.call(this, function () {
	        if(sync) loop = true
	        else     next()
	      })
	      sync = false
	    } while(loop)
	  })()
	}


/***/ },
/* 1285 */
/***/ function(module, exports) {

	module.exports = pullPushable
	
	function pullPushable (onClose) {
	  // create a buffer for data
	  // that have been pushed
	  // but not yet pulled.
	  var buffer = []
	
	  // a pushable is a source stream
	  // (abort, cb) => cb(end, data)
	  //
	  // when pushable is pulled,
	  // keep references to abort and cb
	  // so we can call back after
	  // .end(end) or .push(data)
	  var abort, cb
	  function read (_abort, _cb) {
	    if (_abort) {
	      abort = _abort
	      // if there is already a cb waiting, abort it.
	      if (cb) callback(abort)
	    }
	    cb = _cb
	    drain()
	  }
	
	  var ended
	  read.end = function (end) {
	    ended = ended || end || true
	    // attempt to drain
	    drain()
	  }
	
	  read.push = function (data) {
	    if (ended) return
	    // if sink already waiting,
	    // we can call back directly.
	    if (cb) {
	      callback(abort, data)
	      return
	    }
	    // otherwise push data and
	    // attempt to drain
	    buffer.push(data)
	    drain()
	  }
	
	  return read
	
	  // `drain` calls back to (if any) waiting
	  // sink with abort, end, or next data.
	  function drain () {
	    if (!cb) return
	
	    if (abort) callback(abort)
	    else if (!buffer.length && ended) callback(ended)
	    else if (buffer.length) callback(null, buffer.shift())
	  }
	
	  // `callback` calls back to waiting sink,
	  // and removes references to sink cb.
	  function callback (err, val) {
	    var _cb = cb
	    // if error and pushable passed onClose, call it
	    // the first time this stream ends or errors.
	    if (err && onClose) {
	      var c = onClose
	      onClose = null
	      c(err === true ? null : err)
	    }
	    cb = null
	    _cb(err, val)
	  }
	}


/***/ },
/* 1286 */
/***/ function(module, exports) {

	var noop = function () {}
	
	function abortAll(ary, abort, cb) {
	  var n = ary.length
	  if(!n) return cb(abort)
	  ary.forEach(function (f) {
	    if(f) f(abort, next)
	    else next()
	  })
	
	  function next() {
	    if(--n) return
	    cb(abort)
	  }
	  if(!n) next()
	}
	
	module.exports = function (streams) {
	  return function (abort, cb) {
	    ;(function next () {
	      if(abort)
	        abortAll(streams, abort, cb)
	      else if(!streams.length)
	        cb(true)
	      else if(!streams[0])
	        streams.shift(), next()
	      else
	        streams[0](null, function (err, data) {
	          if(err) {
	            streams.shift() //drop the first, has already ended.
	            if(err === true) next()
	            else             abortAll(streams, err, cb)
	          }
	          else
	            cb(null, data)
	        })
	    })()
	  }
	}
	
	


/***/ },
/* 1287 */
/***/ function(module, exports, __webpack_require__) {

	var looper = __webpack_require__(1288)
	
	var window = module.exports = function (init, start) {
	return function (read) {
	  start = start || function (start, data) {
	    return {start: start, data: data}
	  }
	  var windows = [], output = [], ended = null
	  var data, end
	  var j = 0
	
	  return function (abort, cb) {
	    if(output.length)
	      return cb(null, output.shift())
	    if(ended)
	      return cb(ended)
	    var i = 0
	    var k = j ++
	    read(abort, looper(function (end, data) {
	      var next = this
	      var reduce, update, once = false
	      if(end)
	        ended = end
	
	      function _update (end, _data) {
	        if(once) return
	        once = true
	        delete windows[windows.indexOf(update)]
	        output.push(start(data, _data))
	      }
	
	      if(!ended)
	        update = init(data, _update)
	
	      if(update)
	        windows.push(update)
	      else
	        //don't allow data unless a window started here!
	        once = true
	
	      windows.forEach(function (update, i) {
	        update(end, data)
	      })
	
	      if(output.length)
	        return cb(null, output.shift())
	      else if(ended)
	        return cb(ended)
	      else
	        read(null, next)
	
	  }))
	  }
	}}
	
	window.recent = function (size, time) {
	  var current = null
	  return window(function (data, cb) {
	    if(current) return
	    current = []
	    var timer
	      
	    function done () {
	      var _current = current
	      current = null
	      clearTimeout(timer)
	      cb(null, _current)
	    }
	
	    if(time)
	      timer = setTimeout(done, time)
	
	    return function (end, data) {
	      if(end) return done()
	      current.push(data)
	      if(size != null && current.length >= size)
	        done()
	    }
	  }, function (_, data) {
	    return data
	  })
	}
	
	window.sliding = function (reduce, width) {
	  width = width || 10
	  var k = 0
	  return window(function (data, cb) {
	    var acc
	    var i = 0
	    var l = k++
	    return function (end, data) {
	      if(end) return
	      acc = reduce(acc, data)
	      if(width <= ++ i)
	        cb(null, acc)
	    }
	  })
	}
	


/***/ },
/* 1288 */
/***/ function(module, exports) {

	
	var looper = module.exports = function (fun) {
	  return function next (a, b, c) {
	    var loop = true, returned = false, sync = false
	    do {
	      sync = true; loop = false
	      fun.call(function (x, y, z) {
	        if(sync) {
	          a = x; b = y; c = z
	          loop = true
	        }
	        else
	          next(x, y, z)
	      }, a, b, c)
	      sync = false
	    } while(loop)
	  }
	}


/***/ },
/* 1289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var ltgt = __webpack_require__(1290)
	
	function eq (a, b) {
	  if (Buffer.isBuffer(a) && Buffer.isBuffer(b)) {
	    return beq(a, b)
	  }
	  else return a === b
	}
	
	module.exports = function post (db, opts, each) {
	  if(!each)
	    each = opts, opts = {}
	
	  if('function' === typeof db.post)
	    return db.post(opts, each)
	
	  var encode = (opts && opts.keyEncoding && opts.keyEncoding.encode)
	    || (db.options && db.options.keyEncoding && db.options.keyEncoding.encode)
	    || function (x) { return x }
	
	  var _opts = ltgt.toLtgt(opts, {}, encode)
	
	  function cmp (key) {
	    return ltgt.contains(_opts, encode(key))
	  }
	
	  function onPut (key, val) {
	    if(cmp(key))
	      each({type: 'put', key: key, value: val})
	  }
	
	  function onDel (key, val) {
	    if(cmp(key))
	      each({type: 'del', key: key, value: val})
	  }
	
	  function onBatch (ary) {
	    ary.forEach(function (op) {
	      if(cmp(op.key))
	        each(op)
	    })
	  }
	
	  db.on('put', onPut)
	  db.on('del', onDel)
	  db.on('batch', onBatch)
	
	  return function () {
	    db.removeListener('put', onPut)
	    db.removeListener('del', onPut)
	    db.removeListener('batch', onPut)
	  }
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1290 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	exports.compare = function (a, b) {
	
	  if(Buffer.isBuffer(a)) {
	    var l = Math.min(a.length, b.length)
	    for(var i = 0; i < l; i++) {
	      var cmp = a[i] - b[i]
	      if(cmp) return cmp
	    }
	    return a.length - b.length
	  }
	
	  return a < b ? -1 : a > b ? 1 : 0
	}
	
	function has(obj, key) {
	  return Object.hasOwnProperty.call(obj, key)
	}
	
	// to be compatible with the current abstract-leveldown tests
	// nullish or empty strings.
	// I could use !!val but I want to permit numbers and booleans,
	// if possible.
	
	function isDef (val) {
	  return val !== undefined && val !== ''
	}
	
	function has (range, name) {
	  return Object.hasOwnProperty.call(range, name)
	}
	
	function hasKey(range, name) {
	  return Object.hasOwnProperty.call(range, name) && name
	}
	
	var lowerBoundKey = exports.lowerBoundKey = function (range) {
	    return (
	       hasKey(range, 'gt')
	    || hasKey(range, 'gte')
	    || hasKey(range, 'min')
	    || (range.reverse ? hasKey(range, 'end') : hasKey(range, 'start'))
	    || undefined
	    )
	}
	
	var lowerBound = exports.lowerBound = function (range) {
	  var k = lowerBoundKey(range)
	  return k && range[k]
	}
	
	var lowerBoundInclusive = exports.lowerBoundInclusive = function (range) {
	  return has(range, 'gt') ? false : true
	}
	
	var upperBoundInclusive = exports.upperBoundInclusive =
	  function (range) {
	    return (has(range, 'lt') /*&& !range.maxEx*/) ? false : true
	  }
	
	var lowerBoundExclusive = exports.lowerBoundExclusive =
	  function (range) {
	    return !lowerBoundInclusive(range)
	  }
	
	var upperBoundExclusive = exports.upperBoundExclusive =
	  function (range) {
	    return !upperBoundInclusive(range)
	  }
	
	var upperBoundKey = exports.upperBoundKey = function (range) {
	    return (
	       hasKey(range, 'lt')
	    || hasKey(range, 'lte')
	    || hasKey(range, 'max')
	    || (range.reverse ? hasKey(range, 'start') : hasKey(range, 'end'))
	    || undefined
	    )
	}
	
	var upperBound = exports.upperBound = function (range) {
	  var k = upperBoundKey(range)
	  return k && range[k]
	}
	
	function id (e) { return e }
	
	exports.toLtgt = function (range, _range, map, lower, upper) {
	  _range = _range || {}
	  map = map || id
	  var defaults = arguments.length > 3
	  var lb = exports.lowerBoundKey(range)
	  var ub = exports.upperBoundKey(range)
	  if(lb) {
	    if(lb === 'gt') _range.gt = map(range.gt, false)
	    else            _range.gte = map(range[lb], false)
	  }
	  else if(defaults)
	    _range.gte = map(lower, false)
	
	  if(ub) {
	    if(ub === 'lt') _range.lt = map(range.lt, true)
	    else            _range.lte = map(range[ub], true)
	  }
	  else if(defaults)
	    _range.lte = map(upper, true)
	
	  if(range.reverse != null)
	    _range.reverse = !!range.reverse
	
	  //if range was used mutably
	  //(in level-sublevel it's part of an options object
	  //that has more properties on it.)
	  if(has(_range, 'max'))   delete _range.max
	  if(has(_range, 'min'))   delete _range.min
	  if(has(_range, 'start')) delete _range.start
	  if(has(_range, 'end'))   delete _range.end
	
	  return _range
	}
	
	exports.contains = function (range, key, compare) {
	  compare = compare || exports.compare
	
	  var lb = lowerBound(range)
	  if(isDef(lb)) {
	    var cmp = compare(key, lb)
	    if(cmp < 0 || (cmp === 0 && lowerBoundExclusive(range)))
	      return false
	  }
	
	  var ub = upperBound(range)
	  if(isDef(ub)) {
	    var cmp = compare(key, ub)
	    if(cmp > 0 || (cmp === 0) && upperBoundExclusive(range))
	      return false
	  }
	
	  return true
	}
	
	exports.filter = function (range, compare) {
	  return function (key) {
	    return exports.contains(range, key, compare)
	  }
	}
	
	
	
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1291 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process) {
	var Stream = __webpack_require__(827)
	var addPipe = __webpack_require__(1292).addPipe
	
	module.exports = duplex
	
	var next = (
	  'undefined' === typeof setImmediate
	  ? process.nextTick
	  : setImmediate
	)
	
	function duplex (reader, read) {
	  var cbs = [], input = [], ended
	  var s = new Stream()
	  s.writable = s.readable = true
	  s.write = function (data) {
	    if(cbs.length)
	      cbs.shift()(null, data)
	    else
	      input.push(data)
	    return !! cbs.length
	  }
	
	  s.end = function () {
	    if(read)
	      read(ended = true, cbs.length ? cbs.shift() : function () {})
	    else if(cbs.length)
	      cbs.shift()(true)      
	  }
	
	  s.source = addPipe(function (end, cb) {
	    if(input.length) {
	      cb(null, input.shift())
	      if(!input.length)
	        s.emit('drain')
	    }
	    else if(ended = ended || end)
	      cb(ended)
	    else
	      cbs.push(cb)
	  })
	
	  if(reader) reader(s.source)
	
	  var output = [], _cbs = []
	  var _ended = false, waiting = false
	
	  s.sink = function (_read) {
	    read = _read
	    next(drain)
	  }
	
	  if(read) s.sink(read)
	
	  function drain () {
	    waiting = false
	    if(!read) return
	    while(output.length && !s.paused) {
	      s.emit('data', output.shift())
	    }
	    if(s.paused) return
	    if(_ended)
	      return s.emit('end')
	
	    read(null, function next (end, data) {
	      if(s.paused) {
	        if(end === true) _ended = end
	        else if(end) s.emit('error', end)
	        else output.push(data)
	        waiting = true
	      } else {
	        if(end && (ended = end) !== true)
	          s.emit('error', end)
	        else if(ended = ended || end) s.emit('end')
	        else {
	          s.emit('data', data)
	          read(null, next)
	        }
	      }
	    })
	  }
	
	  s.pause = function () {
	    s.paused = true
	    return s
	  }
	
	  s.resume = function () {
	    s.paused = false
	    drain()
	    return s
	  }
	
	  s.destroy = function () {
	    if(!ended && read)
	      read(ended = true, function () {})
	    ended = true
	    if(cbs.length)
	      cbs.shift()(true)
	
	    s.emit('close')
	  }
	
	  return s
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(702).setImmediate, __webpack_require__(294)))

/***/ },
/* 1292 */
/***/ function(module, exports) {

	exports.id = 
	function (item) {
	  return item
	}
	
	exports.prop = 
	function (map) {  
	  if('string' == typeof map) {
	    var key = map
	    return function (data) { return data[key] }
	  }
	  return map
	}
	
	exports.tester = function (test) {
	  if(!test) return exports.id
	  if('object' === typeof test
	    && 'function' === typeof test.test)
	      return test.test.bind(test)
	  return exports.prop(test) || exports.id
	}
	
	exports.addPipe = addPipe
	
	function addPipe(read) {
	  if('function' !== typeof read)
	    return read
	
	  read.pipe = read.pipe || function (reader) {
	    if('function' != typeof reader)
	      throw new Error('must pipe to reader')
	    return addPipe(reader(read))
	  }
	  read.type = 'Source'
	  return read
	}
	
	var Source =
	exports.Source =
	function Source (createRead) {
	  function s() {
	    var args = [].slice.call(arguments)
	    return addPipe(createRead.apply(null, args))
	  }
	  s.type = 'Source'
	  return s
	}
	
	
	var Through =
	exports.Through = 
	function (createRead) {
	  return function () {
	    var args = [].slice.call(arguments)
	    var piped = []
	    function reader (read) {
	      args.unshift(read)
	      read = createRead.apply(null, args)
	      while(piped.length)
	        read = piped.shift()(read)
	      return read
	      //pipeing to from this reader should compose...
	    }
	    reader.pipe = function (read) {
	      piped.push(read) 
	      if(read.type === 'Source')
	        throw new Error('cannot pipe ' + reader.type + ' to Source')
	      reader.type = read.type === 'Sink' ? 'Sink' : 'Through'
	      return reader
	    }
	    reader.type = 'Through'
	    return reader
	  }
	}
	
	var Sink =
	exports.Sink = 
	function Sink(createReader) {
	  return function () {
	    var args = [].slice.call(arguments)
	    if(!createReader)
	      throw new Error('must be createReader function')
	    function s (read) {
	      args.unshift(read)
	      return createReader.apply(null, args)
	    }
	    s.type = 'Sink'
	    return s
	  }
	}
	
	
	exports.maybeSink = 
	exports.maybeDrain = 
	function (createSink, cb) {
	  if(!cb)
	    return Through(function (read) {
	      var ended
	      return function (close, cb) {
	        if(close) return read(close, cb)
	        if(ended) return cb(ended)
	
	        createSink(function (err, data) {
	          ended = err || true
	          if(!err) cb(null, data)
	          else     cb(ended)
	        }) (read)
	      }
	    })()
	
	  return Sink(function (read) {
	    return createSink(cb) (read)
	  })()
	}
	


/***/ },
/* 1293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	var builtInTypes = {
	  string: {
	    test: function (val) {
	      return typeof val === 'string'
	    },
	    dehydrate: identity,
	    hydrate: identity
	  },
	  'null': {
	    test: function (val) {
	      return val == null
	    },
	    hydrate: function () {
	      return null
	    },
	    dehydrate: function () {
	      return ''
	    }
	  },
	  number: {
	    test: function (val) {
	      return typeof val === 'number'
	    },
	    hydrate: function (val) {
	      return parseFloat(val)
	    },
	    dehydrate: toString
	  },
	  date: {
	    test: function (val, str) {
	      return str === '[object Date]'
	    },
	    hydrate: function (val) {
	      return new Date(parseInt(val))
	    },
	    dehydrate: function (val) {
	      return +val
	    }
	  },
	  boolean: {
	    test: function (val) {
	      return typeof val === 'boolean'
	    },
	    hydrate: function (val) {
	      return val === 'false' || val === '0' ? false : true
	    },
	    dehydrate: toString
	  },
	  regexp: {
	    test: function (val, str) {
	      return str === '[object RegExp]'
	    },
	    hydrate: function (val) {
	      return new RegExp(val.replace(/(^\/|\/$)/g, ''))
	    },
	    dehydrate: toString
	  },
	  buffer: {
	    test: function (val) {
	      return Buffer.isBuffer(val)
	    },
	    hydrate: function (val) {
	      return new Buffer(val, 'base64')
	    },
	    dehydrate: function (val) {
	      return val.toString('base64')
	    }
	  },
	  array: {
	    test: function (val) {
	      return Array.isArray(val)
	    },
	    dehydrate: function (arr, hydra) {
	      // Convert to an object so we can store types.
	      var newObj = {}
	      for (var i = 0; i < arr.length; i++) {
	        newObj[i] = arr[i]
	      }
	
	      return hydra.dehydrate(newObj, hydra)
	    },
	    hydrate: function (val, hydra) {
	      val = hydra.hydrate(val)
	
	      // Convert back to array.
	      var newArr = new Array(Object.keys(val).length)
	      for (var i in val) {
	        newArr[i] = val[i]
	      }
	
	      return newArr
	    }
	  },
	  object: {
	    type: function (val) {
	      return val && typeof val === 'object'
	    },
	    hydrate: function (val, hydra) {
	      return hydra.hydrate(val)
	    },
	    dehydrate: function (val, hydra) {
	      return hydra.dehydrate(val)
	    }
	  }
	}
	
	function identity (val) {
	  return val
	}
	
	function toString (val) {
	  return val.toString ? val.toString() : val
	}
	
	function hydra (opts) {
	  var byType = {}
	  for (var name in builtInTypes) {
	    byType[name] = builtInTypes[name]
	  }
	
	  var api = {
	    hydrate: hydrate,
	    dehydrate: dehydrate,
	    addType: addType
	  }
	
	  return api
	
	  function dehydrate (input) {
	    if (isPrimitiveOrNull(input)) return input
	
	    var obj = {}, k, typeCount = 0
	    obj.__proto__ = input.__proto__ // so prototype.toJSON() will still fire
	    obj._types = {}
	
	    for (k in input) {
	      if (!input.hasOwnProperty(k)) continue
	
	      var val = input[k]
	      var name = getType(val)
	      if (!name) throw new Error('missing dehydrator for property: ' + k)
	
	      typeCount++
	      var hd = byType[name]
	      obj._types[k] = name
	      obj[k] = hd.dehydrate(val, api)
	    }
	
	    if (typeCount === 0) {
	      delete obj._types
	    }
	
	    return obj
	  }
	
	  function hydrate (input) {
	    if (isPrimitiveOrNull(input)) return input
	    if (!input._types) return input
	
	    var obj = {}, k
	    for (k in input) {
	      if (!input.hasOwnProperty(k)) continue
	      if (k == '_types') {
	        continue
	      }
	
	      var name = input._types[k]
	      var hd = byType[name]
	      if (!hd) throw new Error('missing hydrator for type: ' + k)
	
	      obj[k] = hd.hydrate(input[k], api)
	    }
	
	    delete obj._types
	    return obj
	  }
	
	  function getType (val) {
	    var str = Object.prototype.toString.call(val)
	    for (var name in byType) {
	      if (name === 'object') continue
	      if (byType[name].test(val, str)) return name
	    }
	
	    // fallback to object
	    return typeof val === 'object' ? 'object' : null
	  }
	
	  function addType (name, opts) {
	    assert(typeof opts === 'object', 'expected "opts"')
	    assert(typeof opts.test === 'function', 'expected "test"')
	    assert(typeof opts.hydrate === 'function', 'expected "hydrate"')
	    assert(typeof opts.dehydrate === 'function', 'expected "dehydrate"')
	
	    if (name in byType) {
	      throw new Error('type "' + name + '" already exists!')
	    }
	
	    // defensive copy
	    byType[name] = {
	      test: opts.test,
	      hydrate: opts.hydrate,
	      dehydrate: opts.dehydrate
	    }
	
	    return api
	  }
	}
	
	function isPrimitiveOrNull (input) {
	  return input == null || typeof input !== 'object'
	}
	
	function assert (statement, msg) {
	  if (!statement) throw new Error(msg)
	}
	
	
	module.exports = hydra
	
	// backwards compatibility
	var builtIn = hydra()
	module.exports.hydrate = builtIn.hydrate
	module.exports.dehydrate = builtIn.dehydrate
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1294 */,
/* 1295 */,
/* 1296 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:
	
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	
	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}
	
	// based on node assert, original notice:
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var util = __webpack_require__(1130);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;
	
	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }
	
	      this.stack = out;
	    }
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};
	
	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;
	
	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;
	
	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;
	
	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};
	
	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }
	
	    memos.actual.push(actual);
	    memos.expected.push(expected);
	
	    return objEquiv(actual, expected, strict, memos);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}
	
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }
	
	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }
	
	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }
	
	  return expected.call({}, actual) === true;
	}
	
	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }
	
	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }
	
	  actual = _tryBlock(block);
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;
	
	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};
	
	assert.ifError = function(err) { if (err) throw err; };
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1297 */,
/* 1298 */,
/* 1299 */,
/* 1300 */
/***/ function(module, exports, __webpack_require__) {

	var Point = __webpack_require__(1301)
	var Curve = __webpack_require__(1306)
	
	var getCurveByName = __webpack_require__(1307)
	
	module.exports = {
	  Curve: Curve,
	  Point: Point,
	  getCurveByName: getCurveByName
	}


/***/ },
/* 1301 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var assert = __webpack_require__(1296)
	var BigInteger = __webpack_require__(1302)
	
	var THREE = BigInteger.valueOf(3)
	
	function Point (curve, x, y, z) {
	  assert.notStrictEqual(z, undefined, 'Missing Z coordinate')
	
	  this.curve = curve
	  this.x = x
	  this.y = y
	  this.z = z
	  this._zInv = null
	
	  this.compressed = true
	}
	
	Object.defineProperty(Point.prototype, 'zInv', {
	  get: function () {
	    if (this._zInv === null) {
	      this._zInv = this.z.modInverse(this.curve.p)
	    }
	
	    return this._zInv
	  }
	})
	
	Object.defineProperty(Point.prototype, 'affineX', {
	  get: function () {
	    return this.x.multiply(this.zInv).mod(this.curve.p)
	  }
	})
	
	Object.defineProperty(Point.prototype, 'affineY', {
	  get: function () {
	    return this.y.multiply(this.zInv).mod(this.curve.p)
	  }
	})
	
	Point.fromAffine = function (curve, x, y) {
	  return new Point(curve, x, y, BigInteger.ONE)
	}
	
	Point.prototype.equals = function (other) {
	  if (other === this) return true
	  if (this.curve.isInfinity(this)) return this.curve.isInfinity(other)
	  if (this.curve.isInfinity(other)) return this.curve.isInfinity(this)
	
	  // u = Y2 * Z1 - Y1 * Z2
	  var u = other.y.multiply(this.z).subtract(this.y.multiply(other.z)).mod(this.curve.p)
	
	  if (u.signum() !== 0) return false
	
	  // v = X2 * Z1 - X1 * Z2
	  var v = other.x.multiply(this.z).subtract(this.x.multiply(other.z)).mod(this.curve.p)
	
	  return v.signum() === 0
	}
	
	Point.prototype.negate = function () {
	  var y = this.curve.p.subtract(this.y)
	
	  return new Point(this.curve, this.x, y, this.z)
	}
	
	Point.prototype.add = function (b) {
	  if (this.curve.isInfinity(this)) return b
	  if (this.curve.isInfinity(b)) return this
	
	  var x1 = this.x
	  var y1 = this.y
	  var x2 = b.x
	  var y2 = b.y
	
	  // u = Y2 * Z1 - Y1 * Z2
	  var u = y2.multiply(this.z).subtract(y1.multiply(b.z)).mod(this.curve.p)
	  // v = X2 * Z1 - X1 * Z2
	  var v = x2.multiply(this.z).subtract(x1.multiply(b.z)).mod(this.curve.p)
	
	  if (v.signum() === 0) {
	    if (u.signum() === 0) {
	      return this.twice() // this == b, so double
	    }
	
	    return this.curve.infinity // this = -b, so infinity
	  }
	
	  var v2 = v.square()
	  var v3 = v2.multiply(v)
	  var x1v2 = x1.multiply(v2)
	  var zu2 = u.square().multiply(this.z)
	
	  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
	  var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.p)
	  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
	  var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.p)
	  // z3 = v^3 * z1 * z2
	  var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.p)
	
	  return new Point(this.curve, x3, y3, z3)
	}
	
	Point.prototype.twice = function () {
	  if (this.curve.isInfinity(this)) return this
	  if (this.y.signum() === 0) return this.curve.infinity
	
	  var x1 = this.x
	  var y1 = this.y
	
	  var y1z1 = y1.multiply(this.z)
	  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.p)
	  var a = this.curve.a
	
	  // w = 3 * x1^2 + a * z1^2
	  var w = x1.square().multiply(THREE)
	
	  if (a.signum() !== 0) {
	    w = w.add(this.z.square().multiply(a))
	  }
	
	  w = w.mod(this.curve.p)
	  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
	  var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.p)
	  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
	  var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.pow(3)).mod(this.curve.p)
	  // z3 = 8 * (y1 * z1)^3
	  var z3 = y1z1.pow(3).shiftLeft(3).mod(this.curve.p)
	
	  return new Point(this.curve, x3, y3, z3)
	}
	
	// Simple NAF (Non-Adjacent Form) multiplication algorithm
	// TODO: modularize the multiplication algorithm
	Point.prototype.multiply = function (k) {
	  if (this.curve.isInfinity(this)) return this
	  if (k.signum() === 0) return this.curve.infinity
	
	  var e = k
	  var h = e.multiply(THREE)
	
	  var neg = this.negate()
	  var R = this
	
	  for (var i = h.bitLength() - 2; i > 0; --i) {
	    var hBit = h.testBit(i)
	    var eBit = e.testBit(i)
	
	    R = R.twice()
	
	    if (hBit !== eBit) {
	      R = R.add(hBit ? this : neg)
	    }
	  }
	
	  return R
	}
	
	// Compute this*j + x*k (simultaneous multiplication)
	Point.prototype.multiplyTwo = function (j, x, k) {
	  var i = Math.max(j.bitLength(), k.bitLength()) - 1
	  var R = this.curve.infinity
	  var both = this.add(x)
	
	  while (i >= 0) {
	    var jBit = j.testBit(i)
	    var kBit = k.testBit(i)
	
	    R = R.twice()
	
	    if (jBit) {
	      if (kBit) {
	        R = R.add(both)
	      } else {
	        R = R.add(this)
	      }
	    } else if (kBit) {
	      R = R.add(x)
	    }
	    --i
	  }
	
	  return R
	}
	
	Point.prototype.getEncoded = function (compressed) {
	  if (compressed == null) compressed = this.compressed
	  if (this.curve.isInfinity(this)) return new Buffer('00', 'hex') // Infinity point encoded is simply '00'
	
	  var x = this.affineX
	  var y = this.affineY
	
	  var buffer
	
	  // Determine size of q in bytes
	  var byteLength = Math.floor((this.curve.p.bitLength() + 7) / 8)
	
	  // 0x02/0x03 | X
	  if (compressed) {
	    buffer = new Buffer(1 + byteLength)
	    buffer.writeUInt8(y.isEven() ? 0x02 : 0x03, 0)
	
	  // 0x04 | X | Y
	  } else {
	    buffer = new Buffer(1 + byteLength + byteLength)
	    buffer.writeUInt8(0x04, 0)
	
	    y.toBuffer(byteLength).copy(buffer, 1 + byteLength)
	  }
	
	  x.toBuffer(byteLength).copy(buffer, 1)
	
	  return buffer
	}
	
	Point.decodeFrom = function (curve, buffer) {
	  var type = buffer.readUInt8(0)
	  var compressed = (type !== 4)
	
	  var byteLength = Math.floor((curve.p.bitLength() + 7) / 8)
	  var x = BigInteger.fromBuffer(buffer.slice(1, 1 + byteLength))
	
	  var Q
	  if (compressed) {
	    assert.equal(buffer.length, byteLength + 1, 'Invalid sequence length')
	    assert(type === 0x02 || type === 0x03, 'Invalid sequence tag')
	
	    var isOdd = (type === 0x03)
	    Q = curve.pointFromX(isOdd, x)
	  } else {
	    assert.equal(buffer.length, 1 + byteLength + byteLength, 'Invalid sequence length')
	
	    var y = BigInteger.fromBuffer(buffer.slice(1 + byteLength))
	    Q = Point.fromAffine(curve, x, y)
	  }
	
	  Q.compressed = compressed
	  return Q
	}
	
	Point.prototype.toString = function () {
	  if (this.curve.isInfinity(this)) return '(INFINITY)'
	
	  return '(' + this.affineX.toString() + ',' + this.affineY.toString() + ')'
	}
	
	module.exports = Point
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1302 */
/***/ function(module, exports, __webpack_require__) {

	var BigInteger = __webpack_require__(1303)
	
	//addons
	__webpack_require__(1305)
	
	module.exports = BigInteger

/***/ },
/* 1303 */
/***/ function(module, exports, __webpack_require__) {

	// (public) Constructor
	function BigInteger(a, b, c) {
	  if (!(this instanceof BigInteger))
	    return new BigInteger(a, b, c)
	
	  if (a != null) {
	    if ("number" == typeof a) this.fromNumber(a, b, c)
	    else if (b == null && "string" != typeof a) this.fromString(a, 256)
	    else this.fromString(a, b)
	  }
	}
	
	var proto = BigInteger.prototype
	
	// duck-typed isBigInteger
	proto.__bigi = __webpack_require__(1304).version
	BigInteger.isBigInteger = function (obj, check_ver) {
	  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)
	}
	
	// Bits per digit
	var dbits
	
	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.
	
	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i, x, w, j, c, n) {
	  while (--n >= 0) {
	    var v = x * this[i++] + w[j] + c
	    c = Math.floor(v / 0x4000000)
	    w[j++] = v & 0x3ffffff
	  }
	  return c
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i, x, w, j, c, n) {
	  var xl = x & 0x7fff,
	    xh = x >> 15
	  while (--n >= 0) {
	    var l = this[i] & 0x7fff
	    var h = this[i++] >> 15
	    var m = xh * l + h * xl
	    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)
	    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)
	    w[j++] = l & 0x3fffffff
	  }
	  return c
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i, x, w, j, c, n) {
	  var xl = x & 0x3fff,
	    xh = x >> 14
	  while (--n >= 0) {
	    var l = this[i] & 0x3fff
	    var h = this[i++] >> 14
	    var m = xh * l + h * xl
	    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c
	    c = (l >> 28) + (m >> 14) + xh * h
	    w[j++] = l & 0xfffffff
	  }
	  return c
	}
	
	// wtf?
	BigInteger.prototype.am = am1
	dbits = 26
	
	BigInteger.prototype.DB = dbits
	BigInteger.prototype.DM = ((1 << dbits) - 1)
	var DV = BigInteger.prototype.DV = (1 << dbits)
	
	var BI_FP = 52
	BigInteger.prototype.FV = Math.pow(2, BI_FP)
	BigInteger.prototype.F1 = BI_FP - dbits
	BigInteger.prototype.F2 = 2 * dbits - BI_FP
	
	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz"
	var BI_RC = new Array()
	var rr, vv
	rr = "0".charCodeAt(0)
	for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv
	rr = "a".charCodeAt(0)
	for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
	rr = "A".charCodeAt(0)
	for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv
	
	function int2char(n) {
	  return BI_RM.charAt(n)
	}
	
	function intAt(s, i) {
	  var c = BI_RC[s.charCodeAt(i)]
	  return (c == null) ? -1 : c
	}
	
	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]
	  r.t = this.t
	  r.s = this.s
	}
	
	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1
	  this.s = (x < 0) ? -1 : 0
	  if (x > 0) this[0] = x
	  else if (x < -1) this[0] = x + DV
	  else this.t = 0
	}
	
	// return bigint initialized to value
	function nbv(i) {
	  var r = new BigInteger()
	  r.fromInt(i)
	  return r
	}
	
	// (protected) set from string and radix
	function bnpFromString(s, b) {
	  var self = this
	
	  var k
	  if (b == 16) k = 4
	  else if (b == 8) k = 3
	  else if (b == 256) k = 8; // byte array
	  else if (b == 2) k = 1
	  else if (b == 32) k = 5
	  else if (b == 4) k = 2
	  else {
	    self.fromRadix(s, b)
	    return
	  }
	  self.t = 0
	  self.s = 0
	  var i = s.length,
	    mi = false,
	    sh = 0
	  while (--i >= 0) {
	    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)
	    if (x < 0) {
	      if (s.charAt(i) == "-") mi = true
	      continue
	    }
	    mi = false
	    if (sh == 0)
	      self[self.t++] = x
	    else if (sh + k > self.DB) {
	      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh
	      self[self.t++] = (x >> (self.DB - sh))
	    } else
	      self[self.t - 1] |= x << sh
	    sh += k
	    if (sh >= self.DB) sh -= self.DB
	  }
	  if (k == 8 && (s[0] & 0x80) != 0) {
	    self.s = -1
	    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh
	  }
	  self.clamp()
	  if (mi) BigInteger.ZERO.subTo(self, self)
	}
	
	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s & this.DM
	  while (this.t > 0 && this[this.t - 1] == c)--this.t
	}
	
	// (public) return string representation in given radix
	function bnToString(b) {
	  var self = this
	  if (self.s < 0) return "-" + self.negate()
	    .toString(b)
	  var k
	  if (b == 16) k = 4
	  else if (b == 8) k = 3
	  else if (b == 2) k = 1
	  else if (b == 32) k = 5
	  else if (b == 4) k = 2
	  else return self.toRadix(b)
	  var km = (1 << k) - 1,
	    d, m = false,
	    r = "",
	    i = self.t
	  var p = self.DB - (i * self.DB) % k
	  if (i-- > 0) {
	    if (p < self.DB && (d = self[i] >> p) > 0) {
	      m = true
	      r = int2char(d)
	    }
	    while (i >= 0) {
	      if (p < k) {
	        d = (self[i] & ((1 << p) - 1)) << (k - p)
	        d |= self[--i] >> (p += self.DB - k)
	      } else {
	        d = (self[i] >> (p -= k)) & km
	        if (p <= 0) {
	          p += self.DB
	          --i
	        }
	      }
	      if (d > 0) m = true
	      if (m) r += int2char(d)
	    }
	  }
	  return m ? r : "0"
	}
	
	// (public) -this
	function bnNegate() {
	  var r = new BigInteger()
	  BigInteger.ZERO.subTo(this, r)
	  return r
	}
	
	// (public) |this|
	function bnAbs() {
	  return (this.s < 0) ? this.negate() : this
	}
	
	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s - a.s
	  if (r != 0) return r
	  var i = this.t
	  r = i - a.t
	  if (r != 0) return (this.s < 0) ? -r : r
	  while (--i >= 0)
	    if ((r = this[i] - a[i]) != 0) return r
	  return 0
	}
	
	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1,
	    t
	  if ((t = x >>> 16) != 0) {
	    x = t
	    r += 16
	  }
	  if ((t = x >> 8) != 0) {
	    x = t
	    r += 8
	  }
	  if ((t = x >> 4) != 0) {
	    x = t
	    r += 4
	  }
	  if ((t = x >> 2) != 0) {
	    x = t
	    r += 2
	  }
	  if ((t = x >> 1) != 0) {
	    x = t
	    r += 1
	  }
	  return r
	}
	
	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if (this.t <= 0) return 0
	  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))
	}
	
	// (public) return the number of bytes in "this"
	function bnByteLength() {
	  return this.bitLength() >> 3
	}
	
	// (protected) r = this << n*DB
	function bnpDLShiftTo(n, r) {
	  var i
	  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]
	  for (i = n - 1; i >= 0; --i) r[i] = 0
	  r.t = this.t + n
	  r.s = this.s
	}
	
	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n, r) {
	  for (var i = n; i < this.t; ++i) r[i - n] = this[i]
	  r.t = Math.max(this.t - n, 0)
	  r.s = this.s
	}
	
	// (protected) r = this << n
	function bnpLShiftTo(n, r) {
	  var self = this
	  var bs = n % self.DB
	  var cbs = self.DB - bs
	  var bm = (1 << cbs) - 1
	  var ds = Math.floor(n / self.DB),
	    c = (self.s << bs) & self.DM,
	    i
	  for (i = self.t - 1; i >= 0; --i) {
	    r[i + ds + 1] = (self[i] >> cbs) | c
	    c = (self[i] & bm) << bs
	  }
	  for (i = ds - 1; i >= 0; --i) r[i] = 0
	  r[ds] = c
	  r.t = self.t + ds + 1
	  r.s = self.s
	  r.clamp()
	}
	
	// (protected) r = this >> n
	function bnpRShiftTo(n, r) {
	  var self = this
	  r.s = self.s
	  var ds = Math.floor(n / self.DB)
	  if (ds >= self.t) {
	    r.t = 0
	    return
	  }
	  var bs = n % self.DB
	  var cbs = self.DB - bs
	  var bm = (1 << bs) - 1
	  r[0] = self[ds] >> bs
	  for (var i = ds + 1; i < self.t; ++i) {
	    r[i - ds - 1] |= (self[i] & bm) << cbs
	    r[i - ds] = self[i] >> bs
	  }
	  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs
	  r.t = self.t - ds
	  r.clamp()
	}
	
	// (protected) r = this - a
	function bnpSubTo(a, r) {
	  var self = this
	  var i = 0,
	    c = 0,
	    m = Math.min(a.t, self.t)
	  while (i < m) {
	    c += self[i] - a[i]
	    r[i++] = c & self.DM
	    c >>= self.DB
	  }
	  if (a.t < self.t) {
	    c -= a.s
	    while (i < self.t) {
	      c += self[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c += self.s
	  } else {
	    c += self.s
	    while (i < a.t) {
	      c -= a[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c -= a.s
	  }
	  r.s = (c < 0) ? -1 : 0
	  if (c < -1) r[i++] = self.DV + c
	  else if (c > 0) r[i++] = c
	  r.t = i
	  r.clamp()
	}
	
	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a, r) {
	  var x = this.abs(),
	    y = a.abs()
	  var i = x.t
	  r.t = i + y.t
	  while (--i >= 0) r[i] = 0
	  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)
	  r.s = 0
	  r.clamp()
	  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)
	}
	
	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs()
	  var i = r.t = 2 * x.t
	  while (--i >= 0) r[i] = 0
	  for (i = 0; i < x.t - 1; ++i) {
	    var c = x.am(i, x[i], r, 2 * i, 0, 1)
	    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
	      r[i + x.t] -= x.DV
	      r[i + x.t + 1] = 1
	    }
	  }
	  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)
	  r.s = 0
	  r.clamp()
	}
	
	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m, q, r) {
	  var self = this
	  var pm = m.abs()
	  if (pm.t <= 0) return
	  var pt = self.abs()
	  if (pt.t < pm.t) {
	    if (q != null) q.fromInt(0)
	    if (r != null) self.copyTo(r)
	    return
	  }
	  if (r == null) r = new BigInteger()
	  var y = new BigInteger(),
	    ts = self.s,
	    ms = m.s
	  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus
	  if (nsh > 0) {
	    pm.lShiftTo(nsh, y)
	    pt.lShiftTo(nsh, r)
	  } else {
	    pm.copyTo(y)
	    pt.copyTo(r)
	  }
	  var ys = y.t
	  var y0 = y[ys - 1]
	  if (y0 == 0) return
	  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)
	  var d1 = self.FV / yt,
	    d2 = (1 << self.F1) / yt,
	    e = 1 << self.F2
	  var i = r.t,
	    j = i - ys,
	    t = (q == null) ? new BigInteger() : q
	  y.dlShiftTo(j, t)
	  if (r.compareTo(t) >= 0) {
	    r[r.t++] = 1
	    r.subTo(t, r)
	  }
	  BigInteger.ONE.dlShiftTo(ys, t)
	  t.subTo(y, y); // "negative" y so we can replace sub with am later
	  while (y.t < ys) y[y.t++] = 0
	  while (--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)
	    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
	      y.dlShiftTo(j, t)
	      r.subTo(t, r)
	      while (r[i] < --qd) r.subTo(t, r)
	    }
	  }
	  if (q != null) {
	    r.drShiftTo(ys, q)
	    if (ts != ms) BigInteger.ZERO.subTo(q, q)
	  }
	  r.t = ys
	  r.clamp()
	  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
	  if (ts < 0) BigInteger.ZERO.subTo(r, r)
	}
	
	// (public) this mod a
	function bnMod(a) {
	  var r = new BigInteger()
	  this.abs()
	    .divRemTo(a, null, r)
	  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)
	  return r
	}
	
	// Modular reduction using "classic" algorithm
	function Classic(m) {
	  this.m = m
	}
	
	function cConvert(x) {
	  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)
	  else return x
	}
	
	function cRevert(x) {
	  return x
	}
	
	function cReduce(x) {
	  x.divRemTo(this.m, null, x)
	}
	
	function cMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	  this.reduce(r)
	}
	
	function cSqrTo(x, r) {
	  x.squareTo(r)
	  this.reduce(r)
	}
	
	Classic.prototype.convert = cConvert
	Classic.prototype.revert = cRevert
	Classic.prototype.reduce = cReduce
	Classic.prototype.mulTo = cMulTo
	Classic.prototype.sqrTo = cSqrTo
	
	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if (this.t < 1) return 0
	  var x = this[0]
	  if ((x & 1) == 0) return 0
	  var y = x & 3; // y == 1/x mod 2^2
	  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
	  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
	  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y > 0) ? this.DV - y : -y
	}
	
	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m
	  this.mp = m.invDigit()
	  this.mpl = this.mp & 0x7fff
	  this.mph = this.mp >> 15
	  this.um = (1 << (m.DB - 15)) - 1
	  this.mt2 = 2 * m.t
	}
	
	// xR mod m
	function montConvert(x) {
	  var r = new BigInteger()
	  x.abs()
	    .dlShiftTo(this.m.t, r)
	  r.divRemTo(this.m, null, r)
	  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)
	  return r
	}
	
	// x/R mod m
	function montRevert(x) {
	  var r = new BigInteger()
	  x.copyTo(r)
	  this.reduce(r)
	  return r
	}
	
	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while (x.t <= this.mt2) // pad x so am has enough room later
	    x[x.t++] = 0
	  for (var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x[i]*mp mod DV
	    var j = x[i] & 0x7fff
	    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM
	    // use am to combine the multiply-shift-add into one call
	    j = i + this.m.t
	    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)
	    // propagate carry
	    while (x[j] >= x.DV) {
	      x[j] -= x.DV
	      x[++j]++
	    }
	  }
	  x.clamp()
	  x.drShiftTo(this.m.t, x)
	  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)
	}
	
	// r = "x^2/R mod m"; x != r
	function montSqrTo(x, r) {
	  x.squareTo(r)
	  this.reduce(r)
	}
	
	// r = "xy/R mod m"; x,y != r
	function montMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	  this.reduce(r)
	}
	
	Montgomery.prototype.convert = montConvert
	Montgomery.prototype.revert = montRevert
	Montgomery.prototype.reduce = montReduce
	Montgomery.prototype.mulTo = montMulTo
	Montgomery.prototype.sqrTo = montSqrTo
	
	// (protected) true iff this is even
	function bnpIsEven() {
	  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0
	}
	
	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e, z) {
	  if (e > 0xffffffff || e < 1) return BigInteger.ONE
	  var r = new BigInteger(),
	    r2 = new BigInteger(),
	    g = z.convert(this),
	    i = nbits(e) - 1
	  g.copyTo(r)
	  while (--i >= 0) {
	    z.sqrTo(r, r2)
	    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)
	    else {
	      var t = r
	      r = r2
	      r2 = t
	    }
	  }
	  return z.revert(r)
	}
	
	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e, m) {
	  var z
	  if (e < 256 || m.isEven()) z = new Classic(m)
	  else z = new Montgomery(m)
	  return this.exp(e, z)
	}
	
	// protected
	proto.copyTo = bnpCopyTo
	proto.fromInt = bnpFromInt
	proto.fromString = bnpFromString
	proto.clamp = bnpClamp
	proto.dlShiftTo = bnpDLShiftTo
	proto.drShiftTo = bnpDRShiftTo
	proto.lShiftTo = bnpLShiftTo
	proto.rShiftTo = bnpRShiftTo
	proto.subTo = bnpSubTo
	proto.multiplyTo = bnpMultiplyTo
	proto.squareTo = bnpSquareTo
	proto.divRemTo = bnpDivRemTo
	proto.invDigit = bnpInvDigit
	proto.isEven = bnpIsEven
	proto.exp = bnpExp
	
	// public
	proto.toString = bnToString
	proto.negate = bnNegate
	proto.abs = bnAbs
	proto.compareTo = bnCompareTo
	proto.bitLength = bnBitLength
	proto.byteLength = bnByteLength
	proto.mod = bnMod
	proto.modPowInt = bnModPowInt
	
	// (public)
	function bnClone() {
	  var r = new BigInteger()
	  this.copyTo(r)
	  return r
	}
	
	// (public) return value as integer
	function bnIntValue() {
	  if (this.s < 0) {
	    if (this.t == 1) return this[0] - this.DV
	    else if (this.t == 0) return -1
	  } else if (this.t == 1) return this[0]
	  else if (this.t == 0) return 0
	  // assumes 16 < DB < 32
	  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]
	}
	
	// (public) return value as byte
	function bnByteValue() {
	  return (this.t == 0) ? this.s : (this[0] << 24) >> 24
	}
	
	// (public) return value as short (assumes DB>=16)
	function bnShortValue() {
	  return (this.t == 0) ? this.s : (this[0] << 16) >> 16
	}
	
	// (protected) return x s.t. r^x < DV
	function bnpChunkSize(r) {
	  return Math.floor(Math.LN2 * this.DB / Math.log(r))
	}
	
	// (public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	  if (this.s < 0) return -1
	  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0
	  else return 1
	}
	
	// (protected) convert to radix string
	function bnpToRadix(b) {
	  if (b == null) b = 10
	  if (this.signum() == 0 || b < 2 || b > 36) return "0"
	  var cs = this.chunkSize(b)
	  var a = Math.pow(b, cs)
	  var d = nbv(a),
	    y = new BigInteger(),
	    z = new BigInteger(),
	    r = ""
	  this.divRemTo(d, y, z)
	  while (y.signum() > 0) {
	    r = (a + z.intValue())
	      .toString(b)
	      .substr(1) + r
	    y.divRemTo(d, y, z)
	  }
	  return z.intValue()
	    .toString(b) + r
	}
	
	// (protected) convert from radix string
	function bnpFromRadix(s, b) {
	  var self = this
	  self.fromInt(0)
	  if (b == null) b = 10
	  var cs = self.chunkSize(b)
	  var d = Math.pow(b, cs),
	    mi = false,
	    j = 0,
	    w = 0
	  for (var i = 0; i < s.length; ++i) {
	    var x = intAt(s, i)
	    if (x < 0) {
	      if (s.charAt(i) == "-" && self.signum() == 0) mi = true
	      continue
	    }
	    w = b * w + x
	    if (++j >= cs) {
	      self.dMultiply(d)
	      self.dAddOffset(w, 0)
	      j = 0
	      w = 0
	    }
	  }
	  if (j > 0) {
	    self.dMultiply(Math.pow(b, j))
	    self.dAddOffset(w, 0)
	  }
	  if (mi) BigInteger.ZERO.subTo(self, self)
	}
	
	// (protected) alternate constructor
	function bnpFromNumber(a, b, c) {
	  var self = this
	  if ("number" == typeof b) {
	    // new BigInteger(int,int,RNG)
	    if (a < 2) self.fromInt(1)
	    else {
	      self.fromNumber(a, c)
	      if (!self.testBit(a - 1)) // force MSB set
	        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)
	      if (self.isEven()) self.dAddOffset(1, 0); // force odd
	      while (!self.isProbablePrime(b)) {
	        self.dAddOffset(2, 0)
	        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)
	      }
	    }
	  } else {
	    // new BigInteger(int,RNG)
	    var x = new Array(),
	      t = a & 7
	    x.length = (a >> 3) + 1
	    b.nextBytes(x)
	    if (t > 0) x[0] &= ((1 << t) - 1)
	    else x[0] = 0
	    self.fromString(x, 256)
	  }
	}
	
	// (public) convert to bigendian byte array
	function bnToByteArray() {
	  var self = this
	  var i = self.t,
	    r = new Array()
	  r[0] = self.s
	  var p = self.DB - (i * self.DB) % 8,
	    d, k = 0
	  if (i-- > 0) {
	    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)
	      r[k++] = d | (self.s << (self.DB - p))
	    while (i >= 0) {
	      if (p < 8) {
	        d = (self[i] & ((1 << p) - 1)) << (8 - p)
	        d |= self[--i] >> (p += self.DB - 8)
	      } else {
	        d = (self[i] >> (p -= 8)) & 0xff
	        if (p <= 0) {
	          p += self.DB
	          --i
	        }
	      }
	      if ((d & 0x80) != 0) d |= -256
	      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k
	      if (k > 0 || d != self.s) r[k++] = d
	    }
	  }
	  return r
	}
	
	function bnEquals(a) {
	  return (this.compareTo(a) == 0)
	}
	
	function bnMin(a) {
	  return (this.compareTo(a) < 0) ? this : a
	}
	
	function bnMax(a) {
	  return (this.compareTo(a) > 0) ? this : a
	}
	
	// (protected) r = this op a (bitwise)
	function bnpBitwiseTo(a, op, r) {
	  var self = this
	  var i, f, m = Math.min(a.t, self.t)
	  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])
	  if (a.t < self.t) {
	    f = a.s & self.DM
	    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)
	    r.t = self.t
	  } else {
	    f = self.s & self.DM
	    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])
	    r.t = a.t
	  }
	  r.s = op(self.s, a.s)
	  r.clamp()
	}
	
	// (public) this & a
	function op_and(x, y) {
	  return x & y
	}
	
	function bnAnd(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_and, r)
	  return r
	}
	
	// (public) this | a
	function op_or(x, y) {
	  return x | y
	}
	
	function bnOr(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_or, r)
	  return r
	}
	
	// (public) this ^ a
	function op_xor(x, y) {
	  return x ^ y
	}
	
	function bnXor(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_xor, r)
	  return r
	}
	
	// (public) this & ~a
	function op_andnot(x, y) {
	  return x & ~y
	}
	
	function bnAndNot(a) {
	  var r = new BigInteger()
	  this.bitwiseTo(a, op_andnot, r)
	  return r
	}
	
	// (public) ~this
	function bnNot() {
	  var r = new BigInteger()
	  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]
	  r.t = this.t
	  r.s = ~this.s
	  return r
	}
	
	// (public) this << n
	function bnShiftLeft(n) {
	  var r = new BigInteger()
	  if (n < 0) this.rShiftTo(-n, r)
	  else this.lShiftTo(n, r)
	  return r
	}
	
	// (public) this >> n
	function bnShiftRight(n) {
	  var r = new BigInteger()
	  if (n < 0) this.lShiftTo(-n, r)
	  else this.rShiftTo(n, r)
	  return r
	}
	
	// return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	  if (x == 0) return -1
	  var r = 0
	  if ((x & 0xffff) == 0) {
	    x >>= 16
	    r += 16
	  }
	  if ((x & 0xff) == 0) {
	    x >>= 8
	    r += 8
	  }
	  if ((x & 0xf) == 0) {
	    x >>= 4
	    r += 4
	  }
	  if ((x & 3) == 0) {
	    x >>= 2
	    r += 2
	  }
	  if ((x & 1) == 0)++r
	  return r
	}
	
	// (public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	  for (var i = 0; i < this.t; ++i)
	    if (this[i] != 0) return i * this.DB + lbit(this[i])
	  if (this.s < 0) return this.t * this.DB
	  return -1
	}
	
	// return number of 1 bits in x
	function cbit(x) {
	  var r = 0
	  while (x != 0) {
	    x &= x - 1
	    ++r
	  }
	  return r
	}
	
	// (public) return number of set bits
	function bnBitCount() {
	  var r = 0,
	    x = this.s & this.DM
	  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)
	  return r
	}
	
	// (public) true iff nth bit is set
	function bnTestBit(n) {
	  var j = Math.floor(n / this.DB)
	  if (j >= this.t) return (this.s != 0)
	  return ((this[j] & (1 << (n % this.DB))) != 0)
	}
	
	// (protected) this op (1<<n)
	function bnpChangeBit(n, op) {
	  var r = BigInteger.ONE.shiftLeft(n)
	  this.bitwiseTo(r, op, r)
	  return r
	}
	
	// (public) this | (1<<n)
	function bnSetBit(n) {
	  return this.changeBit(n, op_or)
	}
	
	// (public) this & ~(1<<n)
	function bnClearBit(n) {
	  return this.changeBit(n, op_andnot)
	}
	
	// (public) this ^ (1<<n)
	function bnFlipBit(n) {
	  return this.changeBit(n, op_xor)
	}
	
	// (protected) r = this + a
	function bnpAddTo(a, r) {
	  var self = this
	
	  var i = 0,
	    c = 0,
	    m = Math.min(a.t, self.t)
	  while (i < m) {
	    c += self[i] + a[i]
	    r[i++] = c & self.DM
	    c >>= self.DB
	  }
	  if (a.t < self.t) {
	    c += a.s
	    while (i < self.t) {
	      c += self[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c += self.s
	  } else {
	    c += self.s
	    while (i < a.t) {
	      c += a[i]
	      r[i++] = c & self.DM
	      c >>= self.DB
	    }
	    c += a.s
	  }
	  r.s = (c < 0) ? -1 : 0
	  if (c > 0) r[i++] = c
	  else if (c < -1) r[i++] = self.DV + c
	  r.t = i
	  r.clamp()
	}
	
	// (public) this + a
	function bnAdd(a) {
	  var r = new BigInteger()
	  this.addTo(a, r)
	  return r
	}
	
	// (public) this - a
	function bnSubtract(a) {
	  var r = new BigInteger()
	  this.subTo(a, r)
	  return r
	}
	
	// (public) this * a
	function bnMultiply(a) {
	  var r = new BigInteger()
	  this.multiplyTo(a, r)
	  return r
	}
	
	// (public) this^2
	function bnSquare() {
	  var r = new BigInteger()
	  this.squareTo(r)
	  return r
	}
	
	// (public) this / a
	function bnDivide(a) {
	  var r = new BigInteger()
	  this.divRemTo(a, r, null)
	  return r
	}
	
	// (public) this % a
	function bnRemainder(a) {
	  var r = new BigInteger()
	  this.divRemTo(a, null, r)
	  return r
	}
	
	// (public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	  var q = new BigInteger(),
	    r = new BigInteger()
	  this.divRemTo(a, q, r)
	  return new Array(q, r)
	}
	
	// (protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)
	  ++this.t
	  this.clamp()
	}
	
	// (protected) this += n << w words, this >= 0
	function bnpDAddOffset(n, w) {
	  if (n == 0) return
	  while (this.t <= w) this[this.t++] = 0
	  this[w] += n
	  while (this[w] >= this.DV) {
	    this[w] -= this.DV
	    if (++w >= this.t) this[this.t++] = 0
	    ++this[w]
	  }
	}
	
	// A "null" reducer
	function NullExp() {}
	
	function nNop(x) {
	  return x
	}
	
	function nMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	}
	
	function nSqrTo(x, r) {
	  x.squareTo(r)
	}
	
	NullExp.prototype.convert = nNop
	NullExp.prototype.revert = nNop
	NullExp.prototype.mulTo = nMulTo
	NullExp.prototype.sqrTo = nSqrTo
	
	// (public) this^e
	function bnPow(e) {
	  return this.exp(e, new NullExp())
	}
	
	// (protected) r = lower n words of "this * a", a.t <= n
	// "this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a, n, r) {
	  var i = Math.min(this.t + a.t, n)
	  r.s = 0; // assumes a,this >= 0
	  r.t = i
	  while (i > 0) r[--i] = 0
	  var j
	  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)
	  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)
	  r.clamp()
	}
	
	// (protected) r = "this * a" without lower n words, n > 0
	// "this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a, n, r) {
	  --n
	  var i = r.t = this.t + a.t - n
	  r.s = 0; // assumes a,this >= 0
	  while (--i >= 0) r[i] = 0
	  for (i = Math.max(n - this.t, 0); i < a.t; ++i)
	    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)
	  r.clamp()
	  r.drShiftTo(1, r)
	}
	
	// Barrett modular reduction
	function Barrett(m) {
	  // setup Barrett
	  this.r2 = new BigInteger()
	  this.q3 = new BigInteger()
	  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)
	  this.mu = this.r2.divide(m)
	  this.m = m
	}
	
	function barrettConvert(x) {
	  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)
	  else if (x.compareTo(this.m) < 0) return x
	  else {
	    var r = new BigInteger()
	    x.copyTo(r)
	    this.reduce(r)
	    return r
	  }
	}
	
	function barrettRevert(x) {
	  return x
	}
	
	// x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	  var self = this
	  x.drShiftTo(self.m.t - 1, self.r2)
	  if (x.t > self.m.t + 1) {
	    x.t = self.m.t + 1
	    x.clamp()
	  }
	  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)
	  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)
	  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)
	  x.subTo(self.r2, x)
	  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)
	}
	
	// r = x^2 mod m; x != r
	function barrettSqrTo(x, r) {
	  x.squareTo(r)
	  this.reduce(r)
	}
	
	// r = x*y mod m; x,y != r
	function barrettMulTo(x, y, r) {
	  x.multiplyTo(y, r)
	  this.reduce(r)
	}
	
	Barrett.prototype.convert = barrettConvert
	Barrett.prototype.revert = barrettRevert
	Barrett.prototype.reduce = barrettReduce
	Barrett.prototype.mulTo = barrettMulTo
	Barrett.prototype.sqrTo = barrettSqrTo
	
	// (public) this^e % m (HAC 14.85)
	function bnModPow(e, m) {
	  var i = e.bitLength(),
	    k, r = nbv(1),
	    z
	  if (i <= 0) return r
	  else if (i < 18) k = 1
	  else if (i < 48) k = 3
	  else if (i < 144) k = 4
	  else if (i < 768) k = 5
	  else k = 6
	  if (i < 8)
	    z = new Classic(m)
	  else if (m.isEven())
	    z = new Barrett(m)
	  else
	    z = new Montgomery(m)
	
	  // precomputation
	  var g = new Array(),
	    n = 3,
	    k1 = k - 1,
	    km = (1 << k) - 1
	  g[1] = z.convert(this)
	  if (k > 1) {
	    var g2 = new BigInteger()
	    z.sqrTo(g[1], g2)
	    while (n <= km) {
	      g[n] = new BigInteger()
	      z.mulTo(g2, g[n - 2], g[n])
	      n += 2
	    }
	  }
	
	  var j = e.t - 1,
	    w, is1 = true,
	    r2 = new BigInteger(),
	    t
	  i = nbits(e[j]) - 1
	  while (j >= 0) {
	    if (i >= k1) w = (e[j] >> (i - k1)) & km
	    else {
	      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)
	      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)
	    }
	
	    n = k
	    while ((w & 1) == 0) {
	      w >>= 1
	      --n
	    }
	    if ((i -= n) < 0) {
	      i += this.DB
	      --j
	    }
	    if (is1) { // ret == 1, don't bother squaring or multiplying it
	      g[w].copyTo(r)
	      is1 = false
	    } else {
	      while (n > 1) {
	        z.sqrTo(r, r2)
	        z.sqrTo(r2, r)
	        n -= 2
	      }
	      if (n > 0) z.sqrTo(r, r2)
	      else {
	        t = r
	        r = r2
	        r2 = t
	      }
	      z.mulTo(r2, g[w], r)
	    }
	
	    while (j >= 0 && (e[j] & (1 << i)) == 0) {
	      z.sqrTo(r, r2)
	      t = r
	      r = r2
	      r2 = t
	      if (--i < 0) {
	        i = this.DB - 1
	        --j
	      }
	    }
	  }
	  return z.revert(r)
	}
	
	// (public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	  var x = (this.s < 0) ? this.negate() : this.clone()
	  var y = (a.s < 0) ? a.negate() : a.clone()
	  if (x.compareTo(y) < 0) {
	    var t = x
	    x = y
	    y = t
	  }
	  var i = x.getLowestSetBit(),
	    g = y.getLowestSetBit()
	  if (g < 0) return x
	  if (i < g) g = i
	  if (g > 0) {
	    x.rShiftTo(g, x)
	    y.rShiftTo(g, y)
	  }
	  while (x.signum() > 0) {
	    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)
	    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)
	    if (x.compareTo(y) >= 0) {
	      x.subTo(y, x)
	      x.rShiftTo(1, x)
	    } else {
	      y.subTo(x, y)
	      y.rShiftTo(1, y)
	    }
	  }
	  if (g > 0) y.lShiftTo(g, y)
	  return y
	}
	
	// (protected) this % n, n < 2^26
	function bnpModInt(n) {
	  if (n <= 0) return 0
	  var d = this.DV % n,
	    r = (this.s < 0) ? n - 1 : 0
	  if (this.t > 0)
	    if (d == 0) r = this[0] % n
	    else
	      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n
	  return r
	}
	
	// (public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	  var ac = m.isEven()
	  if (this.signum() === 0) throw new Error('division by zero')
	  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO
	  var u = m.clone(),
	    v = this.clone()
	  var a = nbv(1),
	    b = nbv(0),
	    c = nbv(0),
	    d = nbv(1)
	  while (u.signum() != 0) {
	    while (u.isEven()) {
	      u.rShiftTo(1, u)
	      if (ac) {
	        if (!a.isEven() || !b.isEven()) {
	          a.addTo(this, a)
	          b.subTo(m, b)
	        }
	        a.rShiftTo(1, a)
	      } else if (!b.isEven()) b.subTo(m, b)
	      b.rShiftTo(1, b)
	    }
	    while (v.isEven()) {
	      v.rShiftTo(1, v)
	      if (ac) {
	        if (!c.isEven() || !d.isEven()) {
	          c.addTo(this, c)
	          d.subTo(m, d)
	        }
	        c.rShiftTo(1, c)
	      } else if (!d.isEven()) d.subTo(m, d)
	      d.rShiftTo(1, d)
	    }
	    if (u.compareTo(v) >= 0) {
	      u.subTo(v, u)
	      if (ac) a.subTo(c, a)
	      b.subTo(d, b)
	    } else {
	      v.subTo(u, v)
	      if (ac) c.subTo(a, c)
	      d.subTo(b, d)
	    }
	  }
	  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO
	  while (d.compareTo(m) >= 0) d.subTo(m, d)
	  while (d.signum() < 0) d.addTo(m, d)
	  return d
	}
	
	var lowprimes = [
	  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
	  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
	  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
	  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
	  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
	  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
	  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
	  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
	  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
	  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
	  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997
	]
	
	var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]
	
	// (public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t) {
	  var i, x = this.abs()
	  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
	    for (i = 0; i < lowprimes.length; ++i)
	      if (x[0] == lowprimes[i]) return true
	    return false
	  }
	  if (x.isEven()) return false
	  i = 1
	  while (i < lowprimes.length) {
	    var m = lowprimes[i],
	      j = i + 1
	    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]
	    m = x.modInt(m)
	    while (i < j) if (m % lowprimes[i++] == 0) return false
	  }
	  return x.millerRabin(t)
	}
	
	// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t) {
	  var n1 = this.subtract(BigInteger.ONE)
	  var k = n1.getLowestSetBit()
	  if (k <= 0) return false
	  var r = n1.shiftRight(k)
	  t = (t + 1) >> 1
	  if (t > lowprimes.length) t = lowprimes.length
	  var a = new BigInteger(null)
	  var j, bases = []
	  for (var i = 0; i < t; ++i) {
	    for (;;) {
	      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]
	      if (bases.indexOf(j) == -1) break
	    }
	    bases.push(j)
	    a.fromInt(j)
	    var y = a.modPow(r, this)
	    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	      var j = 1
	      while (j++ < k && y.compareTo(n1) != 0) {
	        y = y.modPowInt(2, this)
	        if (y.compareTo(BigInteger.ONE) == 0) return false
	      }
	      if (y.compareTo(n1) != 0) return false
	    }
	  }
	  return true
	}
	
	// protected
	proto.chunkSize = bnpChunkSize
	proto.toRadix = bnpToRadix
	proto.fromRadix = bnpFromRadix
	proto.fromNumber = bnpFromNumber
	proto.bitwiseTo = bnpBitwiseTo
	proto.changeBit = bnpChangeBit
	proto.addTo = bnpAddTo
	proto.dMultiply = bnpDMultiply
	proto.dAddOffset = bnpDAddOffset
	proto.multiplyLowerTo = bnpMultiplyLowerTo
	proto.multiplyUpperTo = bnpMultiplyUpperTo
	proto.modInt = bnpModInt
	proto.millerRabin = bnpMillerRabin
	
	// public
	proto.clone = bnClone
	proto.intValue = bnIntValue
	proto.byteValue = bnByteValue
	proto.shortValue = bnShortValue
	proto.signum = bnSigNum
	proto.toByteArray = bnToByteArray
	proto.equals = bnEquals
	proto.min = bnMin
	proto.max = bnMax
	proto.and = bnAnd
	proto.or = bnOr
	proto.xor = bnXor
	proto.andNot = bnAndNot
	proto.not = bnNot
	proto.shiftLeft = bnShiftLeft
	proto.shiftRight = bnShiftRight
	proto.getLowestSetBit = bnGetLowestSetBit
	proto.bitCount = bnBitCount
	proto.testBit = bnTestBit
	proto.setBit = bnSetBit
	proto.clearBit = bnClearBit
	proto.flipBit = bnFlipBit
	proto.add = bnAdd
	proto.subtract = bnSubtract
	proto.multiply = bnMultiply
	proto.divide = bnDivide
	proto.remainder = bnRemainder
	proto.divideAndRemainder = bnDivideAndRemainder
	proto.modPow = bnModPow
	proto.modInverse = bnModInverse
	proto.pow = bnPow
	proto.gcd = bnGCD
	proto.isProbablePrime = bnIsProbablePrime
	
	// JSBN-specific extension
	proto.square = bnSquare
	
	// constants
	BigInteger.ZERO = nbv(0)
	BigInteger.ONE = nbv(1)
	BigInteger.valueOf = nbv
	
	module.exports = BigInteger


/***/ },
/* 1304 */
/***/ function(module, exports) {

	module.exports = {
		"_args": [
			[
				{
					"raw": "bigi@https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
					"scope": null,
					"escapedName": "bigi",
					"name": "bigi",
					"rawSpec": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
					"spec": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
					"type": "remote"
				},
				"/Users/tenaciousmv/Code/tradle-app-web"
			]
		],
		"_from": "bigi@>=1.4.0 <2.0.0",
		"_id": "bigi@1.4.2",
		"_inCache": true,
		"_location": "/bigi",
		"_phantomChildren": {},
		"_requested": {
			"raw": "bigi@https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
			"scope": null,
			"escapedName": "bigi",
			"name": "bigi",
			"rawSpec": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
			"spec": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
			"type": "remote"
		},
		"_requiredBy": [
			"/",
			"/@tradle/bitcoinjs-lib",
			"/ecurve"
		],
		"_resolved": "https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
		"_shasum": "9c665a95f88b8b08fc05cfd731f561859d725825",
		"_shrinkwrap": null,
		"_spec": "bigi@https://registry.npmjs.org/bigi/-/bigi-1.4.2.tgz",
		"_where": "/Users/tenaciousmv/Code/tradle-app-web",
		"bugs": {
			"url": "https://github.com/cryptocoinjs/bigi/issues"
		},
		"dependencies": {},
		"description": "Big integers.",
		"devDependencies": {
			"coveralls": "^2.11.2",
			"istanbul": "^0.3.5",
			"jshint": "^2.5.1",
			"mocha": "^2.1.0",
			"mochify": "^2.1.0"
		},
		"homepage": "https://github.com/cryptocoinjs/bigi",
		"keywords": [
			"cryptography",
			"math",
			"bitcoin",
			"arbitrary",
			"precision",
			"arithmetic",
			"big",
			"integer",
			"int",
			"number",
			"biginteger",
			"bigint",
			"bignumber",
			"decimal",
			"float"
		],
		"main": "./lib/index.js",
		"name": "bigi",
		"optionalDependencies": {},
		"readme": "bigi\n======\n\n[![build status](https://secure.travis-ci.org/cryptocoinjs/bigi.png)](http://travis-ci.org/cryptocoinjs/bigi)\n[![Coverage Status](https://img.shields.io/coveralls/cryptocoinjs/bigi.svg)](https://coveralls.io/r/cryptocoinjs/bigi)\n[![Version](http://img.shields.io/npm/v/bigi.svg)](https://www.npmjs.org/package/bigi)\n\n[![browser support](https://ci.testling.com/cryptocoinjs/bigi.png)](https://ci.testling.com/cryptocoinjs/bigi)\n\nJavaScript library to manipulate big integers. Based on `jsbn` made by [Tom Wu](http://www-cs-students.stanford.edu/~tjw/jsbn/)\n\nOfficial documentation: \n\nhttp://cryptocoinjs.com/modules/misc/bigi/",
		"readmeFilename": "README.md",
		"repository": {
			"url": "git+https://github.com/cryptocoinjs/bigi.git",
			"type": "git"
		},
		"scripts": {
			"browser-test": "mochify --wd -R spec",
			"coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
			"coveralls": "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info",
			"jshint": "jshint --config jshint.json lib/*.js ; true",
			"test": "_mocha -- test/*.js",
			"unit": "mocha"
		},
		"testling": {
			"files": "test/*.js",
			"harness": "mocha",
			"browsers": [
				"ie/9..latest",
				"firefox/latest",
				"chrome/latest",
				"safari/6.0..latest",
				"iphone/6.0..latest",
				"android-browser/4.2..latest"
			]
		},
		"version": "1.4.2"
	};

/***/ },
/* 1305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// FIXME: Kind of a weird way to throw exceptions, consider removing
	var assert = __webpack_require__(1296)
	var BigInteger = __webpack_require__(1303)
	
	/**
	 * Turns a byte array into a big integer.
	 *
	 * This function will interpret a byte array as a big integer in big
	 * endian notation.
	 */
	BigInteger.fromByteArrayUnsigned = function(byteArray) {
	  // BigInteger expects a DER integer conformant byte array
	  if (byteArray[0] & 0x80) {
	    return new BigInteger([0].concat(byteArray))
	  }
	
	  return new BigInteger(byteArray)
	}
	
	/**
	 * Returns a byte array representation of the big integer.
	 *
	 * This returns the absolute of the contained value in big endian
	 * form. A value of zero results in an empty array.
	 */
	BigInteger.prototype.toByteArrayUnsigned = function() {
	  var byteArray = this.toByteArray()
	  return byteArray[0] === 0 ? byteArray.slice(1) : byteArray
	}
	
	BigInteger.fromDERInteger = function(byteArray) {
	  return new BigInteger(byteArray)
	}
	
	/*
	 * Converts BigInteger to a DER integer representation.
	 *
	 * The format for this value uses the most significant bit as a sign
	 * bit.  If the most significant bit is already set and the integer is
	 * positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0xff
	 *    127 =>     0x7f
	 *   -127 =>     0x81
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>   0xff01
	 *  16300 =>   0x3fac
	 * -16300 =>   0xc054
	 *  62300 => 0x00f35c
	 * -62300 => 0xff0ca4
	*/
	BigInteger.prototype.toDERInteger = BigInteger.prototype.toByteArray
	
	BigInteger.fromBuffer = function(buffer) {
	  // BigInteger expects a DER integer conformant byte array
	  if (buffer[0] & 0x80) {
	    var byteArray = Array.prototype.slice.call(buffer)
	
	    return new BigInteger([0].concat(byteArray))
	  }
	
	  return new BigInteger(buffer)
	}
	
	BigInteger.fromHex = function(hex) {
	  if (hex === '') return BigInteger.ZERO
	
	  assert.equal(hex, hex.match(/^[A-Fa-f0-9]+/), 'Invalid hex string')
	  assert.equal(hex.length % 2, 0, 'Incomplete hex')
	  return new BigInteger(hex, 16)
	}
	
	BigInteger.prototype.toBuffer = function(size) {
	  var byteArray = this.toByteArrayUnsigned()
	  var zeros = []
	
	  var padding = size - byteArray.length
	  while (zeros.length < padding) zeros.push(0)
	
	  return new Buffer(zeros.concat(byteArray))
	}
	
	BigInteger.prototype.toHex = function(size) {
	  return this.toBuffer(size).toString('hex')
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1306 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(1296)
	var BigInteger = __webpack_require__(1302)
	
	var Point = __webpack_require__(1301)
	
	function Curve (p, a, b, Gx, Gy, n, h) {
	  this.p = p
	  this.a = a
	  this.b = b
	  this.G = Point.fromAffine(this, Gx, Gy)
	  this.n = n
	  this.h = h
	
	  this.infinity = new Point(this, null, null, BigInteger.ZERO)
	
	  // result caching
	  this.pOverFour = p.add(BigInteger.ONE).shiftRight(2)
	}
	
	Curve.prototype.pointFromX = function (isOdd, x) {
	  var alpha = x.pow(3).add(this.a.multiply(x)).add(this.b).mod(this.p)
	  var beta = alpha.modPow(this.pOverFour, this.p) // XXX: not compatible with all curves
	
	  var y = beta
	  if (beta.isEven() ^ !isOdd) {
	    y = this.p.subtract(y) // -y % p
	  }
	
	  return Point.fromAffine(this, x, y)
	}
	
	Curve.prototype.isInfinity = function (Q) {
	  if (Q === this.infinity) return true
	
	  return Q.z.signum() === 0 && Q.y.signum() !== 0
	}
	
	Curve.prototype.isOnCurve = function (Q) {
	  if (this.isInfinity(Q)) return true
	
	  var x = Q.affineX
	  var y = Q.affineY
	  var a = this.a
	  var b = this.b
	  var p = this.p
	
	  // Check that xQ and yQ are integers in the interval [0, p - 1]
	  if (x.signum() < 0 || x.compareTo(p) >= 0) return false
	  if (y.signum() < 0 || y.compareTo(p) >= 0) return false
	
	  // and check that y^2 = x^3 + ax + b (mod p)
	  var lhs = y.square().mod(p)
	  var rhs = x.pow(3).add(a.multiply(x)).add(b).mod(p)
	  return lhs.equals(rhs)
	}
	
	/**
	 * Validate an elliptic curve point.
	 *
	 * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
	 */
	Curve.prototype.validate = function (Q) {
	  // Check Q != O
	  assert(!this.isInfinity(Q), 'Point is at infinity')
	  assert(this.isOnCurve(Q), 'Point is not on the curve')
	
	  // Check nQ = O (where Q is a scalar multiple of G)
	  var nQ = Q.multiply(this.n)
	  assert(this.isInfinity(nQ), 'Point is not a scalar multiple of G')
	
	  return true
	}
	
	module.exports = Curve


/***/ },
/* 1307 */
/***/ function(module, exports, __webpack_require__) {

	var BigInteger = __webpack_require__(1302)
	
	var curves = __webpack_require__(1308)
	var Curve = __webpack_require__(1306)
	
	function getCurveByName (name) {
	  var curve = curves[name]
	  if (!curve) return null
	
	  var p = new BigInteger(curve.p, 16)
	  var a = new BigInteger(curve.a, 16)
	  var b = new BigInteger(curve.b, 16)
	  var n = new BigInteger(curve.n, 16)
	  var h = new BigInteger(curve.h, 16)
	  var Gx = new BigInteger(curve.Gx, 16)
	  var Gy = new BigInteger(curve.Gy, 16)
	
	  return new Curve(p, a, b, Gx, Gy, n, h)
	}
	
	module.exports = getCurveByName


/***/ },
/* 1308 */
/***/ function(module, exports) {

	module.exports = {
		"secp128r1": {
			"p": "fffffffdffffffffffffffffffffffff",
			"a": "fffffffdfffffffffffffffffffffffc",
			"b": "e87579c11079f43dd824993c2cee5ed3",
			"n": "fffffffe0000000075a30d1b9038a115",
			"h": "01",
			"Gx": "161ff7528b899b2d0c28607ca52c5b86",
			"Gy": "cf5ac8395bafeb13c02da292dded7a83"
		},
		"secp160k1": {
			"p": "fffffffffffffffffffffffffffffffeffffac73",
			"a": "00",
			"b": "07",
			"n": "0100000000000000000001b8fa16dfab9aca16b6b3",
			"h": "01",
			"Gx": "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
			"Gy": "938cf935318fdced6bc28286531733c3f03c4fee"
		},
		"secp160r1": {
			"p": "ffffffffffffffffffffffffffffffff7fffffff",
			"a": "ffffffffffffffffffffffffffffffff7ffffffc",
			"b": "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
			"n": "0100000000000000000001f4c8f927aed3ca752257",
			"h": "01",
			"Gx": "4a96b5688ef573284664698968c38bb913cbfc82",
			"Gy": "23a628553168947d59dcc912042351377ac5fb32"
		},
		"secp192k1": {
			"p": "fffffffffffffffffffffffffffffffffffffffeffffee37",
			"a": "00",
			"b": "03",
			"n": "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
			"h": "01",
			"Gx": "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
			"Gy": "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
		},
		"secp192r1": {
			"p": "fffffffffffffffffffffffffffffffeffffffffffffffff",
			"a": "fffffffffffffffffffffffffffffffefffffffffffffffc",
			"b": "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
			"n": "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
			"h": "01",
			"Gx": "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
			"Gy": "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
		},
		"secp256k1": {
			"p": "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
			"a": "00",
			"b": "07",
			"n": "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
			"h": "01",
			"Gx": "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
			"Gy": "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
		},
		"secp256r1": {
			"p": "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
			"a": "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
			"b": "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
			"n": "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
			"h": "01",
			"Gx": "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
			"Gy": "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
		}
	};

/***/ },
/* 1309 */,
/* 1310 */,
/* 1311 */,
/* 1312 */,
/* 1313 */,
/* 1314 */,
/* 1315 */,
/* 1316 */,
/* 1317 */,
/* 1318 */,
/* 1319 */,
/* 1320 */,
/* 1321 */,
/* 1322 */,
/* 1323 */,
/* 1324 */,
/* 1325 */,
/* 1326 */,
/* 1327 */,
/* 1328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var template = __webpack_require__(1329);
	var extend = __webpack_require__(1151);
	var assert = __webpack_require__(1296);
	
	var isWordBoundary = /[_.-](\w|$)/g;
	
	module.exports = TypedError;
	
	function TypedError(args) {
	    assert(args, 'TypedError: must specify options');
	    assert(args.type, 'TypedError: must specify options.type');
	    assert(args.message, 'TypedError: must specify options.message');
	
	    assert(!has(args, 'fullType'),
	        'TypedError: fullType field is reserved');
	
	    var message = args.message;
	    if (args.type && !args.name) {
	        var errorName = camelCase(args.type) + 'Error';
	        args.name = errorName[0].toUpperCase() + errorName.substr(1);
	    }
	
	    extend(createError, args);
	    createError._name = args.name;
	
	    return createError;
	
	    function createError(opts) {
	        var result = new Error();
	
	        Object.defineProperty(result, 'type', {
	            value: result.type,
	            enumerable: true,
	            writable: true,
	            configurable: true
	        });
	
	        var options = extend({}, args, opts);
	        if (!options.fullType) {
	            options.fullType = options.type;
	        }
	
	        extend(result, options);
	        if (opts && opts.message) {
	            result.message = template(opts.message, options);
	        } else if (message) {
	            result.message = template(message, options);
	        }
	
	        return result;
	    }
	}
	
	function camelCase(str) {
	    return str.replace(isWordBoundary, upperCase);
	}
	
	function upperCase(_, x) {
	    return x.toUpperCase();
	}
	
	function has(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}


/***/ },
/* 1329 */
/***/ function(module, exports) {

	var nargs = /\{([0-9a-zA-Z]+)\}/g
	var slice = Array.prototype.slice
	
	module.exports = template
	
	function template(string) {
	    var args
	
	    if (arguments.length === 2 && typeof arguments[1] === "object") {
	        args = arguments[1]
	    } else {
	        args = slice.call(arguments, 1)
	    }
	
	    if (!args || !args.hasOwnProperty) {
	        args = {}
	    }
	
	    return string.replace(nargs, function replaceArg(match, i, index) {
	        var result
	
	        if (string[index - 1] === "{" &&
	            string[index + match.length] === "}") {
	            return i
	        } else {
	            result = args.hasOwnProperty(i) ? args[i] : null
	            if (result === null || result === undefined) {
	                return ""
	            }
	
	            return result
	        }
	    })
	}


/***/ },
/* 1330 */,
/* 1331 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {'use strict'
	
	const crypto = __webpack_require__(904)
	const extend = __webpack_require__(859)
	const KeyEncoder = __webpack_require__(1332)
	const nkey = __webpack_require__(1369)
	const special = {
	  secp256k1: __webpack_require__(1370)
	}
	
	const curves = {
	  p192: 'prime192v1',
	  p256: 'prime256v1',
	  p384: 'secp384r1',
	  p521: 'secp521r1'
	}
	
	function createECDH (curve) {
	  return crypto.createECDH(curves[curve] || curve)
	}
	
	const PUB_PROPS = ['curve', 'pub']
	const type = 'ec'
	
	const impl = nkey.wrapAPI({
	  type,
	  gen,
	  genSync,
	  fromJSON
	})
	
	function getImpl (opts) {
	  return special[opts.curve] || impl
	}
	
	module.exports = exports = nkey.wrapAPI({
	  gen: function (opts, cb) {
	    opts = normalizeOpts(opts)
	    return getImpl(opts).gen(opts, cb)
	  },
	  genSync: function (opts) {
	    opts = normalizeOpts(opts)
	    return getImpl(opts).genSync(opts)
	  },
	  fromJSON: function (json) {
	    json = normalizeOpts(json)
	    return getImpl(json).fromJSON(json)
	  }
	})
	
	exports.DEFAULT_ALGORITHM = 'sha256'
	exports.DEFAULT_CURVE = 'secp256k1'
	exports.setImplementationForCurve = function (curve, impl) {
	  special[curve] = impl
	}
	
	function normalizeOpts (opts) {
	  opts = opts || {}
	  const copy = {}
	  for (var p in opts) copy[p] = opts[p]
	
	  if (!copy.curve) copy.curve = exports.DEFAULT_CURVE
	
	  return copy
	}
	
	function genSync (opts) {
	  const curve = opts.curve
	  const ec = createECDH(curve)
	  ec.generateKeys()
	  return impl.fromJSON({
	    curve: curve,
	    priv: ec.getPrivateKey()
	  })
	}
	
	function gen (opts, cb) {
	  process.nextTick(() => cb(null, genSync(opts)))
	}
	
	function fromJSON (opts) {
	  if (!(opts.priv || opts.pub)) {
	    throw new Error('expected "priv" or "pub"')
	  }
	
	  if (!opts.curve) throw new Error('expected "curve"')
	
	  const curve = opts.curve
	  const ec = createECDH(curve)
	  const priv = typeof opts.priv === 'string' ? new Buffer(opts.priv, 'hex') : opts.priv
	  if (priv) ec.setPrivateKey(priv)
	
	  let pub = typeof opts.pub === 'string' ? new Buffer(opts.pub, 'hex') : opts.pub
	  if (!pub) pub = ec.getPublicKey()
	
	  const pubKeyString = pub.toString('hex')
	  const fingerprint = crypto.createHash('sha256').update(pub).digest('hex')
	  const encoder = new KeyEncoder(curve)
	  let privPEM
	  let pubPEM
	
	  return nkey.wrapInstance({
	    type,
	    signSync,
	    verifySync,
	    hasDeterministicSig: true,
	    pubKeyString,
	    fingerprint,
	    pub,
	    priv,
	    toJSON
	  })
	
	  function getEncodedPriv () {
	    return privPEM || (privPEM = encoder.encodePrivate(priv, 'raw', 'pem'))
	  }
	
	  function getEncodedPub () {
	    return pubPEM || (pubPEM = encoder.encodePublic(pub, 'raw', 'pem'))
	  }
	
	  function signSync (data, algorithm) {
	    let priv = getEncodedPriv()
	    algorithm = algorithm || exports.DEFAULT_ALGORITHM
	    return crypto.createSign(algorithm).update(data).sign(priv, 'hex')
	  }
	
	  function verifySync (data, algorithm, sig) {
	    let pub = getEncodedPub()
	    if (typeof sig === 'undefined') {
	      sig = algorithm
	      algorithm = exports.DEFAULT_ALGORITHM
	    }
	
	    if (typeof sig === 'string') sig = new Buffer(sig, 'hex')
	
	    return crypto.createVerify(algorithm).update(data).verify(pub, sig)
	  }
	
	  function toJSON (exportPrivateKey) {
	    const obj = {
	      type,
	      curve,
	      pub: pubKeyString,
	      fingerprint
	    }
	
	    if (exportPrivateKey) obj.priv = priv.toString('hex')
	
	    return obj
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	module.exports = __webpack_require__(1333)

/***/ },
/* 1333 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'
	
	var asn1 = __webpack_require__(1334),
	    BN = __webpack_require__(1349),
	    curves = __webpack_require__(1350)
	
	var ECPrivateKeyASN = asn1.define('ECPrivateKey', function() {
	    this.seq().obj(
	        this.key('version').int(),
	        this.key('privateKey').octstr(),
	        this.key('parameters').explicit(0).objid().optional(),
	        this.key('publicKey').explicit(1).bitstr().optional()
	    )
	})
	
	var SubjectPublicKeyInfoASN = asn1.define('SubjectPublicKeyInfo', function() {
	    this.seq().obj(
	        this.key('algorithm').seq().obj(
	            this.key("id").objid(),
	            this.key("curve").objid()
	        ),
	        this.key('pub').bitstr()
	    )
	})
	
	function assert(val, msg) {
	    if (!val) {
	        throw new Error(msg || 'Assertion failed')
	    }
	}
	
	function KeyEncoder(options) {
	    if (typeof options === 'string') {
	        assert(curves.hasOwnProperty(options), 'Unknown curve ' + options)
	        options = curves[options]
	    }
	    this.options = options
	    this.algorithmID = [1, 2, 840, 10045, 2, 1]
	}
	
	KeyEncoder.ECPrivateKeyASN = ECPrivateKeyASN
	KeyEncoder.SubjectPublicKeyInfoASN = SubjectPublicKeyInfoASN
	
	KeyEncoder.prototype.privateKeyObject = function(rawPrivateKey, rawPublicKey) {
	    var privateKeyObject = {
	        version: new BN(1),
	        privateKey: new Buffer(rawPrivateKey, 'hex'),
	        parameters: this.options.curveParameters
	    }
	
	    if (rawPublicKey) {
	        privateKeyObject.publicKey = {
	            unused: 0,
	            data: new Buffer(rawPublicKey, 'hex')
	        }
	    }
	
	    return privateKeyObject
	}
	
	KeyEncoder.prototype.publicKeyObject = function(rawPublicKey) {
	    return {
	        algorithm: {
	            id: this.algorithmID,
	            curve: this.options.curveParameters
	        },
	        pub: {
	            unused: 0,
	            data: new Buffer(rawPublicKey, 'hex')
	        }
	    }
	}
	
	KeyEncoder.prototype.encodePrivate = function(privateKey, originalFormat, destinationFormat) {
	    var privateKeyObject
	
	    /* Parse the incoming private key and convert it to a private key object */
	    if (originalFormat === 'raw') {
	        if (!typeof privateKey === 'string') {
	            throw 'private key must be a string'
	        }
	        var privateKeyObject = this.options.curve.keyFromPrivate(privateKey, 'hex'),
	            rawPublicKey = privateKeyObject.getPublic('hex')
	        privateKeyObject = this.privateKeyObject(privateKey, rawPublicKey)
	    } else if (originalFormat === 'der') {
	        if (typeof privateKey === 'buffer') {
	            // do nothing
	        } else if (typeof privateKey === 'string') {
	            privateKey = new Buffer(privateKey, 'hex')
	        } else {
	            throw 'private key must be a buffer or a string'
	        }
	        privateKeyObject = ECPrivateKeyASN.decode(privateKey, 'der')
	    } else if (originalFormat === 'pem') {
	        if (!typeof privateKey === 'string') {
	            throw 'private key must be a string'
	        }
	        privateKeyObject = ECPrivateKeyASN.decode(privateKey, 'pem', this.options.privatePEMOptions)
	    } else {
	        throw 'invalid private key format'
	    }
	
	    /* Export the private key object to the desired format */
	    if (destinationFormat === 'raw') {
	        return privateKeyObject.privateKey.toString('hex')
	    } else if (destinationFormat === 'der') {
	        return ECPrivateKeyASN.encode(privateKeyObject, 'der').toString('hex')
	    } else if (destinationFormat === 'pem') {
	        return ECPrivateKeyASN.encode(privateKeyObject, 'pem', this.options.privatePEMOptions)
	    } else {
	        throw 'invalid destination format for private key'
	    }
	}
	
	KeyEncoder.prototype.encodePublic = function(publicKey, originalFormat, destinationFormat) {
	    var publicKeyObject
	
	    /* Parse the incoming public key and convert it to a public key object */
	    if (originalFormat === 'raw') {
	        if (!typeof publicKey === 'string') {
	            throw 'public key must be a string'
	        }
	        publicKeyObject = this.publicKeyObject(publicKey)
	    } else if (originalFormat === 'der') {
	        if (typeof publicKey === 'buffer') {
	            // do nothing
	        } else if (typeof publicKey === 'string') {
	            publicKey = new Buffer(publicKey, 'hex')
	        } else {
	            throw 'public key must be a buffer or a string'
	        }
	        publicKeyObject = SubjectPublicKeyInfoASN.decode(publicKey, 'der')
	    } else if (originalFormat === 'pem') {
	        if (!typeof publicKey === 'string') {
	            throw 'public key must be a string'
	        }
	        publicKeyObject = SubjectPublicKeyInfoASN.decode(publicKey, 'pem', this.options.publicPEMOptions)
	    } else {
	        throw 'invalid public key format'
	    }
	
	    /* Export the private key object to the desired format */
	    if (destinationFormat === 'raw') {
	        return publicKeyObject.pub.data.toString('hex')
	    } else if (destinationFormat === 'der') {
	        return SubjectPublicKeyInfoASN.encode(publicKeyObject, 'der').toString('hex')
	    } else if (destinationFormat === 'pem') {
	        return SubjectPublicKeyInfoASN.encode(publicKeyObject, 'pem', this.options.publicPEMOptions)
	    } else {
	        throw 'invalid destination format for public key'
	    }
	}
	
	module.exports = KeyEncoder
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1334 */
/***/ function(module, exports, __webpack_require__) {

	var asn1 = exports;
	
	asn1.bignum = __webpack_require__(1335);
	
	asn1.define = __webpack_require__(1336).define;
	asn1.base = __webpack_require__(1337);
	asn1.constants = __webpack_require__(1341);
	asn1.decoders = __webpack_require__(1343);
	asn1.encoders = __webpack_require__(1346);


/***/ },
/* 1335 */,
/* 1336 */
/***/ function(module, exports, __webpack_require__) {

	var asn1 = __webpack_require__(1334);
	var inherits = __webpack_require__(828);
	
	var api = exports;
	
	api.define = function define(name, body) {
	  return new Entity(name, body);
	};
	
	function Entity(name, body) {
	  this.name = name;
	  this.body = body;
	
	  this.decoders = {};
	  this.encoders = {};
	};
	
	Entity.prototype._createNamed = function createNamed(base) {
	  var named;
	  try {
	    named = __webpack_require__(989).runInThisContext(
	      '(function ' + this.name + '(entity) {\n' +
	      '  this._initNamed(entity);\n' +
	      '})'
	    );
	  } catch (e) {
	    named = function (entity) {
	      this._initNamed(entity);
	    };
	  }
	  inherits(named, base);
	  named.prototype._initNamed = function initnamed(entity) {
	    base.call(this, entity);
	  };
	
	  return new named(this);
	};
	
	Entity.prototype._getDecoder = function _getDecoder(enc) {
	  // Lazily create decoder
	  if (!this.decoders.hasOwnProperty(enc))
	    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
	  return this.decoders[enc];
	};
	
	Entity.prototype.decode = function decode(data, enc, options) {
	  return this._getDecoder(enc).decode(data, options);
	};
	
	Entity.prototype._getEncoder = function _getEncoder(enc) {
	  // Lazily create encoder
	  if (!this.encoders.hasOwnProperty(enc))
	    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
	  return this.encoders[enc];
	};
	
	Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
	  return this._getEncoder(enc).encode(data, reporter);
	};


/***/ },
/* 1337 */
/***/ function(module, exports, __webpack_require__) {

	var base = exports;
	
	base.Reporter = __webpack_require__(1338).Reporter;
	base.DecoderBuffer = __webpack_require__(1339).DecoderBuffer;
	base.EncoderBuffer = __webpack_require__(1339).EncoderBuffer;
	base.Node = __webpack_require__(1340);


/***/ },
/* 1338 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	
	function Reporter(options) {
	  this._reporterState = {
	    obj: null,
	    path: [],
	    options: options || {},
	    errors: []
	  };
	}
	exports.Reporter = Reporter;
	
	Reporter.prototype.isError = function isError(obj) {
	  return obj instanceof ReporterError;
	};
	
	Reporter.prototype.save = function save() {
	  var state = this._reporterState;
	
	  return { obj: state.obj, pathLen: state.path.length };
	};
	
	Reporter.prototype.restore = function restore(data) {
	  var state = this._reporterState;
	
	  state.obj = data.obj;
	  state.path = state.path.slice(0, data.pathLen);
	};
	
	Reporter.prototype.enterKey = function enterKey(key) {
	  return this._reporterState.path.push(key);
	};
	
	Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
	  var state = this._reporterState;
	
	  state.path = state.path.slice(0, index - 1);
	  if (state.obj !== null)
	    state.obj[key] = value;
	};
	
	Reporter.prototype.enterObject = function enterObject() {
	  var state = this._reporterState;
	
	  var prev = state.obj;
	  state.obj = {};
	  return prev;
	};
	
	Reporter.prototype.leaveObject = function leaveObject(prev) {
	  var state = this._reporterState;
	
	  var now = state.obj;
	  state.obj = prev;
	  return now;
	};
	
	Reporter.prototype.error = function error(msg) {
	  var err;
	  var state = this._reporterState;
	
	  var inherited = msg instanceof ReporterError;
	  if (inherited) {
	    err = msg;
	  } else {
	    err = new ReporterError(state.path.map(function(elem) {
	      return '[' + JSON.stringify(elem) + ']';
	    }).join(''), msg.message || msg, msg.stack);
	  }
	
	  if (!state.options.partial)
	    throw err;
	
	  if (!inherited)
	    state.errors.push(err);
	
	  return err;
	};
	
	Reporter.prototype.wrapResult = function wrapResult(result) {
	  var state = this._reporterState;
	  if (!state.options.partial)
	    return result;
	
	  return {
	    result: this.isError(result) ? null : result,
	    errors: state.errors
	  };
	};
	
	function ReporterError(path, msg) {
	  this.path = path;
	  this.rethrow(msg);
	};
	inherits(ReporterError, Error);
	
	ReporterError.prototype.rethrow = function rethrow(msg) {
	  this.message = msg + ' at: ' + (this.path || '(shallow)');
	  Error.captureStackTrace(this, ReporterError);
	
	  return this;
	};


/***/ },
/* 1339 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Reporter = __webpack_require__(1337).Reporter;
	var Buffer = __webpack_require__(820).Buffer;
	
	function DecoderBuffer(base, options) {
	  Reporter.call(this, options);
	  if (!Buffer.isBuffer(base)) {
	    this.error('Input not Buffer');
	    return;
	  }
	
	  this.base = base;
	  this.offset = 0;
	  this.length = base.length;
	}
	inherits(DecoderBuffer, Reporter);
	exports.DecoderBuffer = DecoderBuffer;
	
	DecoderBuffer.prototype.save = function save() {
	  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
	};
	
	DecoderBuffer.prototype.restore = function restore(save) {
	  // Return skipped data
	  var res = new DecoderBuffer(this.base);
	  res.offset = save.offset;
	  res.length = this.offset;
	
	  this.offset = save.offset;
	  Reporter.prototype.restore.call(this, save.reporter);
	
	  return res;
	};
	
	DecoderBuffer.prototype.isEmpty = function isEmpty() {
	  return this.offset === this.length;
	};
	
	DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
	  if (this.offset + 1 <= this.length)
	    return this.base.readUInt8(this.offset++, true);
	  else
	    return this.error(fail || 'DecoderBuffer overrun');
	}
	
	DecoderBuffer.prototype.skip = function skip(bytes, fail) {
	  if (!(this.offset + bytes <= this.length))
	    return this.error(fail || 'DecoderBuffer overrun');
	
	  var res = new DecoderBuffer(this.base);
	
	  // Share reporter state
	  res._reporterState = this._reporterState;
	
	  res.offset = this.offset;
	  res.length = this.offset + bytes;
	  this.offset += bytes;
	  return res;
	}
	
	DecoderBuffer.prototype.raw = function raw(save) {
	  return this.base.slice(save ? save.offset : this.offset, this.length);
	}
	
	function EncoderBuffer(value, reporter) {
	  if (Array.isArray(value)) {
	    this.length = 0;
	    this.value = value.map(function(item) {
	      if (!(item instanceof EncoderBuffer))
	        item = new EncoderBuffer(item, reporter);
	      this.length += item.length;
	      return item;
	    }, this);
	  } else if (typeof value === 'number') {
	    if (!(0 <= value && value <= 0xff))
	      return reporter.error('non-byte EncoderBuffer value');
	    this.value = value;
	    this.length = 1;
	  } else if (typeof value === 'string') {
	    this.value = value;
	    this.length = Buffer.byteLength(value);
	  } else if (Buffer.isBuffer(value)) {
	    this.value = value;
	    this.length = value.length;
	  } else {
	    return reporter.error('Unsupported type: ' + typeof value);
	  }
	}
	exports.EncoderBuffer = EncoderBuffer;
	
	EncoderBuffer.prototype.join = function join(out, offset) {
	  if (!out)
	    out = new Buffer(this.length);
	  if (!offset)
	    offset = 0;
	
	  if (this.length === 0)
	    return out;
	
	  if (Array.isArray(this.value)) {
	    this.value.forEach(function(item) {
	      item.join(out, offset);
	      offset += item.length;
	    });
	  } else {
	    if (typeof this.value === 'number')
	      out[offset] = this.value;
	    else if (typeof this.value === 'string')
	      out.write(this.value, offset);
	    else if (Buffer.isBuffer(this.value))
	      this.value.copy(out, offset);
	    offset += this.length;
	  }
	
	  return out;
	};


/***/ },
/* 1340 */
/***/ function(module, exports, __webpack_require__) {

	var Reporter = __webpack_require__(1337).Reporter;
	var EncoderBuffer = __webpack_require__(1337).EncoderBuffer;
	var assert = __webpack_require__(944);
	
	// Supported tags
	var tags = [
	  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
	  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str', 'utf8str'
	];
	
	// Public methods list
	var methods = [
	  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
	  'any'
	].concat(tags);
	
	// Overrided methods list
	var overrided = [
	  '_peekTag', '_decodeTag', '_use',
	  '_decodeStr', '_decodeObjid', '_decodeTime',
	  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',
	
	  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
	  '_encodeNull', '_encodeInt', '_encodeBool'
	];
	
	function Node(enc, parent) {
	  var state = {};
	  this._baseState = state;
	
	  state.enc = enc;
	
	  state.parent = parent || null;
	  state.children = null;
	
	  // State
	  state.tag = null;
	  state.args = null;
	  state.reverseArgs = null;
	  state.choice = null;
	  state.optional = false;
	  state.any = false;
	  state.obj = false;
	  state.use = null;
	  state.useDecoder = null;
	  state.key = null;
	  state['default'] = null;
	  state.explicit = null;
	  state.implicit = null;
	
	  // Should create new instance on each method
	  if (!state.parent) {
	    state.children = [];
	    this._wrap();
	  }
	}
	module.exports = Node;
	
	var stateProps = [
	  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
	  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
	  'implicit'
	];
	
	Node.prototype.clone = function clone() {
	  var state = this._baseState;
	  var cstate = {};
	  stateProps.forEach(function(prop) {
	    cstate[prop] = state[prop];
	  });
	  var res = new this.constructor(cstate.parent);
	  res._baseState = cstate;
	  return res;
	};
	
	Node.prototype._wrap = function wrap() {
	  var state = this._baseState;
	  methods.forEach(function(method) {
	    this[method] = function _wrappedMethod() {
	      var clone = new this.constructor(this);
	      state.children.push(clone);
	      return clone[method].apply(clone, arguments);
	    };
	  }, this);
	};
	
	Node.prototype._init = function init(body) {
	  var state = this._baseState;
	
	  assert(state.parent === null);
	  body.call(this);
	
	  // Filter children
	  state.children = state.children.filter(function(child) {
	    return child._baseState.parent === this;
	  }, this);
	  assert.equal(state.children.length, 1, 'Root node can have only one child');
	};
	
	Node.prototype._useArgs = function useArgs(args) {
	  var state = this._baseState;
	
	  // Filter children and args
	  var children = args.filter(function(arg) {
	    return arg instanceof this.constructor;
	  }, this);
	  args = args.filter(function(arg) {
	    return !(arg instanceof this.constructor);
	  }, this);
	
	  if (children.length !== 0) {
	    assert(state.children === null);
	    state.children = children;
	
	    // Replace parent to maintain backward link
	    children.forEach(function(child) {
	      child._baseState.parent = this;
	    }, this);
	  }
	  if (args.length !== 0) {
	    assert(state.args === null);
	    state.args = args;
	    state.reverseArgs = args.map(function(arg) {
	      if (typeof arg !== 'object' || arg.constructor !== Object)
	        return arg;
	
	      var res = {};
	      Object.keys(arg).forEach(function(key) {
	        if (key == (key | 0))
	          key |= 0;
	        var value = arg[key];
	        res[value] = key;
	      });
	      return res;
	    });
	  }
	};
	
	//
	// Overrided methods
	//
	
	overrided.forEach(function(method) {
	  Node.prototype[method] = function _overrided() {
	    var state = this._baseState;
	    throw new Error(method + ' not implemented for encoding: ' + state.enc);
	  };
	});
	
	//
	// Public methods
	//
	
	tags.forEach(function(tag) {
	  Node.prototype[tag] = function _tagMethod() {
	    var state = this._baseState;
	    var args = Array.prototype.slice.call(arguments);
	
	    assert(state.tag === null);
	    state.tag = tag;
	
	    this._useArgs(args);
	
	    return this;
	  };
	});
	
	Node.prototype.use = function use(item) {
	  var state = this._baseState;
	
	  assert(state.use === null);
	  state.use = item;
	
	  return this;
	};
	
	Node.prototype.optional = function optional() {
	  var state = this._baseState;
	
	  state.optional = true;
	
	  return this;
	};
	
	Node.prototype.def = function def(val) {
	  var state = this._baseState;
	
	  assert(state['default'] === null);
	  state['default'] = val;
	  state.optional = true;
	
	  return this;
	};
	
	Node.prototype.explicit = function explicit(num) {
	  var state = this._baseState;
	
	  assert(state.explicit === null && state.implicit === null);
	  state.explicit = num;
	
	  return this;
	};
	
	Node.prototype.implicit = function implicit(num) {
	  var state = this._baseState;
	
	  assert(state.explicit === null && state.implicit === null);
	  state.implicit = num;
	
	  return this;
	};
	
	Node.prototype.obj = function obj() {
	  var state = this._baseState;
	  var args = Array.prototype.slice.call(arguments);
	
	  state.obj = true;
	
	  if (args.length !== 0)
	    this._useArgs(args);
	
	  return this;
	};
	
	Node.prototype.key = function key(newKey) {
	  var state = this._baseState;
	
	  assert(state.key === null);
	  state.key = newKey;
	
	  return this;
	};
	
	Node.prototype.any = function any() {
	  var state = this._baseState;
	
	  state.any = true;
	
	  return this;
	};
	
	Node.prototype.choice = function choice(obj) {
	  var state = this._baseState;
	
	  assert(state.choice === null);
	  state.choice = obj;
	  this._useArgs(Object.keys(obj).map(function(key) {
	    return obj[key];
	  }));
	
	  return this;
	};
	
	//
	// Decoding
	//
	
	Node.prototype._decode = function decode(input) {
	  var state = this._baseState;
	
	  // Decode root node
	  if (state.parent === null)
	    return input.wrapResult(state.children[0]._decode(input));
	
	  var result = state['default'];
	  var present = true;
	
	  var prevKey;
	  if (state.key !== null)
	    prevKey = input.enterKey(state.key);
	
	  // Check if tag is there
	  if (state.optional) {
	    var tag = null;
	    if (state.explicit !== null)
	      tag = state.explicit;
	    else if (state.implicit !== null)
	      tag = state.implicit;
	    else if (state.tag !== null)
	      tag = state.tag;
	
	    if (tag === null && !state.any) {
	      // Trial and Error
	      var save = input.save();
	      try {
	        if (state.choice === null)
	          this._decodeGeneric(state.tag, input);
	        else
	          this._decodeChoice(input);
	        present = true;
	      } catch (e) {
	        present = false;
	      }
	      input.restore(save);
	    } else {
	      present = this._peekTag(input, tag, state.any);
	
	      if (input.isError(present))
	        return present;
	    }
	  }
	
	  // Push object on stack
	  var prevObj;
	  if (state.obj && present)
	    prevObj = input.enterObject();
	
	  if (present) {
	    // Unwrap explicit values
	    if (state.explicit !== null) {
	      var explicit = this._decodeTag(input, state.explicit);
	      if (input.isError(explicit))
	        return explicit;
	      input = explicit;
	    }
	
	    // Unwrap implicit and normal values
	    if (state.use === null && state.choice === null) {
	      if (state.any)
	        var save = input.save();
	      var body = this._decodeTag(
	        input,
	        state.implicit !== null ? state.implicit : state.tag,
	        state.any
	      );
	      if (input.isError(body))
	        return body;
	
	      if (state.any)
	        result = input.raw(save);
	      else
	        input = body;
	    }
	
	    // Select proper method for tag
	    if (state.any)
	      result = result;
	    else if (state.choice === null)
	      result = this._decodeGeneric(state.tag, input);
	    else
	      result = this._decodeChoice(input);
	
	    if (input.isError(result))
	      return result;
	
	    // Decode children
	    if (!state.any && state.choice === null && state.children !== null) {
	      var fail = state.children.some(function decodeChildren(child) {
	        // NOTE: We are ignoring errors here, to let parser continue with other
	        // parts of encoded data
	        child._decode(input);
	      });
	      if (fail)
	        return err;
	    }
	  }
	
	  // Pop object
	  if (state.obj && present)
	    result = input.leaveObject(prevObj);
	
	  // Set key
	  if (state.key !== null && (result !== null || present === true))
	    input.leaveKey(prevKey, state.key, result);
	
	  return result;
	};
	
	Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
	  var state = this._baseState;
	
	  if (tag === 'seq' || tag === 'set')
	    return null;
	  if (tag === 'seqof' || tag === 'setof')
	    return this._decodeList(input, tag, state.args[0]);
	  else if (tag === 'octstr' || tag === 'bitstr')
	    return this._decodeStr(input, tag);
	  else if (tag === 'ia5str' || tag === 'utf8str')
	    return this._decodeStr(input, tag);
	  else if (tag === 'objid' && state.args)
	    return this._decodeObjid(input, state.args[0], state.args[1]);
	  else if (tag === 'objid')
	    return this._decodeObjid(input, null, null);
	  else if (tag === 'gentime' || tag === 'utctime')
	    return this._decodeTime(input, tag);
	  else if (tag === 'null_')
	    return this._decodeNull(input);
	  else if (tag === 'bool')
	    return this._decodeBool(input);
	  else if (tag === 'int' || tag === 'enum')
	    return this._decodeInt(input, state.args && state.args[0]);
	  else if (state.use !== null)
	    return this._getUse(state.use, input._reporterState.obj)._decode(input);
	  else
	    return input.error('unknown tag: ' + tag);
	
	  return null;
	};
	
	Node.prototype._getUse = function _getUse(entity, obj) {
	
	  var state = this._baseState;
	  // Create altered use decoder if implicit is set
	  state.useDecoder = this._use(entity, obj);
	  assert(state.useDecoder._baseState.parent === null);
	  state.useDecoder = state.useDecoder._baseState.children[0];
	  if (state.implicit !== state.useDecoder._baseState.implicit) {
	    state.useDecoder = state.useDecoder.clone();
	    state.useDecoder._baseState.implicit = state.implicit;
	  }
	  return state.useDecoder;
	};
	
	Node.prototype._decodeChoice = function decodeChoice(input) {
	  var state = this._baseState;
	  var result = null;
	  var match = false;
	
	  Object.keys(state.choice).some(function(key) {
	    var save = input.save();
	    var node = state.choice[key];
	    try {
	      var value = node._decode(input);
	      if (input.isError(value))
	        return false;
	
	      result = { type: key, value: value };
	      match = true;
	    } catch (e) {
	      input.restore(save);
	      return false;
	    }
	    return true;
	  }, this);
	
	  if (!match)
	    return input.error('Choice not matched');
	
	  return result;
	};
	
	//
	// Encoding
	//
	
	Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
	  return new EncoderBuffer(data, this.reporter);
	};
	
	Node.prototype._encode = function encode(data, reporter, parent) {
	  var state = this._baseState;
	  if (state['default'] !== null && state['default'] === data)
	    return;
	
	  var result = this._encodeValue(data, reporter, parent);
	  if (result === undefined)
	    return;
	
	  if (this._skipDefault(result, reporter, parent))
	    return;
	
	  return result;
	};
	
	Node.prototype._encodeValue = function encode(data, reporter, parent) {
	  var state = this._baseState;
	
	  // Decode root node
	  if (state.parent === null)
	    return state.children[0]._encode(data, reporter || new Reporter());
	
	  var result = null;
	  var present = true;
	
	  // Set reporter to share it with a child class
	  this.reporter = reporter;
	
	  // Check if data is there
	  if (state.optional && data === undefined) {
	    if (state['default'] !== null)
	      data = state['default']
	    else
	      return;
	  }
	
	  // For error reporting
	  var prevKey;
	
	  // Encode children first
	  var content = null;
	  var primitive = false;
	  if (state.any) {
	    // Anything that was given is translated to buffer
	    result = this._createEncoderBuffer(data);
	  } else if (state.choice) {
	    result = this._encodeChoice(data, reporter);
	  } else if (state.children) {
	    content = state.children.map(function(child) {
	      if (child._baseState.tag === 'null_')
	        return child._encode(null, reporter, data);
	
	      if (child._baseState.key === null)
	        return reporter.error('Child should have a key');
	      var prevKey = reporter.enterKey(child._baseState.key);
	
	      if (typeof data !== 'object')
	        return reporter.error('Child expected, but input is not object');
	
	      var res = child._encode(data[child._baseState.key], reporter, data);
	      reporter.leaveKey(prevKey);
	
	      return res;
	    }, this).filter(function(child) {
	      return child;
	    });
	
	    content = this._createEncoderBuffer(content);
	  } else {
	    if (state.tag === 'seqof' || state.tag === 'setof') {
	      // TODO(indutny): this should be thrown on DSL level
	      if (!(state.args && state.args.length === 1))
	        return reporter.error('Too many args for : ' + state.tag);
	
	      if (!Array.isArray(data))
	        return reporter.error('seqof/setof, but data is not Array');
	
	      var child = this.clone();
	      child._baseState.implicit = null;
	      content = this._createEncoderBuffer(data.map(function(item) {
	        var state = this._baseState;
	
	        return this._getUse(state.args[0], data)._encode(item, reporter);
	      }, child));
	    } else if (state.use !== null) {
	      result = this._getUse(state.use, parent)._encode(data, reporter);
	    } else {
	      content = this._encodePrimitive(state.tag, data);
	      primitive = true;
	    }
	  }
	
	  // Encode data itself
	  var result;
	  if (!state.any && state.choice === null) {
	    var tag = state.implicit !== null ? state.implicit : state.tag;
	    var cls = state.implicit === null ? 'universal' : 'context';
	
	    if (tag === null) {
	      if (state.use === null)
	        reporter.error('Tag could be ommited only for .use()');
	    } else {
	      if (state.use === null)
	        result = this._encodeComposite(tag, primitive, cls, content);
	    }
	  }
	
	  // Wrap in explicit
	  if (state.explicit !== null)
	    result = this._encodeComposite(state.explicit, false, 'context', result);
	
	  return result;
	};
	
	Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
	  var state = this._baseState;
	
	  var node = state.choice[data.type];
	  if (!node) {
	    assert(
	        false,
	        data.type + ' not found in ' +
	            JSON.stringify(Object.keys(state.choice)));
	  }
	  return node._encode(data.value, reporter);
	};
	
	Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
	  var state = this._baseState;
	
	  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
	    return this._encodeStr(data, tag);
	  else if (tag === 'utf8str')
	    return this._encodeStr(data, tag);
	  else if (tag === 'objid' && state.args)
	    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
	  else if (tag === 'objid')
	    return this._encodeObjid(data, null, null);
	  else if (tag === 'gentime' || tag === 'utctime')
	    return this._encodeTime(data, tag);
	  else if (tag === 'null_')
	    return this._encodeNull();
	  else if (tag === 'int' || tag === 'enum')
	    return this._encodeInt(data, state.args && state.reverseArgs[0]);
	  else if (tag === 'bool')
	    return this._encodeBool(data);
	  else
	    throw new Error('Unsupported tag: ' + tag);
	};


/***/ },
/* 1341 */
/***/ function(module, exports, __webpack_require__) {

	var constants = exports;
	
	// Helper
	constants._reverse = function reverse(map) {
	  var res = {};
	
	  Object.keys(map).forEach(function(key) {
	    // Convert key to integer if it is stringified
	    if ((key | 0) == key)
	      key = key | 0;
	
	    var value = map[key];
	    res[value] = key;
	  });
	
	  return res;
	};
	
	constants.der = __webpack_require__(1342);


/***/ },
/* 1342 */
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(1341);
	
	exports.tagClass = {
	  0: 'universal',
	  1: 'application',
	  2: 'context',
	  3: 'private'
	};
	exports.tagClassByName = constants._reverse(exports.tagClass);
	
	exports.tag = {
	  0x00: 'end',
	  0x01: 'bool',
	  0x02: 'int',
	  0x03: 'bitstr',
	  0x04: 'octstr',
	  0x05: 'null_',
	  0x06: 'objid',
	  0x07: 'objDesc',
	  0x08: 'external',
	  0x09: 'real',
	  0x0a: 'enum',
	  0x0b: 'embed',
	  0x0c: 'utf8str',
	  0x0d: 'relativeOid',
	  0x10: 'seq',
	  0x11: 'set',
	  0x12: 'numstr',
	  0x13: 'printstr',
	  0x14: 't61str',
	  0x15: 'videostr',
	  0x16: 'ia5str',
	  0x17: 'utctime',
	  0x18: 'gentime',
	  0x19: 'graphstr',
	  0x1a: 'iso646str',
	  0x1b: 'genstr',
	  0x1c: 'unistr',
	  0x1d: 'charstr',
	  0x1e: 'bmpstr'
	};
	exports.tagByName = constants._reverse(exports.tag);


/***/ },
/* 1343 */
/***/ function(module, exports, __webpack_require__) {

	var decoders = exports;
	
	decoders.der = __webpack_require__(1344);
	decoders.pem = __webpack_require__(1345);


/***/ },
/* 1344 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	
	var asn1 = __webpack_require__(1334);
	var base = asn1.base;
	var bignum = asn1.bignum;
	
	// Import DER constants
	var der = asn1.constants.der;
	
	function DERDecoder(entity) {
	  this.enc = 'der';
	  this.name = entity.name;
	  this.entity = entity;
	
	  // Construct base tree
	  this.tree = new DERNode();
	  this.tree._init(entity.body);
	};
	module.exports = DERDecoder;
	
	DERDecoder.prototype.decode = function decode(data, options) {
	  if (!(data instanceof base.DecoderBuffer))
	    data = new base.DecoderBuffer(data, options);
	
	  return this.tree._decode(data, options);
	};
	
	// Tree methods
	
	function DERNode(parent) {
	  base.Node.call(this, 'der', parent);
	}
	inherits(DERNode, base.Node);
	
	DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
	  if (buffer.isEmpty())
	    return false;
	
	  var state = buffer.save();
	  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
	  if (buffer.isError(decodedTag))
	    return decodedTag;
	
	  buffer.restore(state);
	
	  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
	};
	
	DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
	  var decodedTag = derDecodeTag(buffer,
	                                'Failed to decode tag of "' + tag + '"');
	  if (buffer.isError(decodedTag))
	    return decodedTag;
	
	  var len = derDecodeLen(buffer,
	                         decodedTag.primitive,
	                         'Failed to get length of "' + tag + '"');
	
	  // Failure
	  if (buffer.isError(len))
	    return len;
	
	  if (!any &&
	      decodedTag.tag !== tag &&
	      decodedTag.tagStr !== tag &&
	      decodedTag.tagStr + 'of' !== tag) {
	    return buffer.error('Failed to match tag: "' + tag + '"');
	  }
	
	  if (decodedTag.primitive || len !== null)
	    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
	
	  // Indefinite length... find END tag
	  var state = buffer.save();
	  var res = this._skipUntilEnd(
	      buffer,
	      'Failed to skip indefinite length body: "' + this.tag + '"');
	  if (buffer.isError(res))
	    return res;
	
	  len = buffer.offset - state.offset;
	  buffer.restore(state);
	  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
	};
	
	DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
	  while (true) {
	    var tag = derDecodeTag(buffer, fail);
	    if (buffer.isError(tag))
	      return tag;
	    var len = derDecodeLen(buffer, tag.primitive, fail);
	    if (buffer.isError(len))
	      return len;
	
	    var res;
	    if (tag.primitive || len !== null)
	      res = buffer.skip(len)
	    else
	      res = this._skipUntilEnd(buffer, fail);
	
	    // Failure
	    if (buffer.isError(res))
	      return res;
	
	    if (tag.tagStr === 'end')
	      break;
	  }
	};
	
	DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
	  var result = [];
	  while (!buffer.isEmpty()) {
	    var possibleEnd = this._peekTag(buffer, 'end');
	    if (buffer.isError(possibleEnd))
	      return possibleEnd;
	
	    var res = decoder.decode(buffer, 'der');
	    if (buffer.isError(res) && possibleEnd)
	      break;
	    result.push(res);
	  }
	  return result;
	};
	
	DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
	  if (tag === 'octstr') {
	    return buffer.raw();
	  } else if (tag === 'bitstr') {
	    var unused = buffer.readUInt8();
	    if (buffer.isError(unused))
	      return unused;
	
	    return { unused: unused, data: buffer.raw() };
	  } else if (tag === 'ia5str' || tag === 'utf8str') {
	    return buffer.raw().toString();
	  } else {
	    return this.error('Decoding of string type: ' + tag + ' unsupported');
	  }
	};
	
	DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
	  var identifiers = [];
	  var ident = 0;
	  while (!buffer.isEmpty()) {
	    var subident = buffer.readUInt8();
	    ident <<= 7;
	    ident |= subident & 0x7f;
	    if ((subident & 0x80) === 0) {
	      identifiers.push(ident);
	      ident = 0;
	    }
	  }
	  if (subident & 0x80)
	    identifiers.push(ident);
	
	  var first = (identifiers[0] / 40) | 0;
	  var second = identifiers[0] % 40;
	
	  if (relative)
	    result = identifiers;
	  else
	    result = [first, second].concat(identifiers.slice(1));
	
	  if (values)
	    result = values[result.join(' ')];
	
	  return result;
	};
	
	DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
	  var str = buffer.raw().toString();
	  if (tag === 'gentime') {
	    var year = str.slice(0, 4) | 0;
	    var mon = str.slice(4, 6) | 0;
	    var day = str.slice(6, 8) | 0;
	    var hour = str.slice(8, 10) | 0;
	    var min = str.slice(10, 12) | 0;
	    var sec = str.slice(12, 14) | 0;
	  } else if (tag === 'utctime') {
	    var year = str.slice(0, 2) | 0;
	    var mon = str.slice(2, 4) | 0;
	    var day = str.slice(4, 6) | 0;
	    var hour = str.slice(6, 8) | 0;
	    var min = str.slice(8, 10) | 0;
	    var sec = str.slice(10, 12) | 0;
	    if (year < 70)
	      year = 2000 + year;
	    else
	      year = 1900 + year;
	  } else {
	    return this.error('Decoding ' + tag + ' time is not supported yet');
	  }
	
	  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
	};
	
	DERNode.prototype._decodeNull = function decodeNull(buffer) {
	  return null;
	};
	
	DERNode.prototype._decodeBool = function decodeBool(buffer) {
	  var res = buffer.readUInt8();
	  if (buffer.isError(res))
	    return res;
	  else
	    return res !== 0;
	};
	
	DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
	  // Bigint, return as it is (assume big endian)
	  var raw = buffer.raw();
	  var res = new bignum(raw);
	
	  if (values)
	    res = values[res.toString(10)] || res;
	
	  return res;
	};
	
	DERNode.prototype._use = function use(entity, obj) {
	  if (typeof entity === 'function')
	    entity = entity(obj);
	  return entity._getDecoder('der').tree;
	};
	
	// Utility methods
	
	function derDecodeTag(buf, fail) {
	  var tag = buf.readUInt8(fail);
	  if (buf.isError(tag))
	    return tag;
	
	  var cls = der.tagClass[tag >> 6];
	  var primitive = (tag & 0x20) === 0;
	
	  // Multi-octet tag - load
	  if ((tag & 0x1f) === 0x1f) {
	    var oct = tag;
	    tag = 0;
	    while ((oct & 0x80) === 0x80) {
	      oct = buf.readUInt8(fail);
	      if (buf.isError(oct))
	        return oct;
	
	      tag <<= 7;
	      tag |= oct & 0x7f;
	    }
	  } else {
	    tag &= 0x1f;
	  }
	  var tagStr = der.tag[tag];
	
	  return {
	    cls: cls,
	    primitive: primitive,
	    tag: tag,
	    tagStr: tagStr
	  };
	}
	
	function derDecodeLen(buf, primitive, fail) {
	  var len = buf.readUInt8(fail);
	  if (buf.isError(len))
	    return len;
	
	  // Indefinite form
	  if (!primitive && len === 0x80)
	    return null;
	
	  // Definite form
	  if ((len & 0x80) === 0) {
	    // Short form
	    return len;
	  }
	
	  // Long form
	  var num = len & 0x7f;
	  if (num >= 4)
	    return buf.error('length octect is too long');
	
	  len = 0;
	  for (var i = 0; i < num; i++) {
	    len <<= 8;
	    var j = buf.readUInt8(fail);
	    if (buf.isError(j))
	      return j;
	    len |= j;
	  }
	
	  return len;
	}


/***/ },
/* 1345 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Buffer = __webpack_require__(820).Buffer;
	
	var asn1 = __webpack_require__(1334);
	var DERDecoder = __webpack_require__(1344);
	
	function PEMDecoder(entity) {
	  DERDecoder.call(this, entity);
	  this.enc = 'pem';
	};
	inherits(PEMDecoder, DERDecoder);
	module.exports = PEMDecoder;
	
	PEMDecoder.prototype.decode = function decode(data, options) {
	  var lines = data.toString().split(/[\r\n]+/g);
	
	  var label = options.label.toUpperCase();
	
	  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
	  var start = -1;
	  var end = -1;
	  for (var i = 0; i < lines.length; i++) {
	    var match = lines[i].match(re);
	    if (match === null)
	      continue;
	
	    if (match[2] !== label)
	      continue;
	
	    if (start === -1) {
	      if (match[1] !== 'BEGIN')
	        break;
	      start = i;
	    } else {
	      if (match[1] !== 'END')
	        break;
	      end = i;
	      break;
	    }
	  }
	  if (start === -1 || end === -1)
	    throw new Error('PEM section not found for: ' + label);
	
	  var base64 = lines.slice(start + 1, end).join('');
	  // Remove excessive symbols
	  base64.replace(/[^a-z0-9\+\/=]+/gi, '');
	
	  var input = new Buffer(base64, 'base64');
	  return DERDecoder.prototype.decode.call(this, input, options);
	};


/***/ },
/* 1346 */
/***/ function(module, exports, __webpack_require__) {

	var encoders = exports;
	
	encoders.der = __webpack_require__(1347);
	encoders.pem = __webpack_require__(1348);


/***/ },
/* 1347 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Buffer = __webpack_require__(820).Buffer;
	
	var asn1 = __webpack_require__(1334);
	var base = asn1.base;
	var bignum = asn1.bignum;
	
	// Import DER constants
	var der = asn1.constants.der;
	
	function DEREncoder(entity) {
	  this.enc = 'der';
	  this.name = entity.name;
	  this.entity = entity;
	
	  // Construct base tree
	  this.tree = new DERNode();
	  this.tree._init(entity.body);
	};
	module.exports = DEREncoder;
	
	DEREncoder.prototype.encode = function encode(data, reporter) {
	  return this.tree._encode(data, reporter).join();
	};
	
	// Tree methods
	
	function DERNode(parent) {
	  base.Node.call(this, 'der', parent);
	}
	inherits(DERNode, base.Node);
	
	DERNode.prototype._encodeComposite = function encodeComposite(tag,
	                                                              primitive,
	                                                              cls,
	                                                              content) {
	  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
	
	  // Short form
	  if (content.length < 0x80) {
	    var header = new Buffer(2);
	    header[0] = encodedTag;
	    header[1] = content.length;
	    return this._createEncoderBuffer([ header, content ]);
	  }
	
	  // Long form
	  // Count octets required to store length
	  var lenOctets = 1;
	  for (var i = content.length; i >= 0x100; i >>= 8)
	    lenOctets++;
	
	  var header = new Buffer(1 + 1 + lenOctets);
	  header[0] = encodedTag;
	  header[1] = 0x80 | lenOctets;
	
	  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
	    header[i] = j & 0xff;
	
	  return this._createEncoderBuffer([ header, content ]);
	};
	
	DERNode.prototype._encodeStr = function encodeStr(str, tag) {
	  if (tag === 'octstr')
	    return this._createEncoderBuffer(str);
	  else if (tag === 'bitstr')
	    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
	  else if (tag === 'ia5str' || tag === 'utf8str')
	    return this._createEncoderBuffer(str);
	  return this.reporter.error('Encoding of string type: ' + tag +
	                             ' unsupported');
	};
	
	DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
	  if (typeof id === 'string') {
	    if (!values)
	      return this.reporter.error('string objid given, but no values map found');
	    if (!values.hasOwnProperty(id))
	      return this.reporter.error('objid not found in values map');
	    id = values[id].split(/[\s\.]+/g);
	    for (var i = 0; i < id.length; i++)
	      id[i] |= 0;
	  } else if (Array.isArray(id)) {
	    id = id.slice();
	    for (var i = 0; i < id.length; i++)
	      id[i] |= 0;
	  }
	
	  if (!Array.isArray(id)) {
	    return this.reporter.error('objid() should be either array or string, ' +
	                               'got: ' + JSON.stringify(id));
	  }
	
	  if (!relative) {
	    if (id[1] >= 40)
	      return this.reporter.error('Second objid identifier OOB');
	    id.splice(0, 2, id[0] * 40 + id[1]);
	  }
	
	  // Count number of octets
	  var size = 0;
	  for (var i = 0; i < id.length; i++) {
	    var ident = id[i];
	    for (size++; ident >= 0x80; ident >>= 7)
	      size++;
	  }
	
	  var objid = new Buffer(size);
	  var offset = objid.length - 1;
	  for (var i = id.length - 1; i >= 0; i--) {
	    var ident = id[i];
	    objid[offset--] = ident & 0x7f;
	    while ((ident >>= 7) > 0)
	      objid[offset--] = 0x80 | (ident & 0x7f);
	  }
	
	  return this._createEncoderBuffer(objid);
	};
	
	function two(num) {
	  if (num < 10)
	    return '0' + num;
	  else
	    return num;
	}
	
	DERNode.prototype._encodeTime = function encodeTime(time, tag) {
	  var str;
	  var date = new Date(time);
	
	  if (tag === 'gentime') {
	    str = [
	      two(date.getFullYear()),
	      two(date.getUTCMonth() + 1),
	      two(date.getUTCDate()),
	      two(date.getUTCHours()),
	      two(date.getUTCMinutes()),
	      two(date.getUTCSeconds()),
	      'Z'
	    ].join('');
	  } else if (tag === 'utctime') {
	    str = [
	      two(date.getFullYear() % 100),
	      two(date.getUTCMonth() + 1),
	      two(date.getUTCDate()),
	      two(date.getUTCHours()),
	      two(date.getUTCMinutes()),
	      two(date.getUTCSeconds()),
	      'Z'
	    ].join('');
	  } else {
	    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
	  }
	
	  return this._encodeStr(str, 'octstr');
	};
	
	DERNode.prototype._encodeNull = function encodeNull() {
	  return this._createEncoderBuffer('');
	};
	
	DERNode.prototype._encodeInt = function encodeInt(num, values) {
	  if (typeof num === 'string') {
	    if (!values)
	      return this.reporter.error('String int or enum given, but no values map');
	    if (!values.hasOwnProperty(num)) {
	      return this.reporter.error('Values map doesn\'t contain: ' +
	                                 JSON.stringify(num));
	    }
	    num = values[num];
	  }
	
	  // Bignum, assume big endian
	  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
	    var numArray = num.toArray();
	    if (num.sign === false && numArray[0] & 0x80) {
	      numArray.unshift(0);
	    }
	    num = new Buffer(numArray);
	  }
	
	  if (Buffer.isBuffer(num)) {
	    var size = num.length;
	    if (num.length === 0)
	      size++;
	
	    var out = new Buffer(size);
	    num.copy(out);
	    if (num.length === 0)
	      out[0] = 0
	    return this._createEncoderBuffer(out);
	  }
	
	  if (num < 0x80)
	    return this._createEncoderBuffer(num);
	
	  if (num < 0x100)
	    return this._createEncoderBuffer([0, num]);
	
	  var size = 1;
	  for (var i = num; i >= 0x100; i >>= 8)
	    size++;
	
	  var out = new Array(size);
	  for (var i = out.length - 1; i >= 0; i--) {
	    out[i] = num & 0xff;
	    num >>= 8;
	  }
	  if(out[0] & 0x80) {
	    out.unshift(0);
	  }
	
	  return this._createEncoderBuffer(new Buffer(out));
	};
	
	DERNode.prototype._encodeBool = function encodeBool(value) {
	  return this._createEncoderBuffer(value ? 0xff : 0);
	};
	
	DERNode.prototype._use = function use(entity, obj) {
	  if (typeof entity === 'function')
	    entity = entity(obj);
	  return entity._getEncoder('der').tree;
	};
	
	DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
	  var state = this._baseState;
	  var i;
	  if (state['default'] === null)
	    return false;
	
	  var data = dataBuffer.join();
	  if (state.defaultBuffer === undefined)
	    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
	
	  if (data.length !== state.defaultBuffer.length)
	    return false;
	
	  for (i=0; i < data.length; i++)
	    if (data[i] !== state.defaultBuffer[i])
	      return false;
	
	  return true;
	};
	
	// Utility methods
	
	function encodeTag(tag, primitive, cls, reporter) {
	  var res;
	
	  if (tag === 'seqof')
	    tag = 'seq';
	  else if (tag === 'setof')
	    tag = 'set';
	
	  if (der.tagByName.hasOwnProperty(tag))
	    res = der.tagByName[tag];
	  else if (typeof tag === 'number' && (tag | 0) === tag)
	    res = tag;
	  else
	    return reporter.error('Unknown tag: ' + tag);
	
	  if (res >= 0x1f)
	    return reporter.error('Multi-octet tag encoding unsupported');
	
	  if (!primitive)
	    res |= 0x20;
	
	  res |= (der.tagClassByName[cls || 'universal'] << 6);
	
	  return res;
	}


/***/ },
/* 1348 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(828);
	var Buffer = __webpack_require__(820).Buffer;
	
	var asn1 = __webpack_require__(1334);
	var DEREncoder = __webpack_require__(1347);
	
	function PEMEncoder(entity) {
	  DEREncoder.call(this, entity);
	  this.enc = 'pem';
	};
	inherits(PEMEncoder, DEREncoder);
	module.exports = PEMEncoder;
	
	PEMEncoder.prototype.encode = function encode(data, options) {
	  var buf = DEREncoder.prototype.encode.call(this, data);
	
	  var p = buf.toString('base64');
	  var out = [ '-----BEGIN ' + options.label + '-----' ];
	  for (var i = 0; i < p.length; i += 64)
	    out.push(p.slice(i, i + 64));
	  out.push('-----END ' + options.label + '-----');
	  return out.join('\n');
	};


/***/ },
/* 1349 */,
/* 1350 */
/***/ function(module, exports, __webpack_require__) {

	
	var EC = __webpack_require__(1351).ec
	var aliases = __webpack_require__(1368)
	var parameters = {
	    secp256k1: [1, 3, 132, 0, 10],
	    p192: [1, 2, 840, 10045, 3, 1, 1],
	    p224: [1, 3, 132, 0, 33],
	    p256: [1, 2, 840, 10045, 3, 1, 7],
	    p384: [1, 3, 132, 0, 34],
	    p521: [1, 3, 132, 0, 35]
	}
	
	function toCurves (parameters) {
	  var curves = {}
	  Object.keys(parameters).forEach(function (curve) {
	    var cParams
	    // be lazy
	    Object.defineProperty(curves, curve, {
	      get: function () {
	        if (!cParams) {
	          cParams = {
	            curveParameters: parameters[curve],
	            privatePEMOptions: {label: 'EC PRIVATE KEY'},
	            publicPEMOptions: {label: 'PUBLIC KEY'},
	            curve: new EC(curve)
	          }
	        }
	
	        return cParams
	      }
	    })
	
	    if (aliases[curve]) {
	      Object.defineProperty(curves, aliases[curve], {
	        get: function () {
	          return curves[curve]
	        }
	      })
	    }
	  })
	
	  return curves
	}
	
	module.exports = toCurves(parameters)


/***/ },
/* 1351 */,
/* 1352 */,
/* 1353 */,
/* 1354 */,
/* 1355 */,
/* 1356 */,
/* 1357 */,
/* 1358 */,
/* 1359 */,
/* 1360 */,
/* 1361 */,
/* 1362 */,
/* 1363 */,
/* 1364 */,
/* 1365 */,
/* 1366 */,
/* 1367 */,
/* 1368 */
/***/ function(module, exports) {

	module.exports = {
	  p192: 'prime192v1',
	  p224: 'secp224r1',
	  p256: 'prime256v1',
	  p384: 'secp384r1',
	  p521: 'secp521r1'
	}
	


/***/ },
/* 1369 */,
/* 1370 */,
/* 1371 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict'
	
	const crypto = __webpack_require__(904)
	const curve25519 = __webpack_require__(1372).box
	const nkey = __webpack_require__(1369)
	const type = 'ec'
	
	const impl = nkey.wrap({
	  type,
	  genSync,
	  fromJSON
	})
	
	module.exports = impl
	
	function genSync () {
	  const priv = curve25519.keyPair()
	  return impl.fromJSON({ priv })
	}
	
	function fromJSON (opts) {
	  if (!(opts.priv || opts.pub)) {
	    throw new Error('expected "priv" or "pub"')
	  }
	
	  const priv = typeof opts.priv === 'string'
	    ? new Buffer(opts.priv, 'hex') :
	    opts.priv && opts.priv.secretKey ? new Buffer(opts.priv.secretKey) : opts.priv
	
	  const privArr = priv && toUint8Array(priv)
	  const pub = typeof opts.pub === 'string'
	    ? new Buffer(opts.pub, 'hex')
	    : opts.pub || (opts.priv && opts.priv.publicKey && new Buffer(opts.priv.publicKey)) || pubFromPriv(priv)
	
	  const privEnc = typeof priv === 'string' && 'hex'
	  const pubEnc = typeof pub === 'string' && 'hex'
	  const pubKeyString = pub.toString('hex')
	  const privKeyString = priv && priv.toString('hex')
	  const fingerprint = crypto.createHash('sha256').update(pub).digest('hex')
	
	  return nkey.wrap({
	    type,
	    pubKeyString,
	    fingerprint,
	    pub,
	    priv,
	    ecdh: function (pub) {
	      if (!priv) throw new Error('this is a public key!')
	
	      pub = toUint8Array(pub)
	      const sharedKey = curve25519.before(pub, privArr)
	      return new Buffer(sharedKey)
	    },
	    toJSON
	  })
	
	  function pubFromPriv (priv) {
	    const arr = priv.secretKey || curve25519.keyPair.fromSecretKey(priv).publicKey
	    return new Buffer(arr)
	  }
	
	  function toJSON (exportPrivate) {
	    const obj = {
	      type: 'ec',
	      curve: 'curve25519',
	      pub: pubKeyString,
	      fingerprint
	    }
	
	    if (exportPrivate) obj.priv = privKeyString
	
	    return obj
	  }
	}
	
	function toUint8Array (buf) {
	  if (buf instanceof Uint8Array) return buf
	  if (!Buffer.isBuffer(buf)) {
	    throw new Error('expected Buffer or Uint8Array')
	  }
	
	  var arr = new Uint8Array(buf.length)
	  for (var i = 0; i < buf.length; i++) {
	    arr[i] = buf[i]
	  }
	
	  return arr
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1372 */
/***/ function(module, exports, __webpack_require__) {

	(function(nacl) {
	'use strict';
	
	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/
	
	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};
	
	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };
	
	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;
	
	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
	
	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}
	
	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}
	
	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}
	
	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}
	
	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;
	
	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;
	
	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);
	
	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);
	
	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);
	
	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	
	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);
	
	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);
	
	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);
	
	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;
	
	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;
	
	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;
	
	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;
	
	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;
	
	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;
	
	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;
	
	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;
	
	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;
	
	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;
	
	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;
	
	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;
	
	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;
	
	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;
	
	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;
	
	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;
	
	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}
	
	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;
	
	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;
	
	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);
	
	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);
	
	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);
	
	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	
	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);
	
	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);
	
	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);
	
	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	
	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;
	
	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;
	
	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;
	
	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;
	
	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;
	
	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;
	
	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;
	
	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}
	
	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}
	
	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}
	
	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"
	
	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}
	
	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}
	
	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}
	
	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}
	
	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/
	
	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;
	
	  var t0, t1, t2, t3, t4, t5, t6, t7;
	
	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;
	
	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};
	
	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	
	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];
	
	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];
	
	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;
	
	    c = 0;
	
	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;
	
	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;
	
	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;
	
	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;
	
	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;
	
	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;
	
	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;
	
	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;
	
	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;
	
	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;
	
	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;
	
	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;
	
	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};
	
	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;
	
	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }
	
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;
	
	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);
	
	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];
	
	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;
	
	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }
	
	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};
	
	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;
	
	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }
	
	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }
	
	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};
	
	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}
	
	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}
	
	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}
	
	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}
	
	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}
	
	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}
	
	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}
	
	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}
	
	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}
	
	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}
	
	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}
	
	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}
	
	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}
	
	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];
	
	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;
	
	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is
	
	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);
	
	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);
	
	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}
	
	function S(o, a) {
	  M(o, a, a);
	}
	
	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}
	
	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}
	
	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}
	
	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}
	
	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}
	
	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}
	
	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;
	
	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}
	
	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}
	
	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];
	
	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;
	
	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],
	
	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];
	
	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;
	
	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;
	
	      // add
	      h = ah7;
	      l = al7;
	
	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;
	
	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      // K
	      h = K[i*2];
	      l = K[i*2+1];
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      // w
	      h = wh[i%16];
	      l = wl[i%16];
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;
	
	      // add
	      h = th;
	      l = tl;
	
	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;
	
	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);
	
	      // add
	      h = bh3;
	      l = bl3;
	
	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;
	
	      h = th;
	      l = tl;
	
	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);
	
	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;
	
	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;
	
	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];
	
	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;
	
	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];
	
	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;
	
	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));
	
	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;
	
	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));
	
	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;
	
	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;
	
	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }
	
	    // add
	    h = ah0;
	    l = al0;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[0];
	    l = hl[0];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);
	
	    h = ah1;
	    l = al1;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[1];
	    l = hl[1];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);
	
	    h = ah2;
	    l = al2;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[2];
	    l = hl[2];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);
	
	    h = ah3;
	    l = al3;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[3];
	    l = hl[3];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);
	
	    h = ah4;
	    l = al4;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[4];
	    l = hl[4];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);
	
	    h = ah5;
	    l = al5;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[5];
	    l = hl[5];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);
	
	    h = ah6;
	    l = al6;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[6];
	    l = hl[6];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);
	
	    h = ah7;
	    l = al7;
	
	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;
	
	    h = hh[7];
	    l = hl[7];
	
	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;
	
	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;
	
	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);
	
	    pos += 128;
	    n -= 128;
	  }
	
	  return n;
	}
	
	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;
	
	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;
	
	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;
	
	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;
	
	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;
	
	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);
	
	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);
	
	  return 0;
	}
	
	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();
	
	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);
	
	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}
	
	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}
	
	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}
	
	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}
	
	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}
	
	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;
	
	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;
	
	  scalarbase(p, d);
	  pack(pk, p);
	
	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}
	
	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
	
	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = (x[j] + 128) >> 8;
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}
	
	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}
	
	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;
	
	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];
	
	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);
	
	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);
	
	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }
	
	  modL(sm.subarray(32), x);
	  return smlen;
	}
	
	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();
	
	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);
	
	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);
	
	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);
	
	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);
	
	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;
	
	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);
	
	  M(r[3], r[0], r[1]);
	  return 0;
	}
	
	function crypto_sign_open(m, sm, n, pk) {
	  var i, mlen;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];
	
	  mlen = -1;
	  if (n < 64) return -1;
	
	  if (unpackneg(q, pk)) return -1;
	
	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);
	
	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);
	
	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }
	
	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  mlen = n;
	  return mlen;
	}
	
	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;
	
	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,
	
	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES
	};
	
	/* High-level API */
	
	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}
	
	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}
	
	function checkArrayTypes() {
	  var t, i;
	  for (i = 0; i < arguments.length; i++) {
	     if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
	       throw new TypeError('unexpected type ' + t + ', use Uint8Array');
	  }
	}
	
	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}
	
	// TODO: Completely remove this in v0.15.
	if (!nacl.util) {
	  nacl.util = {};
	  nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {
	    throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
	  };
	}
	
	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};
	
	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};
	
	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return false;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};
	
	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
	
	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};
	
	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};
	
	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
	
	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};
	
	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};
	
	nacl.box.after = nacl.secretbox;
	
	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};
	
	nacl.box.open.after = nacl.secretbox.open;
	
	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};
	
	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};
	
	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;
	
	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};
	
	nacl.sign.open = function(signedMsg, publicKey) {
	  if (arguments.length !== 2)
	    throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};
	
	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};
	
	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};
	
	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};
	
	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};
	
	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};
	
	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;
	
	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};
	
	nacl.hash.hashLength = crypto_hash_BYTES;
	
	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};
	
	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};
	
	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (true) {
	    // Node.js.
	    crypto = __webpack_require__(1373);
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();
	
	})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));


/***/ },
/* 1373 */,
/* 1374 */,
/* 1375 */,
/* 1376 */,
/* 1377 */,
/* 1378 */,
/* 1379 */,
/* 1380 */,
/* 1381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	const EventEmitter = __webpack_require__(786).EventEmitter
	const PassThrough = __webpack_require__(1382).PassThrough
	const pump = __webpack_require__(1208)
	const subdown = __webpack_require__(1240)
	const collect = __webpack_require__(1051)
	const changeProcessor = __webpack_require__(1391)
	const LiveStream = __webpack_require__(1275)
	const wrap = __webpack_require__(1247)
	const errors = __webpack_require__(1259)
	const through = __webpack_require__(1213)
	const extend = __webpack_require__(1151)
	const clone = __webpack_require__(859)
	const lexint = __webpack_require__(1400)
	const SEPARATOR = '!'
	const MAX_CHAR = '\xff'
	const ENTRY_PROP = '_'
	const PREFIX = {
	  view: 'v',
	  index: 'x'
	}
	
	module.exports = exports = createIndexedDB
	// exports.SEPARATOR = SEPARATOR
	// exports.merge = merge
	
	function createIndexedDB (opts) {
	  const feed = opts.feed
	  if (!feed.count) {
	    throw new Error('feed.count method not found, use mafintosh/changes-feed or mvayngrib/changes-feed')
	  }
	
	  const top = opts.db
	  const primaryKey = opts.primaryKey || 'key'
	  const entryProp = opts.entryProp || ENTRY_PROP
	  const filter = opts.filter || alwaysTrue
	  const preprocess = opts.preprocess
	  // const custom = opts.custom
	  const stateReducer = opts.reduce || mergeReducer
	  const sep = opts.separator || SEPARATOR
	  const indexReducers = {}
	  const indexEmitters = {}
	
	  const counter = subdown(top, '~')
	  const dbOpts = { valueEncoding: top.options.valueEncoding, separator: sep }
	  const db = subdown(top, 'd', dbOpts)
	  LiveStream.install(db)
	
	  const view = subdown(db, PREFIX.view, dbOpts)
	  const index = subdown(db, PREFIX.index, dbOpts)
	
	  const processor = db.processor = changeProcessor({
	    feed: feed,
	    db: counter,
	    worker: worker
	  })
	
	  processor.setMaxListeners(0)
	
	  const emitter = new EventEmitter()
	
	  function worker (change, cb) {
	    // change = change.value
	    if (!preprocess) return workerHelper(change, cb)
	
	    preprocess(change, function (err, processed) {
	      if (err) return cb(err)
	      if (!processed) return cb() // skip
	
	      workerHelper(processed, cb)
	    })
	  }
	
	  function workerHelper (change, cb) {
	    const changeVal = change.value
	    if (!filter(changeVal)) return cb()
	
	    const rowKey = getPrimaryKey(changeVal, primaryKey)
	    // ignore changes that we can't process
	    if (rowKey == null) return cb()
	
	    let togo = 2
	    const rowIndexKey = getRowIndexKey(rowKey)
	    let newState
	    let oldState
	    let prevIndex
	    view.get(rowKey, function (err, state) {
	      oldState = state
	      stateReducer(state, change, function (err, _newState) {
	        if (err) return cb(err)
	
	        newState = _newState
	        if (newState && !(entryProp in newState)) {
	          newState[entryProp] = change.change
	        }
	
	        next()
	      })
	    })
	
	    index.get(rowIndexKey, function (err, indexMap) {
	      prevIndex = indexMap || {}
	      next()
	    })
	
	    function next () {
	      if (--togo) return
	
	      let del = Object.keys(prevIndex).map(key => {
	        return {
	          type: 'del',
	          key: key + sep + prevIndex[key]
	        }
	      })
	
	      let put
	      let newIndex = {}
	      // we may be in a delete-only op
	      if (newState) {
	        for (let key in indexReducers) {
	          let iVal = indexReducers[key](newState, change)
	          if (iVal != null) newIndex[key] = iVal
	        }
	
	        put = Object.keys(newIndex)
	          .map(key => {
	            // support multiple generated indices for one prop
	            // e.g. an identity might have multiple keys and want
	            // multiple indices for the `fingerprint` property
	            let vals = newIndex[key]
	            vals = Array.isArray(vals) ? vals : [vals]
	            return vals.map(function (val) {
	              return {
	                type: 'put',
	                key: key + sep + val,
	                // key: defaultIndexReducer(key, newState[key], rowKey),
	                value: rowKey
	              }
	            })
	          })
	          // flatten
	          .reduce(function (flat, next) {
	            return flat.concat(next)
	          }, [])
	          .concat({
	            type: 'put',
	            key: rowIndexKey,
	            value: newIndex
	          })
	
	        del = del.filter(delRow => {
	          return put.every(putRow => {
	            return putRow.key !== delRow.key
	          })
	        })
	      }
	
	      const indexBatch = del.concat(put || [])
	      const batch = prefixKeys(indexBatch, PREFIX.index)
	
	      // update view
	      batch.push({
	        type: newState ? 'put' : 'del',
	        key: prefixKey(rowKey, PREFIX.view),
	        value: newState || oldState
	      })
	
	      db.batch(batch, function (err) {
	        if (err) return cb(err)
	
	        cb()
	
	        // announce changes
	        emitter.emit('change', change, newState, oldState)
	        for (let prop in newIndex) {
	          indexEmitters[prop].emit('change', change, newIndex[prop])
	        }
	      })
	    }
	  }
	
	  function getRowIndexKey (rowKey) {
	    return MAX_CHAR + rowKey
	  }
	
	  function createIndexStream (prop, opts) {
	    opts = normalizeOpts(opts)
	
	    if ('eq' in opts) {
	      opts.lte = opts.gte = opts.eq
	    }
	
	    const prefix = prefixKey(prop, PREFIX.index)
	    extend(opts, wrap(opts, {
	      gt: function (x) {
	        // e.g. ['!x!firstName', 'Bill', MAX_CHAR]
	        return [prefix, x || '', opts.gte ? '' : MAX_CHAR].join(sep)
	      },
	      lt: function (x) {
	        // e.g. ['!x!firstName', 'Ted', MAX_CHAR]
	        return [prefix, x || MAX_CHAR, opts.lte ? MAX_CHAR : ''].join(sep)
	      }
	    }))
	
	    const noKeys = opts.keys === false
	    opts.keys = opts.values = true
	    return pump(
	      upToDateStream(db, processor, opts),
	      through.obj(function (data, enc, cb) {
	        if (data.type === 'del') return cb()
	
	        getOldRow(data.value, function (err, val) {
	          if (err) return cb(err)
	
	          // removeLogPointer(val, { keys: false })
	          if (!noKeys) val = { key: data.key, value: val }
	
	          cb(null, val)
	        })
	      })
	    )
	  }
	
	  function getLiveRow (key, opts, cb) {
	    processor.onLive(() => getOldRow(key, opts, cb))
	  }
	
	  function getOldRow (key, cb) {
	    view.get(key, cb)
	  }
	
	  function createIndex (prop, reduce) {
	    function createReadStream (opts) {
	      return createIndexStream(prop, opts)
	    }
	
	    function find (opts, cb) {
	      collect(createReadStream(opts), function (err, results) {
	        if (err) return cb(err)
	        if (!results.length) return cb(new errors.NotFoundError('no matches'))
	
	        cb(null, results)
	      })
	    }
	
	    function findOne (opts, cb) {
	      opts = normalizeOpts(opts)
	      opts.limit = 1
	      find(opts, function (err, results) {
	        if (err) return cb(err)
	        cb(null, results[0])
	      })
	    }
	
	    indexReducers[prop] = reduce || defaultIndexReducer(prop)
	    indexEmitters[prop] = new EventEmitter()
	    return extend(indexEmitters[prop], {
	      find: find,
	      findOne: findOne,
	      createReadStream: createReadStream,
	      createKeyStream: newKeyStreamCreator(createReadStream),
	      createValueStream: newValueStreamCreator(createReadStream),
	    })
	  }
	
	  function defaultIndexReducer (prop) {
	    return function indexReducer (state, change) {
	      if (prop in state) {
	        return state[prop] + sep +
	          // for identical values,
	          // order by change index in feed
	          lexint.pack(change.change, 'hex') + sep +
	          getPrimaryKey(state, primaryKey)
	      }
	    }
	  }
	
	  // function logOrderIndexReducer (prop) {
	  // }
	
	  function getPrimaryKey (obj, propOrFn) {
	    return typeof propOrFn === 'function' ? propOrFn(obj) : obj[propOrFn]
	  }
	
	  function prefixKeys (batch, prefix) {
	    return batch.map(row => {
	      const prefixed = {
	        type: row.type,
	        key: prefixKey(row.key, prefix),
	      }
	
	      if ('value' in row) prefixed.value = row.value
	
	      return prefixed
	    })
	  }
	
	  function prefixKey (key, prefix) {
	    return SEPARATOR + prefix + SEPARATOR + key
	  }
	
	  // function logPointerRemover (opts) {
	  //   return through.obj(function (data, enc, cb) {
	  //     removeLogPointer(data, opts)
	  //     cb(null, data)
	  //   })
	  // }
	
	  // function removeLogPointer (data, opts) {
	  //   const val = opts.keys === false ? data :
	  //     opts.values !== false ? data.value : null
	
	  //   if (val) delete val[entryProp]
	  // }
	
	  function mergeReducer (state, change, cb) {
	    // delete state[primaryKey]
	    cb(null, merge(state, change))
	  }
	
	  function merge (state, change) {
	    const newState = clone(state || {}, change.value || {})
	    if (!state) {
	      if (entryProp in newState) throw new Error(`"${entryProp}" is a reserved property`)
	      newState[entryProp] = change.change
	    }
	
	    return newState
	  }
	
	  function createViewReadStream (opts) {
	    opts = opts || {}
	    extend(opts, wrap(opts, {
	      gt: function (x) {
	        return prefixKey(x || '', PREFIX.view)
	      },
	      lt: function (x) {
	        return prefixKey(x || '', PREFIX.view) + '\xff'
	      }
	    }))
	
	    return pump(
	      upToDateStream(db, processor, opts),
	      unprefixer(PREFIX.view, opts)
	      // logPointerRemover(opts)
	    )
	  }
	
	  return extend(emitter, {
	    onLive: cb => processor.onLive(cb),
	    separator: sep,
	    merge: merge,
	    by: createIndex,
	    get: function (key, opts, cb) {
	      processor.onLive(() => view.get(key, opts, cb))
	    },
	    createReadStream: createViewReadStream,
	    createKeyStream: newKeyStreamCreator(createViewReadStream),
	    createValueStream: newValueStreamCreator(createViewReadStream),
	  })
	}
	
	function upToDateStream (db, processor, opts) {
	  opts = opts || {}
	  const tr = new PassThrough({ objectMode: true })
	  processor.onLive(function () {
	    const method = opts.live ? 'liveStream' : 'createReadStream'
	    const source = db[method].call(db, opts)
	    source.pipe(tr)
	  })
	
	  return tr
	}
	
	function alwaysTrue () {
	  return true
	}
	
	function unprefixer (prefix, opts) {
	  return through.obj(function (data, enc, cb) {
	    if (opts.keys === false) return cb(null, data)
	    if (opts.values === false) return cb(null, data.slice(prefix.length))
	
	    cb(null, {
	      type: data.type,
	      key: data.key.slice(prefix.length),
	      value: data.value
	    })
	  })
	}
	
	function newKeyStreamCreator (createReadStream) {
	  return function createKeyStream (opts) {
	    opts = opts || {}
	    opts.values = false
	    return createReadStream(opts)
	  }
	}
	
	function newValueStreamCreator (createReadStream) {
	  return function createValueStream (opts) {
	    opts = opts || {}
	    opts.keys = false
	    return createReadStream(opts)
	  }
	}
	
	function normalizeOpts (opts) {
	  if (typeof opts === 'string') {
	    return { eq: opts, keys: false }
	  }
	
	  return opts ? clone(opts) : {}
	}


/***/ },
/* 1382 */,
/* 1383 */,
/* 1384 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1385 */,
/* 1386 */,
/* 1387 */,
/* 1388 */,
/* 1389 */,
/* 1390 */,
/* 1391 */
/***/ function(module, exports, __webpack_require__) {

	var Writable = __webpack_require__(1392).Writable
	var inherits = __webpack_require__(828)
	
	module.exports = Processor
	
	function Processor(opts) {
	  if (!(this instanceof Processor)) return new Processor(opts)
	  var self = this
	
	  this.options = opts || {}
	  var db = this.db = this.options.db
	  var worker = this.worker = this.options.worker
	  var feed = this.feed = this.options.feed
	
	  this.key = opts.key || 'latest'
	  this.dbOptions = opts.dbOptions || {valueEncoding: 'utf8'}
	
	  var count
	  feed.count(function (err, n) {
	    if (err) self.emit('error', new Error('feed failed to initialize'))
	
	    count = n
	    start()
	  })
	
	  this.parsedLatest = null
	  db.get(this.key, this.dbOptions, function(err, latest) {
	    if (self.destroyed) return
	    if (err && !err.notFound) return self.emit('error', err)
	
	    if (err) latest = 0
	    else latest = parseInt(latest)
	
	    if (isNaN(latest)) return self.emit('error', new Error('corrupted latest: ' + latest))
	
	    self.parsedLatest = latest
	    start()
	  })
	
	  Object.defineProperty(this, 'live', {
	    get: function () {
	      return self.parsedLatest === self.feed.change + (self.feed.queued || 0)
	    }
	  })
	
	  function start () {
	    if (!(typeof count === 'number' && typeof self.parsedLatest === 'number')) return
	
	    self._checkLive()
	    self.feedReadStream = feed.createReadStream({since: self.parsedLatest, live: true})
	    self.feedReadStream.pipe(self)
	    self.feedReadStream.on('error', function(err) {
	      self.emit('error', err)
	    })
	
	    self.emit('processing', self.parsedLatest)
	  }
	
	  Writable.call(this, {objectMode: true, highWaterMark: 16})
	}
	
	inherits(Processor, Writable)
	
	Processor.prototype._checkLive = function () {
	  if (this.live) this.emit('live')
	}
	
	Processor.prototype.onLive = function (cb) {
	  if (this.live) return cb()
	
	  this.once('live', function () {
	    cb()
	  })
	}
	
	Processor.prototype._write = function(obj, enc, cb) {
	  var self = this
	  this.worker(obj, function(err) {
	    if (err) return cb(err)
	    self.parsedLatest = obj.change
	    self._checkLive()
	    self.db.put(self.key, obj.change.toString(), self.dbOptions, function(err) {
	      if (err) return cb(err)
	      cb()
	    })
	  })
	}
	
	Processor.prototype.destroy = function(err) {
	  if (this.feedReadStream) this.feedReadStream.destroy(err)
	  else self.destroyed = true
	}


/***/ },
/* 1392 */,
/* 1393 */,
/* 1394 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1395 */,
/* 1396 */,
/* 1397 */,
/* 1398 */,
/* 1399 */,
/* 1400 */
/***/ function(module, exports) {

	exports.pack = pack;
	exports.unpack = unpack;
	
	function pack (n, enc) {
	    n = Math.floor(n);
	    if (n < 0 || n === Infinity) return undefined;
	    
	    var bytes;
	    var max = 251;
	    var x = n - max;
	    
	    if (n < max) {
	        bytes = [ n ];
	    }
	    else if (x < 256) {
	        bytes = [ max, x ];
	    }
	    else if (x < 256*256) {
	        bytes = [ max + 1, Math.floor(x / 256), x % 256 ];
	    }
	    else if (x < 256*256*256) {
	        bytes = [
	            max + 2,
	            Math.floor(x / 256 / 256),
	            Math.floor(x / 256) % 256,
	            x % 256
	        ];
	    }
	    else if (x < 256*256*256*256) {
	        bytes = [
	            max + 3,
	            Math.floor(x / 256 / 256 / 256),
	            Math.floor(x / 256 / 256) % 256,
	            Math.floor(x / 256) % 256,
	            x % 256
	        ];
	    }
	    else {
	        var exp = Math.floor(Math.log(x) / Math.log(2)) - 32;
	        bytes = [ 255 ];
	        bytes.push.apply(bytes, pack(exp));
	        var res = x / Math.pow(2, exp - 11);
	        bytes.push.apply(bytes, bytesOf(x / Math.pow(2, exp - 11)));
	    }
	    if (enc === undefined || enc === 'array') return bytes;
	    if (enc === 'hex') return encodeHex(bytes);
	};
	
	function unpack (xs) {
	    if (typeof xs === 'string') xs = decodeHex(xs);
	    if (!Array.isArray(xs)) return undefined;
	    
	    if (xs.length === 1 && xs[0] < 251) {
	        return xs[0];
	    }
	    if (xs.length === 2 && xs[0] === 251) {
	        return 251 + xs[1];
	    }
	    if (xs.length === 3 && xs[0] === 252) {
	        return 251 + 256 * xs[1] + xs[2];
	    }
	    if (xs.length === 4 && xs[0] === 253) {
	        return 251 + 256 * 256 * xs[1] + 256 * xs[2] + xs[3];
	    }
	    if (xs.length === 5 && xs[0] === 254) {
	        return 251 + 256 * 256 * 256 * xs[1]
	            + 256 * 256 * xs[2] + 256 * xs[3] + xs[4]
	        ;
	    }
	    if (xs.length > 5 && xs[0] === 255) {
	        var m = 0, x = 1;
	        var pivot = Math.max(2, xs.length - 6);
	        for (var i = xs.length - 1; i >= pivot; i--) {
	            m += x * xs[i];
	            x *= 256;
	        }
	        if (xs[1] + 32 < 251) {
	            var n = unpack([ xs[1] + 32 ]) - 11;
	        }
	        else if (xs[0] === 255 && xs[1] < 251) {
	            var n = xs[1] + 21;
	        }
	        else if (pivot === 3) {
	            var n = unpack([ xs[1], xs[2] + 21 ]);
	        }
	        else if (pivot === 4) {
	            var n = unpack([ xs[1], xs[2], xs[3] + 21 ]);
	        }
	        return 251 + m / Math.pow(2, 32 - n);
	    }
	    return undefined;
	}
	
	function encodeHex(bytes) {
	    var s = '';
	    for (var i = 0, l = bytes.length; i < l; i++) {
	        var b = bytes[i];
	        var c = b.toString(16);
	        if (b < 16) c = '0' + c;
	        s += c;
	    }
	    return s;
	}
	
	function decodeHex(hex) {
	    var bytes = [];
	    for (var i = 0; i < hex.length; i = i+2) {
	        bytes.push(parseInt(hex[i] + hex[i+1], 16));
	    }
	    return bytes;
	}
	
	function bytesOf (x) {
	    x = Math.floor(x);
	    var bytes = [];
	    for (var i = 0, d = 1; i < 6; i++, d *= 256) {
	        bytes.unshift(Math.floor(x / d) % 256);
	    }
	    return bytes;
	}


/***/ },
/* 1401 */,
/* 1402 */,
/* 1403 */,
/* 1404 */,
/* 1405 */,
/* 1406 */,
/* 1407 */,
/* 1408 */,
/* 1409 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1410 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = reemit
	module.exports.filter = filter
	
	var EventEmitter = __webpack_require__(786).EventEmitter
	
	function reemit (source, target, events) {
	  if (!Array.isArray(events)) events = [ events ]
	
	  var listeners = []
	  events.forEach(function (event) {
	    var listener = function () {
	      var args = [].slice.call(arguments)
	      args.unshift(event)
	      target.emit.apply(target, args)
	    }
	    listeners.push(listener)
	    source.on(event, listener)
	  })
	
	  return function cancel () {
	    events.forEach(function (event, i) {
	      source.removeListener(event, listeners[i])
	    })
	  }
	}
	
	function filter (source, events) {
	  var emitter = new EventEmitter()
	  reemit(source, emitter, events)
	  return emitter
	}


/***/ },
/* 1411 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {//filter will reemit the data if cb(err,pass) pass is truthy
	
	// reduce is more tricky
	// maybe we want to group the reductions or emit progress updates occasionally
	// the most basic reduce just emits one 'data' event after it has recieved 'end'
	
	
	var Stream = __webpack_require__(827).Stream
	
	
	//create an event stream and apply function to each .write
	//emitting each response as data
	//unless it's an empty callback
	
	module.exports = function (mapper, opts) {
	
	  var stream = new Stream()
	    , self = this
	    , inputs = 0
	    , outputs = 0
	    , ended = false
	    , paused = false
	    , destroyed = false
	    , lastWritten = 0
	    , inNext = false
	
	  opts = opts || {};
	  var errorEventName = opts.failures ? 'failure' : 'error';
	
	  // Items that are not ready to be written yet (because they would come out of
	  // order) get stuck in a queue for later.
	  var writeQueue = {}
	
	  stream.writable = true
	  stream.readable = true
	
	  function queueData (data, number) {
	    var nextToWrite = lastWritten + 1
	
	    if (number === nextToWrite) {
	      // If it's next, and its not undefined write it
	      if (data !== undefined) {
	        stream.emit.apply(stream, ['data', data])
	      }
	      lastWritten ++
	      nextToWrite ++
	    } else {
	      // Otherwise queue it for later.
	      writeQueue[number] = data
	    }
	
	    // If the next value is in the queue, write it
	    if (writeQueue.hasOwnProperty(nextToWrite)) {
	      var dataToWrite = writeQueue[nextToWrite]
	      delete writeQueue[nextToWrite]
	      return queueData(dataToWrite, nextToWrite)
	    }
	
	    outputs ++
	    if(inputs === outputs) {
	      if(paused) paused = false, stream.emit('drain') //written all the incoming events
	      if(ended) end()
	    }
	  }
	
	  function next (err, data, number) {
	    if(destroyed) return
	    inNext = true
	
	    if (!err || opts.failures) {
	      queueData(data, number)
	    }
	
	    if (err) {
	      stream.emit.apply(stream, [ errorEventName, err ]);
	    }
	
	    inNext = false;
	  }
	
	  // Wrap the mapper function by calling its callback with the order number of
	  // the item in the stream.
	  function wrappedMapper (input, number, callback) {
	    return mapper.call(null, input, function(err, data){
	      callback(err, data, number)
	    })
	  }
	
	  stream.write = function (data) {
	    if(ended) throw new Error('map stream is not writable')
	    inNext = false
	    inputs ++
	
	    try {
	      //catch sync errors and handle them like async errors
	      var written = wrappedMapper(data, inputs, next)
	      paused = (written === false)
	      return !paused
	    } catch (err) {
	      //if the callback has been called syncronously, and the error
	      //has occured in an listener, throw it again.
	      if(inNext)
	        throw err
	      next(err)
	      return !paused
	    }
	  }
	
	  function end (data) {
	    //if end was called with args, write it, 
	    ended = true //write will emit 'end' if ended is true
	    stream.writable = false
	    if(data !== undefined) {
	      return queueData(data, inputs)
	    } else if (inputs == outputs) { //wait for processing 
	      stream.readable = false, stream.emit('end'), stream.destroy() 
	    }
	  }
	
	  stream.end = function (data) {
	    if(ended) return
	    end(data)
	  }
	
	  stream.destroy = function () {
	    ended = destroyed = true
	    stream.writable = stream.readable = paused = false
	    process.nextTick(function () {
	      stream.emit('close')
	    })
	  }
	  stream.pause = function () {
	    paused = true
	  }
	
	  stream.resume = function () {
	    paused = false
	  }
	
	  return stream
	}
	
	
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1412 */,
/* 1413 */,
/* 1414 */,
/* 1415 */,
/* 1416 */,
/* 1417 */,
/* 1418 */,
/* 1419 */,
/* 1420 */,
/* 1421 */,
/* 1422 */,
/* 1423 */,
/* 1424 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Class to localize the ReactNative interface
	 *
	 * Originally developed by Stefano Falda (stefano.falda@gmail.com)
	 *
	 * It uses a native library (ReactLocalization) to get the current interface language,
	 * then display the correct language strings or the default language (the first
	 * one if a match is not found).
	 *
	 * How to use:
	 * Check the instructions at:
	 * https://github.com/stefalda/ReactNativeLocalization
	 */
	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var localization = __webpack_require__(300).NativeModules.ReactLocalization || { language: 'en_US' };
	var interfaceLanguage = localization.language.replace(/_/g, '-');
	
	var LocalizedStrings = function () {
	  _createClass(LocalizedStrings, [{
	    key: '_getBestMatchingLanguage',
	    value: function _getBestMatchingLanguage(language, props) {
	      //If an object with the passed language key exists return it
	      if (props[language]) return language;
	      //if the string is multiple tags, try to match without the final tag
	      //(en-US --> en, zh-Hans-CN --> zh-Hans)
	      var idx = language.lastIndexOf("-");
	      if (idx >= 0) {
	        language = language.substring(0, idx);
	        return this._getBestMatchingLanguage(language, props);
	      }
	      //Return the default language (the first coded)
	      return Object.keys(props)[0];
	    }
	  }]);
	
	  function LocalizedStrings(props) {
	    _classCallCheck(this, LocalizedStrings);
	
	    //Store locally the passed strings
	    this.props = props;
	    //Set language to its default value (the interface)
	    this.setLanguage(interfaceLanguage);
	  }
	
	  //Can be used from ouside the class to force a particular language
	  //indipendently from the interface one
	
	
	  _createClass(LocalizedStrings, [{
	    key: 'setLanguage',
	    value: function setLanguage(language) {
	      //Check if exists a translation for the current language or if the default
	      //should be used
	      var bestLanguage = this._getBestMatchingLanguage(language, this.props);
	      this.language = bestLanguage;
	      //Associate the language object to the this object
	      if (this.props[bestLanguage]) {
	        //console.log("There are strings for the language:"+language);
	        var localizedStrings = this.props[this.language];
	        for (var key in localizedStrings) {
	          //console.log("Checking property:"+key);
	          if (localizedStrings.hasOwnProperty(key)) {
	            //console.log("Associating property:"+key);
	            this[key] = localizedStrings[key];
	          }
	        }
	        //Now add any string missing from the translation but existing in the default language
	        var defaultLanguage = Object.keys(this.props)[0];
	        if (defaultLanguage !== this.language) {
	          localizedStrings = this.props[defaultLanguage];
	          this._fallbackValues(localizedStrings, this);
	        }
	      }
	    }
	
	    //Load fallback values for missing translations 
	
	  }, {
	    key: '_fallbackValues',
	    value: function _fallbackValues(defaultStrings, strings) {
	      for (var key in defaultStrings) {
	        if (defaultStrings.hasOwnProperty(key) && !strings[key]) {
	          strings[key] = defaultStrings[key];
	          console.log("Missing localization for language '" + this.language + "' and key '" + key + "'.");
	        } else {
	          if (typeof strings[key] != "string") {
	            //Si tratta di un oggetto
	            this._fallbackValues(defaultStrings[key], strings[key]);
	          }
	        }
	      }
	    }
	
	    //The current language displayed (could differ from the interface language
	    // if it has been forced manually and a matching translation has been found)
	
	  }, {
	    key: 'getLanguage',
	    value: function getLanguage() {
	      return this.language;
	    }
	
	    //The current interface language (could differ from the language displayed)
	
	  }, {
	    key: 'getInterfaceLanguage',
	    value: function getInterfaceLanguage() {
	      return interfaceLanguage;
	    }
	
	    //Return an array containing the available languages passed as props in the constructor
	
	  }, {
	    key: 'getAvailableLanguages',
	    value: function getAvailableLanguages() {
	      if (!this.availableLanguages) {
	        this.availableLanguages = [];
	        for (var language in this.props) {
	          this.availableLanguages.push(language);
	        }
	      }
	      return this.availableLanguages;
	    }
	
	    //Format the passed string replacing the numbered placeholders
	    //i.e. I'd like some {0} and {1}, or just {0}
	    //Use example:
	    //  strings.formatString(strings.question, strings.bread, strings.butter)
	
	  }, {
	    key: 'formatString',
	    value: function formatString(str) {
	      var res = str;
	
	      for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        values[_key - 1] = arguments[_key];
	      }
	
	      for (var i = 0; i < values.length; i++) {
	        res = this._replaceAll("{" + i + "}", values[i], res);
	      }
	      return res;
	    }
	
	    //Return a string with the passed key in a different language 
	
	  }, {
	    key: 'getString',
	    value: function getString(key, language) {
	      try {
	        return this.props[language][key];
	      } catch (ex) {
	        console.log("No localization found for key " + key + " and language " + language);
	      }
	      return null;
	    }
	
	    //Replace all occorrencies of a string in another using RegExp
	
	  }, {
	    key: '_replaceAll',
	    value: function _replaceAll(original, replacement, str) {
	      original = original.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
	      replacement = ('' + replacement).replace(/([$])/g, '$$$$');
	      return str.replace(new RegExp(original, 'g'), replacement);
	    }
	    //Can be used to retrieve the interface language
	    //but now it's useless because that value is exposed directly
	    //in a dictionary from the ReactLocalization class
	    //I leave it as an example but it's now deprecated
	    /*
	    _getLanguage(){
	      var deferred = Q.defer();
	      localization.getLanguage((error, deviceLanguage)=>{
	        var language = deviceLanguage;
	        console.log("Language in js:"+language);
	        deferred.resolve(language);
	      });
	      return deferred.promise;
	    }
	    */
	
	  }]);
	
	  return LocalizedStrings;
	}();
	
	module.exports = LocalizedStrings;

/***/ },
/* 1425 */,
/* 1426 */,
/* 1427 */,
/* 1428 */,
/* 1429 */,
/* 1430 */,
/* 1431 */,
/* 1432 */,
/* 1433 */,
/* 1434 */,
/* 1435 */,
/* 1436 */,
/* 1437 */,
/* 1438 */,
/* 1439 */,
/* 1440 */,
/* 1441 */,
/* 1442 */,
/* 1443 */,
/* 1444 */,
/* 1445 */,
/* 1446 */,
/* 1447 */,
/* 1448 */,
/* 1449 */,
/* 1450 */,
/* 1451 */,
/* 1452 */,
/* 1453 */,
/* 1454 */,
/* 1455 */,
/* 1456 */,
/* 1457 */,
/* 1458 */,
/* 1459 */,
/* 1460 */,
/* 1461 */,
/* 1462 */,
/* 1463 */,
/* 1464 */,
/* 1465 */,
/* 1466 */,
/* 1467 */,
/* 1468 */,
/* 1469 */,
/* 1470 */,
/* 1471 */,
/* 1472 */,
/* 1473 */,
/* 1474 */,
/* 1475 */,
/* 1476 */,
/* 1477 */,
/* 1478 */,
/* 1479 */,
/* 1480 */,
/* 1481 */,
/* 1482 */,
/* 1483 */,
/* 1484 */,
/* 1485 */,
/* 1486 */,
/* 1487 */,
/* 1488 */,
/* 1489 */,
/* 1490 */,
/* 1491 */,
/* 1492 */,
/* 1493 */,
/* 1494 */,
/* 1495 */,
/* 1496 */,
/* 1497 */,
/* 1498 */,
/* 1499 */,
/* 1500 */,
/* 1501 */,
/* 1502 */,
/* 1503 */,
/* 1504 */,
/* 1505 */,
/* 1506 */,
/* 1507 */,
/* 1508 */,
/* 1509 */,
/* 1510 */,
/* 1511 */,
/* 1512 */,
/* 1513 */,
/* 1514 */,
/* 1515 */,
/* 1516 */,
/* 1517 */,
/* 1518 */,
/* 1519 */,
/* 1520 */,
/* 1521 */,
/* 1522 */,
/* 1523 */,
/* 1524 */,
/* 1525 */,
/* 1526 */,
/* 1527 */,
/* 1528 */,
/* 1529 */,
/* 1530 */,
/* 1531 */,
/* 1532 */,
/* 1533 */,
/* 1534 */,
/* 1535 */,
/* 1536 */,
/* 1537 */,
/* 1538 */,
/* 1539 */,
/* 1540 */,
/* 1541 */,
/* 1542 */,
/* 1543 */,
/* 1544 */,
/* 1545 */,
/* 1546 */,
/* 1547 */,
/* 1548 */,
/* 1549 */,
/* 1550 */,
/* 1551 */,
/* 1552 */,
/* 1553 */,
/* 1554 */,
/* 1555 */,
/* 1556 */,
/* 1557 */,
/* 1558 */,
/* 1559 */,
/* 1560 */,
/* 1561 */,
/* 1562 */,
/* 1563 */,
/* 1564 */,
/* 1565 */,
/* 1566 */,
/* 1567 */,
/* 1568 */,
/* 1569 */,
/* 1570 */,
/* 1571 */,
/* 1572 */,
/* 1573 */,
/* 1574 */,
/* 1575 */,
/* 1576 */,
/* 1577 */,
/* 1578 */,
/* 1579 */,
/* 1580 */,
/* 1581 */,
/* 1582 */,
/* 1583 */,
/* 1584 */,
/* 1585 */,
/* 1586 */,
/* 1587 */,
/* 1588 */,
/* 1589 */,
/* 1590 */,
/* 1591 */,
/* 1592 */,
/* 1593 */,
/* 1594 */,
/* 1595 */,
/* 1596 */,
/* 1597 */,
/* 1598 */,
/* 1599 */,
/* 1600 */,
/* 1601 */,
/* 1602 */,
/* 1603 */,
/* 1604 */,
/* 1605 */,
/* 1606 */,
/* 1607 */,
/* 1608 */,
/* 1609 */,
/* 1610 */,
/* 1611 */,
/* 1612 */,
/* 1613 */,
/* 1614 */,
/* 1615 */,
/* 1616 */,
/* 1617 */,
/* 1618 */,
/* 1619 */,
/* 1620 */,
/* 1621 */,
/* 1622 */,
/* 1623 */,
/* 1624 */,
/* 1625 */,
/* 1626 */,
/* 1627 */,
/* 1628 */,
/* 1629 */,
/* 1630 */,
/* 1631 */,
/* 1632 */,
/* 1633 */,
/* 1634 */,
/* 1635 */,
/* 1636 */,
/* 1637 */,
/* 1638 */,
/* 1639 */,
/* 1640 */,
/* 1641 */,
/* 1642 */,
/* 1643 */,
/* 1644 */,
/* 1645 */,
/* 1646 */,
/* 1647 */,
/* 1648 */,
/* 1649 */,
/* 1650 */,
/* 1651 */,
/* 1652 */,
/* 1653 */,
/* 1654 */,
/* 1655 */,
/* 1656 */,
/* 1657 */,
/* 1658 */,
/* 1659 */,
/* 1660 */,
/* 1661 */,
/* 1662 */,
/* 1663 */,
/* 1664 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _createIconSet = __webpack_require__(1665);
	
	var _createIconSet2 = _interopRequireDefault(_createIconSet);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var glyphMap = {
	  "ios-add": 61698,
	  "ios-add-circle": 61697,
	  "ios-add-circle-outline": 61696,
	  "ios-add-outline": 61698,
	  "ios-alarm": 62408,
	  "ios-alarm-outline": 62407,
	  "ios-albums": 62410,
	  "ios-albums-outline": 62409,
	  "ios-alert": 61700,
	  "ios-alert-outline": 61699,
	  "ios-american-football": 61702,
	  "ios-american-football-outline": 61701,
	  "ios-analytics": 62414,
	  "ios-analytics-outline": 62413,
	  "ios-aperture": 61704,
	  "ios-aperture-outline": 61703,
	  "ios-apps": 61706,
	  "ios-apps-outline": 61705,
	  "ios-appstore": 61708,
	  "ios-appstore-outline": 61707,
	  "ios-archive": 61710,
	  "ios-archive-outline": 61709,
	  "ios-arrow-back": 62415,
	  "ios-arrow-back-outline": 62415,
	  "ios-arrow-down": 62416,
	  "ios-arrow-down-outline": 62416,
	  "ios-arrow-dropdown": 61712,
	  "ios-arrow-dropdown-circle": 61711,
	  "ios-arrow-dropdown-circle-outline": 61711,
	  "ios-arrow-dropdown-outline": 61712,
	  "ios-arrow-dropleft": 61714,
	  "ios-arrow-dropleft-circle": 61713,
	  "ios-arrow-dropleft-circle-outline": 61713,
	  "ios-arrow-dropleft-outline": 61714,
	  "ios-arrow-dropright": 61716,
	  "ios-arrow-dropright-circle": 61715,
	  "ios-arrow-dropright-circle-outline": 61715,
	  "ios-arrow-dropright-outline": 61716,
	  "ios-arrow-dropup": 61718,
	  "ios-arrow-dropup-circle": 61717,
	  "ios-arrow-dropup-circle-outline": 61717,
	  "ios-arrow-dropup-outline": 61718,
	  "ios-arrow-forward": 62417,
	  "ios-arrow-forward-outline": 62417,
	  "ios-arrow-round-back": 61719,
	  "ios-arrow-round-back-outline": 61719,
	  "ios-arrow-round-down": 61720,
	  "ios-arrow-round-down-outline": 61720,
	  "ios-arrow-round-forward": 61721,
	  "ios-arrow-round-forward-outline": 61721,
	  "ios-arrow-round-up": 61722,
	  "ios-arrow-round-up-outline": 61722,
	  "ios-arrow-up": 62424,
	  "ios-arrow-up-outline": 62424,
	  "ios-at": 62426,
	  "ios-at-outline": 62425,
	  "ios-attach": 61723,
	  "ios-attach-outline": 61723,
	  "ios-backspace": 61725,
	  "ios-backspace-outline": 61724,
	  "ios-barcode": 62428,
	  "ios-barcode-outline": 62427,
	  "ios-baseball": 62430,
	  "ios-baseball-outline": 62429,
	  "ios-basket": 61727,
	  "ios-basket-outline": 61726,
	  "ios-basketball": 62432,
	  "ios-basketball-outline": 62431,
	  "ios-battery-charging": 61728,
	  "ios-battery-charging-outline": 61728,
	  "ios-battery-dead": 61729,
	  "ios-battery-dead-outline": 61729,
	  "ios-battery-full": 61730,
	  "ios-battery-full-outline": 61730,
	  "ios-beaker": 61732,
	  "ios-beaker-outline": 61731,
	  "ios-beer": 61734,
	  "ios-beer-outline": 61733,
	  "ios-bicycle": 61735,
	  "ios-bicycle-outline": 61735,
	  "ios-bluetooth": 61736,
	  "ios-bluetooth-outline": 61736,
	  "ios-boat": 61738,
	  "ios-boat-outline": 61737,
	  "ios-body": 62436,
	  "ios-body-outline": 62435,
	  "ios-bonfire": 61740,
	  "ios-bonfire-outline": 61739,
	  "ios-book": 62440,
	  "ios-book-outline": 62439,
	  "ios-bookmark": 61742,
	  "ios-bookmark-outline": 61741,
	  "ios-bookmarks": 62442,
	  "ios-bookmarks-outline": 62441,
	  "ios-bowtie": 61744,
	  "ios-bowtie-outline": 61743,
	  "ios-briefcase": 62446,
	  "ios-briefcase-outline": 62445,
	  "ios-browsers": 62448,
	  "ios-browsers-outline": 62447,
	  "ios-brush": 61746,
	  "ios-brush-outline": 61745,
	  "ios-bug": 61748,
	  "ios-bug-outline": 61747,
	  "ios-build": 61750,
	  "ios-build-outline": 61749,
	  "ios-bulb": 61752,
	  "ios-bulb-outline": 61751,
	  "ios-bus": 61754,
	  "ios-bus-outline": 61753,
	  "ios-cafe": 61756,
	  "ios-cafe-outline": 61755,
	  "ios-calculator": 62450,
	  "ios-calculator-outline": 62449,
	  "ios-calendar": 62452,
	  "ios-calendar-outline": 62451,
	  "ios-call": 61758,
	  "ios-call-outline": 61757,
	  "ios-camera": 62454,
	  "ios-camera-outline": 62453,
	  "ios-car": 61760,
	  "ios-car-outline": 61759,
	  "ios-card": 61762,
	  "ios-card-outline": 61761,
	  "ios-cart": 62456,
	  "ios-cart-outline": 62455,
	  "ios-cash": 61764,
	  "ios-cash-outline": 61763,
	  "ios-chatboxes": 62458,
	  "ios-chatboxes-outline": 62457,
	  "ios-chatbubbles": 61766,
	  "ios-chatbubbles-outline": 61765,
	  "ios-checkbox": 61768,
	  "ios-checkbox-outline": 61767,
	  "ios-checkmark": 62463,
	  "ios-checkmark-circle": 61770,
	  "ios-checkmark-circle-outline": 61769,
	  "ios-checkmark-outline": 62463,
	  "ios-clipboard": 61772,
	  "ios-clipboard-outline": 61771,
	  "ios-clock": 62467,
	  "ios-clock-outline": 62466,
	  "ios-close": 62470,
	  "ios-close-circle": 61774,
	  "ios-close-circle-outline": 61773,
	  "ios-close-outline": 62470,
	  "ios-closed-captioning": 61776,
	  "ios-closed-captioning-outline": 61775,
	  "ios-cloud": 62476,
	  "ios-cloud-circle": 61778,
	  "ios-cloud-circle-outline": 61777,
	  "ios-cloud-done": 61780,
	  "ios-cloud-done-outline": 61779,
	  "ios-cloud-download": 62472,
	  "ios-cloud-download-outline": 62471,
	  "ios-cloud-outline": 62473,
	  "ios-cloud-upload": 62475,
	  "ios-cloud-upload-outline": 62474,
	  "ios-cloudy": 62480,
	  "ios-cloudy-night": 62478,
	  "ios-cloudy-night-outline": 62477,
	  "ios-cloudy-outline": 62479,
	  "ios-code": 61783,
	  "ios-code-download": 61781,
	  "ios-code-download-outline": 61781,
	  "ios-code-outline": 61783,
	  "ios-code-working": 61782,
	  "ios-code-working-outline": 61782,
	  "ios-cog": 62482,
	  "ios-cog-outline": 62481,
	  "ios-color-fill": 61785,
	  "ios-color-fill-outline": 61784,
	  "ios-color-filter": 62484,
	  "ios-color-filter-outline": 62483,
	  "ios-color-palette": 61787,
	  "ios-color-palette-outline": 61786,
	  "ios-color-wand": 62486,
	  "ios-color-wand-outline": 62485,
	  "ios-compass": 61789,
	  "ios-compass-outline": 61788,
	  "ios-construct": 61791,
	  "ios-construct-outline": 61790,
	  "ios-contact": 62490,
	  "ios-contact-outline": 62489,
	  "ios-contacts": 61793,
	  "ios-contacts-outline": 61792,
	  "ios-contract": 61794,
	  "ios-contract-outline": 61794,
	  "ios-contrast": 61795,
	  "ios-contrast-outline": 61795,
	  "ios-copy": 62492,
	  "ios-copy-outline": 62491,
	  "ios-create": 61797,
	  "ios-create-outline": 61796,
	  "ios-crop": 62494,
	  "ios-crop-outline": 61798,
	  "ios-cube": 61800,
	  "ios-cube-outline": 61799,
	  "ios-cut": 61802,
	  "ios-cut-outline": 61801,
	  "ios-desktop": 61804,
	  "ios-desktop-outline": 61803,
	  "ios-disc": 61806,
	  "ios-disc-outline": 61805,
	  "ios-document": 61808,
	  "ios-document-outline": 61807,
	  "ios-done-all": 61809,
	  "ios-done-all-outline": 61809,
	  "ios-download": 62496,
	  "ios-download-outline": 62495,
	  "ios-easel": 61811,
	  "ios-easel-outline": 61810,
	  "ios-egg": 61813,
	  "ios-egg-outline": 61812,
	  "ios-exit": 61815,
	  "ios-exit-outline": 61814,
	  "ios-expand": 61816,
	  "ios-expand-outline": 61816,
	  "ios-eye": 62501,
	  "ios-eye-off": 61818,
	  "ios-eye-off-outline": 61817,
	  "ios-eye-outline": 62500,
	  "ios-fastforward": 62503,
	  "ios-fastforward-outline": 62502,
	  "ios-female": 61819,
	  "ios-female-outline": 61819,
	  "ios-filing": 62505,
	  "ios-filing-outline": 62504,
	  "ios-film": 62507,
	  "ios-film-outline": 62506,
	  "ios-finger-print": 61820,
	  "ios-finger-print-outline": 61820,
	  "ios-flag": 62509,
	  "ios-flag-outline": 62508,
	  "ios-flame": 62511,
	  "ios-flame-outline": 62510,
	  "ios-flash": 61822,
	  "ios-flash-outline": 61821,
	  "ios-flask": 62513,
	  "ios-flask-outline": 62512,
	  "ios-flower": 62515,
	  "ios-flower-outline": 62514,
	  "ios-folder": 62517,
	  "ios-folder-open": 61824,
	  "ios-folder-open-outline": 61823,
	  "ios-folder-outline": 62516,
	  "ios-football": 62519,
	  "ios-football-outline": 62518,
	  "ios-funnel": 61826,
	  "ios-funnel-outline": 61825,
	  "ios-game-controller-a": 62521,
	  "ios-game-controller-a-outline": 62520,
	  "ios-game-controller-b": 62523,
	  "ios-game-controller-b-outline": 62522,
	  "ios-git-branch": 61827,
	  "ios-git-branch-outline": 61827,
	  "ios-git-commit": 61828,
	  "ios-git-commit-outline": 61828,
	  "ios-git-compare": 61829,
	  "ios-git-compare-outline": 61829,
	  "ios-git-merge": 61830,
	  "ios-git-merge-outline": 61830,
	  "ios-git-network": 61831,
	  "ios-git-network-outline": 61831,
	  "ios-git-pull-request": 61832,
	  "ios-git-pull-request-outline": 61832,
	  "ios-glasses": 62527,
	  "ios-glasses-outline": 62526,
	  "ios-globe": 61834,
	  "ios-globe-outline": 61833,
	  "ios-grid": 61836,
	  "ios-grid-outline": 61835,
	  "ios-hammer": 61838,
	  "ios-hammer-outline": 61837,
	  "ios-hand": 61840,
	  "ios-hand-outline": 61839,
	  "ios-happy": 61842,
	  "ios-happy-outline": 61841,
	  "ios-headset": 61844,
	  "ios-headset-outline": 61843,
	  "ios-heart": 62531,
	  "ios-heart-outline": 62530,
	  "ios-help": 62534,
	  "ios-help-buoy": 61846,
	  "ios-help-buoy-outline": 61845,
	  "ios-help-circle": 61848,
	  "ios-help-circle-outline": 61847,
	  "ios-help-outline": 62534,
	  "ios-home": 62536,
	  "ios-home-outline": 62535,
	  "ios-ice-cream": 61850,
	  "ios-ice-cream-outline": 61849,
	  "ios-image": 61852,
	  "ios-image-outline": 61851,
	  "ios-images": 61854,
	  "ios-images-outline": 61853,
	  "ios-infinite": 62538,
	  "ios-infinite-outline": 62537,
	  "ios-information": 62541,
	  "ios-information-circle": 61856,
	  "ios-information-circle-outline": 61855,
	  "ios-information-outline": 62541,
	  "ios-ionic": 61857,
	  "ios-ionic-outline": 62542,
	  "ios-ionitron": 61859,
	  "ios-ionitron-outline": 61858,
	  "ios-jet": 61861,
	  "ios-jet-outline": 61860,
	  "ios-key": 61863,
	  "ios-key-outline": 61862,
	  "ios-keypad": 62544,
	  "ios-keypad-outline": 62543,
	  "ios-laptop": 61864,
	  "ios-laptop-outline": 61864,
	  "ios-leaf": 61866,
	  "ios-leaf-outline": 61865,
	  "ios-link": 61994,
	  "ios-link-outline": 61898,
	  "ios-list": 62548,
	  "ios-list-box": 61868,
	  "ios-list-box-outline": 61867,
	  "ios-list-outline": 62548,
	  "ios-locate": 61870,
	  "ios-locate-outline": 61869,
	  "ios-lock": 61872,
	  "ios-lock-outline": 61871,
	  "ios-log-in": 61873,
	  "ios-log-in-outline": 61873,
	  "ios-log-out": 61874,
	  "ios-log-out-outline": 61874,
	  "ios-magnet": 61876,
	  "ios-magnet-outline": 61875,
	  "ios-mail": 61880,
	  "ios-mail-open": 61878,
	  "ios-mail-open-outline": 61877,
	  "ios-mail-outline": 61879,
	  "ios-male": 61881,
	  "ios-male-outline": 61881,
	  "ios-man": 61883,
	  "ios-man-outline": 61882,
	  "ios-map": 61885,
	  "ios-map-outline": 61884,
	  "ios-medal": 61887,
	  "ios-medal-outline": 61886,
	  "ios-medical": 62556,
	  "ios-medical-outline": 62555,
	  "ios-medkit": 62558,
	  "ios-medkit-outline": 62557,
	  "ios-megaphone": 61889,
	  "ios-megaphone-outline": 61888,
	  "ios-menu": 61891,
	  "ios-menu-outline": 61890,
	  "ios-mic": 62561,
	  "ios-mic-off": 62559,
	  "ios-mic-off-outline": 61892,
	  "ios-mic-outline": 62560,
	  "ios-microphone": 61894,
	  "ios-microphone-outline": 61893,
	  "ios-moon": 62568,
	  "ios-moon-outline": 62567,
	  "ios-more": 61896,
	  "ios-more-outline": 61895,
	  "ios-move": 61899,
	  "ios-move-outline": 61899,
	  "ios-musical-note": 62571,
	  "ios-musical-note-outline": 61900,
	  "ios-musical-notes": 62572,
	  "ios-musical-notes-outline": 61901,
	  "ios-navigate": 62574,
	  "ios-navigate-outline": 62573,
	  "ios-no-smoking": 61903,
	  "ios-no-smoking-outline": 61902,
	  "ios-notifications": 61907,
	  "ios-notifications-off": 61905,
	  "ios-notifications-off-outline": 61904,
	  "ios-notifications-outline": 61906,
	  "ios-nuclear": 61909,
	  "ios-nuclear-outline": 61908,
	  "ios-nutrition": 62576,
	  "ios-nutrition-outline": 62575,
	  "ios-open": 61911,
	  "ios-open-outline": 61910,
	  "ios-options": 61913,
	  "ios-options-outline": 61912,
	  "ios-outlet": 61915,
	  "ios-outlet-outline": 61914,
	  "ios-paper": 62578,
	  "ios-paper-outline": 62577,
	  "ios-paper-plane": 61917,
	  "ios-paper-plane-outline": 61916,
	  "ios-partly-sunny": 61919,
	  "ios-partly-sunny-outline": 61918,
	  "ios-pause": 62584,
	  "ios-pause-outline": 62583,
	  "ios-paw": 62586,
	  "ios-paw-outline": 62585,
	  "ios-people": 62588,
	  "ios-people-outline": 62587,
	  "ios-person": 62590,
	  "ios-person-add": 61921,
	  "ios-person-add-outline": 61920,
	  "ios-person-outline": 62589,
	  "ios-phone-landscape": 61922,
	  "ios-phone-landscape-outline": 61922,
	  "ios-phone-portrait": 61923,
	  "ios-phone-portrait-outline": 61923,
	  "ios-photos": 62594,
	  "ios-photos-outline": 62593,
	  "ios-pie": 62596,
	  "ios-pie-outline": 62595,
	  "ios-pin": 61925,
	  "ios-pin-outline": 61924,
	  "ios-pint": 62598,
	  "ios-pint-outline": 62597,
	  "ios-pizza": 61927,
	  "ios-pizza-outline": 61926,
	  "ios-plane": 61929,
	  "ios-plane-outline": 61928,
	  "ios-planet": 61931,
	  "ios-planet-outline": 61930,
	  "ios-play": 62600,
	  "ios-play-outline": 62599,
	  "ios-podium": 61933,
	  "ios-podium-outline": 61932,
	  "ios-power": 61935,
	  "ios-power-outline": 61934,
	  "ios-pricetag": 62605,
	  "ios-pricetag-outline": 62604,
	  "ios-pricetags": 62607,
	  "ios-pricetags-outline": 62606,
	  "ios-print": 61937,
	  "ios-print-outline": 61936,
	  "ios-pulse": 62611,
	  "ios-pulse-outline": 61938,
	  "ios-qr-scanner": 61939,
	  "ios-qr-scanner-outline": 61939,
	  "ios-quote": 61941,
	  "ios-quote-outline": 61940,
	  "ios-radio": 61945,
	  "ios-radio-button-off": 61942,
	  "ios-radio-button-off-outline": 61942,
	  "ios-radio-button-on": 61943,
	  "ios-radio-button-on-outline": 61943,
	  "ios-radio-outline": 61944,
	  "ios-rainy": 62613,
	  "ios-rainy-outline": 62612,
	  "ios-recording": 62615,
	  "ios-recording-outline": 62614,
	  "ios-redo": 62617,
	  "ios-redo-outline": 62616,
	  "ios-refresh": 62620,
	  "ios-refresh-circle": 61990,
	  "ios-refresh-circle-outline": 61988,
	  "ios-refresh-outline": 62620,
	  "ios-remove": 61948,
	  "ios-remove-circle": 61947,
	  "ios-remove-circle-outline": 61946,
	  "ios-remove-outline": 61948,
	  "ios-reorder": 61949,
	  "ios-reorder-outline": 61949,
	  "ios-repeat": 61950,
	  "ios-repeat-outline": 61950,
	  "ios-resize": 61951,
	  "ios-resize-outline": 61951,
	  "ios-restaurant": 61953,
	  "ios-restaurant-outline": 61952,
	  "ios-return-left": 61954,
	  "ios-return-left-outline": 61954,
	  "ios-return-right": 61955,
	  "ios-return-right-outline": 61955,
	  "ios-reverse-camera": 62623,
	  "ios-reverse-camera-outline": 62622,
	  "ios-rewind": 62625,
	  "ios-rewind-outline": 62624,
	  "ios-ribbon": 61957,
	  "ios-ribbon-outline": 61956,
	  "ios-rose": 62627,
	  "ios-rose-outline": 62626,
	  "ios-sad": 61959,
	  "ios-sad-outline": 61958,
	  "ios-school": 61961,
	  "ios-school-outline": 61960,
	  "ios-search": 62629,
	  "ios-search-outline": 61962,
	  "ios-send": 61964,
	  "ios-send-outline": 61963,
	  "ios-settings": 62631,
	  "ios-settings-outline": 61965,
	  "ios-share": 61969,
	  "ios-share-alt": 61967,
	  "ios-share-alt-outline": 61966,
	  "ios-share-outline": 61968,
	  "ios-shirt": 61971,
	  "ios-shirt-outline": 61970,
	  "ios-shuffle": 62633,
	  "ios-shuffle-outline": 62633,
	  "ios-skip-backward": 61973,
	  "ios-skip-backward-outline": 61972,
	  "ios-skip-forward": 61975,
	  "ios-skip-forward-outline": 61974,
	  "ios-snow": 61976,
	  "ios-snow-outline": 61996,
	  "ios-speedometer": 62640,
	  "ios-speedometer-outline": 62639,
	  "ios-square": 61978,
	  "ios-square-outline": 61977,
	  "ios-star": 62643,
	  "ios-star-half": 62641,
	  "ios-star-half-outline": 62641,
	  "ios-star-outline": 62642,
	  "ios-stats": 61980,
	  "ios-stats-outline": 61979,
	  "ios-stopwatch": 62645,
	  "ios-stopwatch-outline": 62644,
	  "ios-subway": 61982,
	  "ios-subway-outline": 61981,
	  "ios-sunny": 62647,
	  "ios-sunny-outline": 62646,
	  "ios-swap": 61983,
	  "ios-swap-outline": 61983,
	  "ios-switch": 61985,
	  "ios-switch-outline": 61984,
	  "ios-sync": 61986,
	  "ios-sync-outline": 61986,
	  "ios-tablet-landscape": 61987,
	  "ios-tablet-landscape-outline": 61987,
	  "ios-tablet-portrait": 62030,
	  "ios-tablet-portrait-outline": 62030,
	  "ios-tennisball": 62651,
	  "ios-tennisball-outline": 62650,
	  "ios-text": 62032,
	  "ios-text-outline": 62031,
	  "ios-thermometer": 62034,
	  "ios-thermometer-outline": 62033,
	  "ios-thumbs-down": 62036,
	  "ios-thumbs-down-outline": 62035,
	  "ios-thumbs-up": 62038,
	  "ios-thumbs-up-outline": 62037,
	  "ios-thunderstorm": 62653,
	  "ios-thunderstorm-outline": 62652,
	  "ios-time": 62655,
	  "ios-time-outline": 62654,
	  "ios-timer": 62657,
	  "ios-timer-outline": 62656,
	  "ios-train": 62040,
	  "ios-train-outline": 62039,
	  "ios-transgender": 62041,
	  "ios-transgender-outline": 62041,
	  "ios-trash": 62661,
	  "ios-trash-outline": 62660,
	  "ios-trending-down": 62042,
	  "ios-trending-down-outline": 62042,
	  "ios-trending-up": 62043,
	  "ios-trending-up-outline": 62043,
	  "ios-trophy": 62045,
	  "ios-trophy-outline": 62044,
	  "ios-umbrella": 62047,
	  "ios-umbrella-outline": 62046,
	  "ios-undo": 62663,
	  "ios-undo-outline": 62662,
	  "ios-unlock": 62049,
	  "ios-unlock-outline": 62048,
	  "ios-videocam": 62669,
	  "ios-videocam-outline": 62668,
	  "ios-volume-down": 62050,
	  "ios-volume-down-outline": 62050,
	  "ios-volume-mute": 62051,
	  "ios-volume-mute-outline": 62051,
	  "ios-volume-off": 62052,
	  "ios-volume-off-outline": 62052,
	  "ios-volume-up": 62053,
	  "ios-volume-up-outline": 62053,
	  "ios-walk": 62054,
	  "ios-walk-outline": 62054,
	  "ios-warning": 62056,
	  "ios-warning-outline": 62055,
	  "ios-watch": 62057,
	  "ios-watch-outline": 62057,
	  "ios-water": 62059,
	  "ios-water-outline": 62058,
	  "ios-wifi": 62061,
	  "ios-wifi-outline": 62060,
	  "ios-wine": 62063,
	  "ios-wine-outline": 62062,
	  "ios-woman": 62065,
	  "ios-woman-outline": 62064,
	  "logo-android": 61989,
	  "logo-angular": 61991,
	  "logo-apple": 61993,
	  "logo-bitcoin": 61995,
	  "logo-buffer": 61997,
	  "logo-chrome": 61999,
	  "logo-codepen": 62000,
	  "logo-css3": 62001,
	  "logo-designernews": 62002,
	  "logo-dribbble": 62003,
	  "logo-dropbox": 62004,
	  "logo-euro": 62005,
	  "logo-facebook": 62006,
	  "logo-foursquare": 62007,
	  "logo-freebsd-devil": 62008,
	  "logo-github": 62009,
	  "logo-google": 62010,
	  "logo-googleplus": 62011,
	  "logo-hackernews": 62012,
	  "logo-html5": 62013,
	  "logo-instagram": 62014,
	  "logo-javascript": 62015,
	  "logo-linkedin": 62016,
	  "logo-markdown": 62017,
	  "logo-nodejs": 62018,
	  "logo-octocat": 62019,
	  "logo-pinterest": 62020,
	  "logo-playstation": 62021,
	  "logo-python": 62022,
	  "logo-reddit": 62023,
	  "logo-rss": 62024,
	  "logo-sass": 62025,
	  "logo-skype": 62026,
	  "logo-snapchat": 62027,
	  "logo-steam": 62028,
	  "logo-tumblr": 62029,
	  "logo-tux": 62126,
	  "logo-twitch": 62127,
	  "logo-twitter": 62128,
	  "logo-usd": 62129,
	  "logo-vimeo": 62148,
	  "logo-whatsapp": 62149,
	  "logo-windows": 62255,
	  "logo-wordpress": 62256,
	  "logo-xbox": 62284,
	  "logo-yahoo": 62285,
	  "logo-yen": 62286,
	  "logo-youtube": 62287,
	  "md-add": 62067,
	  "md-add-circle": 62066,
	  "md-alarm": 62068,
	  "md-albums": 62069,
	  "md-alert": 62070,
	  "md-american-football": 62071,
	  "md-analytics": 62072,
	  "md-aperture": 62073,
	  "md-apps": 62074,
	  "md-appstore": 62075,
	  "md-archive": 62076,
	  "md-arrow-back": 62077,
	  "md-arrow-down": 62078,
	  "md-arrow-dropdown": 62080,
	  "md-arrow-dropdown-circle": 62079,
	  "md-arrow-dropleft": 62082,
	  "md-arrow-dropleft-circle": 62081,
	  "md-arrow-dropright": 62084,
	  "md-arrow-dropright-circle": 62083,
	  "md-arrow-dropup": 62086,
	  "md-arrow-dropup-circle": 62085,
	  "md-arrow-forward": 62087,
	  "md-arrow-round-back": 62088,
	  "md-arrow-round-down": 62089,
	  "md-arrow-round-forward": 62090,
	  "md-arrow-round-up": 62091,
	  "md-arrow-up": 62092,
	  "md-at": 62093,
	  "md-attach": 62094,
	  "md-backspace": 62095,
	  "md-barcode": 62096,
	  "md-baseball": 62097,
	  "md-basket": 62098,
	  "md-basketball": 62099,
	  "md-battery-charging": 62100,
	  "md-battery-dead": 62101,
	  "md-battery-full": 62102,
	  "md-beaker": 62103,
	  "md-beer": 62104,
	  "md-bicycle": 62105,
	  "md-bluetooth": 62106,
	  "md-boat": 62107,
	  "md-body": 62108,
	  "md-bonfire": 62109,
	  "md-book": 62110,
	  "md-bookmark": 62111,
	  "md-bookmarks": 62112,
	  "md-bowtie": 62113,
	  "md-briefcase": 62114,
	  "md-browsers": 62115,
	  "md-brush": 62116,
	  "md-bug": 62117,
	  "md-build": 62118,
	  "md-bulb": 62119,
	  "md-bus": 62120,
	  "md-cafe": 62121,
	  "md-calculator": 62122,
	  "md-calendar": 62123,
	  "md-call": 62124,
	  "md-camera": 62125,
	  "md-car": 62130,
	  "md-card": 62131,
	  "md-cart": 62132,
	  "md-cash": 62133,
	  "md-chatboxes": 62134,
	  "md-chatbubbles": 62135,
	  "md-checkbox": 62137,
	  "md-checkbox-outline": 62136,
	  "md-checkmark": 62140,
	  "md-checkmark-circle": 62139,
	  "md-checkmark-circle-outline": 62138,
	  "md-clipboard": 62141,
	  "md-clock": 62142,
	  "md-close": 62144,
	  "md-close-circle": 62143,
	  "md-closed-captioning": 62145,
	  "md-cloud": 62153,
	  "md-cloud-circle": 62146,
	  "md-cloud-done": 62147,
	  "md-cloud-download": 62150,
	  "md-cloud-outline": 62151,
	  "md-cloud-upload": 62152,
	  "md-cloudy": 62155,
	  "md-cloudy-night": 62154,
	  "md-code": 62158,
	  "md-code-download": 62156,
	  "md-code-working": 62157,
	  "md-cog": 62159,
	  "md-color-fill": 62160,
	  "md-color-filter": 62161,
	  "md-color-palette": 62162,
	  "md-color-wand": 62163,
	  "md-compass": 62164,
	  "md-construct": 62165,
	  "md-contact": 62166,
	  "md-contacts": 62167,
	  "md-contract": 62168,
	  "md-contrast": 62169,
	  "md-copy": 62170,
	  "md-create": 62171,
	  "md-crop": 62172,
	  "md-cube": 62173,
	  "md-cut": 62174,
	  "md-desktop": 62175,
	  "md-disc": 62176,
	  "md-document": 62177,
	  "md-done-all": 62178,
	  "md-download": 62179,
	  "md-easel": 62180,
	  "md-egg": 62181,
	  "md-exit": 62182,
	  "md-expand": 62183,
	  "md-eye": 62185,
	  "md-eye-off": 62184,
	  "md-fastforward": 62186,
	  "md-female": 62187,
	  "md-filing": 62188,
	  "md-film": 62189,
	  "md-finger-print": 62190,
	  "md-flag": 62191,
	  "md-flame": 62192,
	  "md-flash": 62193,
	  "md-flask": 62194,
	  "md-flower": 62195,
	  "md-folder": 62197,
	  "md-folder-open": 62196,
	  "md-football": 62198,
	  "md-funnel": 62199,
	  "md-game-controller-a": 62200,
	  "md-game-controller-b": 62201,
	  "md-git-branch": 62202,
	  "md-git-commit": 62203,
	  "md-git-compare": 62204,
	  "md-git-merge": 62205,
	  "md-git-network": 62206,
	  "md-git-pull-request": 62207,
	  "md-glasses": 62208,
	  "md-globe": 62209,
	  "md-grid": 62210,
	  "md-hammer": 62211,
	  "md-hand": 62212,
	  "md-happy": 62213,
	  "md-headset": 62214,
	  "md-heart": 62216,
	  "md-heart-outline": 62215,
	  "md-help": 62219,
	  "md-help-buoy": 62217,
	  "md-help-circle": 62218,
	  "md-home": 62220,
	  "md-ice-cream": 62221,
	  "md-image": 62222,
	  "md-images": 62223,
	  "md-infinite": 62224,
	  "md-information": 62226,
	  "md-information-circle": 62225,
	  "md-ionic": 62227,
	  "md-ionitron": 62228,
	  "md-jet": 62229,
	  "md-key": 62230,
	  "md-keypad": 62231,
	  "md-laptop": 62232,
	  "md-leaf": 62233,
	  "md-link": 61998,
	  "md-list": 62235,
	  "md-list-box": 62234,
	  "md-locate": 62236,
	  "md-lock": 62237,
	  "md-log-in": 62238,
	  "md-log-out": 62239,
	  "md-magnet": 62240,
	  "md-mail": 62242,
	  "md-mail-open": 62241,
	  "md-male": 62243,
	  "md-man": 62244,
	  "md-map": 62245,
	  "md-medal": 62246,
	  "md-medical": 62247,
	  "md-medkit": 62248,
	  "md-megaphone": 62249,
	  "md-menu": 62250,
	  "md-mic": 62252,
	  "md-mic-off": 62251,
	  "md-microphone": 62253,
	  "md-moon": 62254,
	  "md-more": 61897,
	  "md-move": 62257,
	  "md-musical-note": 62258,
	  "md-musical-notes": 62259,
	  "md-navigate": 62260,
	  "md-no-smoking": 62261,
	  "md-notifications": 62264,
	  "md-notifications-off": 62262,
	  "md-notifications-outline": 62263,
	  "md-nuclear": 62265,
	  "md-nutrition": 62266,
	  "md-open": 62267,
	  "md-options": 62268,
	  "md-outlet": 62269,
	  "md-paper": 62271,
	  "md-paper-plane": 62270,
	  "md-partly-sunny": 62272,
	  "md-pause": 62273,
	  "md-paw": 62274,
	  "md-people": 62275,
	  "md-person": 62277,
	  "md-person-add": 62276,
	  "md-phone-landscape": 62278,
	  "md-phone-portrait": 62279,
	  "md-photos": 62280,
	  "md-pie": 62281,
	  "md-pin": 62282,
	  "md-pint": 62283,
	  "md-pizza": 62292,
	  "md-plane": 62293,
	  "md-planet": 62294,
	  "md-play": 62295,
	  "md-podium": 62296,
	  "md-power": 62297,
	  "md-pricetag": 62298,
	  "md-pricetags": 62299,
	  "md-print": 62300,
	  "md-pulse": 62301,
	  "md-qr-scanner": 62302,
	  "md-quote": 62303,
	  "md-radio": 62306,
	  "md-radio-button-off": 62304,
	  "md-radio-button-on": 62305,
	  "md-rainy": 62307,
	  "md-recording": 62308,
	  "md-redo": 62309,
	  "md-refresh": 62310,
	  "md-refresh-circle": 61992,
	  "md-remove": 62312,
	  "md-remove-circle": 62311,
	  "md-reorder": 62313,
	  "md-repeat": 62314,
	  "md-resize": 62315,
	  "md-restaurant": 62316,
	  "md-return-left": 62317,
	  "md-return-right": 62318,
	  "md-reverse-camera": 62319,
	  "md-rewind": 62320,
	  "md-ribbon": 62321,
	  "md-rose": 62322,
	  "md-sad": 62323,
	  "md-school": 62324,
	  "md-search": 62325,
	  "md-send": 62326,
	  "md-settings": 62327,
	  "md-share": 62329,
	  "md-share-alt": 62328,
	  "md-shirt": 62330,
	  "md-shuffle": 62331,
	  "md-skip-backward": 62332,
	  "md-skip-forward": 62333,
	  "md-snow": 62334,
	  "md-speedometer": 62335,
	  "md-square": 62337,
	  "md-square-outline": 62336,
	  "md-star": 62340,
	  "md-star-half": 62338,
	  "md-star-outline": 62339,
	  "md-stats": 62341,
	  "md-stopwatch": 62342,
	  "md-subway": 62343,
	  "md-sunny": 62344,
	  "md-swap": 62345,
	  "md-switch": 62346,
	  "md-sync": 62347,
	  "md-tablet-landscape": 62348,
	  "md-tablet-portrait": 62349,
	  "md-tennisball": 62350,
	  "md-text": 62351,
	  "md-thermometer": 62352,
	  "md-thumbs-down": 62353,
	  "md-thumbs-up": 62354,
	  "md-thunderstorm": 62355,
	  "md-time": 62356,
	  "md-timer": 62357,
	  "md-train": 62358,
	  "md-transgender": 62359,
	  "md-trash": 62360,
	  "md-trending-down": 62361,
	  "md-trending-up": 62362,
	  "md-trophy": 62363,
	  "md-umbrella": 62364,
	  "md-undo": 62365,
	  "md-unlock": 62366,
	  "md-videocam": 62367,
	  "md-volume-down": 62368,
	  "md-volume-mute": 62369,
	  "md-volume-off": 62370,
	  "md-volume-up": 62371,
	  "md-walk": 62372,
	  "md-warning": 62373,
	  "md-watch": 62374,
	  "md-water": 62375,
	  "md-wifi": 62376,
	  "md-wine": 62377,
	  "md-woman": 62378
	}; /**
	    * Ionicons icon set component.
	    * Usage: <Ionicons name="icon-name" size={20} color="#4F8EF7" />
	    */
	
	var Ionicons = (0, _createIconSet2.default)(glyphMap, 'Ionicons', 'Ionicons.ttf');
	
	module.exports = Ionicons;
	module.exports.glyphMap = glyphMap;

/***/ },
/* 1665 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = createIconSet;
	
	var _reactNative = __webpack_require__(1666);
	
	var _iconButton = __webpack_require__(1667);
	
	var _iconButton2 = _interopRequireDefault(_iconButton);
	
	var _tabBarItemIos = __webpack_require__(1785);
	
	var _tabBarItemIos2 = _interopRequireDefault(_tabBarItemIos);
	
	var _toolbarAndroid = __webpack_require__(1786);
	
	var _toolbarAndroid2 = _interopRequireDefault(_toolbarAndroid);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Icon: {
	    displayName: 'Icon',
	    isInFunction: true
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-vector-icons/lib/create-icon-set.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var NativeIconAPI = _reactNative.NativeModules && (_reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule);
	
	var DEFAULT_ICON_SIZE = 12;
	var DEFAULT_ICON_COLOR = 'black';
	
	function createIconSet(glyphMap, fontFamily, fontFile) {
	  var _class, _temp;
	
	  var fontReference = fontFamily;
	  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.
	  if (_reactNative.Platform.OS === 'android' && fontFile) {
	    fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
	  }
	
	  var IconNamePropType = _react2.PropTypes.oneOf(Object.keys(glyphMap));
	
	  var Icon = _wrapComponent('Icon')((_temp = _class = function (_Component) {
	    _inherits(Icon, _Component);
	
	    function Icon() {
	      _classCallCheck(this, Icon);
	
	      return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
	    }
	
	    _createClass(Icon, [{
	      key: 'setNativeProps',
	      value: function setNativeProps(nativeProps) {
	        if (this._root) {
	          this._root.setNativeProps(nativeProps);
	        }
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this2 = this;
	
	        var _props = this.props,
	            name = _props.name,
	            size = _props.size,
	            color = _props.color,
	            style = _props.style,
	            props = _objectWithoutProperties(_props, ['name', 'size', 'color', 'style']);
	
	        var glyph = glyphMap[name] || '?';
	        if (typeof glyph === 'number') {
	          glyph = String.fromCharCode(glyph);
	        }
	
	        var styleDefaults = {
	          fontSize: size,
	          fontWeight: 'normal',
	          fontStyle: 'normal',
	          color: color
	        };
	
	        props.style = [styleDefaults, style];
	        props.ref = function (component) {
	          _this2._root = component;
	        };
	
	        styleDefaults.fontFamily = fontReference;
	
	        return _react3.default.createElement(
	          _reactNative.Text,
	          props,
	          glyph,
	          this.props.children
	        );
	      }
	    }]);
	
	    return Icon;
	  }(_react2.Component), _class.propTypes = {
	    name: IconNamePropType.isRequired,
	    size: _react2.PropTypes.number,
	    color: _react2.PropTypes.string
	  }, _class.defaultProps = {
	    size: DEFAULT_ICON_SIZE,
	    allowFontScaling: false
	  }, _temp));
	
	  var imageSourceCache = {};
	
	  function getImageSource(name) {
	    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
	    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
	
	    if (!NativeIconAPI) {
	      if (_reactNative.Platform.OS === 'android') {
	        throw new Error('RNVectorIconsModule not available, did you properly integrate the module?');
	      }
	      throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a?');
	    }
	
	    var glyph = glyphMap[name] || '?';
	    if (typeof glyph === 'number') {
	      glyph = String.fromCharCode(glyph);
	    }
	
	    var proessedColor = (0, _reactNative.processColor)(color);
	    var cacheKey = glyph + ':' + size + ':' + proessedColor;
	    var scale = _reactNative.PixelRatio.get();
	
	    return new Promise(function (resolve, reject) {
	      var cached = imageSourceCache[cacheKey];
	      if (typeof cached !== 'undefined') {
	        if (!cached || cached instanceof Error) {
	          reject(cached);
	        }
	        resolve({ uri: cached, scale: scale });
	      } else {
	        NativeIconAPI.getImageForFont(fontReference, glyph, size, proessedColor, function (err, image) {
	          var error = typeof err === 'string' ? new Error(err) : err;
	          imageSourceCache[cacheKey] = image || error || false;
	          if (!error && image) {
	            resolve({ uri: image, scale: scale });
	          } else {
	            reject(error);
	          }
	        });
	      }
	    });
	  }
	
	  Icon.Button = (0, _iconButton2.default)(Icon);
	  Icon.TabBarItem = Icon.TabBarItemIOS = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
	  Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
	  Icon.getImageSource = getImageSource;
	
	  return Icon;
	}

/***/ },
/* 1666 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _reactNative = __webpack_require__(300);
	
	Object.keys(_reactNative).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _reactNative[key];
	    }
	  });
	});

/***/ },
/* 1667 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = createIconButtonComponent;
	
	var _isEqual = __webpack_require__(1668);
	
	var _isEqual2 = _interopRequireDefault(_isEqual);
	
	var _isString = __webpack_require__(1747);
	
	var _isString2 = _interopRequireDefault(_isString);
	
	var _omit = __webpack_require__(1748);
	
	var _omit2 = _interopRequireDefault(_omit);
	
	var _pick = __webpack_require__(1784);
	
	var _pick2 = _interopRequireDefault(_pick);
	
	var _reactNative = __webpack_require__(1666);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  IconButton: {
	    displayName: 'IconButton',
	    isInFunction: true
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-vector-icons/lib/icon-button.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var styles = _reactNative.StyleSheet.create({
	  container: {
	    flexDirection: 'row',
	    justifyContent: 'flex-start',
	    alignItems: 'center',
	    padding: 8
	  },
	  touchable: {
	    overflow: 'hidden'
	  },
	  icon: {
	    marginRight: 10
	  },
	  text: {
	    fontWeight: '600',
	    backgroundColor: 'transparent'
	  }
	});
	
	var IOS7_BLUE = '#007AFF';
	
	function createIconButtonComponent(Icon) {
	  var _class, _temp;
	
	  return _wrapComponent('IconButton')((_temp = _class = function (_Component) {
	    _inherits(IconButton, _Component);
	
	    function IconButton() {
	      _classCallCheck(this, IconButton);
	
	      return _possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
	    }
	
	    _createClass(IconButton, [{
	      key: 'render',
	      value: function render() {
	        var _props = this.props,
	            style = _props.style,
	            iconStyle = _props.iconStyle,
	            children = _props.children,
	            props = _objectWithoutProperties(_props, ['style', 'iconStyle', 'children']);
	
	        var iconProps = (0, _pick2.default)(props, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
	        var touchableProps = (0, _pick2.default)(props, Object.keys(_reactNative.TouchableHighlight.propTypes));
	        props = (0, _omit2.default)(props, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
	        iconProps.style = this.props.iconStyle ? [styles.icon, this.props.iconStyle] : styles.icon;
	
	        var colorStyle = (0, _pick2.default)(this.props, 'color');
	        var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');
	
	        if ((0, _isString2.default)(children)) {
	          children = _react3.default.createElement(
	            _reactNative.Text,
	            { style: [styles.text, colorStyle] },
	            children
	          );
	        }
	
	        return _react3.default.createElement(
	          _reactNative.TouchableHighlight,
	          _extends({ style: [styles.touchable, blockStyle] }, touchableProps),
	          _react3.default.createElement(
	            _reactNative.View,
	            _extends({
	              style: [styles.container, blockStyle, style]
	            }, props),
	            _react3.default.createElement(Icon, iconProps),
	            children
	          )
	        );
	      }
	    }]);
	
	    return IconButton;
	  }(_react2.Component), _class.propTypes = {
	    backgroundColor: _react2.PropTypes.string,
	    borderRadius: _react2.PropTypes.number,
	    color: _react2.PropTypes.string,
	    size: _react2.PropTypes.number
	  }, _class.defaultProps = {
	    backgroundColor: IOS7_BLUE,
	    borderRadius: 5,
	    color: 'white',
	    size: 20
	  }, _temp));
	}

/***/ },
/* 1668 */,
/* 1669 */,
/* 1670 */,
/* 1671 */,
/* 1672 */,
/* 1673 */,
/* 1674 */,
/* 1675 */,
/* 1676 */,
/* 1677 */,
/* 1678 */,
/* 1679 */,
/* 1680 */,
/* 1681 */,
/* 1682 */,
/* 1683 */,
/* 1684 */,
/* 1685 */,
/* 1686 */,
/* 1687 */,
/* 1688 */,
/* 1689 */,
/* 1690 */,
/* 1691 */,
/* 1692 */,
/* 1693 */,
/* 1694 */,
/* 1695 */,
/* 1696 */,
/* 1697 */,
/* 1698 */,
/* 1699 */,
/* 1700 */,
/* 1701 */,
/* 1702 */,
/* 1703 */,
/* 1704 */,
/* 1705 */,
/* 1706 */,
/* 1707 */,
/* 1708 */,
/* 1709 */,
/* 1710 */,
/* 1711 */,
/* 1712 */,
/* 1713 */,
/* 1714 */,
/* 1715 */,
/* 1716 */,
/* 1717 */,
/* 1718 */,
/* 1719 */,
/* 1720 */,
/* 1721 */,
/* 1722 */,
/* 1723 */,
/* 1724 */,
/* 1725 */,
/* 1726 */,
/* 1727 */,
/* 1728 */,
/* 1729 */,
/* 1730 */,
/* 1731 */,
/* 1732 */,
/* 1733 */,
/* 1734 */,
/* 1735 */,
/* 1736 */,
/* 1737 */,
/* 1738 */,
/* 1739 */,
/* 1740 */,
/* 1741 */,
/* 1742 */,
/* 1743 */,
/* 1744 */,
/* 1745 */,
/* 1746 */,
/* 1747 */,
/* 1748 */,
/* 1749 */,
/* 1750 */,
/* 1751 */,
/* 1752 */,
/* 1753 */,
/* 1754 */,
/* 1755 */,
/* 1756 */,
/* 1757 */,
/* 1758 */,
/* 1759 */,
/* 1760 */,
/* 1761 */,
/* 1762 */,
/* 1763 */,
/* 1764 */,
/* 1765 */,
/* 1766 */,
/* 1767 */,
/* 1768 */,
/* 1769 */,
/* 1770 */,
/* 1771 */,
/* 1772 */,
/* 1773 */,
/* 1774 */,
/* 1775 */,
/* 1776 */,
/* 1777 */,
/* 1778 */,
/* 1779 */,
/* 1780 */,
/* 1781 */,
/* 1782 */,
/* 1783 */,
/* 1784 */,
/* 1785 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = createTabBarItemIOSComponent;
	
	var _isEqual = __webpack_require__(1668);
	
	var _isEqual2 = _interopRequireDefault(_isEqual);
	
	var _pick = __webpack_require__(1784);
	
	var _pick2 = _interopRequireDefault(_pick);
	
	var _reactNative = __webpack_require__(1666);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  TabBarItemIOS: {
	    displayName: 'TabBarItemIOS',
	    isInFunction: true
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
	  var _class, _temp;
	
	  return _wrapComponent('TabBarItemIOS')((_temp = _class = function (_Component) {
	    _inherits(TabBarItemIOS, _Component);
	
	    function TabBarItemIOS() {
	      _classCallCheck(this, TabBarItemIOS);
	
	      return _possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
	    }
	
	    _createClass(TabBarItemIOS, [{
	      key: 'updateIconSources',
	      value: function updateIconSources(props) {
	        var _this2 = this;
	
	        if (props.iconName) {
	          getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
	            return _this2.setState({ icon: icon });
	          });
	        }
	        if (props.selectedIconName || props.selectedIconColor) {
	          var selectedIconName = props.selectedIconName || props.iconName;
	          var selectedIconColor = props.selectedIconColor || props.iconColor;
	          getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
	            return _this2.setState({ selectedIcon: selectedIcon });
	          });
	        }
	      }
	    }, {
	      key: 'componentWillMount',
	      value: function componentWillMount() {
	        this.updateIconSources(this.props);
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        var keys = Object.keys(TabBarItemIOS.propTypes);
	        if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
	          this.updateIconSources(nextProps);
	        }
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        return _react3.default.createElement(_reactNative.TabBarIOS.Item, _extends({}, this.props, this.state));
	      }
	    }]);
	
	    return TabBarItemIOS;
	  }(_react2.Component), _class.propTypes = {
	    iconName: IconNamePropType.isRequired,
	    selectedIconName: IconNamePropType,
	    iconSize: _react2.PropTypes.number,
	    iconColor: _react2.PropTypes.string,
	    selectedIconColor: _react2.PropTypes.string
	  }, _class.defaultProps = {
	    iconSize: 30
	  }, _temp));
	}

/***/ },
/* 1786 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = createToolbarAndroidComponent;
	
	var _isEqual = __webpack_require__(1668);
	
	var _isEqual2 = _interopRequireDefault(_isEqual);
	
	var _pick = __webpack_require__(1784);
	
	var _pick2 = _interopRequireDefault(_pick);
	
	var _reactNative = __webpack_require__(1666);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  IconToolbarAndroid: {
	    displayName: 'IconToolbarAndroid',
	    isInFunction: true
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-vector-icons/lib/toolbar-android.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
	  var _class, _temp;
	
	  return _wrapComponent('IconToolbarAndroid')((_temp = _class = function (_Component) {
	    _inherits(IconToolbarAndroid, _Component);
	
	    function IconToolbarAndroid() {
	      _classCallCheck(this, IconToolbarAndroid);
	
	      return _possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
	    }
	
	    _createClass(IconToolbarAndroid, [{
	      key: 'updateIconSources',
	      value: function updateIconSources(props) {
	        var _this2 = this;
	
	        var size = props.iconSize;
	        var color = props.iconColor || props.titleColor;
	        if (props.navIconName) {
	          getImageSource(props.navIconName, size, color).then(function (navIcon) {
	            return _this2.setState({ navIcon: navIcon });
	          });
	        }
	        if (props.overflowIconName) {
	          getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
	            return _this2.setState({ overflowIcon: overflowIcon });
	          });
	        }
	
	        Promise.all((props.actions || []).map(function (action) {
	          if (action.iconName) {
	            return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
	              return _extends({}, action, {
	                icon: icon
	              });
	            });
	          }
	          return Promise.resolve(action);
	        })).then(function (actions) {
	          return _this2.setState({ actions: actions });
	        });
	      }
	    }, {
	      key: 'componentWillMount',
	      value: function componentWillMount() {
	        this.updateIconSources(this.props);
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(nextProps) {
	        var _this3 = this;
	
	        var keys = Object.keys(IconToolbarAndroid.propTypes);
	        if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
	          var stateToEvict = {};
	          if (!nextProps.navIconName) {
	            stateToEvict.navIcon = undefined;
	          }
	          if (!nextProps.iconName) {
	            stateToEvict.icon = undefined;
	          }
	          if (this.state && Object.keys(stateToEvict).length) {
	            this.setState(stateToEvict, function () {
	              return _this3.updateIconSources(nextProps);
	            });
	          } else {
	            this.updateIconSources(nextProps);
	          }
	        }
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        return _react3.default.createElement(_reactNative.ToolbarAndroid, _extends({}, this.props, this.state));
	      }
	    }]);
	
	    return IconToolbarAndroid;
	  }(_react2.Component), _class.propTypes = {
	    navIconName: IconNamePropType,
	    overflowIconName: IconNamePropType,
	    actions: _react2.PropTypes.arrayOf(_react2.PropTypes.shape({
	      title: _react2.PropTypes.string.isRequired,
	      iconName: IconNamePropType,
	      iconSize: _react2.PropTypes.number,
	      iconColor: _react2.PropTypes.string,
	      show: _react2.PropTypes.oneOf(['always', 'ifRoom', 'never']),
	      showWithText: _react2.PropTypes.bool
	    })),
	    iconSize: _react2.PropTypes.number,
	    iconColor: _react2.PropTypes.string
	  }, _class.defaultProps = {
	    iconSize: 24
	  }, _temp));
	}

/***/ },
/* 1787 */,
/* 1788 */,
/* 1789 */,
/* 1790 */,
/* 1791 */,
/* 1792 */,
/* 1793 */,
/* 1794 */,
/* 1795 */,
/* 1796 */,
/* 1797 */,
/* 1798 */,
/* 1799 */,
/* 1800 */
/***/ function(module, exports, __webpack_require__) {

	const Promise = __webpack_require__(1801)
	const co = Promise.coroutine
	
	module.exports = function promiseQueue () {
	  const tasks = []
	  let waiters = []
	  let pending
	
	  function push (task) {
	    return new Promise((resolve, reject) => {
	      tasks.push({ task, resolve, reject })
	      processQueue()
	    })
	  }
	
	  const processQueue = co(function* () {
	    if (pending || !tasks.length) return
	
	    pending = next()
	    try {
	      yield pending
	    } finally {
	      pending = null
	      waiters = waiters.filter(waiter => {
	        if (--waiter.togo === 0) {
	          waiter.resolve()
	          return false
	        }
	
	        return true
	      })
	
	      processQueue()
	    }
	  })
	
	  const next = co(function* next () {
	    const { task, resolve, reject } = tasks.shift()
	    let result
	    try {
	      result = yield task()
	    } catch (err) {
	      return reject(err)
	    }
	
	    resolve(result)
	  })
	
	  function finish () {
	    return new Promise(resolve => {
	      const togo = api.length
	      if (!togo) return resolve()
	
	      waiters.push({ togo, resolve })
	    })
	  }
	
	  const api = {
	    push,
	    finish
	  }
	
	  Object.defineProperty(api, 'length', {
	    get: function () {
	      return tasks.length + (pending ? 1 : 0)
	    }
	  })
	
	  return api
	}


/***/ },
/* 1801 */,
/* 1802 */,
/* 1803 */,
/* 1804 */,
/* 1805 */,
/* 1806 */,
/* 1807 */,
/* 1808 */,
/* 1809 */,
/* 1810 */,
/* 1811 */,
/* 1812 */,
/* 1813 */,
/* 1814 */,
/* 1815 */,
/* 1816 */,
/* 1817 */,
/* 1818 */,
/* 1819 */,
/* 1820 */,
/* 1821 */,
/* 1822 */,
/* 1823 */,
/* 1824 */,
/* 1825 */,
/* 1826 */,
/* 1827 */,
/* 1828 */,
/* 1829 */,
/* 1830 */,
/* 1831 */,
/* 1832 */,
/* 1833 */,
/* 1834 */,
/* 1835 */,
/* 1836 */,
/* 1837 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var punycode = __webpack_require__(1838);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(850);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 1838 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(952)(module), (function() { return this; }())))

/***/ },
/* 1839 */
/***/ function(module, exports) {

	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var undefined;
	
	var isArray = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}
	
		return toStr.call(arr) === '[object Array]';
	};
	
	var isPlainObject = function isPlainObject(obj) {
		'use strict';
		if (!obj || toStr.call(obj) !== '[object Object]') {
			return false;
		}
	
		var has_own_constructor = hasOwn.call(obj, 'constructor');
		var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
			return false;
		}
	
		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) {}
	
		return key === undefined || hasOwn.call(obj, key);
	};
	
	module.exports = function extend() {
		'use strict';
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0],
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
			target = {};
		}
	
		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];
	
					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}
	
						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);
	
					// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	


/***/ },
/* 1840 */,
/* 1841 */,
/* 1842 */,
/* 1843 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Rusha = __webpack_require__(1844)
	var stringify = __webpack_require__(1845)
	
	var r = new Rusha;
	
	module.exports = function (obj) {
	  return r.digest(stringify(obj));
	};


/***/ },
/* 1844 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function () {
	    var /*
	 * Rusha, a JavaScript implementation of the Secure Hash Algorithm, SHA-1,
	 * as defined in FIPS PUB 180-1, tuned for high performance with large inputs.
	 * (http://github.com/srijs/rusha)
	 *
	 * Inspired by Paul Johnstons implementation (http://pajhome.org.uk/crypt/md5).
	 *
	 * Copyright (c) 2013 Sam Rijs (http://awesam.de).
	 * Released under the terms of the MIT license as follows:
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 * IN THE SOFTWARE.
	 */
	    util = {
	        getDataType: function (data) {
	            if (typeof data === 'string') {
	                return 'string';
	            }
	            if (data instanceof Array) {
	                return 'array';
	            }
	            if (typeof global !== 'undefined' && global.Buffer && global.Buffer.isBuffer(data)) {
	                return 'buffer';
	            }
	            if (data instanceof ArrayBuffer) {
	                return 'arraybuffer';
	            }
	            if (data.buffer instanceof ArrayBuffer) {
	                return 'view';
	            }
	            if (data instanceof Blob) {
	                return 'blob';
	            }
	            throw new Error('Unsupported data type.');
	        }
	    };
	    function Rusha(chunkSize) {
	        'use strict';
	        var // Private object structure.
	        self$2 = { fill: 0 };
	        var // Calculate the length of buffer that the sha1 routine uses
	        // including the padding.
	        padlen = function (len) {
	            for (len += 9; len % 64 > 0; len += 1);
	            return len;
	        };
	        var padZeroes = function (bin, len) {
	            for (var i$2 = len >> 2; i$2 < bin.length; i$2++)
	                bin[i$2] = 0;
	        };
	        var padData = function (bin, chunkLen, msgLen) {
	            bin[chunkLen >> 2] |= 128 << 24 - (chunkLen % 4 << 3);
	            // To support msgLen >= 2 GiB, use a float division when computing the
	            // high 32-bits of the big-endian message length in bits.
	            bin[((chunkLen >> 2) + 2 & ~15) + 14] = msgLen / (1 << 29) | 0;
	            bin[((chunkLen >> 2) + 2 & ~15) + 15] = msgLen << 3;
	        };
	        var // Convert a binary string and write it to the heap.
	        // A binary string is expected to only contain char codes < 256.
	        convStr = function (H8, H32, start, len, off) {
	            var str = this, i$2, om = off % 4, lm = len % 4, j = len - lm;
	            if (j > 0) {
	                switch (om) {
	                case 0:
	                    H8[off + 3 | 0] = str.charCodeAt(start);
	                case 1:
	                    H8[off + 2 | 0] = str.charCodeAt(start + 1);
	                case 2:
	                    H8[off + 1 | 0] = str.charCodeAt(start + 2);
	                case 3:
	                    H8[off | 0] = str.charCodeAt(start + 3);
	                }
	            }
	            for (i$2 = om; i$2 < j; i$2 = i$2 + 4 | 0) {
	                H32[off + i$2 >> 2] = str.charCodeAt(start + i$2) << 24 | str.charCodeAt(start + i$2 + 1) << 16 | str.charCodeAt(start + i$2 + 2) << 8 | str.charCodeAt(start + i$2 + 3);
	            }
	            switch (lm) {
	            case 3:
	                H8[off + j + 1 | 0] = str.charCodeAt(start + j + 2);
	            case 2:
	                H8[off + j + 2 | 0] = str.charCodeAt(start + j + 1);
	            case 1:
	                H8[off + j + 3 | 0] = str.charCodeAt(start + j);
	            }
	        };
	        var // Convert a buffer or array and write it to the heap.
	        // The buffer or array is expected to only contain elements < 256.
	        convBuf = function (H8, H32, start, len, off) {
	            var buf = this, i$2, om = off % 4, lm = len % 4, j = len - lm;
	            if (j > 0) {
	                switch (om) {
	                case 0:
	                    H8[off + 3 | 0] = buf[start];
	                case 1:
	                    H8[off + 2 | 0] = buf[start + 1];
	                case 2:
	                    H8[off + 1 | 0] = buf[start + 2];
	                case 3:
	                    H8[off | 0] = buf[start + 3];
	                }
	            }
	            for (i$2 = 4 - om; i$2 < j; i$2 = i$2 += 4 | 0) {
	                H32[off + i$2 >> 2] = buf[start + i$2] << 24 | buf[start + i$2 + 1] << 16 | buf[start + i$2 + 2] << 8 | buf[start + i$2 + 3];
	            }
	            switch (lm) {
	            case 3:
	                H8[off + j + 1 | 0] = buf[start + j + 2];
	            case 2:
	                H8[off + j + 2 | 0] = buf[start + j + 1];
	            case 1:
	                H8[off + j + 3 | 0] = buf[start + j];
	            }
	        };
	        var convBlob = function (H8, H32, start, len, off) {
	            var blob = this, i$2, om = off % 4, lm = len % 4, j = len - lm;
	            var buf = new Uint8Array(reader.readAsArrayBuffer(blob.slice(start, start + len)));
	            if (j > 0) {
	                switch (om) {
	                case 0:
	                    H8[off + 3 | 0] = buf[0];
	                case 1:
	                    H8[off + 2 | 0] = buf[1];
	                case 2:
	                    H8[off + 1 | 0] = buf[2];
	                case 3:
	                    H8[off | 0] = buf[3];
	                }
	            }
	            for (i$2 = 4 - om; i$2 < j; i$2 = i$2 += 4 | 0) {
	                H32[off + i$2 >> 2] = buf[i$2] << 24 | buf[i$2 + 1] << 16 | buf[i$2 + 2] << 8 | buf[i$2 + 3];
	            }
	            switch (lm) {
	            case 3:
	                H8[off + j + 1 | 0] = buf[j + 2];
	            case 2:
	                H8[off + j + 2 | 0] = buf[j + 1];
	            case 1:
	                H8[off + j + 3 | 0] = buf[j];
	            }
	        };
	        var convFn = function (data) {
	            switch (util.getDataType(data)) {
	            case 'string':
	                return convStr.bind(data);
	            case 'array':
	                return convBuf.bind(data);
	            case 'buffer':
	                return convBuf.bind(data);
	            case 'arraybuffer':
	                return convBuf.bind(new Uint8Array(data));
	            case 'view':
	                return convBuf.bind(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));
	            case 'blob':
	                return convBlob.bind(data);
	            }
	        };
	        var slice = function (data, offset) {
	            switch (util.getDataType(data)) {
	            case 'string':
	                return data.slice(offset);
	            case 'array':
	                return data.slice(offset);
	            case 'buffer':
	                return data.slice(offset);
	            case 'arraybuffer':
	                return data.slice(offset);
	            case 'view':
	                return data.buffer.slice(offset);
	            }
	        };
	        var // Precompute 00 - ff strings
	        precomputedHex = new Array(256);
	        for (var i = 0; i < 256; i++) {
	            precomputedHex[i] = (i < 16 ? '0' : '') + i.toString(16);
	        }
	        var // Convert an ArrayBuffer into its hexadecimal string representation.
	        hex = function (arrayBuffer) {
	            var binarray = new Uint8Array(arrayBuffer);
	            var res = new Array(arrayBuffer.byteLength);
	            for (var i$2 = 0; i$2 < res.length; i$2++) {
	                res[i$2] = precomputedHex[binarray[i$2]];
	            }
	            return res.join('');
	        };
	        var ceilHeapSize = function (v) {
	            // The asm.js spec says:
	            // The heap object's byteLength must be either
	            // 2^n for n in [12, 24) or 2^24 * n for n ≥ 1.
	            // Also, byteLengths smaller than 2^16 are deprecated.
	            var p;
	            if (// If v is smaller than 2^16, the smallest possible solution
	                // is 2^16.
	                v <= 65536)
	                return 65536;
	            if (// If v < 2^24, we round up to 2^n,
	                // otherwise we round up to 2^24 * n.
	                v < 16777216) {
	                for (p = 1; p < v; p = p << 1);
	            } else {
	                for (p = 16777216; p < v; p += 16777216);
	            }
	            return p;
	        };
	        var // Initialize the internal data structures to a new capacity.
	        init = function (size) {
	            if (size % 64 > 0) {
	                throw new Error('Chunk size must be a multiple of 128 bit');
	            }
	            self$2.maxChunkLen = size;
	            self$2.padMaxChunkLen = padlen(size);
	            // The size of the heap is the sum of:
	            // 1. The padded input message size
	            // 2. The extended space the algorithm needs (320 byte)
	            // 3. The 160 bit state the algoritm uses
	            self$2.heap = new ArrayBuffer(ceilHeapSize(self$2.padMaxChunkLen + 320 + 20));
	            self$2.h32 = new Int32Array(self$2.heap);
	            self$2.h8 = new Int8Array(self$2.heap);
	            self$2.core = new Rusha._core({
	                Int32Array: Int32Array,
	                DataView: DataView
	            }, {}, self$2.heap);
	            self$2.buffer = null;
	        };
	        // Iinitializethe datastructures according
	        // to a chunk siyze.
	        init(chunkSize || 64 * 1024);
	        var initState = function (heap, padMsgLen) {
	            var io = new Int32Array(heap, padMsgLen + 320, 5);
	            io[0] = 1732584193;
	            io[1] = -271733879;
	            io[2] = -1732584194;
	            io[3] = 271733878;
	            io[4] = -1009589776;
	        };
	        var padChunk = function (chunkLen, msgLen) {
	            var padChunkLen = padlen(chunkLen);
	            var view = new Int32Array(self$2.heap, 0, padChunkLen >> 2);
	            padZeroes(view, chunkLen);
	            padData(view, chunkLen, msgLen);
	            return padChunkLen;
	        };
	        var // Write data to the heap.
	        write = function (data, chunkOffset, chunkLen) {
	            convFn(data)(self$2.h8, self$2.h32, chunkOffset, chunkLen, 0);
	        };
	        var // Initialize and call the RushaCore,
	        // assuming an input buffer of length len * 4.
	        coreCall = function (data, chunkOffset, chunkLen, msgLen, finalize) {
	            var padChunkLen = chunkLen;
	            if (finalize) {
	                padChunkLen = padChunk(chunkLen, msgLen);
	            }
	            write(data, chunkOffset, chunkLen);
	            self$2.core.hash(padChunkLen, self$2.padMaxChunkLen);
	        };
	        var getRawDigest = function (heap, padMaxChunkLen) {
	            var io = new Int32Array(heap, padMaxChunkLen + 320, 5);
	            var out = new Int32Array(5);
	            var arr = new DataView(out.buffer);
	            arr.setInt32(0, io[0], false);
	            arr.setInt32(4, io[1], false);
	            arr.setInt32(8, io[2], false);
	            arr.setInt32(12, io[3], false);
	            arr.setInt32(16, io[4], false);
	            return out;
	        };
	        var // Calculate the hash digest as an array of 5 32bit integers.
	        rawDigest = this.rawDigest = function (str) {
	            var msgLen = str.byteLength || str.length || str.size || 0;
	            initState(self$2.heap, self$2.padMaxChunkLen);
	            var chunkOffset = 0, chunkLen = self$2.maxChunkLen, last;
	            for (chunkOffset = 0; msgLen > chunkOffset + chunkLen; chunkOffset += chunkLen) {
	                coreCall(str, chunkOffset, chunkLen, msgLen, false);
	            }
	            coreCall(str, chunkOffset, msgLen - chunkOffset, msgLen, true);
	            return getRawDigest(self$2.heap, self$2.padMaxChunkLen);
	        };
	        // The digest and digestFrom* interface returns the hash digest
	        // as a hex string.
	        this.digest = this.digestFromString = this.digestFromBuffer = this.digestFromArrayBuffer = function (str) {
	            return hex(rawDigest(str).buffer);
	        };
	    }
	    ;
	    // The low-level RushCore module provides the heart of Rusha,
	    // a high-speed sha1 implementation working on an Int32Array heap.
	    // At first glance, the implementation seems complicated, however
	    // with the SHA1 spec at hand, it is obvious this almost a textbook
	    // implementation that has a few functions hand-inlined and a few loops
	    // hand-unrolled.
	    Rusha._core = function RushaCore(stdlib, foreign, heap) {
	        'use asm';
	        var H = new stdlib.Int32Array(heap);
	        function hash(k, x) {
	            // k in bytes
	            k = k | 0;
	            x = x | 0;
	            var i = 0, j = 0, y0 = 0, z0 = 0, y1 = 0, z1 = 0, y2 = 0, z2 = 0, y3 = 0, z3 = 0, y4 = 0, z4 = 0, t0 = 0, t1 = 0;
	            y0 = H[x + 320 >> 2] | 0;
	            y1 = H[x + 324 >> 2] | 0;
	            y2 = H[x + 328 >> 2] | 0;
	            y3 = H[x + 332 >> 2] | 0;
	            y4 = H[x + 336 >> 2] | 0;
	            for (i = 0; (i | 0) < (k | 0); i = i + 64 | 0) {
	                z0 = y0;
	                z1 = y1;
	                z2 = y2;
	                z3 = y3;
	                z4 = y4;
	                for (j = 0; (j | 0) < 64; j = j + 4 | 0) {
	                    t1 = H[i + j >> 2] | 0;
	                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | ~y1 & y3) | 0) + ((t1 + y4 | 0) + 1518500249 | 0) | 0;
	                    y4 = y3;
	                    y3 = y2;
	                    y2 = y1 << 30 | y1 >>> 2;
	                    y1 = y0;
	                    y0 = t0;
	                    H[k + j >> 2] = t1;
	                }
	                for (j = k + 64 | 0; (j | 0) < (k + 80 | 0); j = j + 4 | 0) {
	                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
	                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | ~y1 & y3) | 0) + ((t1 + y4 | 0) + 1518500249 | 0) | 0;
	                    y4 = y3;
	                    y3 = y2;
	                    y2 = y1 << 30 | y1 >>> 2;
	                    y1 = y0;
	                    y0 = t0;
	                    H[j >> 2] = t1;
	                }
	                for (j = k + 80 | 0; (j | 0) < (k + 160 | 0); j = j + 4 | 0) {
	                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
	                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 ^ y2 ^ y3) | 0) + ((t1 + y4 | 0) + 1859775393 | 0) | 0;
	                    y4 = y3;
	                    y3 = y2;
	                    y2 = y1 << 30 | y1 >>> 2;
	                    y1 = y0;
	                    y0 = t0;
	                    H[j >> 2] = t1;
	                }
	                for (j = k + 160 | 0; (j | 0) < (k + 240 | 0); j = j + 4 | 0) {
	                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
	                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 & y2 | y1 & y3 | y2 & y3) | 0) + ((t1 + y4 | 0) - 1894007588 | 0) | 0;
	                    y4 = y3;
	                    y3 = y2;
	                    y2 = y1 << 30 | y1 >>> 2;
	                    y1 = y0;
	                    y0 = t0;
	                    H[j >> 2] = t1;
	                }
	                for (j = k + 240 | 0; (j | 0) < (k + 320 | 0); j = j + 4 | 0) {
	                    t1 = (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) << 1 | (H[j - 12 >> 2] ^ H[j - 32 >> 2] ^ H[j - 56 >> 2] ^ H[j - 64 >> 2]) >>> 31;
	                    t0 = ((y0 << 5 | y0 >>> 27) + (y1 ^ y2 ^ y3) | 0) + ((t1 + y4 | 0) - 899497514 | 0) | 0;
	                    y4 = y3;
	                    y3 = y2;
	                    y2 = y1 << 30 | y1 >>> 2;
	                    y1 = y0;
	                    y0 = t0;
	                    H[j >> 2] = t1;
	                }
	                y0 = y0 + z0 | 0;
	                y1 = y1 + z1 | 0;
	                y2 = y2 + z2 | 0;
	                y3 = y3 + z3 | 0;
	                y4 = y4 + z4 | 0;
	            }
	            H[x + 320 >> 2] = y0;
	            H[x + 324 >> 2] = y1;
	            H[x + 328 >> 2] = y2;
	            H[x + 332 >> 2] = y3;
	            H[x + 336 >> 2] = y4;
	        }
	        return { hash: hash };
	    };
	    if (// If we'e running in Node.JS, export a module.
	        true) {
	        module.exports = Rusha;
	    } else if (// If we're running in a DOM context, export
	        // the Rusha object to toplevel.
	        typeof window !== 'undefined') {
	        window.Rusha = Rusha;
	    }
	    if (// If we're running in a webworker, accept
	        // messages containing a jobid and a buffer
	        // or blob object, and return the hash result.
	        typeof FileReaderSync !== 'undefined') {
	        var reader = new FileReaderSync(), hasher = new Rusha(4 * 1024 * 1024);
	        self.onmessage = function onMessage(event) {
	            var hash, data = event.data.data;
	            try {
	                hash = hasher.digest(data);
	                self.postMessage({
	                    id: event.data.id,
	                    hash: hash
	                });
	            } catch (e) {
	                self.postMessage({
	                    id: event.data.id,
	                    error: e.name
	                });
	            }
	        };
	    }
	}());
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1845 */
/***/ function(module, exports) {

	module.exports = function (obj, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var space = opts.space || '';
	    if (typeof space === 'number') space = Array(space+1).join(' ');
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
	    var replacer = opts.replacer || function(key, value) { return value; };
	
	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);
	
	    var seen = [];
	    return (function stringify (parent, key, node, level) {
	        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
	        var colonSeparator = space ? ': ' : ':';
	
	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }
	
	        node = replacer.call(parent, key, node);
	
	        if (node === undefined) {
	            return;
	        }
	        if (typeof node !== 'object' || node === null) {
	            return JSON.stringify(node);
	        }
	        if (isArray(node)) {
	            var out = [];
	            for (var i = 0; i < node.length; i++) {
	                var item = stringify(node, i, node[i], level+1) || JSON.stringify(null);
	                out.push(indent + space + item);
	            }
	            return '[' + out.join(',') + indent + ']';
	        }
	        else {
	            if (seen.indexOf(node) !== -1) {
	                if (cycles) return JSON.stringify('__cycle__');
	                throw new TypeError('Converting circular structure to JSON');
	            }
	            else seen.push(node);
	
	            var keys = objectKeys(node).sort(cmp && cmp(node));
	            var out = [];
	            for (var i = 0; i < keys.length; i++) {
	                var key = keys[i];
	                var value = stringify(node, key, node[key], level+1);
	
	                if(!value) continue;
	
	                var keyValue = JSON.stringify(key)
	                    + colonSeparator
	                    + value;
	                ;
	                out.push(indent + space + keyValue);
	            }
	            return '{' + out.join(',') + indent + '}';
	        }
	    })({ '': obj }, '', obj, 0);
	};
	
	var isArray = Array.isArray || function (x) {
	    return {}.toString.call(x) === '[object Array]';
	};
	
	var objectKeys = Object.keys || function (obj) {
	    var has = Object.prototype.hasOwnProperty || function () { return true };
	    var keys = [];
	    for (var key in obj) {
	        if (has.call(obj, key)) keys.push(key);
	    }
	    return keys;
	};


/***/ },
/* 1846 */,
/* 1847 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Manifest = __webpack_require__(1848)
	
	var Q = __webpack_require__(1013)
	var __hop = {}.hasOwnProperty
	
	exports = module.exports = install
	exports.install = install
	
	var special = {
	  batch: function promisifyBatch(db) {
	    var orig = db.batch.bind(db)
	    db.batch = function() {
	      if (arguments.length) return callSubstitute(this, orig, arguments)
	      // TODO: remove throw err when https://github.com/dominictarr/level-hooks/issues/7 is resolved
	      else throw new Error('chained form is not supported yet')
	
	      var batch = orig.call(db)
	      batch.write = Q.nbind(batch.write, batch)
	      return batch
	    }
	  },
	  query: function promisifyQuery(db) {
	    var use = db.query.use
	    var engine = db.query.engine
	
	    fromStream(db, 'query')
	
	    if (use) db.query.use = use
	    if (engine) db.query.engine = engine
	  }
	}
	
	function install(db, manifest, methodName) {
	  if (methodName) promisifyMethod.apply(null, arguments)
	  else if (manifest) _install.apply(null, arguments)
	  else _install(db, new Manifest(db))
	
	  return db
	}
	
	function _install(db, manifest) {
	  var methods = manifest.methods
	  if (!('close' in methods)) methods.close = { type: 'async' } // hack until level-manifest is updated
	
	  for (var methodName in methods) {
	    if (!__hop.call(methods, methodName)) continue
	
	    promisifyMethod(db, methodName, methods[methodName])
	  }
	
	  var sublevels = manifest.sublevels || {}
	  for (var sublevelName in sublevels) {
	    if (__hop.call(sublevels, sublevelName)) {
	      _install(db.sublevels[sublevelName], sublevels[sublevelName])
	    }
	  }
	
	  if (typeof db.sublevel == 'function') {
	    var Sublevel = db.sublevel
	    db.sublevel = function(sublevelName) {
	      var existing = __hop.call(sublevels, sublevelName)
	      var sublevel = Sublevel.apply(this, arguments)
	      if (!existing) _install(sublevel, new Manifest(sublevel))
	      return sublevel
	    }
	  }
	}
	
	function promisifyMethod(db, methodName, manifest) {
	  if (!(methodName in db)) return
	
	  if (special[methodName]) {
	    return special[methodName](db)
	  }
	
	  switch (manifest.type) {
	    case 'async':
	      substitute(db, methodName)
	      break
	    case 'readable':
	      fromStream(db, methodName)
	      break;
	    case 'writable':
	      // not supported
	      break
	    case 'object':
	      _install(db[methodName], manifest)
	      break
	  }
	}
	
	function substitute(db, methodName) {
	  var orig = db[methodName].bind(db)
	  db[methodName] = function() {
	    return callSubstitute(this, orig, arguments)
	  }
	}
	
	function callSubstitute(ctx, orig, args) {
	  if (typeof args[args.length - 1] === 'function')
	    return orig.apply(ctx, args)
	  else
	    return Q.nfapply(orig, Array.prototype.slice.call(args))
	}
	
	function fromStream(db, methodName) {
	  var orig = db[methodName]
	  db[methodName] = function() {
	    var stream = orig.apply(this, arguments)
	    if (typeof stream.then === 'function') return stream
	
	    var defer = Q.defer()
	    var failed
	    stream.on('data', function(data) {
	      defer.notify(data)
	    })
	
	    stream.on('error', function(err) {
	      failed = true
	      defer.reject(err)
	    })
	
	    stream.on('end', function() {
	      if (!failed) defer.resolve()
	    })
	
	    // augment stream with promise API
	    var promise = defer.promise
	    var pProto = promise.constructor.prototype
	    for (var p in pProto) {
	      if (__hop.call(pProto, p)) {
	        stream[p] = promise[p].bind(promise)
	      }
	    }
	
	    return stream
	  }
	}


/***/ },
/* 1848 */
/***/ function(module, exports, __webpack_require__) {

	
	var deepExtend = __webpack_require__(1849)
	
	var methods = {
	  createReadStream  : {type: 'readable'},
	  readStream        : {type: 'readable'},
	  createValueStream : {type: 'readable'},
	  valueStream       : {type: 'readable'},
	  createKeyStream   : {type: 'readable'},
	  keyStream         : {type: 'readable'},
	  createWriteStream : {type: 'writable'},
	  writeStream       : {type: 'writable'},
	  isOpen            : {type: 'sync'},
	  isClosed          : {type: 'sync'},
	  put               : {type: 'async'},
	  get               : {type: 'async'},
	  del               : {type: 'async'},
	  batch             : {type: 'async'},
	  approximateSize   : {type: 'async'}
	}
	
	//valid types:
	//readable, writable, duplex, sync, async, error, object
	
	//error means that this method is disabled in the client
	//the client should throw
	
	module.exports = function manifest (db, terse) {
	  var man = {}
	  if(db.methods || !terse) man.methods = {}
	  if(!terse) {
	    deepExtend(deepExtend(man.methods, methods), db.methods)
	  } else
	    deepExtend(man.methods, db.methods)
	
	  if(db._sep)
	    man._sep = db._sep
	  if(db._prefix)
	    man._prefix = db._prefix
	
	  if(db.sublevels) {
	    man.sublevels = {}
	    for(var name in db.sublevels) {
	      man.sublevels[name] = manifest(db.sublevels[name], terse)
	    }
	  }
	  return man
	}
	


/***/ },
/* 1849 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * Node.JS module "Deep Extend"
	 * @description Recursive object extending.
	 * @author Viacheslav Lotsmanov (unclechu) <lotsmanov89@gmail.com>
	 * @license MIT
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright (c) 2013 Viacheslav Lotsmanov
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
	 * this software and associated documentation files (the "Software"), to deal in
	 * the Software without restriction, including without limitation the rights to
	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	 * the Software, and to permit persons to whom the Software is furnished to do so,
	 * subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */
	
	/**
	 * Extening object that entered in first argument.
	 * Returns extended object or false if have no target object or incorrect type.
	 * If you wish to clone object, simply use that:
	 *  deepExtend({}, yourObj_1, [yourObj_N]) - first arg is new empty object
	 */
	var deepExtend = module.exports = function (/*obj_1, [obj_2], [obj_N]*/) {
		if (arguments.length < 1 || typeof arguments[0] !== 'object') {
			return false;
		}
	
		if (arguments.length < 2) return arguments[0];
	
		var target = arguments[0];
	
		// convert arguments to array and cut off target object
		var args = Array.prototype.slice.call(arguments, 1);
	
		var key, val, src, clone, tmpBuf;
	
		args.forEach(function (obj) {
			if (typeof obj !== 'object') return;
	
			for (key in obj) {
				if ( ! (key in obj)) continue;
	
				src = target[key];
				val = obj[key];
	
				if (val === target) continue;
	
				if (typeof val !== 'object' || val === null) {
					target[key] = val;
					continue;
				} else if (val instanceof Buffer) {
					tmpBuf = new Buffer(val.length);
					val.copy(tmpBuf);
					target[key] = tmpBuf;
					continue;
				} else if (val instanceof Date) {
					target[key] = new Date(val.getTime());
					continue;
				}
	
				if (typeof src !== 'object' || src === null) {
					clone = (Array.isArray(val)) ? [] : {};
					target[key] = deepExtend(clone, val);
					continue;
				}
	
				if (Array.isArray(val)) {
					clone = (Array.isArray(src)) ? src : [];
				} else {
					clone = (!Array.isArray(src)) ? src : {};
				}
	
				target[key] = deepExtend(clone, val);
			}
		});
	
		return target;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1850 */,
/* 1851 */,
/* 1852 */,
/* 1853 */,
/* 1854 */,
/* 1855 */,
/* 1856 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	var xtend                = __webpack_require__(1857)
	  , AbstractIterator     = __webpack_require__(1858)
	  , AbstractChainedBatch = __webpack_require__(1859)
	
	function AbstractLevelDOWN (location) {
	  if (!arguments.length || location === undefined)
	    throw new Error('constructor requires at least a location argument')
	
	  if (typeof location != 'string')
	    throw new Error('constructor requires a location string argument')
	
	  this.location = location
	}
	
	AbstractLevelDOWN.prototype.open = function (options, callback) {
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('open() requires a callback argument')
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._open == 'function')
	    return this._open(options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.close = function (callback) {
	  if (typeof callback != 'function')
	    throw new Error('close() requires a callback argument')
	
	  if (typeof this._close == 'function')
	    return this._close(callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.get = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('get() requires a callback argument')
	
	  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._get == 'function')
	    return this._get(key, options, callback)
	
	  process.nextTick(function () { callback(new Error('NotFound')) })
	}
	
	AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('put() requires a callback argument')
	
	  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (err = this._checkKeyValue(value, 'value', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  // coerce value to string in node, don't touch it in browser
	  // (indexeddb can store any JS type)
	  if (!this._isBuffer(value) && !process.browser)
	    value = String(value)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._put == 'function')
	    return this._put(key, value, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.del = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('del() requires a callback argument')
	
	  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._del == 'function')
	    return this._del(key, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
	  if (!arguments.length)
	    return this._chainedBatch()
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('batch(array) requires a callback argument')
	
	  if (!Array.isArray(array))
	    return callback(new Error('batch(array) requires an array argument'))
	
	  if (typeof options != 'object')
	    options = {}
	
	  var i = 0
	    , l = array.length
	    , e
	    , err
	
	  for (; i < l; i++) {
	    e = array[i]
	    if (typeof e != 'object')
	      continue
	
	    if (err = this._checkKeyValue(e.type, 'type', this._isBuffer))
	      return callback(err)
	
	    if (err = this._checkKeyValue(e.key, 'key', this._isBuffer))
	      return callback(err)
	
	    if (e.type == 'put') {
	      if (err = this._checkKeyValue(e.value, 'value', this._isBuffer))
	        return callback(err)
	    }
	  }
	
	  if (typeof this._batch == 'function')
	    return this._batch(array, options, callback)
	
	  process.nextTick(callback)
	}
	
	//TODO: remove from here, not a necessary primitive
	AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
	  if (   start == null
	      || end == null
	      || typeof start == 'function'
	      || typeof end == 'function') {
	    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')
	  }
	
	  if (typeof callback != 'function')
	    throw new Error('approximateSize() requires a callback argument')
	
	  if (!this._isBuffer(start))
	    start = String(start)
	
	  if (!this._isBuffer(end))
	    end = String(end)
	
	  if (typeof this._approximateSize == 'function')
	    return this._approximateSize(start, end, callback)
	
	  process.nextTick(function () {
	    callback(null, 0)
	  })
	}
	
	AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
	  var self = this
	
	  options = xtend(options)
	
	  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {
	    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)
	      delete options[o]
	  })
	
	  options.reverse = !!options.reverse
	
	  // fix `start` so it takes into account gt, gte, lt, lte as appropriate
	  if (options.reverse && options.lt)
	    options.start = options.lt
	  if (options.reverse && options.lte)
	    options.start = options.lte
	  if (!options.reverse && options.gt)
	    options.start = options.gt
	  if (!options.reverse && options.gte)
	    options.start = options.gte
	
	  if ((options.reverse && options.lt && !options.lte)
	    || (!options.reverse && options.gt && !options.gte))
	    options.exclusiveStart = true // start should *not* include matching key
	
	  return options
	}
	
	AbstractLevelDOWN.prototype.iterator = function (options) {
	  if (typeof options != 'object')
	    options = {}
	
	  options = this._setupIteratorOptions(options)
	
	  if (typeof this._iterator == 'function')
	    return this._iterator(options)
	
	  return new AbstractIterator(this)
	}
	
	AbstractLevelDOWN.prototype._chainedBatch = function () {
	  return new AbstractChainedBatch(this)
	}
	
	AbstractLevelDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	AbstractLevelDOWN.prototype._checkKeyValue = function (obj, type) {
	
	  if (obj === null || obj === undefined)
	    return new Error(type + ' cannot be `null` or `undefined`')
	
	  if (this._isBuffer(obj)) {
	    if (obj.length === 0)
	      return new Error(type + ' cannot be an empty Buffer')
	  } else if (String(obj) === '')
	    return new Error(type + ' cannot be an empty String')
	}
	
	module.exports.AbstractLevelDOWN    = AbstractLevelDOWN
	module.exports.AbstractIterator     = AbstractIterator
	module.exports.AbstractChainedBatch = AbstractChainedBatch
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1857 */
/***/ function(module, exports) {

	module.exports = extend
	
	function extend() {
	    var target = {}
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}


/***/ },
/* 1858 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractIterator (db) {
	  this.db = db
	  this._ended = false
	  this._nexting = false
	}
	
	AbstractIterator.prototype.next = function (callback) {
	  var self = this
	
	  if (typeof callback != 'function')
	    throw new Error('next() requires a callback argument')
	
	  if (self._ended)
	    return callback(new Error('cannot call next() after end()'))
	  if (self._nexting)
	    return callback(new Error('cannot call next() before previous next() has completed'))
	
	  self._nexting = true
	  if (typeof self._next == 'function') {
	    return self._next(function () {
	      self._nexting = false
	      callback.apply(null, arguments)
	    })
	  }
	
	  process.nextTick(function () {
	    self._nexting = false
	    callback()
	  })
	}
	
	AbstractIterator.prototype.end = function (callback) {
	  if (typeof callback != 'function')
	    throw new Error('end() requires a callback argument')
	
	  if (this._ended)
	    return callback(new Error('end() already called on iterator'))
	
	  this._ended = true
	
	  if (typeof this._end == 'function')
	    return this._end(callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractIterator
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1859 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractChainedBatch (db) {
	  this._db         = db
	  this._operations = []
	  this._written    = false
	}
	
	AbstractChainedBatch.prototype._checkWritten = function () {
	  if (this._written)
	    throw new Error('write() already called on this batch')
	}
	
	AbstractChainedBatch.prototype.put = function (key, value) {
	  this._checkWritten()
	
	  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)
	  if (err) throw err
	  err = this._db._checkKeyValue(value, 'value', this._db._isBuffer)
	  if (err) throw err
	
	  if (!this._db._isBuffer(key)) key = String(key)
	  if (!this._db._isBuffer(value)) value = String(value)
	
	  if (typeof this._put == 'function' )
	    this._put(key, value)
	  else
	    this._operations.push({ type: 'put', key: key, value: value })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.del = function (key) {
	  this._checkWritten()
	
	  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)
	  if (err) throw err
	
	  if (!this._db._isBuffer(key)) key = String(key)
	
	  if (typeof this._del == 'function' )
	    this._del(key)
	  else
	    this._operations.push({ type: 'del', key: key })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.clear = function () {
	  this._checkWritten()
	
	  this._operations = []
	
	  if (typeof this._clear == 'function' )
	    this._clear()
	
	  return this
	}
	
	AbstractChainedBatch.prototype.write = function (options, callback) {
	  this._checkWritten()
	
	  if (typeof options == 'function')
	    callback = options
	  if (typeof callback != 'function')
	    throw new Error('write() requires a callback argument')
	  if (typeof options != 'object')
	    options = {}
	
	  this._written = true
	
	  if (typeof this._write == 'function' )
	    return this._write(callback)
	
	  if (typeof this._db._batch == 'function')
	    return this._db._batch(this._operations, options, callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractChainedBatch
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1860 */,
/* 1861 */,
/* 1862 */,
/* 1863 */,
/* 1864 */,
/* 1865 */,
/* 1866 */,
/* 1867 */,
/* 1868 */,
/* 1869 */,
/* 1870 */,
/* 1871 */,
/* 1872 */,
/* 1873 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var DuplexStream = __webpack_require__(1874).Duplex
	  , util         = __webpack_require__(1130)
	
	function BufferList (callback) {
	  if (!(this instanceof BufferList))
	    return new BufferList(callback)
	
	  this._bufs  = []
	  this.length = 0
	
	  if (typeof callback == 'function') {
	    this._callback = callback
	
	    var piper = function (err) {
	      if (this._callback) {
	        this._callback(err)
	        this._callback = null
	      }
	    }.bind(this)
	
	    this.on('pipe', function (src) {
	      src.on('error', piper)
	    })
	    this.on('unpipe', function (src) {
	      src.removeListener('error', piper)
	    })
	  }
	  else if (Buffer.isBuffer(callback))
	    this.append(callback)
	  else if (Array.isArray(callback)) {
	    callback.forEach(function (b) {
	      Buffer.isBuffer(b) && this.append(b)
	    }.bind(this))
	  }
	
	  DuplexStream.call(this)
	}
	
	util.inherits(BufferList, DuplexStream)
	
	BufferList.prototype._offset = function (offset) {
	  var tot = 0, i = 0, _t
	  for (; i < this._bufs.length; i++) {
	    _t = tot + this._bufs[i].length
	    if (offset < _t)
	      return [ i, offset - tot ]
	    tot = _t
	  }
	}
	
	BufferList.prototype.append = function (buf) {
	  this._bufs.push(Buffer.isBuffer(buf) ? buf : new Buffer(buf))
	  this.length += buf.length
	  return this
	}
	
	BufferList.prototype._write = function (buf, encoding, callback) {
	  this.append(buf)
	  if (callback)
	    callback()
	}
	
	BufferList.prototype._read = function (size) {
	  if (!this.length)
	    return this.push(null)
	  size = Math.min(size, this.length)
	  this.push(this.slice(0, size))
	  this.consume(size)
	}
	
	BufferList.prototype.end = function (chunk) {
	  DuplexStream.prototype.end.call(this, chunk)
	
	  if (this._callback) {
	    this._callback(null, this.slice())
	    this._callback = null
	  }
	}
	
	BufferList.prototype.get = function (index) {
	  return this.slice(index, index + 1)[0]
	}
	
	BufferList.prototype.slice = function (start, end) {
	  return this.copy(null, 0, start, end)
	}
	
	BufferList.prototype.copy = function (dst, dstStart, srcStart, srcEnd) {
	  if (typeof srcStart != 'number' || srcStart < 0)
	    srcStart = 0
	  if (typeof srcEnd != 'number' || srcEnd > this.length)
	    srcEnd = this.length
	  if (srcStart >= this.length)
	    return dst || new Buffer(0)
	  if (srcEnd <= 0)
	    return dst || new Buffer(0)
	
	  var copy   = !!dst
	    , off    = this._offset(srcStart)
	    , len    = srcEnd - srcStart
	    , bytes  = len
	    , bufoff = (copy && dstStart) || 0
	    , start  = off[1]
	    , l
	    , i
	
	  // copy/slice everything
	  if (srcStart === 0 && srcEnd == this.length) {
	    if (!copy) // slice, just return a full concat
	      return Buffer.concat(this._bufs)
	
	    // copy, need to copy individual buffers
	    for (i = 0; i < this._bufs.length; i++) {
	      this._bufs[i].copy(dst, bufoff)
	      bufoff += this._bufs[i].length
	    }
	
	    return dst
	  }
	
	  // easy, cheap case where it's a subset of one of the buffers
	  if (bytes <= this._bufs[off[0]].length - start) {
	    return copy
	      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
	      : this._bufs[off[0]].slice(start, start + bytes)
	  }
	
	  if (!copy) // a slice, we need something to copy in to
	    dst = new Buffer(len)
	
	  for (i = off[0]; i < this._bufs.length; i++) {
	    l = this._bufs[i].length - start
	
	    if (bytes > l) {
	      this._bufs[i].copy(dst, bufoff, start)
	    } else {
	      this._bufs[i].copy(dst, bufoff, start, start + bytes)
	      break
	    }
	
	    bufoff += l
	    bytes -= l
	
	    if (start)
	      start = 0
	  }
	
	  return dst
	}
	
	BufferList.prototype.toString = function (encoding, start, end) {
	  return this.slice(start, end).toString(encoding)
	}
	
	BufferList.prototype.consume = function (bytes) {
	  while (this._bufs.length) {
	    if (bytes > this._bufs[0].length) {
	      bytes -= this._bufs[0].length
	      this.length -= this._bufs[0].length
	      this._bufs.shift()
	    } else {
	      this._bufs[0] = this._bufs[0].slice(bytes)
	      this.length -= bytes
	      break
	    }
	  }
	  return this
	}
	
	BufferList.prototype.duplicate = function () {
	  var i = 0
	    , copy = new BufferList()
	
	  for (; i < this._bufs.length; i++)
	    copy.append(this._bufs[i])
	
	  return copy
	}
	
	BufferList.prototype.destroy = function () {
	  this._bufs.length = 0;
	  this.length = 0;
	  this.push(null);
	}
	
	;(function () {
	  var methods = {
	      'readDoubleBE' : 8
	    , 'readDoubleLE' : 8
	    , 'readFloatBE'  : 4
	    , 'readFloatLE'  : 4
	    , 'readInt32BE'  : 4
	    , 'readInt32LE'  : 4
	    , 'readUInt32BE' : 4
	    , 'readUInt32LE' : 4
	    , 'readInt16BE'  : 2
	    , 'readInt16LE'  : 2
	    , 'readUInt16BE' : 2
	    , 'readUInt16LE' : 2
	    , 'readInt8'     : 1
	    , 'readUInt8'    : 1
	  }
	
	  for (var m in methods) {
	    (function (m) {
	      BufferList.prototype[m] = function (offset) {
	        return this.slice(offset, offset + methods[m])[m](0)
	      }
	    }(m))
	  }
	}())
	
	module.exports = BufferList
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1874 */,
/* 1875 */,
/* 1876 */,
/* 1877 */,
/* 1878 */,
/* 1879 */,
/* 1880 */,
/* 1881 */,
/* 1882 */,
/* 1883 */,
/* 1884 */,
/* 1885 */,
/* 1886 */,
/* 1887 */,
/* 1888 */,
/* 1889 */,
/* 1890 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(820).Buffer
	
	var CHARS = '.PYFGCRLAOEUIDHTNSQJKXBMWVZ_pyfgcrlaoeuidhtnsqjkxbmwvz1234567890'
	  .split('').sort().join('')
	
	module.exports = function (chars, exports) {
	  chars = chars || CHARS
	  exports = exports || {}
	  if(chars.length !== 64) throw new Error('a base 64 encoding requires 64 chars')
	
	  var codeToIndex = new Buffer(128)
	  codeToIndex.fill()
	
	  for(var i = 0; i < 64; i++) {
	    var code = chars.charCodeAt(i)
	    codeToIndex[code] = i
	  }
	
	  exports.encode = function (data) {
	      var s = '', l = data.length, hang = 0
	      for(var i = 0; i < l; i++) {
	        var v = data[i]
	
	        switch (i % 3) {
	          case 0:
	            s += chars[v >> 2]
	            hang = (v & 3) << 4
	          break;
	          case 1:
	            s += chars[hang | v >> 4]
	            hang = (v & 0xf) << 2
	          break;
	          case 2:
	            s += chars[hang | v >> 6]
	            s += chars[v & 0x3f]
	            hang = 0
	          break;
	        }
	
	      }
	      if(l%3) s += chars[hang]
	      return s
	    }
	  exports.decode = function (str) {
	      var l = str.length, j = 0
	      var b = new Buffer(~~((l/4)*3)), hang = 0
	
	      for(var i = 0; i < l; i++) {
	        var v = codeToIndex[str.charCodeAt(i)]
	
	        switch (i % 4) {
	          case 0:
	            hang = v << 2;
	          break;
	          case 1:
	            b[j++] = hang | v >> 4
	            hang = (v << 4) & 0xff
	          break;
	          case 2:
	            b[j++] = hang | v >> 2
	            hang = (v << 6) & 0xff
	          break;
	          case 3:
	            b[j++] = hang | v
	          break;
	        }
	
	      }
	      return b
	    }
	  return exports
	}
	
	module.exports(CHARS, module.exports)
	


/***/ },
/* 1891 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {
	var AbstractLevelDOWN = __webpack_require__(1892).AbstractLevelDOWN
	var inherits          = __webpack_require__(1130).inherits
	var EventEmitter      = __webpack_require__(786).EventEmitter
	var Cache             = __webpack_require__(1896)
	var defaultLeveldown
	
	function CacheDOWN (location, leveldown) {
	  var self = this
	  if (!(this instanceof CacheDOWN))
	    return new CacheDOWN(location, leveldown)
	
	  if (typeof location === 'object') {
	    leveldown = location
	    location = undefined
	  }
	
	  leveldown = leveldown || defaultLeveldown
	  this._down = new leveldown(location)
	  this._cache = new Cache()
	  ;['_open', '_close', '_iterator'].forEach(function (method) {
	    if (method in self._down) {
	      self[method] = self._down[method].bind(self._down)
	    }
	  })
	
	  if (typeof location === 'undefined') {
	    AbstractLevelDOWN.call(this)
	  } else {
	    AbstractLevelDOWN.call(this, location)
	  }
	}
	
	inherits(CacheDOWN, AbstractLevelDOWN)
	
	CacheDOWN.prototype._put = function (key, value, options, callback) {
	  if (typeof value === 'undefined' || value === null) value = ''
	
	  this._cachePut(key, value)
	  return this._down._put.apply(this._down, arguments)
	}
	
	
	CacheDOWN.prototype._get = function (key, options, callback) {
	  var self = this
	  if (this._cacheHas(key)) {
	    var val = this._cacheGet(key)
	    if (options.asBuffer !== false && !this._isBuffer(val)) {
	      val = new Buffer(String(val))
	    }
	
	    return process.nextTick(function () {
	      callback(null, val)
	    })
	  }
	
	  return this._down._get(key, options, function (err, val) {
	    if (err) return callback(err)
	
	    self._cachePut(key, val)
	    callback(err, val)
	  })
	}
	
	
	CacheDOWN.prototype._del = function (key, options, callback) {
	  this._cacheDel(key)
	  return this._down._del.apply(this._down, arguments)
	}
	
	
	CacheDOWN.prototype._batch = function (array, options, callback) {
	  var self = this
	  array.forEach(function (item) {
	    if (item.type === 'del') {
	      self._cacheDel(item.key)
	    } else if (item.type === 'put') {
	      self._cachePut(item.key, item.value)
	    }
	  })
	
	  return this._down._batch.apply(this._down, arguments)
	}
	
	
	CacheDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	
	CacheDOWN.prototype.clearCache = function () {
	  this._cache.reset()
	  return this
	}
	
	CacheDOWN.prototype._cachePut = function (key, value) {
	  this._cache.set(key, value)
	}
	
	CacheDOWN.prototype._cacheGet = function (key) {
	  return this._cache.get(key)
	}
	
	CacheDOWN.prototype._cacheHas = function (key) {
	  return this._cache.has(key)
	}
	
	CacheDOWN.prototype._cacheDel = function (key, value) {
	  this._cache.del(key)
	}
	
	CacheDOWN.prototype.maxSize = function (size) {
	  this._cache.max = size
	  return this
	}
	
	CacheDOWN.setLeveldown = function (leveldown) {
	  defaultLeveldown = leveldown
	}
	
	module.exports                     = CacheDOWN
	module.exports.factory             = function factory () {
	  var args = Array.prototype.slice.call(arguments)
	  return function makeCacheDOWN () {
	    return CacheDOWN.apply(null, args)
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer, __webpack_require__(294)))

/***/ },
/* 1892 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	var xtend                = __webpack_require__(1893)
	  , AbstractIterator     = __webpack_require__(1894)
	  , AbstractChainedBatch = __webpack_require__(1895)
	
	function AbstractLevelDOWN (location) {
	  if (!arguments.length || location === undefined)
	    throw new Error('constructor requires at least a location argument')
	
	  if (typeof location != 'string')
	    throw new Error('constructor requires a location string argument')
	
	  this.location = location
	}
	
	AbstractLevelDOWN.prototype.open = function (options, callback) {
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('open() requires a callback argument')
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._open == 'function')
	    return this._open(options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.close = function (callback) {
	  if (typeof callback != 'function')
	    throw new Error('close() requires a callback argument')
	
	  if (typeof this._close == 'function')
	    return this._close(callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.get = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('get() requires a callback argument')
	
	  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._get == 'function')
	    return this._get(key, options, callback)
	
	  process.nextTick(function () { callback(new Error('NotFound')) })
	}
	
	AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('put() requires a callback argument')
	
	  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (err = this._checkKeyValue(value, 'value', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  // coerce value to string in node, don't touch it in browser
	  // (indexeddb can store any JS type)
	  if (!this._isBuffer(value) && !process.browser)
	    value = String(value)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._put == 'function')
	    return this._put(key, value, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.del = function (key, options, callback) {
	  var err
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('del() requires a callback argument')
	
	  if (err = this._checkKeyValue(key, 'key', this._isBuffer))
	    return callback(err)
	
	  if (!this._isBuffer(key))
	    key = String(key)
	
	  if (typeof options != 'object')
	    options = {}
	
	  if (typeof this._del == 'function')
	    return this._del(key, options, callback)
	
	  process.nextTick(callback)
	}
	
	AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
	  if (!arguments.length)
	    return this._chainedBatch()
	
	  if (typeof options == 'function')
	    callback = options
	
	  if (typeof callback != 'function')
	    throw new Error('batch(array) requires a callback argument')
	
	  if (!Array.isArray(array))
	    return callback(new Error('batch(array) requires an array argument'))
	
	  if (typeof options != 'object')
	    options = {}
	
	  var i = 0
	    , l = array.length
	    , e
	    , err
	
	  for (; i < l; i++) {
	    e = array[i]
	    if (typeof e != 'object')
	      continue
	
	    if (err = this._checkKeyValue(e.type, 'type', this._isBuffer))
	      return callback(err)
	
	    if (err = this._checkKeyValue(e.key, 'key', this._isBuffer))
	      return callback(err)
	
	    if (e.type == 'put') {
	      if (err = this._checkKeyValue(e.value, 'value', this._isBuffer))
	        return callback(err)
	    }
	  }
	
	  if (typeof this._batch == 'function')
	    return this._batch(array, options, callback)
	
	  process.nextTick(callback)
	}
	
	//TODO: remove from here, not a necessary primitive
	AbstractLevelDOWN.prototype.approximateSize = function (start, end, callback) {
	  if (   start == null
	      || end == null
	      || typeof start == 'function'
	      || typeof end == 'function') {
	    throw new Error('approximateSize() requires valid `start`, `end` and `callback` arguments')
	  }
	
	  if (typeof callback != 'function')
	    throw new Error('approximateSize() requires a callback argument')
	
	  if (!this._isBuffer(start))
	    start = String(start)
	
	  if (!this._isBuffer(end))
	    end = String(end)
	
	  if (typeof this._approximateSize == 'function')
	    return this._approximateSize(start, end, callback)
	
	  process.nextTick(function () {
	    callback(null, 0)
	  })
	}
	
	AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
	  var self = this
	
	  options = xtend(options)
	
	  ;[ 'start', 'end', 'gt', 'gte', 'lt', 'lte' ].forEach(function (o) {
	    if (options[o] && self._isBuffer(options[o]) && options[o].length === 0)
	      delete options[o]
	  })
	
	  options.reverse = !!options.reverse
	
	  // fix `start` so it takes into account gt, gte, lt, lte as appropriate
	  if (options.reverse && options.lt)
	    options.start = options.lt
	  if (options.reverse && options.lte)
	    options.start = options.lte
	  if (!options.reverse && options.gt)
	    options.start = options.gt
	  if (!options.reverse && options.gte)
	    options.start = options.gte
	
	  if ((options.reverse && options.lt && !options.lte)
	    || (!options.reverse && options.gt && !options.gte))
	    options.exclusiveStart = true // start should *not* include matching key
	
	  return options
	}
	
	AbstractLevelDOWN.prototype.iterator = function (options) {
	  if (typeof options != 'object')
	    options = {}
	
	  options = this._setupIteratorOptions(options)
	
	  if (typeof this._iterator == 'function')
	    return this._iterator(options)
	
	  return new AbstractIterator(this)
	}
	
	AbstractLevelDOWN.prototype._chainedBatch = function () {
	  return new AbstractChainedBatch(this)
	}
	
	AbstractLevelDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	AbstractLevelDOWN.prototype._checkKeyValue = function (obj, type) {
	  if (obj === null || obj === undefined)
	    return new Error(type + ' cannot be `null` or `undefined`')
	
	  if (obj === null || obj === undefined)
	    return new Error(type + ' cannot be `null` or `undefined`')
	
	  if (this._isBuffer(obj)) {
	    if (obj.length === 0)
	      return new Error(type + ' cannot be an empty Buffer')
	  } else if (String(obj) === '')
	    return new Error(type + ' cannot be an empty String')
	}
	
	module.exports.AbstractLevelDOWN    = AbstractLevelDOWN
	module.exports.AbstractIterator     = AbstractIterator
	module.exports.AbstractChainedBatch = AbstractChainedBatch
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1893 */
/***/ function(module, exports) {

	module.exports = extend
	
	function extend() {
	    var target = {}
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}


/***/ },
/* 1894 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractIterator (db) {
	  this.db = db
	  this._ended = false
	  this._nexting = false
	}
	
	AbstractIterator.prototype.next = function (callback) {
	  var self = this
	
	  if (typeof callback != 'function')
	    throw new Error('next() requires a callback argument')
	
	  if (self._ended)
	    return callback(new Error('cannot call next() after end()'))
	  if (self._nexting)
	    return callback(new Error('cannot call next() before previous next() has completed'))
	
	  self._nexting = true
	  if (typeof self._next == 'function') {
	    return self._next(function () {
	      self._nexting = false
	      callback.apply(null, arguments)
	    })
	  }
	
	  process.nextTick(function () {
	    self._nexting = false
	    callback()
	  })
	}
	
	AbstractIterator.prototype.end = function (callback) {
	  if (typeof callback != 'function')
	    throw new Error('end() requires a callback argument')
	
	  if (this._ended)
	    return callback(new Error('end() already called on iterator'))
	
	  this._ended = true
	
	  if (typeof this._end == 'function')
	    return this._end(callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractIterator
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1895 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* Copyright (c) 2013 Rod Vagg, MIT License */
	
	function AbstractChainedBatch (db) {
	  this._db         = db
	  this._operations = []
	  this._written    = false
	}
	
	AbstractChainedBatch.prototype._checkWritten = function () {
	  if (this._written)
	    throw new Error('write() already called on this batch')
	}
	
	AbstractChainedBatch.prototype.put = function (key, value) {
	  this._checkWritten()
	
	  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)
	  if (err) throw err
	  err = this._db._checkKeyValue(value, 'value', this._db._isBuffer)
	  if (err) throw err
	
	  if (!this._db._isBuffer(key)) key = String(key)
	  if (!this._db._isBuffer(value)) value = String(value)
	
	  if (typeof this._put == 'function' )
	    this._put(key, value)
	  else
	    this._operations.push({ type: 'put', key: key, value: value })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.del = function (key) {
	  this._checkWritten()
	
	  var err = this._db._checkKeyValue(key, 'key', this._db._isBuffer)
	  if (err) throw err
	
	  if (!this._db._isBuffer(key)) key = String(key)
	
	  if (typeof this._del == 'function' )
	    this._del(key)
	  else
	    this._operations.push({ type: 'del', key: key })
	
	  return this
	}
	
	AbstractChainedBatch.prototype.clear = function () {
	  this._checkWritten()
	
	  this._operations = []
	
	  if (typeof this._clear == 'function' )
	    this._clear()
	
	  return this
	}
	
	AbstractChainedBatch.prototype.write = function (options, callback) {
	  this._checkWritten()
	
	  if (typeof options == 'function')
	    callback = options
	  if (typeof callback != 'function')
	    throw new Error('write() requires a callback argument')
	  if (typeof options != 'object')
	    options = {}
	
	  this._written = true
	
	  if (typeof this._write == 'function' )
	    return this._write(callback)
	
	  if (typeof this._db._batch == 'function')
	    return this._db._batch(this._operations, options, callback)
	
	  process.nextTick(callback)
	}
	
	module.exports = AbstractChainedBatch
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1896 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = LRUCache
	
	// This will be a proper iterable 'Map' in engines that support it,
	// or a fakey-fake PseudoMap in older versions.
	var Map = __webpack_require__(1143)
	
	function naiveLength () { return 1 }
	
	function LRUCache (options) {
	  if (!(this instanceof LRUCache))
	    return new LRUCache(options)
	
	  if (typeof options === 'number')
	    options = { max: options }
	
	  if (!options)
	    options = {}
	
	  this._max = options.max
	  // Kind of weird to have a default max of Infinity, but oh well.
	  if (!this._max || !(typeof this._max === "number") || this._max <= 0 )
	    this._max = Infinity
	
	  this._lengthCalculator = options.length || naiveLength
	  if (typeof this._lengthCalculator !== "function")
	    this._lengthCalculator = naiveLength
	
	  this._allowStale = options.stale || false
	  this._maxAge = options.maxAge || null
	  this._dispose = options.dispose
	  this.reset()
	}
	
	// resize the cache when the max changes.
	Object.defineProperty(LRUCache.prototype, "max",
	  { set : function (mL) {
	      if (!mL || !(typeof mL === "number") || mL <= 0 ) mL = Infinity
	      this._max = mL
	      if (this._length > this._max) trim(this)
	    }
	  , get : function () { return this._max }
	  , enumerable : true
	  })
	
	// resize the cache when the lengthCalculator changes.
	Object.defineProperty(LRUCache.prototype, "lengthCalculator",
	  { set : function (lC) {
	      if (typeof lC !== "function") {
	        this._lengthCalculator = naiveLength
	        this._length = this._lruList.size
	        this._cache.forEach(function (value, key) {
	          value.length = 1
	        })
	      } else {
	        this._lengthCalculator = lC
	        this._length = 0
	        this._cache.forEach(function (value, key) {
	          value.length = this._lengthCalculator(value.value, key)
	          this._length += value.length
	        }, this)
	      }
	
	      if (this._length > this._max) trim(this)
	    }
	  , get : function () { return this._lengthCalculator }
	  , enumerable : true
	  })
	
	Object.defineProperty(LRUCache.prototype, "length",
	  { get : function () { return this._length }
	  , enumerable : true
	  })
	
	Object.defineProperty(LRUCache.prototype, "itemCount",
	  { get : function () { return this._lruList.size }
	  , enumerable : true
	  })
	
	function reverseKeys (map) {
	  // keys live in lruList map in insertion order.
	  // we want them in reverse insertion order.
	  // flip the list of keys.
	  var itemCount = map.size
	  var keys = new Array(itemCount)
	  var i = itemCount
	  map.forEach(function (value, key) {
	    keys[--i] = key
	  })
	
	  return keys
	}
	
	LRUCache.prototype.rforEach = function (fn, thisp) {
	  thisp = thisp || this
	  this._lruList.forEach(function (hit) {
	    forEachStep(this, fn, hit, thisp)
	  }, this)
	}
	
	function forEachStep (self, fn, hit, thisp) {
	  if (isStale(self, hit)) {
	    del(self, hit)
	    if (!self._allowStale) {
	      hit = undefined
	    }
	  }
	  if (hit) {
	    fn.call(thisp, hit.value, hit.key, self)
	  }
	}
	
	
	LRUCache.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this
	
	  var keys = reverseKeys(this._lruList)
	  for (var k = 0; k < keys.length; k++) {
	    var hit = this._lruList.get(keys[k])
	    forEachStep(this, fn, hit, thisp)
	  }
	}
	
	LRUCache.prototype.keys = function () {
	  return reverseKeys(this._lruList).map(function (k) {
	    return this._lruList.get(k).key
	  }, this)
	}
	
	LRUCache.prototype.values = function () {
	  return reverseKeys(this._lruList).map(function (k) {
	    return this._lruList.get(k).value
	  }, this)
	}
	
	LRUCache.prototype.reset = function () {
	  if (this._dispose && this._cache) {
	    this._cache.forEach(function (entry, key) {
	      this._dispose(key, entry.value)
	    }, this)
	  }
	
	  this._cache = new Map() // hash of items by key
	  this._lruList = new Map() // list of items in order of use recency
	  this._mru = 0 // most recently used
	  this._lru = 0 // least recently used
	  this._length = 0 // number of items in the list
	}
	
	LRUCache.prototype.dump = function () {
	  var arr = []
	  var i = 0
	  var size = this._lruList.size
	  return reverseKeys(this._lruList).map(function (k) {
	    var hit = this._lruList.get(k)
	    if (!isStale(this, hit)) {
	      return {
	        k: hit.key,
	        v: hit.value,
	        e: hit.now + (hit.maxAge || 0)
	      }
	    }
	  }, this).filter(function (h) {
	    return h
	  })
	}
	
	LRUCache.prototype.dumpLru = function () {
	  return this._lruList
	}
	
	LRUCache.prototype.set = function (key, value, maxAge) {
	  maxAge = maxAge || this._maxAge
	
	  var now = maxAge ? Date.now() : 0
	  var len = this._lengthCalculator(value, key)
	
	  if (this._cache.has(key)) {
	    if (len > this._max) {
	      del(this, this._cache.get(key))
	      return false
	    }
	
	    var item = this._cache.get(key)
	
	    // dispose of the old one before overwriting
	    if (this._dispose)
	      this._dispose(key, item.value)
	
	    item.now = now
	    item.maxAge = maxAge
	    item.value = value
	    this._length += (len - item.length)
	    item.length = len
	    this.get(key)
	
	    if (this._length > this._max)
	      trim(this)
	
	    return true
	  }
	
	  var hit = new Entry(key, value, this._mru, len, now, maxAge)
	  incMru(this)
	
	  // oversized objects fall out of cache automatically.
	  if (hit.length > this._max) {
	    if (this._dispose) this._dispose(key, value)
	    return false
	  }
	
	  this._length += hit.length
	  this._cache.set(key, hit)
	  this._lruList.set(hit.lu, hit)
	
	  if (this._length > this._max)
	    trim(this)
	
	  return true
	}
	
	LRUCache.prototype.has = function (key) {
	  if (!this._cache.has(key)) return false
	  var hit = this._cache.get(key)
	  if (isStale(this, hit)) {
	    return false
	  }
	  return true
	}
	
	LRUCache.prototype.get = function (key) {
	  return get(this, key, true)
	}
	
	LRUCache.prototype.peek = function (key) {
	  return get(this, key, false)
	}
	
	LRUCache.prototype.pop = function () {
	  var hit = this._lruList.get(this._lru)
	  del(this, hit)
	  return hit || null
	}
	
	LRUCache.prototype.del = function (key) {
	  del(this, this._cache.get(key))
	}
	
	LRUCache.prototype.load = function (arr) {
	  //reset the cache
	  this.reset();
	
	  var now = Date.now()
	  // A previous serialized cache has the most recent items first
	  for (var l = arr.length - 1; l >= 0; l--) {
	    var hit = arr[l]
	    var expiresAt = hit.e || 0
	    if (expiresAt === 0) {
	      // the item was created without expiration in a non aged cache
	      this.set(hit.k, hit.v)
	    } else {
	      var maxAge = expiresAt - now
	      // dont add already expired items
	      if (maxAge > 0) {
	        this.set(hit.k, hit.v, maxAge)
	      }
	    }
	  }
	}
	
	function get (self, key, doUse) {
	  var hit = self._cache.get(key)
	  if (hit) {
	    if (isStale(self, hit)) {
	      del(self, hit)
	      if (!self._allowStale) hit = undefined
	    } else {
	      if (doUse) use(self, hit)
	    }
	    if (hit) hit = hit.value
	  }
	  return hit
	}
	
	function isStale(self, hit) {
	  if (!hit || (!hit.maxAge && !self._maxAge)) return false
	  var stale = false;
	  var diff = Date.now() - hit.now
	  if (hit.maxAge) {
	    stale = diff > hit.maxAge
	  } else {
	    stale = self._maxAge && (diff > self._maxAge)
	  }
	  return stale;
	}
	
	function use (self, hit) {
	  shiftLU(self, hit)
	  hit.lu = self._mru
	  incMru(self)
	  self._lruList.set(hit.lu, hit)
	}
	
	function trim (self) {
	  if (self._length > self._max) {
	    var keys = reverseKeys(self._lruList)
	    for (var k = keys.length - 1; self._length > self._max; k--) {
	      // We know that we're about to delete this one, and also
	      // what the next least recently used key will be, so just
	      // go ahead and set it now.
	      self._lru = keys[k - 1]
	      del(self, self._lruList.get(keys[k]))
	    }
	  }
	}
	
	function shiftLU (self, hit) {
	  self._lruList.delete(hit.lu)
	  if (hit.lu === self._lru)
	    self._lru = reverseKeys(self._lruList).pop()
	}
	
	function del (self, hit) {
	  if (hit) {
	    if (self._dispose) self._dispose(hit.key, hit.value)
	    self._length -= hit.length
	    self._cache.delete(hit.key)
	    shiftLU(self, hit)
	  }
	}
	
	// classy, since V8 prefers predictable objects.
	function Entry (key, value, lu, length, now, maxAge) {
	  this.key = key
	  this.value = value
	  this.lu = lu
	  this.length = length
	  this.now = now
	  if (maxAge) this.maxAge = maxAge
	}
	
	
	// Incrementers and decrementers that loop at MAX_SAFE_INTEGER
	// only relevant for the lu, lru, and mru counters, since they
	// get touched a lot and can get very large. Also, since they
	// only go upwards, and the sets will tend to be much smaller than
	// the max, we can very well assume that a very small number comes
	// after a very large number, rather than before it.
	var maxSafeInt = Number.MAX_SAFE_INTEGER || 9007199254740991
	function intInc (number) {
	  return (number === maxSafeInt) ? 0 : number + 1
	}
	function incMru (self) {
	  do {
	    self._mru = intInc(self._mru)
	  } while (self._lruList.has(self._mru))
	}


/***/ },
/* 1897 */,
/* 1898 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var now = __webpack_require__(1899);
	
	/**
	 * Returns a function, that, as long as it continues to be invoked, will not
	 * be triggered. The function will be called after it stops being called for
	 * N milliseconds. If `immediate` is passed, trigger the function on the
	 * leading edge, instead of the trailing.
	 *
	 * @source underscore.js
	 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
	 * @param {Function} function to wrap
	 * @param {Number} timeout in ms (`100`)
	 * @param {Boolean} whether to execute at the beginning (`false`)
	 * @api public
	 */
	
	module.exports = function debounce(func, wait, immediate){
	  var timeout, args, context, timestamp, result;
	  if (null == wait) wait = 100;
	
	  function later() {
	    var last = now() - timestamp;
	
	    if (last < wait && last > 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      if (!immediate) {
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      }
	    }
	  };
	
	  return function debounced() {
	    context = this;
	    args = arguments;
	    timestamp = now();
	    var callNow = immediate && !timeout;
	    if (!timeout) timeout = setTimeout(later, wait);
	    if (callNow) {
	      result = func.apply(context, args);
	      context = args = null;
	    }
	
	    return result;
	  };
	};


/***/ },
/* 1899 */
/***/ function(module, exports) {

	module.exports = Date.now || now
	
	function now() {
	    return new Date().getTime()
	}


/***/ },
/* 1900 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage
	// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
	// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
	// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
	// v4 adds AMD/UMD, commonJS, and plain browser support
	// v4.1 adds url download capability via solo URL argument (same domain/CORS only)
	// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
	// https://github.com/rndme/download
	
	(function (root, factory) {
		if (true) {
			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports === 'object') {
			// Node. Does not work with strict CommonJS, but
			// only CommonJS-like environments that support module.exports,
			// like Node.
			module.exports = factory();
		} else {
			// Browser globals (root is window)
			root.download = factory();
	  }
	}(this, function () {
	
		return function download(data, strFileName, strMimeType) {
	
			var self = window, // this script is only for browsers anyway...
				defaultMime = "application/octet-stream", // this default mime also triggers iframe downloads
				mimeType = strMimeType || defaultMime,
				payload = data,
				url = !strFileName && !strMimeType && payload,
				anchor = document.createElement("a"),
				toString = function(a){return String(a);},
				myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),
				fileName = strFileName || "download",
				blob,
				reader;
				myBlob= myBlob.call ? myBlob.bind(self) : Blob ;
		  
			if(String(this)==="true"){ //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
				payload=[payload, mimeType];
				mimeType=payload[0];
				payload=payload[1];
			}
	
	
			if(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument
				fileName = url.split("/").pop().split("?")[0];
				anchor.href = url; // assign href prop to temp anchor
			  	if(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:
	        		var ajax=new XMLHttpRequest();
	        		ajax.open( "GET", url, true);
	        		ajax.responseType = 'blob';
	        		ajax.onload= function(e){ 
					  download(e.target.response, fileName, defaultMime);
					};
	        		setTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:
				    return ajax;
				} // end if valid url?
			} // end if url?
	
	
			//go ahead and download dataURLs right away
			if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(payload)){
			
				if(payload.length > (1024*1024*1.999) && myBlob !== toString ){
					payload=dataUrlToBlob(payload);
					mimeType=payload.type || defaultMime;
				}else{			
					return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
						navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
						saver(payload) ; // everyone else can save dataURLs un-processed
				}
				
			}else{//not data url, is it a string with special needs?
				if(/([\x80-\xff])/.test(payload)){			  
					var i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;
					for(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);
				 	payload=new myBlob([tempUiArr], {type: mimeType});
				}		  
			}
			blob = payload instanceof myBlob ?
				payload :
				new myBlob([payload], {type: mimeType}) ;
	
	
			function dataUrlToBlob(strUrl) {
				var parts= strUrl.split(/[:;,]/),
				type= parts[1],
				decoder= parts[2] == "base64" ? atob : decodeURIComponent,
				binData= decoder( parts.pop() ),
				mx= binData.length,
				i= 0,
				uiArr= new Uint8Array(mx);
	
				for(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);
	
				return new myBlob([uiArr], {type: type});
			 }
	
			function saver(url, winMode){
	
				if ('download' in anchor) { //html5 A[download]
					anchor.href = url;
					anchor.setAttribute("download", fileName);
					anchor.className = "download-js-link";
					anchor.innerHTML = "downloading...";
					anchor.style.display = "none";
					document.body.appendChild(anchor);
					setTimeout(function() {
						anchor.click();
						document.body.removeChild(anchor);
						if(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}
					}, 66);
					return true;
				}
	
				// handle non-a[download] safari as best we can:
				if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
					if(/^data:/.test(url))	url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
					if(!window.open(url)){ // popup blocked, offer direct download:
						if(confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")){ location.href=url; }
					}
					return true;
				}
	
				//do iframe dataURL download (old ch+FF):
				var f = document.createElement("iframe");
				document.body.appendChild(f);
	
				if(!winMode && /^data:/.test(url)){ // force a mime that will download:
					url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
				}
				f.src=url;
				setTimeout(function(){ document.body.removeChild(f); }, 333);
	
			}//end saver
	
	
	
	
			if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
				return navigator.msSaveBlob(blob, fileName);
			}
	
			if(self.URL){ // simple fast and modern way using Blob and URL:
				saver(self.URL.createObjectURL(blob), true);
			}else{
				// handle non-Blob()+non-URL browsers:
				if(typeof blob === "string" || blob.constructor===toString ){
					try{
						return saver( "data:" +  mimeType   + ";base64,"  +  self.btoa(blob)  );
					}catch(y){
						return saver( "data:" +  mimeType   + "," + encodeURIComponent(blob)  );
					}
				}
	
				// Blob but not URL support:
				reader=new FileReader();
				reader.onload=function(e){
					saver(this.result);
				};
				reader.readAsDataURL(blob);
			}
			return true;
		}; /* end download() */
	}));


/***/ },
/* 1901 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = exports = exports.MessageClient = __webpack_require__(1902)
	exports.Connection = __webpack_require__(1920)
	exports.Switchboard = __webpack_require__(1924)
	exports.connect = __webpack_require__(1919).connect


/***/ },
/* 1902 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var EventEmitter = __webpack_require__(786).EventEmitter
	var util = __webpack_require__(1130)
	var varint = __webpack_require__(1191)
	var lps = __webpack_require__(1903)
	var reemit = __webpack_require__(1410)
	var debug = __webpack_require__(787)('sendy:messenger')
	var once = __webpack_require__(1052)
	var utils = __webpack_require__(1919)
	var Symmetric = __webpack_require__(1920)
	var UINT32 = 0xffffffff
	var COUNT_PROP = '_sendyCount'
	var ID = 0
	
	function LengthPrefixed (opts) {
	  var self = this
	
	  opts = opts || {}
	
	  EventEmitter.call(this)
	
	  this._client = opts.client || new Symmetric(opts)
	  utils.connect(this, this._client)
	
	  this._id = opts.name || ID++
	  this._client.once('destroy', function () {
	    self._destroyed = true
	    self._client = null
	  })
	
	  this._client.on('reset', function () {
	    self._debug('reset length-prefixed decoder')
	    self._resetDecoder()
	  })
	
	  this._client.on('receive', function (lengthPrefixedData) {
	    process.nextTick(function () {
	      self._decoder.write(lengthPrefixedData)
	    })
	  })
	
	  this._onDecoded = this._onDecoded.bind(this)
	  this._queued = 0
	  this._deliveryCallbacks = []
	  this._resetDecoder()
	}
	
	util.inherits(LengthPrefixed, EventEmitter)
	exports = module.exports = LengthPrefixed
	
	LengthPrefixed.prototype._debug = function () {
	  if (debug.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debug.apply(null, args)
	  }
	}
	
	LengthPrefixed.prototype._resetDecoder = function () {
	  if (this._decoder) {
	    this._decoder.removeListener('data', this._onDecoded)
	  }
	
	  this._decoder = lps.decode()
	  this._decoder.on('data', this._onDecoded)
	  reemit(this._decoder, this, ['progress'])
	}
	
	LengthPrefixed.prototype._onDecoded = function (data) {
	  this.emit('receive', data)
	}
	
	// LengthPrefixed.prototype.reset = function (err) {
	//   if (this._destroyed) return
	
	//   var cbs = err && this._deliveryCallbacks && this._deliveryCallbacks.slice()
	//   this._queued = 0
	//   this._deliveryCallbacks = []
	//   this._resetDecoder()
	//   this._client.reset(err)
	// }
	
	LengthPrefixed.prototype.send = function (msg, cb) {
	  var self = this
	
	  if (this._cancelingPending) {
	    return process.nextTick(function () {
	      self.send(msg, cb)
	    })
	  }
	
	  cb = once(cb || function () {})
	  cb[COUNT_PROP] = ++this._queued
	  this._deliveryCallbacks.push(cb)
	
	  var data = utils.toBuffer(msg)
	  var length = new Buffer(varint.encode(data.length))
	  var totalLength = data.length + length.length
	
	  this._client.send(Buffer.concat([length, data], totalLength), function (err) {
	    if (err) {
	      // less efficient but simpler
	      return self.destroy(err)
	      // // cancel all queued
	      // self._cancelingPending = true
	      // process.nextTick(function () {
	      //   self._cancelingPending = false
	      // })
	
	      // var cbs = self._deliveryCallbacks.slice()
	      // self._deliveryCallbacks.length = 0
	      // self._queued = 0
	      // cbs.forEach(function (fn) {
	      //   fn(err)
	      // })
	
	      // return
	    }
	
	    self._queued--
	    self._deliveryCallbacks.forEach(function (cb) {
	      cb[COUNT_PROP]--
	    })
	
	    var callNow = self._deliveryCallbacks.filter(function (cb) {
	      return cb[COUNT_PROP] === 0
	    })
	
	    self._deliveryCallbacks = self._deliveryCallbacks.filter(function (cb) {
	      return cb[COUNT_PROP] !== 0
	    })
	
	    callNow.forEach(function (cb) {
	      cb()
	    })
	  })
	}
	
	LengthPrefixed.prototype.destroy = function () {
	  if (this._destroyed) return
	
	  this._destroyed = true
	  this._client.destroy()
	  if (this._deliveryCallbacks.length) {
	    var err = new Error('destroyed')
	    var cbs = this._deliveryCallbacks
	    cbs.forEach(function (fn) {
	      fn(err)
	    })
	  }
	
	  this.emit('destroy', err)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1903 */
/***/ function(module, exports, __webpack_require__) {

	exports.encode = __webpack_require__(1904)
	exports.decode = __webpack_require__(1918)


/***/ },
/* 1904 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var varint = __webpack_require__(1905)
	var stream = __webpack_require__(1909)
	var util = __webpack_require__(1130)
	
	var pool = new Buffer(10 * 1024)
	var used = 0
	
	var Encoder = function () {
	  if (!(this instanceof Encoder)) return new Encoder()
	  stream.Transform.call(this)
	}
	
	util.inherits(Encoder, stream.Transform)
	
	Encoder.prototype._transform = function (data, enc, cb) {
	  varint.encode(data.length, pool, used)
	  used += varint.encode.bytes
	
	  this.push(pool.slice(used - varint.encode.bytes, used))
	  this.push(data)
	
	  if (pool.length - used < 100) {
	    pool = new Buffer(10 * 1024)
	    used = 0
	  }
	
	  cb()
	}
	
	module.exports = Encoder
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1905 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	    encode: __webpack_require__(1906)
	  , decode: __webpack_require__(1907)
	  , encodingLength: __webpack_require__(1908)
	}


/***/ },
/* 1906 */
/***/ function(module, exports) {

	module.exports = encode
	
	var MSB = 0x80
	  , REST = 0x7F
	  , MSBALL = ~REST
	  , INT = Math.pow(2, 31)
	
	function encode(num, out, offset) {
	  out = out || []
	  offset = offset || 0
	  var oldOffset = offset
	
	  while(num >= INT) {
	    out[offset++] = (num & 0xFF) | MSB
	    num /= 128
	  }
	  while(num & MSBALL) {
	    out[offset++] = (num & 0xFF) | MSB
	    num >>>= 7
	  }
	  out[offset] = num | 0
	  
	  encode.bytes = offset - oldOffset + 1
	  
	  return out
	}


/***/ },
/* 1907 */
/***/ function(module, exports) {

	module.exports = read
	
	var MSB = 0x80
	  , REST = 0x7F
	
	function read(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length
	
	  do {
	    if (counter >= l) {
	      read.bytes = 0
	      throw new RangeError('Could not decode varint')
	    }
	    b = buf[counter++]
	    res += shift < 28
	      ? (b & REST) << shift
	      : (b & REST) * Math.pow(2, shift)
	    shift += 7
	  } while (b >= MSB)
	
	  read.bytes = counter - offset
	
	  return res
	}


/***/ },
/* 1908 */
/***/ function(module, exports) {

	
	var N1 = Math.pow(2,  7)
	var N2 = Math.pow(2, 14)
	var N3 = Math.pow(2, 21)
	var N4 = Math.pow(2, 28)
	var N5 = Math.pow(2, 35)
	var N6 = Math.pow(2, 42)
	var N7 = Math.pow(2, 49)
	var N8 = Math.pow(2, 56)
	var N9 = Math.pow(2, 63)
	
	module.exports = function (value) {
	  return (
	    value < N1 ? 1
	  : value < N2 ? 2
	  : value < N3 ? 3
	  : value < N4 ? 4
	  : value < N5 ? 5
	  : value < N6 ? 6
	  : value < N7 ? 7
	  : value < N8 ? 8
	  : value < N9 ? 9
	  :              10
	  )
	}


/***/ },
/* 1909 */,
/* 1910 */,
/* 1911 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1912 */,
/* 1913 */,
/* 1914 */,
/* 1915 */,
/* 1916 */,
/* 1917 */,
/* 1918 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var varint = __webpack_require__(1905)
	var stream = __webpack_require__(1909)
	var util = __webpack_require__(1130)
	
	var Decoder = function (opts) {
	  if (!(this instanceof Decoder)) return new Decoder(opts)
	  stream.Transform.call(this)
	
	  this._missing = 0
	  this._message = null
	  this._limit = opts && opts.limit || 0
	  this._allowEmpty = !!(opts && opts.allowEmpty)
	  this._prefix = new Buffer(this._limit ? varint.encodingLength(this._limit) : 100)
	  this._ptr = 0
	
	  if (this._allowEmpty) {
	    this._readableState.highWaterMark = 16
	    this._readableState.objectMode = true
	  }
	}
	
	util.inherits(Decoder, stream.Transform)
	
	Decoder.prototype._push = function (message) {
	  this._ptr = 0
	  this._missing = 0
	  this._message = null
	  this.push(message)
	}
	
	Decoder.prototype._parseLength = function (data, offset) {
	  for (offset; offset < data.length; offset++) {
	    if (this._ptr >= this._prefix.length) return this._prefixError(data)
	    this._prefix[this._ptr++] = data[offset]
	    if (!(data[offset] & 0x80)) {
	      this._missing = varint.decode(this._prefix)
	      if (this._limit && this._missing > this._limit) return this._prefixError(data)
	      if (!this._missing && this._allowEmpty) this._push(Buffer(0))
	      this._ptr = 0
	      return offset + 1
	    }
	  }
	  return data.length
	}
	
	Decoder.prototype._prefixError = function (data) {
	  this.emit('error', new Error('Message is larger than max length'))
	  return data.length
	}
	
	Decoder.prototype._parseMessage = function (data, offset) {
	  var free = data.length - offset
	  var missing = this._missing
	
	  if (!this._message) {
	    if (missing <= free) { // fast track - no copy
	      this._push(data.slice(offset, offset + missing))
	      return offset + missing
	    }
	    this._message = new Buffer(missing)
	  }
	
	  // TODO: add opt-in "partial mode" to completely avoid copys
	  data.copy(this._message, this._ptr, offset, offset + missing)
	
	  if (missing <= free) {
	    this._push(this._message)
	    return offset + missing
	  }
	
	  this._missing -= free
	  this._ptr += free
	
	  return data.length
	}
	
	Decoder.prototype._transform = function (data, enc, cb) {
	  var offset = 0
	
	  while (offset < data.length) {
	    if (this._missing) offset = this._parseMessage(data, offset)
	    else offset = this._parseLength(data, offset)
	  }
	
	  if (this._message && this._events.progress) {
	    var total = this._message.length
	    var progress = total - this._missing
	    if (progress) {
	      this.emit('progress', {
	        total: total,
	        progress: progress
	      })
	    }
	  }
	
	  cb()
	}
	
	module.exports = Decoder
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1919 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var reemit = __webpack_require__(1410)
	var slice = Array.prototype.slice
	
	exports.toBuffer = function toBuffer (data) {
	  if (Buffer.isBuffer(data)) return data
	
	  if (typeof data === 'object') {
	    data = JSON.stringify(data)
	  }
	
	  if (typeof data === 'string') {
	    return new Buffer(data)
	  } else {
	    throw new Error('expected plain javascript object, Buffer, or string')
	  }
	}
	
	exports.connect = function connect (/* pipeline */) {
	  var top = arguments[0]
	  var rest = slice.call(arguments, 1)
	  rest.reduce(function (prev, next) {
	    // bubble 'send' event
	    reemit(next, prev, ['send', 'pause', 'resume', 'timeout'])
	    prev.receive = function () {
	      // -> forward receive call
	      return next.receive.apply(next, arguments)
	    }
	
	    if (!prev.pause) prev.pause = next.pause.bind(next)
	    if (!prev.resume) prev.resume = next.resume.bind(next)
	    if (!prev.setTimeout && !prev.clearTimeout) {
	      prev.setTimeout = next.setTimeout.bind(next)
	      prev.clearTimeout = next.clearTimeout.bind(next)
	    }
	  }, top)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1920 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var cyclist = __webpack_require__(1921)
	var util = __webpack_require__(1130)
	var EventEmitter = __webpack_require__(786).EventEmitter
	var debugConnection = __webpack_require__(787)('sendy:cxn')
	var debugServer = __webpack_require__(787)('sendy:server')
	var debugClient = __webpack_require__(787)('sendy:client')
	var debugSymmetric = __webpack_require__(787)('sendy:symmetric')
	var reemit = __webpack_require__(1410)
	var BitArray = __webpack_require__(1922)
	var utils = __webpack_require__(1919)
	
	var EXTENSION    = 0
	var VERSION      = 1
	var UINT16       = 0xffff
	var ID_MASK      = 0xf << 4
	var MTU          = 1500 // tcp-ish
	
	var PACKET_DATA  = 0 << 4
	var PACKET_FIN   = 1 << 4
	var PACKET_STATE = 2 << 4
	var PACKET_RESET = 3 << 4
	var PACKET_SYN   = 4 << 4
	
	var MIN_PACKET_SIZE     = 20
	var DEFAULT_WINDOW_SIZE = 1 << 18
	var CLOSE_GRACE         = 3000
	var KEEP_ALIVE_INTERVAL = 10 * 1000
	var RESEND_INTERVAL     = 1000
	
	var BUFFER_SIZE         = 512
	var RECV_IDS = BitArray(UINT16)
	
	var uint32 = function (n) {
	  return n >>> 0
	}
	
	var uint16 = function (n) {
	  return n & UINT16
	}
	
	var hrtime = process.hrtime ?
	  process.hrtime.bind(process) :
	  __webpack_require__(1923)
	
	var timestamp = function () {
	  var offset = hrtime()
	  var then = Date.now() * 1000
	
	  return function () {
	    var diff = hrtime(offset)
	    // microseconds
	    return uint32(then + 1000000 * diff[0] + ((diff[1] / 1000) | 0))
	  }
	}()
	
	var bufferToPacket = function (buffer) {
	  var packet = {}
	  packet.id = buffer[0] & ID_MASK
	  packet.connection = buffer.readUInt16BE(2)
	  packet.timestamp = buffer.readUInt32BE(4)
	  packet.timediff = buffer.readUInt32BE(8)
	  packet.window = buffer.readUInt32BE(12)
	  packet.seq = buffer.readUInt16BE(16)
	  packet.ack = buffer.readUInt16BE(18)
	  packet.data = buffer.length > 20 ? buffer.slice(20) : null
	  return packet
	}
	
	var packetToBuffer = function (packet) {
	  if (packet.buffer) return packet.buffer
	
	  var buffer = new Buffer(20 + (packet.data ? packet.data.length : 0))
	  buffer[0] = packet.id | VERSION
	  buffer[1] = EXTENSION
	  buffer.writeUInt16BE(packet.connection, 2)
	  buffer.writeUInt32BE(packet.timestamp, 4)
	  buffer.writeUInt32BE(packet.timediff, 8)
	  buffer.writeUInt32BE(packet.window, 12)
	  buffer.writeUInt16BE(packet.seq, 16)
	  buffer.writeUInt16BE(packet.ack, 18)
	  if (packet.data) packet.data.copy(buffer, 20)
	  return packet.buffer = buffer
	}
	
	var packetType = function (packet) {
	  return packet.id === PACKET_DATA
	    ? 'data' : packet.id === PACKET_STATE
	      ? 'ack' : packet.id === PACKET_SYN
	        ? 'syn' : packet.id === PACKET_FIN
	          ? 'fin' : 'reset'
	}
	
	var stateName = function (state) {
	  for (var p in STATE) {
	    if (state === STATE[p]) return p
	  }
	}
	
	var createPacket = function (connection, id, data) {
	  return {
	    id: id,
	    connection: id === PACKET_SYN ? connection._recvId : connection._sendId,
	    seq: connection._seq,
	    ack: connection._ack,
	    timestamp: timestamp(),
	    timediff: 0,
	    window: DEFAULT_WINDOW_SIZE,
	    data: data,
	    sent: 0
	  }
	}
	
	var nextConnectionId = function () {
	  return Math.random() * UINT16 | 0
	}
	
	var noop = function () {}
	var CID = 0
	var SID = 0
	var MID = 0
	var CONNECTIONS = {}
	
	function Connection (opts) {
	  var self = this
	  opts = opts || {}
	
	  this._opts = opts
	  this._mtu = opts.mtu || MTU
	  var resendInterval = opts.resendInterval || RESEND_INTERVAL
	  this._resendTimeoutMicroseconds = resendInterval * 1000
	  // var keepAliveInterval = opts.keepAliveInterval || KEEP_ALIVE_INTERVAL
	
	  EventEmitter.call(this)
	
	  this.setMaxListeners(0)
	  this._id = opts.name || CID++
	  this._paused = false
	  this._msgQueue = []
	  this._writeBuffer = []
	  this._deliveryCallbacks = cyclist(BUFFER_SIZE)
	  this._outgoing = cyclist(BUFFER_SIZE)
	  this._incoming = cyclist(BUFFER_SIZE)
	
	  this._inflightPackets = 0
	  // this._alive = false
	
	  var resend = setInterval(this._resend.bind(this), resendInterval)
	  // var keepAlive = setInterval(this._keepAlive.bind(this), keepAliveInterval)
	  this._keepAlive = this._keepAlive.bind(this)
	
	  this.once('close', function () {
	    self._debug('closed')
	    clearInterval(resend)
	    // clearInterval(keepAlive)
	    self.clearTimeout()
	    self._cancelPending()
	    delete CONNECTIONS[self._id]
	  })
	
	  ;['connect', 'resume', 'flush'].forEach(function (event) {
	    self.on(event, self._flush)
	  })
	
	  Object.defineProperty(this, '_backedUp', {
	    get: function () {
	      return self._writeBuffer.reduce(function (total, data) {
	        return total + data.length
	        // return total + self._countRequiredPackets(data)
	      }, 0)
	    }
	  })
	
	  // not true, but makes idleTime() more sane
	  this._lastReceivedTimestamp = Date.now()
	}
	
	Connection.MTU = MTU
	util.inherits(Connection, EventEmitter)
	
	Connection.prototype._onconnected = function () {
	  if (!this._connecting) return
	
	  this._debug('connected')
	  this._connecting = false
	  this.emit('connect')
	}
	
	Connection.prototype._debug = function () {
	  if (debugConnection.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debugConnection.apply(null, args)
	  }
	}
	
	Connection.prototype.setTimeout = function(millis, cb) {
	  var self = this
	
	  this.clearTimeout()
	  if (!millis) return
	
	  this._idleTimeoutMillis = millis
	  this._idleTimeout = setTimeout(function () {
	    var now = Date.now()
	    self._debug('timed out after ' + self.idleTime() + 'ms')
	    if (self.listenerCount('timeout')) {
	      self.emit('timeout', millis)
	    } else {
	      self.close()
	    }
	  }, millis)
	
	  unref(this._idleTimeout)
	  if (cb) this.once('timeout', cb)
	}
	
	Connection.prototype.clearTimeout = function () {
	  clearTimeout(this._idleTimeout)
	  delete this._idleTimeout
	  delete this._idleTimeoutMillis
	}
	
	Connection.prototype.close =
	Connection.prototype.destroy = function () {
	  if (this._closed) throw new Error('closed')
	
	  this._debug('closing')
	  this.clearTimeout()
	  clearTimeout(this._keepAliveTimeout)
	  this._closed = true
	  this.emit('close')
	}
	
	Connection.prototype.send = function (data, ondelivered) {
	  var self = this
	  if (this._closed) return
	  if (this._initiator !== false) this.connect()
	
	  this.resume()
	
	  data = utils.toBuffer(data)
	  this._msgQueue.push([data, ondelivered]) // normalized args
	
	  // register callback for ack for last piece
	  var bytesQueued = this._backedUp + data.length
	  var packetsTogo = Math.ceil(bytesQueued / this._mtu)
	  this._putDeliveryCallback(packetsTogo, function (err) {
	    if (!err) self._debug('delivered message!')
	    var args = self._msgQueue.shift()
	    if (args && args[1]) args[1](err)
	  })
	
	  this._bufferData(data)
	  this._flush()
	}
	
	Connection.prototype._putDeliveryCallback = function (numAcks, fn) {
	  // how many times to go around the circular buffer
	  fn._sendyRoundsLeft = Math.ceil(numAcks / BUFFER_SIZE)
	  var idx = this._seq + numAcks - 1 // current seq value is for the next packet
	  var cbs = this._deliveryCallbacks.get(idx) || []
	  cbs.push(fn)
	  this._deliveryCallbacks.put(idx, cbs)
	}
	
	Connection.prototype._callDeliveryCallbacks = function (idx) {
	  var cbs = this._deliveryCallbacks.get(idx)
	  if (!cbs) return
	
	  var l = cbs.length
	  var callNow = []
	  var callLater = []
	  for (var i = 0; i < l; i++) {
	    var fn = cbs[i]
	    fn._sendyRoundsLeft--
	    if (fn._sendyRoundsLeft <= 0) {
	      callNow.push(fn)
	    } else {
	      callLater.push(fn)
	    }
	  }
	
	  if (callLater.length === 0) this._deliveryCallbacks.del(idx)
	  else this._deliveryCallbacks.put(callLater)
	
	  if (!callNow.length) return
	
	  process.nextTick(function () {
	    callNow.forEach(call)
	  })
	}
	
	Connection.prototype._flush = function () {
	  if (this._connecting || this._paused || !this._writeBuffer.length || !this._writable()) return
	
	  var length = 0
	  var data = this._writeBuffer.shift()
	  while (length < this._mtu && this._writeBuffer.length) {
	    data = Buffer.concat([data, this._writeBuffer.shift()])
	  }
	
	  while (this._writable()) {
	    var payload = this._payload(data)
	
	    this._sendOutgoing(createPacket(this, PACKET_DATA, payload))
	
	    if (payload.length === data.length) return this._flush()
	    data = data.slice(payload.length)
	  }
	
	  this._writeBuffer.unshift(data)
	}
	
	Connection.prototype._bufferData = function (data) {
	  this._writeBuffer.push(data)
	}
	
	Connection.prototype._writable = function () {
	  // !this._connecting && !this._paused &&
	  return this._inflightPackets < BUFFER_SIZE - 1
	}
	
	Connection.prototype._payload = function (data) {
	  if (data.length > this._mtu) return data.slice(0, this._mtu)
	  return data
	}
	
	Connection.prototype._resend = function () {
	  if (this._paused || !this._inflightPackets) return
	
	  var offset = this._seq - this._inflightPackets
	  var first = this._outgoing.get(offset)
	  if (!first) return
	
	  var timeout = this._resendTimeoutMicroseconds / 2
	  var now = timestamp()
	  if (uint32(now - first.sent) < timeout) return
	
	  for (var i = 0; i < this._inflightPackets; i++) {
	    var packet = this._outgoing.get(offset + i)
	    if (uint32(now - packet.sent) < timeout) continue
	
	    if (debugConnection.enabled) {
	      this._debug('resending ' + packetType(packet))
	    }
	
	    this._transmit(packet)
	  }
	}
	
	Connection.prototype._keepAlive = function () {
	  this._debug('sending keep-alive')
	  this._sendAck()
	}
	
	Connection.prototype._recvAck = function (ack) {
	  var offset = this._seq - this._inflightPackets
	  var acked = uint16(ack - offset) + 1
	
	  if (acked >= BUFFER_SIZE) return // sanity check
	
	  var callbacks = []
	  for (var i = 0; i < acked; i++) {
	    var seq = offset + i
	    var packet = this._outgoing.del(seq)
	    this._callDeliveryCallbacks(seq)
	    if (packet) {
	      this._inflightPackets--
	    }
	    // else {
	    //   console.log(this._id, 'boo', seq)
	    // }
	  }
	
	  if (!this._inflightPackets) {
	    this.emit('flush')
	  } else {
	    // this._writable() may now be true
	    this._flush()
	  }
	}
	
	// Connection.prototype.reset = function (err) {
	//   this._cancelPending(err)
	//   this._reset() // don't resend
	// }
	
	Connection.prototype._cancelPending = function (err) {
	  err = err || new Error('connection was reset')
	  this._debug('canceling pending', err)
	  var cbArrays = this._deliveryCallbacks.values.slice()
	  this._deliveryCallbacks = cyclist(BUFFER_SIZE)
	
	  cbArrays.forEach(function (arr) {
	    if (arr) {
	      arr.forEach(function (fn) {
	        fn(err)
	      })
	    }
	  })
	}
	
	Connection.prototype._resetTimeout = function () {
	  if ('_idleTimeout' in this) {
	    this._debug('resetting timeout')
	    this.setTimeout(this._idleTimeoutMillis)
	  }
	}
	
	Connection.prototype.idleTime = function () {
	  return Date.now() - (this._lastReceivedTimestamp || 0)
	}
	
	Connection.prototype.connect = function () {
	  if (this._initiator) return
	
	  this._initiator = true
	  this._connecting = true
	  this._recvId = nextConnectionId()
	  this._sendId = uint16(this._recvId + 1)
	  this._seq = (Math.random() * UINT16) | 0
	  this._ack = 0
	  this._sendOutgoing(createPacket(this, PACKET_SYN, null))
	}
	
	Connection.prototype.receive = function (packet) {
	  this._lastReceivedTimestamp = Date.now()
	  this._resetTimeout()
	  // this._debug('received ' + packetType(packet), ', connection:', packet.connection)
	  if (packet.id === PACKET_SYN) {
	    if (this._initiator) {
	      this._debug('outbound connection, rejecting incoming SYN')
	      return this._transmit(createPacket(this, PACKET_RESET))
	    }
	
	    this._initiator = false
	    this._recvId = uint16(packet.connection+1)
	    this._sendId = packet.connection
	    this._seq = (Math.random() * UINT16) | 0
	    this._ack = packet.seq
	    this._sendAck()
	    this._onconnected()
	    return
	  }
	
	  if (packet.id === PACKET_RESET) {
	    this._debug('received RESET, closing')
	    this.close()
	    return
	  }
	
	  if (this._connecting) {
	    if (packet.id !== PACKET_STATE) return //this._incoming.put(packet.seq, packet)
	
	    this._ack = uint16(packet.seq-1)
	    this._recvAck(packet.ack)
	    this._onconnected()
	
	    packet = this._incoming.del(packet.seq)
	    if (!packet) return
	  }
	
	  this._recvAck(packet.ack)
	  if (packet.id === PACKET_STATE) return
	
	  var place = uint16(packet.seq - this._ack)
	  if (!place || place >= BUFFER_SIZE) {
	    return this._sendAck() // old packet
	  }
	
	  this._incoming.put(packet.seq, packet)
	  while (packet = this._incoming.del(this._ack + 1)) {
	    this._ack = uint16(this._ack + 1)
	    if (packet.id === PACKET_DATA) {
	      this.emit('receive', packet.data)
	    }
	
	    if (packet.id === PACKET_FIN) {
	      this._debug('received FIN')
	      return this.close()
	    }
	  }
	
	  this._sendAck()
	}
	
	Connection.prototype._sendAck = function () {
	  this._transmit(createPacket(this, PACKET_STATE, null)); // TODO: make this delayed
	}
	
	Connection.prototype._sendOutgoing = function (packet) {
	  this._outgoing.put(packet.seq, packet)
	  this._seq = uint16(this._seq + 1)
	  this._inflightPackets++
	  this._transmit(packet)
	}
	
	// Connection.prototype._cancelPacket = function (packet) {
	//   var outgoing = this._outgoing.get(packet.seq)
	//   if (outgoing === packet) {
	//     this._outgoing.del(packet.seq)
	//     this._inflightPackets--
	//   }
	// }
	
	Connection.prototype._transmit = function (packet) {
	  packet.sent = packet.sent === 0 ? packet.timestamp : timestamp()
	  var message = packetToBuffer(packet)
	  this._alive = true
	  // this._debug('sending ' + packetType(packet), 'seq:', packet.seq, ', ack:', packet.ack, ', connection:', packet.connection)
	  this.emit('send', message)
	
	  clearTimeout(this._keepAliveTimeout)
	  this._keepAliveTimeout = setTimeout(this._keepAlive, this._opts.keepAliveInterval || KEEP_ALIVE_INTERVAL)
	  unref(this._keepAliveTimeout)
	}
	
	Connection.prototype.pause = function () {
	  if (this._paused) return
	  this._paused = true
	  this.emit('pause')
	}
	
	Connection.prototype.resume = function () {
	  if (!this._paused) return
	  this._paused = false
	  this.emit('resume')
	}
	
	Connection.prototype.isPaused = function () {
	  return this._paused
	}
	
	function Server (opts) {
	  if (!(this instanceof Server)) return new Server(opts)
	
	  EventEmitter.call(this)
	  this._connections = {}
	  this._opts = opts || {}
	  this._id = this._opts.name || SID++
	}
	
	util.inherits(Server, EventEmitter)
	
	Server.prototype.receive = function (message) {
	  if (message.length < MIN_PACKET_SIZE) return
	
	  var packet = Buffer.isBuffer(message) ? bufferToPacket(message) : message
	  if (this._closed && packet.id !== PACKET_FIN && packet.id !== PACKET_STATE) {
	    return
	  }
	
	  // this._debug('received ' + packetType(packet), ', connection:', packet.connection, Object.keys(this._connections))
	  var connections = this._connections
	  var id = packet.id === PACKET_SYN ? uint16(packet.connection+1) : packet.connection
	  var conn = connections[id]
	  if (conn) return conn.receive(packet)
	  if (packet.id !== PACKET_SYN) {
	    if (packet.id !== PACKET_RESET) {
	      // we don't know whether we were the initiator
	      // of this lost connection, so send 2 reset packets
	      // if we were the initiator, our sendId = packet.connection + 1
	      // if we were the receiver, our sendId = packet.connection
	      this._debug('received packet from non-existent connection, sending reset')
	      ;[packet.connection, packet.connection + 1].forEach(function (sendId) {
	        var reset = createPacket({
	          _sendId: sendId,
	          seq: 0,
	          ack: 0
	        }, PACKET_RESET)
	
	        this.emit('send', packetToBuffer(reset))
	      }, this)
	    }
	
	    return
	  }
	
	  conn = connections[id] = new Connection(this._opts)
	  this._debug('created new inbound connection ' + conn._id)
	  if (this._timeoutMillis) {
	    conn.setTimeout(this._timeoutMillis)
	  }
	
	  conn.once('close', function() {
	    delete connections[id]
	  })
	
	  this.emit('connection', conn)
	  reemit(conn, this, ['send', 'receive'])
	  conn.receive(packet)
	}
	
	Server.prototype._debug = function () {
	  if (debugServer.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debugServer.apply(null, args)
	  }
	}
	
	// Server.prototype._reset = function (resend) {
	//   for (var id in this._connections) {
	//     this._connections[id].destroy(resend)
	//   }
	// }
	
	Server.prototype.close =
	Server.prototype.destroy = function () {
	  if (this._closed) return
	
	  this._closed = true
	  this.connections().forEach(function (c) {
	    c.close()
	  })
	
	  this._debug('closing')
	  this.emit('close')
	}
	
	Server.prototype.setTimeout = function (millis) {
	  this._timeoutMillis = millis
	  for (var id in this._connections) {
	    this._connections[id].setTimeout(millis)
	  }
	}
	
	Server.prototype.clearTimeout = function () {
	  delete this._timeoutMillis
	  for (var id in this._connections) {
	    this._connections[id].clearTimeout()
	  }
	}
	
	Server.prototype.connections = function () {
	  return Object.keys(this._connections).map(function (cid) {
	    return this._connections[cid]
	  }, this)
	}
	
	function SymmetricClient (opts) {
	  EventEmitter.call(this)
	  this._opts = opts || {}
	  this._id = this._opts.name || MID++
	  this._reset()
	}
	
	util.inherits(SymmetricClient, EventEmitter)
	
	SymmetricClient.prototype._reset = function (resend) {
	  var inbound = this._inbound
	  if (inbound) {
	    this._debug('resetting symmetric client')
	    inbound.close()
	    inbound.removeAllListeners()
	  }
	
	  var outbound = this._outbound
	  if (this._dedicatedOutbound) {
	    outbound.close()
	    outbound.removeAllListeners()
	  }
	
	  this._inbound = new Server(this._opts)
	  reemit(this._inbound, this, ['send', 'receive', 'connection'])
	
	  if (resend) {
	    this._resendPending()
	  } else {
	    this._pending = []
	    if (this._opts.autoConnect !== false) {
	      this._createOutboundConnection()
	    }
	  }
	}
	
	SymmetricClient.prototype._resendPending = function () {
	  var pending = this._pending && this._pending.slice()
	  this._pending = []
	  if (pending) {
	    pending.forEach(function (args) {
	      this.send.apply(this, args)
	    }, this)
	  }
	}
	
	SymmetricClient.prototype._createOutboundConnection = function () {
	  var self = this
	
	  this._dedicatedOutbound = true
	  // TODO: reuse existing inbound connection if possible
	
	  this._outbound = new Connection(this._opts)
	  this._debug('created new outbound connection ' + this._outbound._id)
	
	  this._outbound.once('close', function () {
	    if (self._closed) return
	
	    self._createOutboundConnection()
	    if (!self._pending.length) return
	
	    self._debug('resending pending')
	    self._resendPending()
	  })
	
	  reemit(this._outbound, this, ['send', 'receive', 'timeout', 'pause', 'resume'])
	  if (this._timeoutMillis) {
	    this._outbound.setTimeout(this._timeoutMillis)
	  }
	
	  process.nextTick(function () {
	    if (!self._closed) {
	      self._outbound.connect()
	    }
	  })
	}
	
	SymmetricClient.prototype.receive = function (message) {
	  var packet = bufferToPacket(message)
	  // this._debug('received ' + packetType(packet), ', connection:', packet.connection)
	  var isForOutbound
	  if (this._outbound) {
	    isForOutbound = (
	      packet.connection === this._outbound._recvId ||
	      // see rationale in server.receive
	      (packet.id === PACKET_RESET && packet.connection === this._outbound._sendId)
	    )
	  }
	
	  var debug = debugSymmetric.enabled
	  if (isForOutbound) {
	    if (debug) this._debug('receiving', packetType(packet), 'in outbound')
	    this._outbound.receive(packet)
	  } else {
	    if (debug) this._debug('receiving', packetType(packet), 'in inbound')
	    this._inbound.receive(packet)
	  }
	}
	
	SymmetricClient.prototype.send = function (message, ondelivered) {
	  var self = this
	  ondelivered = ondelivered || noop
	
	  if (!this._outbound) {
	    // TODO: reuse inbound connection, if exists
	    // get freshest connection
	    // this._outbound = this._inbound.connections().sort(decreasingFreshness)[0]
	    // if (this._outbound) {
	    //   this._dedicatedOutbound = false
	    //   reemit(this._outbound, this, ['timeout', 'pause', 'resume'])
	    //   this._debug('reusing existing inbound connection for outbound')
	    // } else {
	      this._createOutboundConnection()
	    // }
	  }
	
	  this._pending.push([message, ondelivered])
	  this._outbound.send(message, function (err) {
	    if (self._closed) return
	
	    self._pending.shift()
	    if (err) {
	      // requeue
	      process.nextTick(function () {
	        self.send(message, ondelivered)
	      })
	    } else {
	      ondelivered(err)
	    }
	  })
	}
	
	SymmetricClient.prototype.close =
	SymmetricClient.prototype.destroy = function () {
	  if (this._closed) return
	
	  this._debug('closing')
	  this._closed = true
	  this._inbound.close()
	  if (this._dedicatedOutbound) {
	    this._outbound.close()
	  }
	}
	
	SymmetricClient.prototype.setTimeout = function (millis) {
	  this._timeoutMillis = millis
	  this._inbound.setTimeout(millis)
	  if (this._outbound) {
	    this._outbound.setTimeout(millis)
	  }
	}
	
	SymmetricClient.prototype.clearTimeout = function () {
	  this._inbound.clearTimeout()
	  if (this._outbound) {
	    this._outbound.clearTimeout()
	  }
	}
	
	SymmetricClient.prototype.pause = function () {
	  if (this._outbound) {
	    this._outbound.pause()
	  }
	}
	
	SymmetricClient.prototype.resume = function () {
	  if (this._outbound) {
	    this._outbound.resume()
	  }
	}
	
	SymmetricClient.prototype.isPaused = function () {
	  if (this._outbound) {
	    return this._outbound.isPaused()
	  }
	}
	
	SymmetricClient.prototype.outboundConnection = function () {
	  return this._outbound
	}
	
	SymmetricClient.prototype.inboundConnections = function () {
	  return this._inbound.connections()
	}
	
	SymmetricClient.prototype._debug = function () {
	  if (debugSymmetric.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debugSymmetric.apply(null, args)
	  }
	}
	
	exports = module.exports = SymmetricClient
	exports.Connection = Connection
	exports.Server = Server
	exports.createServer = Server
	exports.packetToBuffer = packetToBuffer
	exports.bufferToPacket = bufferToPacket
	// exports.CONNECTIONS = CONNECTIONS
	
	function call (fn) {
	  fn()
	}
	
	function decreasingFreshness (a, b) {
	  return a.idleTime() - b.idleTime()
	}
	
	function unref (obj) {
	  if (obj.unref) obj.unref()
	}
	
	// function oneTickClose (emitter, cb) {
	//   cb = cb || noop
	
	//   if (emitter._closed) return process.nextTick(cb)
	
	//   emitter.once('close', cb)
	//   if (emitter._closing) return
	
	//   emitter._closing = true
	//   process.nextTick(function () {
	//     emitter._closed = true
	//     emitter.emit('close')
	//   })
	
	//   return true
	// }
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1921 */
/***/ function(module, exports) {

	var twoify = function (n) {
	  if (n && !(n & (n - 1))) return n
	  var p = 1
	  while (p < n) p <<= 1
	  return p
	}
	
	var Cyclist = function (size) {
	  if (!(this instanceof Cyclist)) return new Cyclist(size)
	  size = twoify(size)
	  this.mask = size - 1
	  this.size = size
	  this.values = new Array(size)
	}
	
	Cyclist.prototype.put = function (index, val) {
	  var pos = index & this.mask
	  this.values[pos] = val
	  return pos
	}
	
	Cyclist.prototype.get = function (index) {
	  return this.values[index & this.mask]
	}
	
	Cyclist.prototype.del = function (index) {
	  var pos = index & this.mask
	  var val = this.values[pos]
	  this.values[pos] = undefined
	  return val
	}
	
	module.exports = Cyclist


/***/ },
/* 1922 */
/***/ function(module, exports) {

	module.exports = function bitArray (size) {
	  var buckets = []
	
	  for (var i = 0; i < Math.ceil(size / 32); i++) {
	    buckets[i] = 0
	  }
	
	  return {
	    size: function () {
	      return size
	    },
	
	    set: function (index, value) {
	      var i = Math.floor(index / 32)
	
	      // Since "undefined | 1 << index" is equivalent to "0 | 1 << index" we do not need to initialise the array explicitly here.
	      if (value) {
	        buckets[i] |= 1 << index - i * 32
	      } else {
	        buckets[i] &= ~(1 << index - i * 32)
	      }
	    },
	
	    get: function (index) {
	      var i = Math.floor(index / 32)
	      return buckets[i] & (1 << index - i * 32)
	    }
	  }
	}


/***/ },
/* 1923 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {module.exports = process.hrtime || hrtime
	
	// polyfil for window.performance.now
	var performance = global.performance || {}
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() }
	
	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3
	  var seconds = Math.floor(clocktime)
	  var nanoseconds = Math.floor((clocktime%1)*1e9)
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0]
	    nanoseconds = nanoseconds - previousTimestamp[1]
	    if (nanoseconds<0) {
	      seconds--
	      nanoseconds += 1e9
	    }
	  }
	  return [seconds,nanoseconds]
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), (function() { return this; }())))

/***/ },
/* 1924 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	var util = __webpack_require__(1130)
	var EventEmitter = __webpack_require__(786).EventEmitter
	var typeforce = __webpack_require__(1054)
	var extend = __webpack_require__(1151)
	var bindAll = __webpack_require__(1925)
	var once = __webpack_require__(1052)
	var debug = __webpack_require__(787)('sendy:switchboard')
	var Sendy = __webpack_require__(1902)
	var noop = function () {}
	var nochange = function (data) {
	  return data
	}
	
	var DEFAULT_CLIENT_MAKER = function (recipient) {
	  return new Sendy({ name: recipient })
	}
	
	function Switchboard (opts) {
	  var self = this
	  if (!(this instanceof Switchboard)) return new Switchboard(opts)
	
	  typeforce({
	    unreliable: 'Object',
	    clientForRecipient: '?Function',
	    encode: '?Function',
	    decode: '?Function',
	    sendTimeout: '?Number'
	  }, opts)
	
	  EventEmitter.call(this)
	
	  bindAll(this)
	
	  this._encode = opts.encode || nochange
	  this._decode = opts.decode || nochange
	  this._url = opts.url
	  this._clientForRecipient = opts.clientForRecipient || DEFAULT_CLIENT_MAKER
	  this._rclients = {}
	  this._queued = {}
	  this._presence = {}
	  this._sendTimeout = opts.sendTimeout
	
	  this._uclient = opts.unreliable
	  this._uclient.on('receive', function (msg) {
	    if (self._destroyed) return
	
	    msg = self._decode(msg)
	    self._updatePresence(msg.from, true)
	    var rclient = self._getReliableClientFor(msg.from)
	    if (rclient) {
	      // debug('received msg from ' + msg.from + ', length: ' + msg.data.length)
	      self.emit('receiving', msg)
	      rclient.receive(msg.data)
	    }
	  })
	
	  this._uclient.on('disconnect', function (id) {
	    if (self._destroyed) return
	
	    var ids = id ? [id] : Object.keys(self._rclients)
	    ids.forEach(function (id) {
	      var rclient = self._rclients[id]
	      self._updatePresence(id, false)
	      if (rclient.pause) rclient.pause()
	    })
	  })
	
	  this._uclient.on('connect', function (id) {
	    if (self._destroyed) return
	
	    var ids = id ? [id] : Object.keys(self._rclients)
	    ids.forEach(function (id) {
	      var rclient = self._rclients[id]
	      if (rclient.resume) rclient.resume()
	    })
	  })
	
	  this._uclient.on('404', function (recipient) {
	    self._updatePresence(recipient, false)
	  })
	}
	
	util.inherits(Switchboard, EventEmitter)
	exports = module.exports = Switchboard
	var proto = Switchboard.prototype
	
	proto._updatePresence = function (recipient, present) {
	  if (present === !!this._presence[recipient]) return
	
	  this._presence[recipient] = present
	  this.emit('presence', recipient, present)
	}
	
	proto.send = function (recipient, msg, ondelivered) {
	  var self = this
	
	  if (this._cancelingPending) {
	    return process.nextTick(function () {
	      self.send(recipient, msg, ondelivered)
	    })
	  }
	
	  debug('queueing msg to ' + recipient)
	  var rclient = this._getReliableClientFor(recipient)
	  if (!rclient) return
	
	  ondelivered = once(ondelivered || noop)
	
	  var queue = this._queued[recipient]
	  if (!queue) queue = this._queued[recipient] = []
	
	  var done
	  var timeout
	  queue.push({
	    msg: msg,
	    callback: ondelivered
	  })
	
	  rclient.send(msg, function (err) {
	    clearTimeout(timeout)
	    if (done) return
	
	    done = true
	    if (!err) {
	      var item = queue.shift() // rclient delivers in order
	      if (item.callback) item.callback()
	
	      return
	    }
	
	    // pause operations
	    self._cancelingPending = true
	    process.nextTick(function () {
	      self._cancelingPending = false
	    })
	
	    // as we're in the business of in-order delivery
	    // all the queued messages should be failed
	    // so whoever's running this operation can requeue them
	    var tmp = queue.slice()
	    queue.length = 0
	    tmp.forEach(function (item) {
	      item.callback(err)
	    })
	  })
	
	  // if (!this._sendTimeout) return
	
	  // timeout = setTimeout(function () {
	  //   cbWrapper(new Error('timed out'))
	  // }, self._sendTimeout)
	}
	
	proto.clearTimeout = function () {
	  this._proxyMethod('clearTimeout', arguments)
	}
	
	proto.setTimeout = function (millis) {
	  this._sendTimeout = millis
	  this._proxyMethod('setTimeout', arguments)
	}
	
	proto.cancelPending = function (recipient) {
	  var err = new Error('canceled')
	  for (var id in this._rclients) {
	    if (!recipient || id === recipient) {
	      if (this._queued[id] && this._queued[id].length) {
	        // queues get cleaned up in 'destroy' handler
	        this._rclients[id].destroy()
	        // this._rclients[id].reset(err)
	      }
	    }
	  }
	}
	
	proto.pending = function (recipient) {
	  const q = this._queued[recipient]
	  return q ? q.slice() : []
	}
	
	proto.clients = function () {
	  return Object.keys(this._rclients).map(function (k) {
	    return this._rclients[k]
	  }, this)
	}
	
	proto._getReliableClientFor = function (recipient) {
	  var self = this
	  var rclient = this._rclients[recipient]
	  if (rclient) return rclient
	
	  rclient = this._rclients[recipient] = this._clientForRecipient(recipient)
	  if (!rclient) return
	
	  if (this._sendTimeout) {
	    rclient.setTimeout(this._sendTimeout)
	  }
	
	  rclient.on('timeout', function () {
	    if (self._destroyed) return
	
	    self.emit('timeout', recipient)
	  })
	
	  rclient.on('receive', function (msg) {
	    if (self._destroyed) return
	
	    // emit message from whoever `recipient` is
	    // debug('bubbling received msg from ' + recipient + ', length: ' + msg.length)
	    self.emit('message', msg, recipient)
	  })
	
	  rclient.on('send', function (msg) {
	    if (self._destroyed) {
	      rclient.destroy()
	      return
	    }
	
	    debug('sending msg to ' + recipient + ', length: ' + msg.length)
	    msg = self._encode(msg, recipient)
	    self._uclient.send(msg)
	  })
	
	  rclient.on('destroy', function (err) {
	    // cleanup.forEach(call)
	
	    delete self._rclients[recipient]
	    var queue = self._queued[recipient]
	    if (!queue || !queue.length) return
	
	    err = err || new Error('connection was destroyed')
	    delete self._queued[recipient]
	    for (var i = 0; i < queue.length; i++) {
	      queue[i].callback(err)
	    }
	  })
	
	  return rclient
	}
	
	proto._proxyMethod = function (method, args) {
	  for (var id in this._rclients) {
	    var c = this._rclients[id]
	    c[method].apply(c, args)
	  }
	}
	
	proto.destroy = function () {
	  if (this._destroyed) return
	
	  this._destroyed = true
	
	  for (var recipient in this._rclients) {
	    this._rclients[recipient].destroy()
	  }
	
	  this._uclient.destroy()
	  delete this._reliabilityClient
	  delete this._uclient
	}
	
	;['pause', 'resume'].forEach(function (method) {
	  proto[method] = function (recipient) {
	    for (var id in this._rclients) {
	      if (!recipient || id === recipient) {
	        var rclient = this._rclients[id]
	        rclient[method]()
	      }
	    }
	  }
	})
	
	// function listen (emitter, event, handler) {
	//   emitter.on(event, handler)
	//   return function () {
	//     emitter.removeListener(event, handler)
	//   }
	// }
	
	// function call (fn) {
	//   fn()
	// }
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1925 */
/***/ function(module, exports) {

	
	module.exports = function bindAll (obj) {
	  var i, length = arguments.length, key
	  if (length === 1) {
	    // bind all functions of obj
	    // duplication of code, but doesn't create extra array
	    for (key in obj) {
	      if (typeof obj[key] === 'function') {
	        obj[key] = obj[key].bind(obj)
	      }
	    }
	
	    return obj
	  }
	
	  if (length <= 1) throw new Error('bindAll must be passed function names')
	
	  for (i = 1; i < length; i++) {
	    key = arguments[i]
	    obj[key] = obj[key].bind(obj)
	  }
	
	  return obj
	}


/***/ },
/* 1926 */
/***/ function(module, exports, __webpack_require__) {

	
	exports = module.exports = __webpack_require__(1927)
	exports.Client = exports
	exports.Switchboard = __webpack_require__(1975)


/***/ },
/* 1927 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	var util = __webpack_require__(1130)
	var EventEmitter = __webpack_require__(786).EventEmitter
	var parseURL = __webpack_require__(1837).parse
	var io = __webpack_require__(1928)
	var wildcardMiddleware = __webpack_require__(1974)
	var enableWildcardEventHandlers = wildcardMiddleware(io.Manager)
	var typeforce = __webpack_require__(1054)
	var bindAll = __webpack_require__(1925)
	var backoff = __webpack_require__(1126)
	var extend = __webpack_require__(859)
	var debug = __webpack_require__(787)('sendy:ws:client')
	
	var CLIENTS = {}
	
	exports = module.exports = Client
	exports.createClient = function (opts) {
	  var url = opts.url
	  var cli = CLIENTS[url]
	  if (!cli) {
	    cli = CLIENTS[url] = new Client(opts)
	    cli.once('destroy', function () {
	      delete CLIENTS[url]
	    })
	  }
	
	  return cli
	}
	
	function Client (opts) {
	  var self = this
	
	  typeforce({
	    url: 'String',
	    autoConnect: '?Boolean'
	  }, opts)
	
	  EventEmitter.call(this)
	
	  this._url = parseURL(opts.url)
	  this._backoff = backoff.exponential({
	    initialDelay: 100,
	    maxDelay: 6000
	  })
	
	  this._listeners = []
	  this._connected = false
	  this._connecting = false
	  this._clientOpts = extend({
	    reconnection: false,
	    path: this._url.pathname,
	    query: this._url.query,
	    forceBase64: opts.forceBase64
	  })
	
	  delete this._clientOpts.url
	  bindAll(this)
	  if (opts.autoConnect) this.connect()
	}
	
	util.inherits(Client, EventEmitter)
	exports = module.exports = Client
	
	Client.prototype.connect = function () {
	  this._reconnect()
	}
	
	Client.prototype._debug = function () {
	  var args = [].slice.call(arguments)
	  args.unshift(this._url.href)
	  return debug.apply(null, args)
	}
	
	Client.prototype.send = function (data) {
	  var self = this
	  if (this._destroyed) throw new Error('destroyed')
	  if (!this._connected) {
	    // this.once('connect', this.send.bind(this, data))
	    return this.connect()
	  }
	
	  try {
	    this._socket.emit('message', data)
	  } catch (err) {
	    this._onSocketError(err)
	  }
	}
	
	Client.prototype.sendCustomEvent = function (event /*, arg0, arg1 */) {
	  const self = this
	  if (!this._connected) {
	    const args = [].slice.call(arguments)
	    return this.once('connect', function () {
	      self.sendCustomEvent.apply(self, args)
	    })
	  }
	
	  this._socket.emit.apply(this._socket, arguments)
	}
	
	Client.prototype._reconnect = function () {
	  var self = this
	  if (this._connecting || this._connected || this._destroyed) return
	
	  // this._debug('reconnecting', this._socket.id)
	
	  var base = this._url.protocol + '//' + this._url.host
	  if (this._socket) {
	    this._stopListening()
	  } else {
	    this._socket = io(base, this._clientOpts)
	    enableWildcardEventHandlers(this._socket)
	  }
	
	  this._connecting = true
	  this._backoff.reset()
	  this._backoff.removeAllListeners()
	  this._backoff.backoff()
	  this._backoff.on('ready', this._backoffAndConnect)
	  this._listenTo(this._socket, 'connect', this._onconnect)
	  this._listenTo(this._socket, 'disconnect', this._ondisconnect)
	  this._listenTo(this._socket, '404', function (them) {
	    self._debug('recipient not found: ' + them)
	    self.emit('404', them)
	  })
	
	  this._listenTo(this._socket, 'message', function (data, ack) {
	    // self._debug('received msg')
	    self.emit('receive', data)
	    if (ack) ack()
	  })
	
	  // this._listenTo(this._socket, 'presence', function (data))
	
	  this._listenTo(this._socket, 'error', this._onSocketError)
	  this._listenTo(this._socket, '*', function (e) {
	    const data = e.data
	    if (data[0] !== 'message') {
	      self.emit.apply(self, data)
	    }
	  })
	}
	
	Client.prototype._onconnect = function () {
	  this._backoff.reset()
	  this._connected = true
	  this._connecting = false
	  this._debug('connected')
	  this.emit('connect')
	}
	
	Client.prototype._ondisconnect = function () {
	  var self = this
	  this._connected = false
	  this._connecting = false
	  this._debug('disconnected')
	  this.emit('disconnect')
	  process.nextTick(function () {
	    self._reconnect()
	  })
	}
	
	Client.prototype._backoffAndConnect = function () {
	  if (this._destroyed) return
	
	  this._debug('backing off and reconnecting')
	  this._backoff.backoff()
	  this._socket.connect()
	}
	
	Client.prototype._listenTo = function (emitter, event, handler) {
	  emitter.on(event, handler)
	  this._listeners.push({
	    emitter: emitter,
	    event: event,
	    handler: handler
	  })
	}
	
	Client.prototype._stopListening = function () {
	  var listeners = this._listeners.slice()
	  listeners.forEach(function (info) {
	    info.emitter.off(info.event, info.handler)
	  })
	
	  this._listeners.length = 0
	}
	
	Client.prototype._killSocket = function () {
	  var socket = this._socket
	  if (!socket) return
	
	  delete this._socket
	  this._backoff.reset()
	  this._connected = false
	  this._connecting = false
	  socket.disconnect()
	  this._stopListening()
	}
	
	Client.prototype._onSocketError = function (err) {
	  this._debug('socket experienced error', err)
	  this._killSocket()
	  this._reconnect()
	}
	
	Client.prototype.destroy = function () {
	  if (this._destroyed) return
	
	  this._destroyed = true
	  this._debug('destroying')
	  this._killSocket()
	  this.emit('destroy')
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1928 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var url = __webpack_require__(1929);
	var parser = __webpack_require__(1934);
	var Manager = __webpack_require__(1940);
	var debug = __webpack_require__(1931)('socket.io-client');
	
	/**
	 * Module exports.
	 */
	
	module.exports = exports = lookup;
	
	/**
	 * Managers cache.
	 */
	
	var cache = exports.managers = {};
	
	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */
	
	function lookup (uri, opts) {
	  if (typeof uri === 'object') {
	    opts = uri;
	    uri = undefined;
	  }
	
	  opts = opts || {};
	
	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var path = parsed.path;
	  var sameNamespace = cache[id] && path in cache[id].nsps;
	  var newConnection = opts.forceNew || opts['force new connection'] ||
	                      false === opts.multiplex || sameNamespace;
	
	  var io;
	
	  if (newConnection) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }
	  if (parsed.query && !opts.query) {
	    opts.query = parsed.query;
	  } else if (opts && 'object' === typeof opts.query) {
	    opts.query = encodeQueryString(opts.query);
	  }
	  return io.socket(parsed.path, opts);
	}
	/**
	 *  Helper method to parse query objects to string.
	 * @param {object} query
	 * @returns {string}
	 */
	function encodeQueryString (obj) {
	  var str = [];
	  for (var p in obj) {
	    if (obj.hasOwnProperty(p)) {
	      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
	    }
	  }
	  return str.join('&');
	}
	/**
	 * Protocol version.
	 *
	 * @api public
	 */
	
	exports.protocol = parser.protocol;
	
	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */
	
	exports.connect = lookup;
	
	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */
	
	exports.Manager = __webpack_require__(1940);
	exports.Socket = __webpack_require__(1969);


/***/ },
/* 1929 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module dependencies.
	 */
	
	var parseuri = __webpack_require__(1930);
	var debug = __webpack_require__(1931)('socket.io-client:url');
	
	/**
	 * Module exports.
	 */
	
	module.exports = url;
	
	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */
	
	function url (uri, loc) {
	  var obj = uri;
	
	  // default to window.location
	  loc = loc || global.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;
	
	  // relative path support
	  if ('string' === typeof uri) {
	    if ('/' === uri.charAt(0)) {
	      if ('/' === uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }
	
	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' !== typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }
	
	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }
	
	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    } else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }
	
	  obj.path = obj.path || '/';
	
	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;
	
	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));
	
	  return obj;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1930 */
/***/ function(module, exports) {

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */
	
	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
	
	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];
	
	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');
	
	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }
	
	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;
	
	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }
	
	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }
	
	    return uri;
	};


/***/ },
/* 1931 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(1932);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    return exports.storage.debug;
	  } catch(e) {}
	
	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (typeof process !== 'undefined' && 'env' in process) {
	    return process.env.DEBUG;
	  }
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1932 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug.debug = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(1933);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    // apply env-specific formatting
	    args = exports.formatArgs.apply(self, args);
	
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 1933 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000
	var m = s * 60
	var h = m * 60
	var d = h * 24
	var y = d * 365.25
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function (val, options) {
	  options = options || {}
	  var type = typeof val
	  if (type === 'string' && val.length > 0) {
	    return parse(val)
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ?
				fmtLong(val) :
				fmtShort(val)
	  }
	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
	}
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = String(str)
	  if (str.length > 10000) {
	    return
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
	  if (!match) {
	    return
	  }
	  var n = parseFloat(match[1])
	  var type = (match[2] || 'ms').toLowerCase()
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n
	    default:
	      return undefined
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd'
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h'
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm'
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's'
	  }
	  return ms + 'ms'
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms'
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) {
	    return
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's'
	}


/***/ },
/* 1934 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var debug = __webpack_require__(787)('socket.io-parser');
	var json = __webpack_require__(1935);
	var Emitter = __webpack_require__(1937);
	var binary = __webpack_require__(1938);
	var isBuf = __webpack_require__(1939);
	
	/**
	 * Protocol version.
	 *
	 * @api public
	 */
	
	exports.protocol = 4;
	
	/**
	 * Packet types.
	 *
	 * @api public
	 */
	
	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'ACK',
	  'ERROR',
	  'BINARY_EVENT',
	  'BINARY_ACK'
	];
	
	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */
	
	exports.CONNECT = 0;
	
	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */
	
	exports.DISCONNECT = 1;
	
	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */
	
	exports.EVENT = 2;
	
	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */
	
	exports.ACK = 3;
	
	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */
	
	exports.ERROR = 4;
	
	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */
	
	exports.BINARY_EVENT = 5;
	
	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */
	
	exports.BINARY_ACK = 6;
	
	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */
	
	exports.Encoder = Encoder;
	
	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */
	
	exports.Decoder = Decoder;
	
	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */
	
	function Encoder() {}
	
	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */
	
	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);
	
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};
	
	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */
	
	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;
	
	  // first is type
	  str += obj.type;
	
	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }
	
	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }
	
	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }
	
	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }
	
	  debug('encoded %j as %s', obj, str);
	  return str;
	}
	
	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */
	
	function encodeAsBinary(obj, callback) {
	
	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;
	
	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }
	
	  binary.removeBlobs(obj, writeEncoding);
	}
	
	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */
	
	function Decoder() {
	  this.reconstructor = null;
	}
	
	/**
	 * Mix in `Emitter` with Decoder.
	 */
	
	Emitter(Decoder.prototype);
	
	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */
	
	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);
	
	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};
	
	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */
	
	function decodeString(str) {
	  var p = {};
	  var i = 0;
	
	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();
	
	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }
	
	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }
	
	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }
	
	  // look up json data
	  if (str.charAt(++i)) {
	    p = tryParse(p, str.substr(i));
	  }
	
	  debug('decoded %s as %j', str, p);
	  return p;
	}
	
	function tryParse(p, str) {
	  try {
	    p.data = json.parse(str);
	  } catch(e){
	    return error();
	  }
	  return p; 
	};
	
	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */
	
	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};
	
	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */
	
	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}
	
	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */
	
	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};
	
	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */
	
	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};
	
	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}


/***/ },
/* 1935 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(1936);
	
	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };
	
	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	
	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window] && window || this,
	      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;
	
	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }
	
	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());
	
	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];
	
	    // Delegate to the native `stringify` and `parse` implementations.
	    if (typeof nativeJSON == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }
	
	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        isProperty, forEach, undef;
	
	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	        // Safari < 2.0.2 stores the internal millisecond time value correctly,
	        // but clips the values returned by the date methods to the range of
	        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}
	
	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function () {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	                // Firefox 3.1b1 and b2 serialize string, number, and boolean
	                // primitives as object literals.
	                stringify(0) === "0" &&
	                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	                // literals.
	                stringify(new Number()) === "0" &&
	                stringify(new String()) == '""' &&
	                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	                // does not define a canonical JSON representation (this applies to
	                // objects with `toJSON` properties as well, *unless* they are nested
	                // within an object or array).
	                stringify(getClass) === undef &&
	                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	                // FF 3.1b3 pass this test.
	                stringify(undef) === undef &&
	                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	                // respectively, if the value is omitted entirely.
	                stringify() === undef &&
	                // FF 3.1b1, 2 throw an error if the given value is not a number,
	                // string, array, object, Boolean, or `null` literal. This applies to
	                // objects with custom `toJSON` methods as well, unless they are nested
	                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	                // methods entirely.
	                stringify(value) === "1" &&
	                stringify([value]) == "[1]" &&
	                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	                // `"[null]"`.
	                stringify([undef]) == "[null]" &&
	                // YUI 3.0.0b1 fails to serialize `null` literals.
	                stringify(null) == "null" &&
	                // FF 3.1b1, 2 halts serialization if an array contains a function:
	                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	                // elides non-JSON values from objects and arrays, unless they
	                // define custom `toJSON` methods.
	                stringify([undef, getClass, null]) == "[null,null,null]" &&
	                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	                // where character escape codes are expected (e.g., `\b` => `\u0008`).
	                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	                stringify(null, value) === "1" &&
	                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	                // serialize extended years.
	                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	                // The milliseconds are optional in ES 5, but required in 5.1.
	                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	                // four-digit years instead of six-digit years. Credits: @Yaffle.
	                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	                // values less than 1000. Credits: @Yaffle.
	                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }
	
	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";
	
	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");
	
	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function (year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }
	
	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(isProperty = objectProto.hasOwnProperty)) {
	        isProperty = function (property) {
	          var members = {}, constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            isProperty = function (property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__, result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            isProperty = function (property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return isProperty.call(this, property);
	        };
	      }
	
	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      forEach = function (object, callback) {
	        var size = 0, Properties, members, property;
	
	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function () {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;
	
	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;
	
	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          forEach = function (object, callback) {
	            // Create a set of iterated properties.
	            var members = {}, isFunction = getClass.call(object) == functionClass, property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	              callback(property);
	            }
	          };
	        }
	        return forEach(object, callback);
	      };
	
	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };
	
	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function (width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };
	
	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function (value) {
	          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };
	
	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if (typeof value == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                  // Months, dates, hours, minutes, and seconds should have two
	                  // digits; milliseconds should have three.
	                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                  // Milliseconds are optional in ES 5.0, but required in 5.1.
	                  "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if (typeof value == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };
	
	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }
	
	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;
	
	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };
	
	        // Internal: Stores the parser state.
	        var Index, Source;
	
	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function () {
	          Index = Source = null;
	          throw SyntaxError();
	        };
	
	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function () {
	          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9: case 10: case 13: case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123: case 125: case 91: case 93: case 58: case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };
	
	        // Internal: Parses a JSON `value` token.
	        var get = function (value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };
	
	        // Internal: Updates a traversed object member.
	        var update = function (source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };
	
	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function (source, property, callback) {
	          var value = source[property], length;
	          if (typeof value == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };
	
	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }
	
	    exports["runInContext"] = runInContext;
	    return exports;
	  }
	
	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;
	
	    var JSON3 = runInContext(root, (root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function () {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    }));
	
	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }
	
	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(952)(module), (function() { return this; }())))

/***/ },
/* 1936 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 1937 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	module.exports = Emitter;
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};
	
	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 1938 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/
	
	/**
	 * Module requirements
	 */
	
	var isArray = __webpack_require__(831);
	var isBuf = __webpack_require__(1939);
	
	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */
	
	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;
	
	  function _deconstructPacket(data) {
	    if (!data) return data;
	
	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }
	
	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};
	
	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */
	
	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;
	
	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }
	
	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};
	
	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */
	
	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;
	
	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;
	
	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }
	
	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };
	
	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }
	
	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1939 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	module.exports = isBuf;
	
	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */
	
	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1940 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var eio = __webpack_require__(1941);
	var Socket = __webpack_require__(1969);
	var Emitter = __webpack_require__(1958);
	var parser = __webpack_require__(1934);
	var on = __webpack_require__(1971);
	var bind = __webpack_require__(1972);
	var debug = __webpack_require__(1931)('socket.io-client:manager');
	var indexOf = __webpack_require__(990);
	var Backoff = __webpack_require__(1973);
	
	/**
	 * IE6+ hasOwnProperty
	 */
	
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * Module exports
	 */
	
	module.exports = Manager;
	
	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */
	
	function Manager (uri, opts) {
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' === typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};
	
	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}
	
	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */
	
	Manager.prototype.emitAll = function () {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};
	
	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */
	
	Manager.prototype.updateSocketIds = function () {
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.engine.id;
	    }
	  }
	};
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Manager.prototype);
	
	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnection = function (v) {
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};
	
	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnectionAttempts = function (v) {
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};
	
	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnectionDelay = function (v) {
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};
	
	Manager.prototype.randomizationFactor = function (v) {
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};
	
	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.reconnectionDelayMax = function (v) {
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};
	
	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */
	
	Manager.prototype.timeout = function (v) {
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};
	
	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */
	
	Manager.prototype.maybeReconnectOnOpen = function () {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};
	
	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */
	
	Manager.prototype.open =
	Manager.prototype.connect = function (fn, opts) {
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;
	
	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;
	
	  // emit `open`
	  var openSub = on(socket, 'open', function () {
	    self.onopen();
	    fn && fn();
	  });
	
	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function (data) {
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });
	
	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);
	
	    // set timer
	    var timer = setTimeout(function () {
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);
	
	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }
	
	  this.subs.push(openSub);
	  this.subs.push(errorSub);
	
	  return this;
	};
	
	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */
	
	Manager.prototype.onopen = function () {
	  debug('open');
	
	  // clear old subs
	  this.cleanup();
	
	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');
	
	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};
	
	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */
	
	Manager.prototype.onping = function () {
	  this.lastPing = new Date();
	  this.emitAll('ping');
	};
	
	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */
	
	Manager.prototype.onpong = function () {
	  this.emitAll('pong', new Date() - this.lastPing);
	};
	
	/**
	 * Called with data.
	 *
	 * @api private
	 */
	
	Manager.prototype.ondata = function (data) {
	  this.decoder.add(data);
	};
	
	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */
	
	Manager.prototype.ondecoded = function (packet) {
	  this.emit('packet', packet);
	};
	
	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */
	
	Manager.prototype.onerror = function (err) {
	  debug('error', err);
	  this.emitAll('error', err);
	};
	
	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */
	
	Manager.prototype.socket = function (nsp, opts) {
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp, opts);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function () {
	      socket.id = self.engine.id;
	    });
	
	    if (this.autoConnect) {
	      // manually call here since connecting evnet is fired before listening
	      onConnecting();
	    }
	  }
	
	  function onConnecting () {
	    if (!~indexOf(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }
	
	  return socket;
	};
	
	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */
	
	Manager.prototype.destroy = function (socket) {
	  var index = indexOf(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;
	
	  this.close();
	};
	
	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Manager.prototype.packet = function (packet) {
	  debug('writing packet %j', packet);
	  var self = this;
	  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;
	
	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function (encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};
	
	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */
	
	Manager.prototype.processPacketQueue = function () {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};
	
	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */
	
	Manager.prototype.cleanup = function () {
	  debug('cleanup');
	
	  var subsLength = this.subs.length;
	  for (var i = 0; i < subsLength; i++) {
	    var sub = this.subs.shift();
	    sub.destroy();
	  }
	
	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;
	
	  this.decoder.destroy();
	};
	
	/**
	 * Close the current socket.
	 *
	 * @api private
	 */
	
	Manager.prototype.close =
	Manager.prototype.disconnect = function () {
	  debug('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' === this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};
	
	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */
	
	Manager.prototype.onclose = function (reason) {
	  debug('onclose');
	
	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);
	
	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};
	
	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */
	
	Manager.prototype.reconnect = function () {
	  if (this.reconnecting || this.skipReconnect) return this;
	
	  var self = this;
	
	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);
	
	    this.reconnecting = true;
	    var timer = setTimeout(function () {
	      if (self.skipReconnect) return;
	
	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);
	
	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;
	
	      self.open(function (err) {
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);
	
	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }
	};
	
	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */
	
	Manager.prototype.onreconnect = function () {
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};


/***/ },
/* 1941 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(1942);


/***/ },
/* 1942 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(1943);
	
	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = __webpack_require__(1950);


/***/ },
/* 1943 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */
	
	var transports = __webpack_require__(1944);
	var Emitter = __webpack_require__(1958);
	var debug = __webpack_require__(1962)('engine.io-client:socket');
	var index = __webpack_require__(990);
	var parser = __webpack_require__(1950);
	var parseuri = __webpack_require__(1930);
	var parsejson = __webpack_require__(1968);
	var parseqs = __webpack_require__(1959);
	
	/**
	 * Module exports.
	 */
	
	module.exports = Socket;
	
	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */
	
	function Socket (uri, opts) {
	  if (!(this instanceof Socket)) return new Socket(uri, opts);
	
	  opts = opts || {};
	
	  if (uri && 'object' === typeof uri) {
	    opts = uri;
	    uri = null;
	  }
	
	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }
	
	  this.secure = null != opts.secure ? opts.secure
	    : (global.location && 'https:' === location.protocol);
	
	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }
	
	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (global.location ? location.hostname : 'localhost');
	  this.port = opts.port || (global.location && location.port
	      ? location.port
	      : (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.prevBufferLen = 0;
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;
	
	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }
	
	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
	  this.forceNode = !!opts.forceNode;
	
	  // other options for Node.js client
	  var freeGlobal = typeof global === 'object' && global;
	  if (freeGlobal.global === freeGlobal) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }
	
	    if (opts.localAddress) {
	      this.localAddress = opts.localAddress;
	    }
	  }
	
	  // set on handshake
	  this.id = null;
	  this.upgrades = null;
	  this.pingInterval = null;
	  this.pingTimeout = null;
	
	  // set on heartbeat
	  this.pingIntervalTimer = null;
	  this.pingTimeoutTimer = null;
	
	  this.open();
	}
	
	Socket.priorWebsocketSuccess = false;
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Socket.prototype);
	
	/**
	 * Protocol version.
	 *
	 * @api public
	 */
	
	Socket.protocol = parser.protocol; // this is an int
	
	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */
	
	Socket.Socket = Socket;
	Socket.Transport = __webpack_require__(1949);
	Socket.transports = __webpack_require__(1944);
	Socket.parser = __webpack_require__(1950);
	
	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */
	
	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);
	
	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;
	
	  // transport name
	  query.transport = name;
	
	  // session id if we already have one
	  if (this.id) query.sid = this.id;
	
	  var transport = new transports[name]({
	    agent: this.agent,
	    hostname: this.hostname,
	    port: this.port,
	    secure: this.secure,
	    path: this.path,
	    query: query,
	    forceJSONP: this.forceJSONP,
	    jsonp: this.jsonp,
	    forceBase64: this.forceBase64,
	    enablesXDR: this.enablesXDR,
	    timestampRequests: this.timestampRequests,
	    timestampParam: this.timestampParam,
	    policyPort: this.policyPort,
	    socket: this,
	    pfx: this.pfx,
	    key: this.key,
	    passphrase: this.passphrase,
	    cert: this.cert,
	    ca: this.ca,
	    ciphers: this.ciphers,
	    rejectUnauthorized: this.rejectUnauthorized,
	    perMessageDeflate: this.perMessageDeflate,
	    extraHeaders: this.extraHeaders,
	    forceNode: this.forceNode,
	    localAddress: this.localAddress
	  });
	
	  return transport;
	};
	
	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}
	
	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function () {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';
	
	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }
	
	  transport.open();
	  this.setTransport(transport);
	};
	
	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */
	
	Socket.prototype.setTransport = function (transport) {
	  debug('setting transport %s', transport.name);
	  var self = this;
	
	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }
	
	  // set up transport
	  this.transport = transport;
	
	  // set up transport listeners
	  transport
	  .on('drain', function () {
	    self.onDrain();
	  })
	  .on('packet', function (packet) {
	    self.onPacket(packet);
	  })
	  .on('error', function (e) {
	    self.onError(e);
	  })
	  .on('close', function () {
	    self.onClose('transport close');
	  });
	};
	
	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */
	
	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 });
	  var failed = false;
	  var self = this;
	
	  Socket.priorWebsocketSuccess = false;
	
	  function onTransportOpen () {
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;
	
	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' === msg.type && 'probe' === msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' === transport.name;
	
	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' === self.readyState) return;
	          debug('changing transport and sending upgrade packet');
	
	          cleanup();
	
	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }
	
	  function freezeTransport () {
	    if (failed) return;
	
	    // Any callback called by transport should be ignored since now
	    failed = true;
	
	    cleanup();
	
	    transport.close();
	    transport = null;
	  }
	
	  // Handle any error that happens while probing
	  function onerror (err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;
	
	    freezeTransport();
	
	    debug('probe transport "%s" failed because of error: %s', name, err);
	
	    self.emit('upgradeError', error);
	  }
	
	  function onTransportClose () {
	    onerror('transport closed');
	  }
	
	  // When the socket is closed while we're probing
	  function onclose () {
	    onerror('socket closed');
	  }
	
	  // When the socket is upgraded while we're probing
	  function onupgrade (to) {
	    if (transport && to.name !== transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }
	
	  // Remove all listeners on the transport and on self
	  function cleanup () {
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }
	
	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);
	
	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);
	
	  transport.open();
	};
	
	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */
	
	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
	  this.emit('open');
	  this.flush();
	
	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};
	
	/**
	 * Handles a packet.
	 *
	 * @api private
	 */
	
	Socket.prototype.onPacket = function (packet) {
	  if ('opening' === this.readyState || 'open' === this.readyState ||
	      'closing' === this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
	
	    this.emit('packet', packet);
	
	    // Socket is live - any packet counts
	    this.emit('heartbeat');
	
	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(parsejson(packet.data));
	        break;
	
	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;
	
	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;
	
	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};
	
	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */
	
	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if ('closed' === this.readyState) return;
	  this.setPing();
	
	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};
	
	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */
	
	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' === self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};
	
	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */
	
	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};
	
	/**
	* Sends a ping packet.
	*
	* @api private
	*/
	
	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function () {
	    self.emit('ping');
	  });
	};
	
	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */
	
	Socket.prototype.onDrain = function () {
	  this.writeBuffer.splice(0, this.prevBufferLen);
	
	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;
	
	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};
	
	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */
	
	Socket.prototype.flush = function () {
	  if ('closed' !== this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};
	
	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */
	
	Socket.prototype.write =
	Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};
	
	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */
	
	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if ('function' === typeof data) {
	    fn = data;
	    data = undefined;
	  }
	
	  if ('function' === typeof options) {
	    fn = options;
	    options = null;
	  }
	
	  if ('closing' === this.readyState || 'closed' === this.readyState) {
	    return;
	  }
	
	  options = options || {};
	  options.compress = false !== options.compress;
	
	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};
	
	/**
	 * Closes the connection.
	 *
	 * @api private
	 */
	
	Socket.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.readyState = 'closing';
	
	    var self = this;
	
	    if (this.writeBuffer.length) {
	      this.once('drain', function () {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }
	
	  function close () {
	    self.onClose('forced close');
	    debug('socket closing - telling transport to close');
	    self.transport.close();
	  }
	
	  function cleanupAndClose () {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }
	
	  function waitForUpgrade () {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }
	
	  return this;
	};
	
	/**
	 * Called upon transport error
	 *
	 * @api private
	 */
	
	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};
	
	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */
	
	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;
	
	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);
	
	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');
	
	    // ensure transport won't stay open
	    this.transport.close();
	
	    // ignore further transport communication
	    this.transport.removeAllListeners();
	
	    // set ready state
	    this.readyState = 'closed';
	
	    // clear session id
	    this.id = null;
	
	    // emit close event
	    this.emit('close', reason, desc);
	
	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};
	
	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */
	
	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i < j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1944 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies
	 */
	
	var XMLHttpRequest = __webpack_require__(1945);
	var XHR = __webpack_require__(1947);
	var JSONP = __webpack_require__(1965);
	var websocket = __webpack_require__(1966);
	
	/**
	 * Export transports.
	 */
	
	exports.polling = polling;
	exports.websocket = websocket;
	
	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */
	
	function polling (opts) {
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;
	
	  if (global.location) {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;
	
	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }
	
	    xd = opts.hostname !== location.hostname || port !== opts.port;
	    xs = opts.secure !== isSSL;
	  }
	
	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);
	
	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1945 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module
	
	var hasCORS = __webpack_require__(1946);
	
	module.exports = function (opts) {
	  var xdomain = opts.xdomain;
	
	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;
	
	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;
	
	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }
	
	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }
	
	  if (!xdomain) {
	    try {
	      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
	    } catch (e) { }
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1946 */
/***/ function(module, exports) {

	
	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */
	
	try {
	  module.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}


/***/ },
/* 1947 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module requirements.
	 */
	
	var XMLHttpRequest = __webpack_require__(1945);
	var Polling = __webpack_require__(1948);
	var Emitter = __webpack_require__(1958);
	var inherit = __webpack_require__(1960);
	var debug = __webpack_require__(1962)('engine.io-client:polling-xhr');
	
	/**
	 * Module exports.
	 */
	
	module.exports = XHR;
	module.exports.Request = Request;
	
	/**
	 * Empty function
	 */
	
	function empty () {}
	
	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */
	
	function XHR (opts) {
	  Polling.call(this, opts);
	  this.requestTimeout = opts.requestTimeout;
	
	  if (global.location) {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;
	
	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }
	
	    this.xd = opts.hostname !== global.location.hostname ||
	      port !== opts.port;
	    this.xs = opts.secure !== isSSL;
	  } else {
	    this.extraHeaders = opts.extraHeaders;
	  }
	}
	
	/**
	 * Inherits from Polling.
	 */
	
	inherit(XHR, Polling);
	
	/**
	 * XHR supports binary
	 */
	
	XHR.prototype.supportsBinary = true;
	
	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */
	
	XHR.prototype.request = function (opts) {
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;
	
	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  opts.requestTimeout = this.requestTimeout;
	
	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;
	
	  return new Request(opts);
	};
	
	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */
	
	XHR.prototype.doWrite = function (data, fn) {
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function (err) {
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};
	
	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */
	
	XHR.prototype.doPoll = function () {
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function (data) {
	    self.onData(data);
	  });
	  req.on('error', function (err) {
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};
	
	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */
	
	function Request (opts) {
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined !== opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	  this.requestTimeout = opts.requestTimeout;
	
	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	
	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	
	  this.create();
	}
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Request.prototype);
	
	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */
	
	Request.prototype.create = function () {
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };
	
	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	
	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;
	
	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}
	    if (this.supportsBinary) {
	      // This has to be done after open because Firefox is stupid
	      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
	      xhr.responseType = 'arraybuffer';
	    }
	
	    if ('POST' === this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }
	
	    try {
	      xhr.setRequestHeader('Accept', '*/*');
	    } catch (e) {}
	
	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }
	
	    if (this.requestTimeout) {
	      xhr.timeout = this.requestTimeout;
	    }
	
	    if (this.hasXDR()) {
	      xhr.onload = function () {
	        self.onLoad();
	      };
	      xhr.onerror = function () {
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function () {
	        if (4 !== xhr.readyState) return;
	        if (200 === xhr.status || 1223 === xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function () {
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }
	
	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function () {
	      self.onError(e);
	    }, 0);
	    return;
	  }
	
	  if (global.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};
	
	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */
	
	Request.prototype.onSuccess = function () {
	  this.emit('success');
	  this.cleanup();
	};
	
	/**
	 * Called if we have data.
	 *
	 * @api private
	 */
	
	Request.prototype.onData = function (data) {
	  this.emit('data', data);
	  this.onSuccess();
	};
	
	/**
	 * Called upon error.
	 *
	 * @api private
	 */
	
	Request.prototype.onError = function (err) {
	  this.emit('error', err);
	  this.cleanup(true);
	};
	
	/**
	 * Cleans up house.
	 *
	 * @api private
	 */
	
	Request.prototype.cleanup = function (fromError) {
	  if ('undefined' === typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }
	
	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch (e) {}
	  }
	
	  if (global.document) {
	    delete Request.requests[this.index];
	  }
	
	  this.xhr = null;
	};
	
	/**
	 * Called upon load.
	 *
	 * @api private
	 */
	
	Request.prototype.onLoad = function () {
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response || this.xhr.responseText;
	    } else {
	      if (!this.supportsBinary) {
	        data = this.xhr.responseText;
	      } else {
	        try {
	          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
	        } catch (e) {
	          var ui8Arr = new Uint8Array(this.xhr.response);
	          var dataArray = [];
	          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
	            dataArray.push(ui8Arr[idx]);
	          }
	
	          data = String.fromCharCode.apply(null, dataArray);
	        }
	      }
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};
	
	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */
	
	Request.prototype.hasXDR = function () {
	  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
	};
	
	/**
	 * Aborts the request.
	 *
	 * @api public
	 */
	
	Request.prototype.abort = function () {
	  this.cleanup();
	};
	
	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */
	
	Request.requestsCount = 0;
	Request.requests = {};
	
	if (global.document) {
	  if (global.attachEvent) {
	    global.attachEvent('onunload', unloadHandler);
	  } else if (global.addEventListener) {
	    global.addEventListener('beforeunload', unloadHandler, false);
	  }
	}
	
	function unloadHandler () {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1948 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var Transport = __webpack_require__(1949);
	var parseqs = __webpack_require__(1959);
	var parser = __webpack_require__(1950);
	var inherit = __webpack_require__(1960);
	var yeast = __webpack_require__(1961);
	var debug = __webpack_require__(1962)('engine.io-client:polling');
	
	/**
	 * Module exports.
	 */
	
	module.exports = Polling;
	
	/**
	 * Is XHR2 supported?
	 */
	
	var hasXHR2 = (function () {
	  var XMLHttpRequest = __webpack_require__(1945);
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();
	
	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */
	
	function Polling (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}
	
	/**
	 * Inherits from Transport.
	 */
	
	inherit(Polling, Transport);
	
	/**
	 * Transport name.
	 */
	
	Polling.prototype.name = 'polling';
	
	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */
	
	Polling.prototype.doOpen = function () {
	  this.poll();
	};
	
	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */
	
	Polling.prototype.pause = function (onPause) {
	  var self = this;
	
	  this.readyState = 'pausing';
	
	  function pause () {
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }
	
	  if (this.polling || !this.writable) {
	    var total = 0;
	
	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function () {
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }
	
	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function () {
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};
	
	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */
	
	Polling.prototype.poll = function () {
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};
	
	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */
	
	Polling.prototype.onData = function (data) {
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function (packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' === self.readyState) {
	      self.onOpen();
	    }
	
	    // if its a close packet, we close the ongoing requests
	    if ('close' === packet.type) {
	      self.onClose();
	      return false;
	    }
	
	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };
	
	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);
	
	  // if an event did not trigger closing
	  if ('closed' !== this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');
	
	    if ('open' === this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};
	
	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */
	
	Polling.prototype.doClose = function () {
	  var self = this;
	
	  function close () {
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }
	
	  if ('open' === this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};
	
	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */
	
	Polling.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	  var callbackfn = function () {
	    self.writable = true;
	    self.emit('drain');
	  };
	
	  parser.encodePayload(packets, this.supportsBinary, function (data) {
	    self.doWrite(data, callbackfn);
	  });
	};
	
	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */
	
	Polling.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';
	
	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }
	
	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }
	
	  query = parseqs.encode(query);
	
	  // avoid port if default for schema
	  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
	     ('http' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }
	
	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }
	
	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};


/***/ },
/* 1949 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var parser = __webpack_require__(1950);
	var Emitter = __webpack_require__(1958);
	
	/**
	 * Module exports.
	 */
	
	module.exports = Transport;
	
	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */
	
	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;
	
	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;
	  this.forceNode = opts.forceNode;
	
	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	  this.localAddress = opts.localAddress;
	}
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Transport.prototype);
	
	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */
	
	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};
	
	/**
	 * Opens the transport.
	 *
	 * @api public
	 */
	
	Transport.prototype.open = function () {
	  if ('closed' === this.readyState || '' === this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }
	
	  return this;
	};
	
	/**
	 * Closes the transport.
	 *
	 * @api private
	 */
	
	Transport.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.doClose();
	    this.onClose();
	  }
	
	  return this;
	};
	
	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */
	
	Transport.prototype.send = function (packets) {
	  if ('open' === this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};
	
	/**
	 * Called upon open
	 *
	 * @api private
	 */
	
	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};
	
	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */
	
	Transport.prototype.onData = function (data) {
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};
	
	/**
	 * Called with a decoded packet.
	 */
	
	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};
	
	/**
	 * Called upon close.
	 *
	 * @api private
	 */
	
	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};


/***/ },
/* 1950 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */
	
	var keys = __webpack_require__(1951);
	var hasBinary = __webpack_require__(1952);
	var sliceBuffer = __webpack_require__(1953);
	var after = __webpack_require__(1954);
	var utf8 = __webpack_require__(1955);
	
	var base64encoder;
	if (global && global.ArrayBuffer) {
	  base64encoder = __webpack_require__(1956);
	}
	
	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */
	
	var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);
	
	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);
	
	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;
	
	/**
	 * Current protocol version.
	 */
	
	exports.protocol = 3;
	
	/**
	 * Packet types.
	 */
	
	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};
	
	var packetslist = keys(packets);
	
	/**
	 * Premade error packet.
	 */
	
	var err = { type: 'error', data: 'parser error' };
	
	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */
	
	var Blob = __webpack_require__(1957);
	
	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */
	
	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }
	
	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }
	
	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;
	
	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }
	
	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }
	
	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];
	
	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }
	
	  return callback('' + encoded);
	
	};
	
	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}
	
	/**
	 * Encode packet helpers for binary types
	 */
	
	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }
	
	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);
	
	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }
	
	  return callback(resultBuffer.buffer);
	}
	
	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }
	
	  var fr = new FileReader();
	  fr.onload = function() {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}
	
	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }
	
	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }
	
	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);
	
	  return callback(blob);
	}
	
	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */
	
	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof global.Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }
	
	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};
	
	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */
	
	exports.decodePacket = function (data, binaryType, utf8decode) {
	  if (data === undefined) {
	    return err;
	  }
	  // String data
	  if (typeof data == 'string') {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }
	
	    if (utf8decode) {
	      data = tryDecode(data);
	      if (data === false) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);
	
	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }
	
	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }
	
	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};
	
	function tryDecode(data) {
	  try {
	    data = utf8.decode(data);
	  } catch (e) {
	    return false;
	  }
	  return data;
	}
	
	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */
	
	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!base64encoder) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }
	
	  var data = base64encoder.decode(msg.substr(1));
	
	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }
	
	  return { type: type, data: data };
	};
	
	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */
	
	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }
	
	  var isBinary = hasBinary(packets);
	
	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }
	
	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }
	
	  if (!packets.length) {
	    return callback('0:');
	  }
	
	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }
	
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }
	
	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};
	
	/**
	 * Async array map using after
	 */
	
	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);
	
	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };
	
	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}
	
	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */
	
	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }
	
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }
	
	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }
	
	  var length = ''
	    , n, msg;
	
	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);
	
	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || (length != (n = Number(length)))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }
	
	      msg = data.substr(i + 1, n);
	
	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }
	
	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);
	
	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }
	
	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }
	
	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }
	
	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }
	
	};
	
	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */
	
	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }
	
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }
	
	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);
	
	    var resultArray = new Uint8Array(totalLength);
	
	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }
	
	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }
	
	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;
	
	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });
	
	    return callback(resultArray.buffer);
	  });
	};
	
	/**
	 * Encode as Blob
	 */
	
	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }
	
	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;
	
	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;
	
	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }
	
	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};
	
	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */
	
	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }
	
	  var bufferTail = data;
	  var buffers = [];
	
	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';
	
	    for (var i = 1; ; i++) {
	      if (tailArray[i] == 255) break;
	
	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }
	
	      msgLength += tailArray[i];
	    }
	
	    if(numberTooLong) return callback(err, 0, 1);
	
	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);
	
	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }
	
	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }
	
	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1951 */
/***/ function(module, exports) {

	
	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */
	
	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;
	
	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};


/***/ },
/* 1952 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */
	
	var isArray = __webpack_require__(831);
	
	/**
	 * Module exports.
	 */
	
	module.exports = hasBinary;
	
	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */
	
	function hasBinary(data) {
	
	  function _hasBinary(obj) {
	    if (!obj) return false;
	
	    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }
	
	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      // see: https://github.com/Automattic/has-binary/pull/4
	      if (obj.toJSON && 'function' == typeof obj.toJSON) {
	        obj = obj.toJSON();
	      }
	
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }
	
	    return false;
	  }
	
	  return _hasBinary(data);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1953 */
/***/ function(module, exports) {

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */
	
	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;
	
	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }
	
	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }
	
	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }
	
	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};


/***/ },
/* 1954 */
/***/ function(module, exports) {

	module.exports = after
	
	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count
	
	    return (count === 0) ? callback() : proxy
	
	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count
	
	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}
	
	function noop() {}


/***/ },
/* 1955 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/wtf8 v1.0.0 by @mathias */
	;(function(root) {
	
		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;
	
		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;
	
		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}
	
		/*--------------------------------------------------------------------------*/
	
		var stringFromCharCode = String.fromCharCode;
	
		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}
	
		/*--------------------------------------------------------------------------*/
	
		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}
	
		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}
	
		function wtf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}
	
		/*--------------------------------------------------------------------------*/
	
		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}
	
			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;
	
			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}
	
			// If we end up here, it’s not a continuation byte.
			throw Error('Invalid continuation byte');
		}
	
		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;
	
			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}
	
			if (byteIndex == byteCount) {
				return false;
			}
	
			// Read the first byte.
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;
	
			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}
	
			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}
	
			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}
	
			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}
	
			throw Error('Invalid WTF-8 detected');
		}
	
		var byteArray;
		var byteCount;
		var byteIndex;
		function wtf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}
	
		/*--------------------------------------------------------------------------*/
	
		var wtf8 = {
			'version': '1.0.0',
			'encode': wtf8encode,
			'decode': wtf8decode
		};
	
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return wtf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = wtf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in wtf8) {
					hasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.wtf8 = wtf8;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(952)(module), (function() { return this; }())))

/***/ },
/* 1956 */
/***/ function(module, exports) {

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(){
	  "use strict";
	
	  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	
	  // Use a lookup table to find the index.
	  var lookup = new Uint8Array(256);
	  for (var i = 0; i < chars.length; i++) {
	    lookup[chars.charCodeAt(i)] = i;
	  }
	
	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";
	
	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }
	
	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }
	
	    return base64;
	  };
	
	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;
	
	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }
	
	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);
	
	    for (i = 0; i < len; i+=4) {
	      encoded1 = lookup[base64.charCodeAt(i)];
	      encoded2 = lookup[base64.charCodeAt(i+1)];
	      encoded3 = lookup[base64.charCodeAt(i+2)];
	      encoded4 = lookup[base64.charCodeAt(i+3)];
	
	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }
	
	    return arraybuffer;
	  };
	})();


/***/ },
/* 1957 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Create a blob builder even when vendor prefixes exist
	 */
	
	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;
	
	/**
	 * Check if Blob constructor is supported
	 */
	
	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();
	
	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */
	
	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();
	
	/**
	 * Check if BlobBuilder is supported
	 */
	
	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;
	
	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */
	
	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;
	
	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }
	
	      ary[i] = buf;
	    }
	  }
	}
	
	function BlobBuilderConstructor(ary, options) {
	  options = options || {};
	
	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);
	
	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }
	
	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};
	
	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};
	
	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1958 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	if (true) {
	  module.exports = Emitter;
	}
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 1959 */
/***/ function(module, exports) {

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */
	
	exports.encode = function (obj) {
	  var str = '';
	
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }
	
	  return str;
	};
	
	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */
	
	exports.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};


/***/ },
/* 1960 */
/***/ function(module, exports) {

	
	module.exports = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

/***/ },
/* 1961 */
/***/ function(module, exports) {

	'use strict';
	
	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length = 64
	  , map = {}
	  , seed = 0
	  , i = 0
	  , prev;
	
	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode(num) {
	  var encoded = '';
	
	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);
	
	  return encoded;
	}
	
	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode(str) {
	  var decoded = 0;
	
	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }
	
	  return decoded;
	}
	
	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode(+new Date());
	
	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode(seed++);
	}
	
	//
	// Map each character to its index.
	//
	for (; i < length; i++) map[alphabet[i]] = i;
	
	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode;
	yeast.decode = decode;
	module.exports = yeast;


/***/ },
/* 1962 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(1963);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    return exports.storage.debug;
	  } catch(e) {}
	
	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (typeof process !== 'undefined' && 'env' in process) {
	    return process.env.DEBUG;
	  }
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1963 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug.debug = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(1964);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    // apply env-specific formatting
	    args = exports.formatArgs.apply(self, args);
	
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 1964 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000
	var m = s * 60
	var h = m * 60
	var d = h * 24
	var y = d * 365.25
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function (val, options) {
	  options = options || {}
	  var type = typeof val
	  if (type === 'string' && val.length > 0) {
	    return parse(val)
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ?
				fmtLong(val) :
				fmtShort(val)
	  }
	  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
	}
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = String(str)
	  if (str.length > 10000) {
	    return
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
	  if (!match) {
	    return
	  }
	  var n = parseFloat(match[1])
	  var type = (match[2] || 'ms').toLowerCase()
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n
	    default:
	      return undefined
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd'
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h'
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm'
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's'
	  }
	  return ms + 'ms'
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms'
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) {
	    return
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's'
	}


/***/ },
/* 1965 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module requirements.
	 */
	
	var Polling = __webpack_require__(1948);
	var inherit = __webpack_require__(1960);
	
	/**
	 * Module exports.
	 */
	
	module.exports = JSONPPolling;
	
	/**
	 * Cached regular expressions.
	 */
	
	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;
	
	/**
	 * Global JSONP callbacks.
	 */
	
	var callbacks;
	
	/**
	 * Noop.
	 */
	
	function empty () { }
	
	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */
	
	function JSONPPolling (opts) {
	  Polling.call(this, opts);
	
	  this.query = this.query || {};
	
	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!global.___eio) global.___eio = [];
	    callbacks = global.___eio;
	  }
	
	  // callback identifier
	  this.index = callbacks.length;
	
	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });
	
	  // append to query string
	  this.query.j = this.index;
	
	  // prevent spurious errors from being emitted when the window is unloaded
	  if (global.document && global.addEventListener) {
	    global.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}
	
	/**
	 * Inherits from Polling.
	 */
	
	inherit(JSONPPolling, Polling);
	
	/*
	 * JSONP only supports binary as base64 encoded strings
	 */
	
	JSONPPolling.prototype.supportsBinary = false;
	
	/**
	 * Closes the socket.
	 *
	 * @api private
	 */
	
	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }
	
	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }
	
	  Polling.prototype.doClose.call(this);
	};
	
	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */
	
	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');
	
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }
	
	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function (e) {
	    self.onError('jsonp poll error', e);
	  };
	
	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  } else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;
	
	  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);
	
	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};
	
	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */
	
	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;
	
	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;
	
	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);
	
	    this.form = form;
	    this.area = area;
	  }
	
	  this.form.action = this.uri();
	
	  function complete () {
	    initIframe();
	    fn();
	  }
	
	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }
	
	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }
	
	    iframe.id = self.iframeId;
	
	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }
	
	  initIframe();
	
	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');
	
	  try {
	    this.form.submit();
	  } catch (e) {}
	
	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function () {
	      if (self.iframe.readyState === 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1966 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */
	
	var Transport = __webpack_require__(1949);
	var parser = __webpack_require__(1950);
	var parseqs = __webpack_require__(1959);
	var inherit = __webpack_require__(1960);
	var yeast = __webpack_require__(1961);
	var debug = __webpack_require__(1962)('engine.io-client:websocket');
	var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
	var NodeWebSocket;
	if (typeof window === 'undefined') {
	  try {
	    NodeWebSocket = __webpack_require__(1967);
	  } catch (e) { }
	}
	
	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */
	
	var WebSocket = BrowserWebSocket;
	if (!WebSocket && typeof window === 'undefined') {
	  WebSocket = NodeWebSocket;
	}
	
	/**
	 * Module exports.
	 */
	
	module.exports = WS;
	
	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */
	
	function WS (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
	  if (!this.usingBrowserWebSocket) {
	    WebSocket = NodeWebSocket;
	  }
	  Transport.call(this, opts);
	}
	
	/**
	 * Inherits from Transport.
	 */
	
	inherit(WS, Transport);
	
	/**
	 * Transport name.
	 *
	 * @api public
	 */
	
	WS.prototype.name = 'websocket';
	
	/*
	 * WebSockets support binary
	 */
	
	WS.prototype.supportsBinary = true;
	
	/**
	 * Opens socket.
	 *
	 * @api private
	 */
	
	WS.prototype.doOpen = function () {
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }
	
	  var uri = this.uri();
	  var protocols = void (0);
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };
	
	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	  if (this.localAddress) {
	    opts.localAddress = this.localAddress;
	  }
	
	  try {
	    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
	  } catch (err) {
	    return this.emit('error', err);
	  }
	
	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }
	
	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'nodebuffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }
	
	  this.addEventListeners();
	};
	
	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */
	
	WS.prototype.addEventListeners = function () {
	  var self = this;
	
	  this.ws.onopen = function () {
	    self.onOpen();
	  };
	  this.ws.onclose = function () {
	    self.onClose();
	  };
	  this.ws.onmessage = function (ev) {
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function (e) {
	    self.onError('websocket error', e);
	  };
	};
	
	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */
	
	WS.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	
	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function (packet) {
	      parser.encodePacket(packet, self.supportsBinary, function (data) {
	        if (!self.usingBrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }
	
	          if (self.perMessageDeflate) {
	            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }
	
	        // Sometimes the websocket has already been closed but the browser didn't
	        // have a chance of informing us about it yet, in that case send will
	        // throw an error
	        try {
	          if (self.usingBrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e) {
	          debug('websocket closed before onclose event');
	        }
	
	        --total || done();
	      });
	    })(packets[i]);
	  }
	
	  function done () {
	    self.emit('flush');
	
	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function () {
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};
	
	/**
	 * Called upon close
	 *
	 * @api private
	 */
	
	WS.prototype.onClose = function () {
	  Transport.prototype.onClose.call(this);
	};
	
	/**
	 * Closes socket.
	 *
	 * @api private
	 */
	
	WS.prototype.doClose = function () {
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};
	
	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */
	
	WS.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';
	
	  // avoid port if default for schema
	  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
	    ('ws' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }
	
	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }
	
	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }
	
	  query = parseqs.encode(query);
	
	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }
	
	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};
	
	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */
	
	WS.prototype.check = function () {
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1967 */,
/* 1968 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */
	
	var rvalidchars = /^[\],:{}\s]*$/;
	var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
	var rtrimLeft = /^\s+/;
	var rtrimRight = /\s+$/;
	
	module.exports = function parsejson(data) {
	  if ('string' != typeof data || !data) {
	    return null;
	  }
	
	  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');
	
	  // Attempt to parse using the native JSON parser first
	  if (global.JSON && JSON.parse) {
	    return JSON.parse(data);
	  }
	
	  if (rvalidchars.test(data.replace(rvalidescape, '@')
	      .replace(rvalidtokens, ']')
	      .replace(rvalidbraces, ''))) {
	    return (new Function('return ' + data))();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1969 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */
	
	var parser = __webpack_require__(1934);
	var Emitter = __webpack_require__(1958);
	var toArray = __webpack_require__(1970);
	var on = __webpack_require__(1971);
	var bind = __webpack_require__(1972);
	var debug = __webpack_require__(1931)('socket.io-client:socket');
	var hasBin = __webpack_require__(1952);
	
	/**
	 * Module exports.
	 */
	
	module.exports = exports = Socket;
	
	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */
	
	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  connecting: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1,
	  ping: 1,
	  pong: 1
	};
	
	/**
	 * Shortcut to `Emitter#emit`.
	 */
	
	var emit = Emitter.prototype.emit;
	
	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */
	
	function Socket (io, nsp, opts) {
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	  if (opts && opts.query) {
	    this.query = opts.query;
	  }
	  if (this.io.autoConnect) this.open();
	}
	
	/**
	 * Mix in `Emitter`.
	 */
	
	Emitter(Socket.prototype);
	
	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */
	
	Socket.prototype.subEvents = function () {
	  if (this.subs) return;
	
	  var io = this.io;
	  this.subs = [
	    on(io, 'open', bind(this, 'onopen')),
	    on(io, 'packet', bind(this, 'onpacket')),
	    on(io, 'close', bind(this, 'onclose'))
	  ];
	};
	
	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */
	
	Socket.prototype.open =
	Socket.prototype.connect = function () {
	  if (this.connected) return this;
	
	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' === this.io.readyState) this.onopen();
	  this.emit('connecting');
	  return this;
	};
	
	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.send = function () {
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};
	
	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.emit = function (ev) {
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }
	
	  var args = toArray(arguments);
	  var parserType = parser.EVENT; // default
	  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
	  var packet = { type: parserType, data: args };
	
	  packet.options = {};
	  packet.options.compress = !this.flags || false !== this.flags.compress;
	
	  // event ack callback
	  if ('function' === typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }
	
	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }
	
	  delete this.flags;
	
	  return this;
	};
	
	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.packet = function (packet) {
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};
	
	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */
	
	Socket.prototype.onopen = function () {
	  debug('transport is open - connecting');
	
	  // write connect packet if necessary
	  if ('/' !== this.nsp) {
	    if (this.query) {
	      this.packet({type: parser.CONNECT, query: this.query});
	    } else {
	      this.packet({type: parser.CONNECT});
	    }
	  }
	};
	
	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */
	
	Socket.prototype.onclose = function (reason) {
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};
	
	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.onpacket = function (packet) {
	  if (packet.nsp !== this.nsp) return;
	
	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;
	
	    case parser.EVENT:
	      this.onevent(packet);
	      break;
	
	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;
	
	    case parser.ACK:
	      this.onack(packet);
	      break;
	
	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;
	
	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;
	
	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};
	
	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.onevent = function (packet) {
	  var args = packet.data || [];
	  debug('emitting event %j', args);
	
	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }
	
	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};
	
	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */
	
	Socket.prototype.ack = function (id) {
	  var self = this;
	  var sent = false;
	  return function () {
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);
	
	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      type: type,
	      id: id,
	      data: args
	    });
	  };
	};
	
	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */
	
	Socket.prototype.onack = function (packet) {
	  var ack = this.acks[packet.id];
	  if ('function' === typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};
	
	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */
	
	Socket.prototype.onconnect = function () {
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};
	
	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */
	
	Socket.prototype.emitBuffered = function () {
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];
	
	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};
	
	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */
	
	Socket.prototype.ondisconnect = function () {
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};
	
	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */
	
	Socket.prototype.destroy = function () {
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }
	
	  this.io.destroy(this);
	};
	
	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.close =
	Socket.prototype.disconnect = function () {
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }
	
	  // remove socket from pool
	  this.destroy();
	
	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};
	
	/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */
	
	Socket.prototype.compress = function (compress) {
	  this.flags = this.flags || {};
	  this.flags.compress = compress;
	  return this;
	};


/***/ },
/* 1970 */
/***/ function(module, exports) {

	module.exports = toArray
	
	function toArray(list, index) {
	    var array = []
	
	    index = index || 0
	
	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i]
	    }
	
	    return array
	}


/***/ },
/* 1971 */
/***/ function(module, exports) {

	
	/**
	 * Module exports.
	 */
	
	module.exports = on;
	
	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */
	
	function on (obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function () {
	      obj.removeListener(ev, fn);
	    }
	  };
	}


/***/ },
/* 1972 */
/***/ function(module, exports) {

	/**
	 * Slice reference.
	 */
	
	var slice = [].slice;
	
	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */
	
	module.exports = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};


/***/ },
/* 1973 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Backoff`.
	 */
	
	module.exports = Backoff;
	
	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */
	
	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}
	
	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */
	
	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};
	
	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */
	
	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};
	
	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */
	
	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};
	
	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */
	
	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};
	
	/**
	 * Set the jitter
	 *
	 * @api public
	 */
	
	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};
	


/***/ },
/* 1974 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var BuiltInEmitter = __webpack_require__(786).EventEmitter
	
	module.exports = function (CustomEmitter) {
	  var Emitter = CustomEmitter || BuiltInEmitter
	  var emit = Emitter.prototype.emit
	
	  function onevent (packet) {
	    var args = packet.data || []
	    if (packet.id != null) {
	      args.push(this.ack(packet.id))
	    }
	    emit.call(this, '*', packet)
	    return emit.apply(this, args)
	  }
	
	  return function (socket, next) {
	    if (socket.onevent !== onevent) {
	      socket.onevent = onevent
	    }
	    return next ? next() : null
	  }
	}


/***/ },
/* 1975 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var extend = __webpack_require__(859)
	var typeforce = __webpack_require__(1054)
	var protobuf = __webpack_require__(1184)
	var Sendy = __webpack_require__(1901)
	var Switchboard = Sendy.Switchboard
	var Packet = protobuf(__webpack_require__(1976).ws).Packet
	
	module.exports = function switchboard (opts) {
	  typeforce({
	    identifier: 'String'
	  }, opts)
	
	  var identifier = opts.identifier
	  var uclient = opts.unreliable
	  return new Switchboard(extend({
	    decode: decode,
	    encode: encode,
	    clientForRecipient: getDefaultClientForRecipient
	  }, opts))
	
	  function encode (msg, recipient) {
	    return Packet.encode({
	      to: recipient,
	      data: msg
	    })
	  }
	}
	
	function decode (msg) {
	  if (msg instanceof ArrayBuffer) msg = new Buffer(msg)
	
	  return Packet.decode(msg)
	}
	
	function getDefaultClientForRecipient () {
	  return new Sendy()
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1976 */
/***/ function(module, exports, __webpack_require__) {

	
	exports.ws = __webpack_require__(1977)


/***/ },
/* 1977 */
/***/ function(module, exports) {

	
	module.exports = `
	  message Packet {
	    optional string from = 1;
	    optional string to = 2;
	    required bytes data = 3;
	  }
	`


/***/ },
/* 1978 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {
	var util = __webpack_require__(1130)
	var EventEmitter = __webpack_require__(786).EventEmitter
	var typeforce = __webpack_require__(1054)
	var debug = __webpack_require__(787)('sendy-axolotl')
	var connect = __webpack_require__(1979).connect
	var Wire = __webpack_require__(1997)
	var noop = function () {}
	
	function Client (opts) {
	  var self = this
	
	  typeforce({
	    client: 'Object',
	    key: 'Object',
	    theirPubKey: 'Object'
	  }, opts)
	
	  EventEmitter.call(this)
	
	  this._client = opts.client
	  connect(this, this._client)
	
	  this._key = opts.key
	  this._theirPubKey = opts.theirPubKey
	  this._debugId = new Buffer(opts.key.publicKey).toString('hex').slice(0, 10)
	  this._deliveryCallbacks = []
	  this._queue = []
	  this._queuedChunks = 0
	  this._setupWire()
	
	  this._client.on('receive', function (msg) {
	    if (self._wire) self._wire.write(msg)
	  })
	}
	
	util.inherits(Client, EventEmitter)
	exports = module.exports = Client
	
	Client.prototype._debug = function () {
	  var args = Array.prototype.slice.call(arguments)
	  args.unshift(this._debugId)
	  return debug.apply(null, args)
	}
	
	Client.prototype._setupWire = function () {
	  const self = this
	  const wire = this._wire = new Wire({
	    identity: this._key,
	    theirIdentity: this._theirPubKey
	  })
	
	  wire.on('data', function (msg) {
	    if (self._destroyed) return
	
	    // self._debug('sending', msg)
	    self._deliveryCallbacks.push({
	      count: ++self._queuedChunks,
	      callback: null
	    })
	
	    self._debug('sending...')
	    self._client.send(msg, function (err) {
	      // more expensive, but simpler
	      if (err) return self.destroy()
	
	      self._queuedChunks--
	      self._deliveryCallbacks.forEach(function (item) {
	        item.count--
	      })
	
	      var callNow = self._deliveryCallbacks.filter(function (item) {
	        return item.count === 0
	      })
	
	      self._deliveryCallbacks = self._deliveryCallbacks.filter(function (item) {
	        return item.count !== 0
	      })
	
	      callNow.forEach(function (item) {
	        if (item.callback) item.callback()
	      })
	    })
	  })
	
	  wire.on('request', function (req) {
	    if (self._destroyed) return
	
	    self.emit('request', req)
	  })
	
	  wire.on('message', function (msg) {
	    if (self._destroyed) return
	
	    self._debug('received message')
	    self.emit('receive', msg)
	  })
	
	  wire.on('error', function (err) {
	    if (self._destroyed) return
	
	    self.destroy()
	
	    // self._debug('resetting due to OTR error: ' + err)
	    // self._resetAndResend()
	  })
	
	  this._processQueue()
	}
	
	Client.prototype.send = function (msg, ondelivered) {
	  var self = this
	  if (this._destroyed) throw new Error('destroyed')
	
	  if (this._cancelingPending) {
	    return process.nextTick(function () {
	      self.send(msg, ondelivered)
	    })
	  }
	
	  this._debug('queueing msg')
	  this._queue.push(arguments)
	  if (typeof msg === 'string') {
	    // assume utf8
	    msg = new Buffer(msg)
	  }
	
	  this._processQueue()
	}
	
	// Client.prototype._resetAndResend = function () {
	//   var queue = this._queue.slice()
	//   this.reset()
	//   queue.forEach(function (args) {
	//     this.send.apply(this, args)
	//   }, this)
	// }
	
	Client.prototype._processQueue = function () {
	  var self = this
	  if (this._destroyed || !this._queue.length) return
	
	  var next = this._queue[0]
	  var msg = next[0]
	  var ondelivered = next[1] || noop
	  this._wire.send(msg, function (err) {
	    if (self._destroyed) return
	    if (err) return self.emit('error', err)
	
	    // last 'data' event for this message
	    // has just been emitted
	    //
	    // NOTE: this doesn't work if a session needs to be re-established
	    // for some reason during the process of getting this message through
	    // so it's better to not rely on this and number messages instead
	    self._deliveryCallbacks[self._deliveryCallbacks.length - 1].callback = function (err) {
	      self._debug('delivered msg')
	      self._queue.shift()
	      ondelivered(err)
	    }
	  })
	}
	
	Client.prototype.destroy = function () {
	  var self = this
	  if (this._destroyed) return
	
	  this._debug('destroying')
	  this._destroyed = true
	  this._wire.end()
	  this._client.destroy()
	  this.emit('destroy')
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer, __webpack_require__(294)))

/***/ },
/* 1979 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = exports = exports.MessageClient = __webpack_require__(1980)
	exports.Connection = __webpack_require__(1994)
	exports.Switchboard = __webpack_require__(1996)
	exports.connect = __webpack_require__(1993).connect


/***/ },
/* 1980 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var EventEmitter = __webpack_require__(786).EventEmitter
	var util = __webpack_require__(1130)
	var varint = __webpack_require__(1191)
	var lps = __webpack_require__(1981)
	var debug = __webpack_require__(787)('sendy:messenger')
	var once = __webpack_require__(1052)
	var utils = __webpack_require__(1993)
	var Symmetric = __webpack_require__(1994)
	var UINT32 = 0xffffffff
	var COUNT_PROP = '_sendyCount'
	var ID = 0
	
	function LengthPrefixed (opts) {
	  var self = this
	
	  opts = opts || {}
	
	  EventEmitter.call(this)
	
	  this._client = opts.client || new Symmetric(opts)
	  utils.connect(this, this._client)
	
	  this._id = opts.name || ID++
	  this._client.once('destroy', function () {
	    self._destroyed = true
	    self._client = null
	  })
	
	  this._client.on('reset', function () {
	    self._debug('reset length-prefixed decoder')
	    self._resetDecoder()
	  })
	
	  this._client.on('receive', function (lengthPrefixedData) {
	    process.nextTick(function () {
	      self._decoder.write(lengthPrefixedData)
	    })
	  })
	
	  this._onDecoded = this._onDecoded.bind(this)
	  this._queued = 0
	  this._deliveryCallbacks = []
	  this._resetDecoder()
	}
	
	util.inherits(LengthPrefixed, EventEmitter)
	exports = module.exports = LengthPrefixed
	
	LengthPrefixed.prototype._debug = function () {
	  if (debug.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debug.apply(null, args)
	  }
	}
	
	LengthPrefixed.prototype._resetDecoder = function () {
	  if (this._decoder) {
	    this._decoder.removeListener('data', this._onDecoded)
	  }
	
	  this._decoder = lps.decode()
	  this._decoder.on('data', this._onDecoded)
	}
	
	LengthPrefixed.prototype._onDecoded = function (data) {
	  this.emit('receive', data)
	}
	
	// LengthPrefixed.prototype.reset = function (err) {
	//   if (this._destroyed) return
	
	//   var cbs = err && this._deliveryCallbacks && this._deliveryCallbacks.slice()
	//   this._queued = 0
	//   this._deliveryCallbacks = []
	//   this._resetDecoder()
	//   this._client.reset(err)
	// }
	
	LengthPrefixed.prototype.send = function (msg, cb) {
	  var self = this
	
	  if (this._cancelingPending) {
	    return process.nextTick(function () {
	      self.send(msg, cb)
	    })
	  }
	
	  cb = once(cb || function () {})
	  cb[COUNT_PROP] = ++this._queued
	  this._deliveryCallbacks.push(cb)
	
	  var data = utils.toBuffer(msg)
	  var length = new Buffer(varint.encode(data.length))
	  var totalLength = data.length + length.length
	
	  this._client.send(Buffer.concat([length, data], totalLength), function (err) {
	    if (err) {
	      // less efficient but simpler
	      return self.destroy(err)
	      // // cancel all queued
	      // self._cancelingPending = true
	      // process.nextTick(function () {
	      //   self._cancelingPending = false
	      // })
	
	      // var cbs = self._deliveryCallbacks.slice()
	      // self._deliveryCallbacks.length = 0
	      // self._queued = 0
	      // cbs.forEach(function (fn) {
	      //   fn(err)
	      // })
	
	      // return
	    }
	
	    self._queued--
	    self._deliveryCallbacks.forEach(function (cb) {
	      cb[COUNT_PROP]--
	    })
	
	    var callNow = self._deliveryCallbacks.filter(function (cb) {
	      return cb[COUNT_PROP] === 0
	    })
	
	    self._deliveryCallbacks = self._deliveryCallbacks.filter(function (cb) {
	      return cb[COUNT_PROP] !== 0
	    })
	
	    callNow.forEach(function (cb) {
	      cb()
	    })
	  })
	}
	
	LengthPrefixed.prototype.destroy = function () {
	  if (this._destroyed) return
	
	  this._destroyed = true
	  this._client.destroy()
	  if (this._deliveryCallbacks.length) {
	    var err = new Error('destroyed')
	    var cbs = this._deliveryCallbacks
	    cbs.forEach(function (fn) {
	      fn(err)
	    })
	  }
	
	  this.emit('destroy', err)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1981 */
/***/ function(module, exports, __webpack_require__) {

	exports.encode = __webpack_require__(1982)
	exports.decode = __webpack_require__(1992)


/***/ },
/* 1982 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var varint = __webpack_require__(1191)
	var stream = __webpack_require__(1983)
	var util = __webpack_require__(1130)
	
	var pool = new Buffer(10 * 1024)
	var used = 0
	
	var Encoder = function () {
	  if (!(this instanceof Encoder)) return new Encoder()
	  stream.Transform.call(this)
	}
	
	util.inherits(Encoder, stream.Transform)
	
	Encoder.prototype._transform = function (data, enc, cb) {
	  varint.encode(data.length, pool, used)
	  used += varint.encode.bytes
	
	  this.push(pool.slice(used - varint.encode.bytes, used))
	  this.push(data)
	
	  if (pool.length - used < 100) {
	    pool = new Buffer(10 * 1024)
	    used = 0
	  }
	
	  cb()
	}
	
	module.exports = Encoder
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1983 */,
/* 1984 */,
/* 1985 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 1986 */,
/* 1987 */,
/* 1988 */,
/* 1989 */,
/* 1990 */,
/* 1991 */,
/* 1992 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var varint = __webpack_require__(1191)
	var stream = __webpack_require__(1983)
	var util = __webpack_require__(1130)
	
	var Decoder = function (opts) {
	  if (!(this instanceof Decoder)) return new Decoder(opts)
	  stream.Transform.call(this)
	
	  this._missing = 0
	  this._message = null
	  this._limit = opts && opts.limit || 0
	  this._allowEmpty = !!(opts && opts.allowEmpty)
	  this._prefix = new Buffer(this._limit ? varint.encodingLength(this._limit) : 100)
	  this._ptr = 0
	
	  if (this._allowEmpty) {
	    this._readableState.highWaterMark = 16
	    this._readableState.objectMode = true
	  }
	}
	
	util.inherits(Decoder, stream.Transform)
	
	Decoder.prototype._push = function (message) {
	  this._ptr = 0
	  this._missing = 0
	  this._message = null
	  this.push(message)
	}
	
	Decoder.prototype._parseLength = function (data, offset) {
	  for (offset; offset < data.length; offset++) {
	    if (this._ptr >= this._prefix.length) return this._prefixError(data)
	    this._prefix[this._ptr++] = data[offset]
	    if (!(data[offset] & 0x80)) {
	      this._missing = varint.decode(this._prefix)
	      if (this._limit && this._missing > this._limit) return this._prefixError(data)
	      if (!this._missing && this._allowEmpty) this._push(Buffer(0))
	      this._ptr = 0
	      return offset + 1
	    }
	  }
	  return data.length
	}
	
	Decoder.prototype._prefixError = function (data) {
	  this.emit('error', new Error('Message is larger than max length'))
	  return data.length
	}
	
	Decoder.prototype._parseMessage = function (data, offset) {
	  var free = data.length - offset
	  var missing = this._missing
	
	  if (!this._message) {
	    if (missing <= free) { // fast track - no copy
	      this._push(data.slice(offset, offset + missing))
	      return offset + missing
	    }
	    this._message = new Buffer(missing)
	  }
	
	  // TODO: add opt-in "partial mode" to completely avoid copys
	  data.copy(this._message, this._ptr, offset, offset + missing)
	
	  if (missing <= free) {
	    this._push(this._message)
	    return offset + missing
	  }
	
	  this._missing -= free
	  this._ptr += free
	
	  return data.length
	}
	
	Decoder.prototype._transform = function (data, enc, cb) {
	  var offset = 0
	
	  while (offset < data.length) {
	    if (this._missing) offset = this._parseMessage(data, offset)
	    else offset = this._parseLength(data, offset)
	  }
	
	  cb()
	}
	
	module.exports = Decoder
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1993 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var reemit = __webpack_require__(1410)
	var slice = Array.prototype.slice
	
	exports.toBuffer = function toBuffer (data) {
	  if (Buffer.isBuffer(data)) return data
	
	  if (typeof data === 'object') {
	    data = JSON.stringify(data)
	  }
	
	  if (typeof data === 'string') {
	    return new Buffer(data)
	  } else {
	    throw new Error('expected plain javascript object, Buffer, or string')
	  }
	}
	
	exports.connect = function connect (/* pipeline */) {
	  var top = arguments[0]
	  var rest = slice.call(arguments, 1)
	  rest.reduce(function (prev, next) {
	    // bubble 'send' event
	    reemit(next, prev, ['send', 'pause', 'resume', 'timeout'])
	    prev.receive = function () {
	      // -> forward receive call
	      return next.receive.apply(next, arguments)
	    }
	
	    if (!prev.pause) prev.pause = next.pause.bind(next)
	    if (!prev.resume) prev.resume = next.resume.bind(next)
	    if (!prev.setTimeout && !prev.clearTimeout) {
	      prev.setTimeout = next.setTimeout.bind(next)
	      prev.clearTimeout = next.clearTimeout.bind(next)
	    }
	  }, top)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer))

/***/ },
/* 1994 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {var cyclist = __webpack_require__(1921)
	var util = __webpack_require__(1130)
	var EventEmitter = __webpack_require__(786).EventEmitter
	var debugConnection = __webpack_require__(787)('sendy:cxn')
	var debugServer = __webpack_require__(787)('sendy:server')
	var debugClient = __webpack_require__(787)('sendy:client')
	var debugSymmetric = __webpack_require__(787)('sendy:symmetric')
	var reemit = __webpack_require__(1410)
	var BitArray = __webpack_require__(1995)
	var utils = __webpack_require__(1993)
	
	var EXTENSION    = 0
	var VERSION      = 1
	var UINT16       = 0xffff
	var ID_MASK      = 0xf << 4
	var MTU          = 1500 // tcp-ish
	
	var PACKET_DATA  = 0 << 4
	var PACKET_FIN   = 1 << 4
	var PACKET_STATE = 2 << 4
	var PACKET_RESET = 3 << 4
	var PACKET_SYN   = 4 << 4
	
	var MIN_PACKET_SIZE     = 20
	var DEFAULT_WINDOW_SIZE = 1 << 18
	var CLOSE_GRACE         = 3000
	var KEEP_ALIVE_INTERVAL = 10 * 1000
	var RESEND_INTERVAL     = 1000
	
	var BUFFER_SIZE         = 512
	var RECV_IDS = BitArray(UINT16)
	
	var uint32 = function (n) {
	  return n >>> 0
	}
	
	var uint16 = function (n) {
	  return n & UINT16
	}
	
	var hrtime = process.hrtime ?
	  process.hrtime.bind(process) :
	  __webpack_require__(1923)
	
	var timestamp = function () {
	  var offset = hrtime()
	  var then = Date.now() * 1000
	
	  return function () {
	    var diff = hrtime(offset)
	    // microseconds
	    return uint32(then + 1000000 * diff[0] + ((diff[1] / 1000) | 0))
	  }
	}()
	
	var bufferToPacket = function (buffer) {
	  var packet = {}
	  packet.id = buffer[0] & ID_MASK
	  packet.connection = buffer.readUInt16BE(2)
	  packet.timestamp = buffer.readUInt32BE(4)
	  packet.timediff = buffer.readUInt32BE(8)
	  packet.window = buffer.readUInt32BE(12)
	  packet.seq = buffer.readUInt16BE(16)
	  packet.ack = buffer.readUInt16BE(18)
	  packet.data = buffer.length > 20 ? buffer.slice(20) : null
	  return packet
	}
	
	var packetToBuffer = function (packet) {
	  if (packet.buffer) return packet.buffer
	
	  var buffer = new Buffer(20 + (packet.data ? packet.data.length : 0))
	  buffer[0] = packet.id | VERSION
	  buffer[1] = EXTENSION
	  buffer.writeUInt16BE(packet.connection, 2)
	  buffer.writeUInt32BE(packet.timestamp, 4)
	  buffer.writeUInt32BE(packet.timediff, 8)
	  buffer.writeUInt32BE(packet.window, 12)
	  buffer.writeUInt16BE(packet.seq, 16)
	  buffer.writeUInt16BE(packet.ack, 18)
	  if (packet.data) packet.data.copy(buffer, 20)
	  return packet.buffer = buffer
	}
	
	var packetType = function (packet) {
	  return packet.id === PACKET_DATA
	    ? 'data' : packet.id === PACKET_STATE
	      ? 'ack' : packet.id === PACKET_SYN
	        ? 'syn' : packet.id === PACKET_FIN
	          ? 'fin' : 'reset'
	}
	
	var stateName = function (state) {
	  for (var p in STATE) {
	    if (state === STATE[p]) return p
	  }
	}
	
	var createPacket = function (connection, id, data) {
	  return {
	    id: id,
	    connection: id === PACKET_SYN ? connection._recvId : connection._sendId,
	    seq: connection._seq,
	    ack: connection._ack,
	    timestamp: timestamp(),
	    timediff: 0,
	    window: DEFAULT_WINDOW_SIZE,
	    data: data,
	    sent: 0
	  }
	}
	
	var nextConnectionId = function () {
	  return Math.random() * UINT16 | 0
	}
	
	var noop = function () {}
	var CID = 0
	var SID = 0
	var MID = 0
	var CONNECTIONS = {}
	
	function Connection (opts) {
	  var self = this
	  opts = opts || {}
	
	  this._opts = opts
	  this._mtu = opts.mtu || MTU
	  var resendInterval = opts.resendInterval || RESEND_INTERVAL
	  this._resendTimeoutMicroseconds = resendInterval * 1000
	  // var keepAliveInterval = opts.keepAliveInterval || KEEP_ALIVE_INTERVAL
	
	  EventEmitter.call(this)
	
	  this.setMaxListeners(0)
	  this._id = opts.name || CID++
	  this._paused = false
	  this._msgQueue = []
	  this._writeBuffer = []
	  this._deliveryCallbacks = cyclist(BUFFER_SIZE)
	  this._outgoing = cyclist(BUFFER_SIZE)
	  this._incoming = cyclist(BUFFER_SIZE)
	
	  this._inflightPackets = 0
	  // this._alive = false
	
	  var resend = setInterval(this._resend.bind(this), resendInterval)
	  // var keepAlive = setInterval(this._keepAlive.bind(this), keepAliveInterval)
	  this._keepAlive = this._keepAlive.bind(this)
	
	  this.once('close', function () {
	    self._debug('closed')
	    clearInterval(resend)
	    // clearInterval(keepAlive)
	    self.clearTimeout()
	    self._cancelPending()
	    delete CONNECTIONS[self._id]
	  })
	
	  ;['connect', 'resume', 'flush'].forEach(function (event) {
	    self.on(event, self._flush)
	  })
	
	  Object.defineProperty(this, '_backedUp', {
	    get: function () {
	      return self._writeBuffer.reduce(function (total, data) {
	        return total + data.length
	        // return total + self._countRequiredPackets(data)
	      }, 0)
	    }
	  })
	
	  // not true, but makes idleTime() more sane
	  this._lastReceivedTimestamp = Date.now()
	}
	
	Connection.MTU = MTU
	util.inherits(Connection, EventEmitter)
	
	Connection.prototype._onconnected = function () {
	  if (!this._connecting) return
	
	  this._debug('connected')
	  this._connecting = false
	  this.emit('connect')
	}
	
	Connection.prototype._debug = function () {
	  if (debugConnection.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debugConnection.apply(null, args)
	  }
	}
	
	Connection.prototype.setTimeout = function(millis, cb) {
	  var self = this
	
	  this.clearTimeout()
	  if (!millis) return
	
	  this._idleTimeoutMillis = millis
	  this._idleTimeout = setTimeout(function () {
	    var now = Date.now()
	    self._debug('timed out after ' + self.idleTime() + 'ms')
	    if (self.listenerCount('timeout')) {
	      self.emit('timeout', millis)
	    } else {
	      self.close()
	    }
	  }, millis)
	
	  unref(this._idleTimeout)
	  if (cb) this.once('timeout', cb)
	}
	
	Connection.prototype.clearTimeout = function () {
	  clearTimeout(this._idleTimeout)
	  delete this._idleTimeout
	  delete this._idleTimeoutMillis
	}
	
	Connection.prototype.close =
	Connection.prototype.destroy = function () {
	  if (this._closed) throw new Error('closed')
	
	  this._debug('closing')
	  this.clearTimeout()
	  clearTimeout(this._keepAliveTimeout)
	  this._closed = true
	  this.emit('close')
	}
	
	Connection.prototype.send = function (data, ondelivered) {
	  var self = this
	  if (this._closed) return
	  if (this._initiator !== false) this.connect()
	
	  this.resume()
	
	  data = utils.toBuffer(data)
	  this._msgQueue.push([data, ondelivered]) // normalized args
	
	  // register callback for ack for last piece
	  var bytesQueued = this._backedUp + data.length
	  var packetsTogo = Math.ceil(bytesQueued / this._mtu)
	  this._putDeliveryCallback(packetsTogo, function (err) {
	    if (!err) self._debug('delivered message!')
	    var args = self._msgQueue.shift()
	    if (args && args[1]) args[1](err)
	  })
	
	  this._bufferData(data)
	  this._flush()
	}
	
	Connection.prototype._putDeliveryCallback = function (numAcks, fn) {
	  // how many times to go around the circular buffer
	  fn._sendyRoundsLeft = Math.ceil(numAcks / BUFFER_SIZE)
	  var idx = this._seq + numAcks - 1 // current seq value is for the next packet
	  var cbs = this._deliveryCallbacks.get(idx) || []
	  cbs.push(fn)
	  this._deliveryCallbacks.put(idx, cbs)
	}
	
	Connection.prototype._callDeliveryCallbacks = function (idx) {
	  var cbs = this._deliveryCallbacks.get(idx)
	  if (!cbs) return
	
	  var l = cbs.length
	  var callNow = []
	  var callLater = []
	  for (var i = 0; i < l; i++) {
	    var fn = cbs[i]
	    fn._sendyRoundsLeft--
	    if (fn._sendyRoundsLeft <= 0) {
	      callNow.push(fn)
	    } else {
	      callLater.push(fn)
	    }
	  }
	
	  if (callLater.length === 0) this._deliveryCallbacks.del(idx)
	  else this._deliveryCallbacks.put(callLater)
	
	  if (!callNow.length) return
	
	  process.nextTick(function () {
	    callNow.forEach(call)
	  })
	}
	
	Connection.prototype._flush = function () {
	  if (this._connecting || this._paused || !this._writeBuffer.length || !this._writable()) return
	
	  var length = 0
	  var data = this._writeBuffer.shift()
	  while (length < this._mtu && this._writeBuffer.length) {
	    data = Buffer.concat([data, this._writeBuffer.shift()])
	  }
	
	  while (this._writable()) {
	    var payload = this._payload(data)
	
	    this._sendOutgoing(createPacket(this, PACKET_DATA, payload))
	
	    if (payload.length === data.length) return this._flush()
	    data = data.slice(payload.length)
	  }
	
	  this._writeBuffer.unshift(data)
	}
	
	Connection.prototype._bufferData = function (data) {
	  this._writeBuffer.push(data)
	}
	
	Connection.prototype._writable = function () {
	  // !this._connecting && !this._paused &&
	  return this._inflightPackets < BUFFER_SIZE - 1
	}
	
	Connection.prototype._payload = function (data) {
	  if (data.length > this._mtu) return data.slice(0, this._mtu)
	  return data
	}
	
	Connection.prototype._resend = function () {
	  if (this._paused || !this._inflightPackets) return
	
	  var offset = this._seq - this._inflightPackets
	  var first = this._outgoing.get(offset)
	  if (!first) return
	
	  var timeout = this._resendTimeoutMicroseconds / 2
	  var now = timestamp()
	  if (uint32(now - first.sent) < timeout) return
	
	  for (var i = 0; i < this._inflightPackets; i++) {
	    var packet = this._outgoing.get(offset + i)
	    if (uint32(now - packet.sent) < timeout) continue
	
	    if (debugConnection.enabled) {
	      this._debug('resending ' + packetType(packet))
	    }
	
	    this._transmit(packet)
	  }
	}
	
	Connection.prototype._keepAlive = function () {
	  this._debug('sending keep-alive')
	  this._sendAck()
	}
	
	Connection.prototype._recvAck = function (ack) {
	  var offset = this._seq - this._inflightPackets
	  var acked = uint16(ack - offset) + 1
	
	  if (acked >= BUFFER_SIZE) return // sanity check
	
	  var callbacks = []
	  for (var i = 0; i < acked; i++) {
	    var seq = offset + i
	    var packet = this._outgoing.del(seq)
	    this._callDeliveryCallbacks(seq)
	    if (packet) {
	      this._inflightPackets--
	    }
	    // else {
	    //   console.log(this._id, 'boo', seq)
	    // }
	  }
	
	  if (!this._inflightPackets) {
	    this.emit('flush')
	  } else {
	    // this._writable() may now be true
	    this._flush()
	  }
	}
	
	// Connection.prototype.reset = function (err) {
	//   this._cancelPending(err)
	//   this._reset() // don't resend
	// }
	
	Connection.prototype._cancelPending = function (err) {
	  err = err || new Error('connection was reset')
	  this._debug('canceling pending', err)
	  var cbArrays = this._deliveryCallbacks.values.slice()
	  this._deliveryCallbacks = cyclist(BUFFER_SIZE)
	
	  cbArrays.forEach(function (arr) {
	    if (arr) {
	      arr.forEach(function (fn) {
	        fn(err)
	      })
	    }
	  })
	}
	
	Connection.prototype._resetTimeout = function () {
	  if ('_idleTimeout' in this) {
	    this._debug('resetting timeout')
	    this.setTimeout(this._idleTimeoutMillis)
	  }
	}
	
	Connection.prototype.idleTime = function () {
	  return Date.now() - (this._lastReceivedTimestamp || 0)
	}
	
	Connection.prototype.connect = function () {
	  if (this._initiator) return
	
	  this._initiator = true
	  this._connecting = true
	  this._recvId = nextConnectionId()
	  this._sendId = uint16(this._recvId + 1)
	  this._seq = (Math.random() * UINT16) | 0
	  this._ack = 0
	  this._sendOutgoing(createPacket(this, PACKET_SYN, null))
	}
	
	Connection.prototype.receive = function (packet) {
	  this._lastReceivedTimestamp = Date.now()
	  this._resetTimeout()
	  // this._debug('received ' + packetType(packet), ', connection:', packet.connection)
	  if (packet.id === PACKET_SYN) {
	    if (this._initiator) {
	      this._debug('outbound connection, rejecting incoming SYN')
	      return this._transmit(createPacket(this, PACKET_RESET))
	    }
	
	    this._initiator = false
	    this._recvId = uint16(packet.connection+1)
	    this._sendId = packet.connection
	    this._seq = (Math.random() * UINT16) | 0
	    this._ack = packet.seq
	    this._sendAck()
	    this._onconnected()
	    return
	  }
	
	  if (packet.id === PACKET_RESET) {
	    this._debug('received RESET, closing')
	    this.close()
	    return
	  }
	
	  if (this._connecting) {
	    if (packet.id !== PACKET_STATE) return //this._incoming.put(packet.seq, packet)
	
	    this._ack = uint16(packet.seq-1)
	    this._recvAck(packet.ack)
	    this._onconnected()
	
	    packet = this._incoming.del(packet.seq)
	    if (!packet) return
	  }
	
	  this._recvAck(packet.ack)
	  if (packet.id === PACKET_STATE) return
	
	  var place = uint16(packet.seq - this._ack)
	  if (!place || place >= BUFFER_SIZE) {
	    return this._sendAck() // old packet
	  }
	
	  this._incoming.put(packet.seq, packet)
	  while (packet = this._incoming.del(this._ack + 1)) {
	    this._ack = uint16(this._ack + 1)
	    if (packet.id === PACKET_DATA) {
	      this.emit('receive', packet.data)
	    }
	
	    if (packet.id === PACKET_FIN) {
	      this._debug('received FIN')
	      return this.close()
	    }
	  }
	
	  this._sendAck()
	}
	
	Connection.prototype._sendAck = function () {
	  this._transmit(createPacket(this, PACKET_STATE, null)); // TODO: make this delayed
	}
	
	Connection.prototype._sendOutgoing = function (packet) {
	  this._outgoing.put(packet.seq, packet)
	  this._seq = uint16(this._seq + 1)
	  this._inflightPackets++
	  this._transmit(packet)
	}
	
	// Connection.prototype._cancelPacket = function (packet) {
	//   var outgoing = this._outgoing.get(packet.seq)
	//   if (outgoing === packet) {
	//     this._outgoing.del(packet.seq)
	//     this._inflightPackets--
	//   }
	// }
	
	Connection.prototype._transmit = function (packet) {
	  packet.sent = packet.sent === 0 ? packet.timestamp : timestamp()
	  var message = packetToBuffer(packet)
	  this._alive = true
	  // this._debug('sending ' + packetType(packet), 'seq:', packet.seq, ', ack:', packet.ack, ', connection:', packet.connection)
	  this.emit('send', message)
	
	  clearTimeout(this._keepAliveTimeout)
	  this._keepAliveTimeout = setTimeout(this._keepAlive, this._opts.keepAliveInterval || KEEP_ALIVE_INTERVAL)
	  unref(this._keepAliveTimeout)
	}
	
	Connection.prototype.pause = function () {
	  if (this._paused) return
	  this._paused = true
	  this.emit('pause')
	}
	
	Connection.prototype.resume = function () {
	  if (!this._paused) return
	  this._paused = false
	  this.emit('resume')
	}
	
	Connection.prototype.isPaused = function () {
	  return this._paused
	}
	
	function Server (opts) {
	  if (!(this instanceof Server)) return new Server(opts)
	
	  EventEmitter.call(this)
	  this._connections = {}
	  this._opts = opts || {}
	  this._id = this._opts.name || SID++
	}
	
	util.inherits(Server, EventEmitter)
	
	Server.prototype.receive = function (message) {
	  if (message.length < MIN_PACKET_SIZE) return
	
	  var packet = Buffer.isBuffer(message) ? bufferToPacket(message) : message
	  if (this._closed && packet.id !== PACKET_FIN && packet.id !== PACKET_STATE) {
	    return
	  }
	
	  // this._debug('received ' + packetType(packet), ', connection:', packet.connection, Object.keys(this._connections))
	  var connections = this._connections
	  var id = packet.id === PACKET_SYN ? uint16(packet.connection+1) : packet.connection
	  var conn = connections[id]
	  if (conn) return conn.receive(packet)
	  if (packet.id !== PACKET_SYN) {
	    if (packet.id !== PACKET_RESET) {
	      // we don't know whether we were the initiator
	      // of this lost connection, so send 2 reset packets
	      // if we were the initiator, our sendId = packet.connection + 1
	      // if we were the receiver, our sendId = packet.connection
	      this._debug('received packet from non-existent connection, sending reset')
	      ;[packet.connection, packet.connection + 1].forEach(function (sendId) {
	        var reset = createPacket({
	          _sendId: sendId,
	          seq: 0,
	          ack: 0
	        }, PACKET_RESET)
	
	        this.emit('send', packetToBuffer(reset))
	      }, this)
	    }
	
	    return
	  }
	
	  conn = connections[id] = new Connection(this._opts)
	  this._debug('created new inbound connection ' + conn._id)
	  if (this._timeoutMillis) {
	    conn.setTimeout(this._timeoutMillis)
	  }
	
	  conn.once('close', function() {
	    delete connections[id]
	  })
	
	  this.emit('connection', conn)
	  reemit(conn, this, ['send', 'receive'])
	  conn.receive(packet)
	}
	
	Server.prototype._debug = function () {
	  if (debugServer.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debugServer.apply(null, args)
	  }
	}
	
	// Server.prototype._reset = function (resend) {
	//   for (var id in this._connections) {
	//     this._connections[id].destroy(resend)
	//   }
	// }
	
	Server.prototype.close =
	Server.prototype.destroy = function () {
	  if (this._closed) return
	
	  this._closed = true
	  this.connections().forEach(function (c) {
	    c.close()
	  })
	
	  this._debug('closing')
	  this.emit('close')
	}
	
	Server.prototype.setTimeout = function (millis) {
	  this._timeoutMillis = millis
	  for (var id in this._connections) {
	    this._connections[id].setTimeout(millis)
	  }
	}
	
	Server.prototype.clearTimeout = function () {
	  delete this._timeoutMillis
	  for (var id in this._connections) {
	    this._connections[id].clearTimeout()
	  }
	}
	
	Server.prototype.connections = function () {
	  return Object.keys(this._connections).map(function (cid) {
	    return this._connections[cid]
	  }, this)
	}
	
	function SymmetricClient (opts) {
	  EventEmitter.call(this)
	  this._opts = opts || {}
	  this._id = this._opts.name || MID++
	  this._reset()
	}
	
	util.inherits(SymmetricClient, EventEmitter)
	
	SymmetricClient.prototype._reset = function (resend) {
	  var inbound = this._inbound
	  if (inbound) {
	    this._debug('resetting symmetric client')
	    inbound.close()
	    inbound.removeAllListeners()
	  }
	
	  var outbound = this._outbound
	  if (this._dedicatedOutbound) {
	    outbound.close()
	    outbound.removeAllListeners()
	  }
	
	  this._inbound = new Server(this._opts)
	  reemit(this._inbound, this, ['send', 'receive', 'connection'])
	
	  if (resend) {
	    this._resendPending()
	  } else {
	    this._pending = []
	    if (this._opts.autoConnect !== false) {
	      this._createOutboundConnection()
	    }
	  }
	}
	
	SymmetricClient.prototype._resendPending = function () {
	  var pending = this._pending && this._pending.slice()
	  this._pending = []
	  if (pending) {
	    pending.forEach(function (args) {
	      this.send.apply(this, args)
	    }, this)
	  }
	}
	
	SymmetricClient.prototype._createOutboundConnection = function () {
	  var self = this
	
	  this._dedicatedOutbound = true
	  // TODO: reuse existing inbound connection if possible
	
	  this._outbound = new Connection(this._opts)
	  this._debug('created new outbound connection ' + this._outbound._id)
	
	  this._outbound.once('close', function () {
	    if (self._closed) return
	
	    self._createOutboundConnection()
	    if (!self._pending.length) return
	
	    self._debug('resending pending')
	    self._resendPending()
	  })
	
	  reemit(this._outbound, this, ['send', 'receive', 'timeout', 'pause', 'resume'])
	  if (this._timeoutMillis) {
	    this._outbound.setTimeout(this._timeoutMillis)
	  }
	
	  process.nextTick(function () {
	    if (!self._closed) {
	      self._outbound.connect()
	    }
	  })
	}
	
	SymmetricClient.prototype.receive = function (message) {
	  var packet = bufferToPacket(message)
	  // this._debug('received ' + packetType(packet), ', connection:', packet.connection)
	  var isForOutbound
	  if (this._outbound) {
	    isForOutbound = (
	      packet.connection === this._outbound._recvId ||
	      // see rationale in server.receive
	      (packet.id === PACKET_RESET && packet.connection === this._outbound._sendId)
	    )
	  }
	
	  var debug = debugSymmetric.enabled
	  if (isForOutbound) {
	    if (debug) this._debug('receiving', packetType(packet), 'in outbound')
	    this._outbound.receive(packet)
	  } else {
	    if (debug) this._debug('receiving', packetType(packet), 'in inbound')
	    this._inbound.receive(packet)
	  }
	}
	
	SymmetricClient.prototype.send = function (message, ondelivered) {
	  var self = this
	  ondelivered = ondelivered || noop
	
	  if (!this._outbound) {
	    // TODO: reuse inbound connection, if exists
	    // get freshest connection
	    // this._outbound = this._inbound.connections().sort(decreasingFreshness)[0]
	    // if (this._outbound) {
	    //   this._dedicatedOutbound = false
	    //   reemit(this._outbound, this, ['timeout', 'pause', 'resume'])
	    //   this._debug('reusing existing inbound connection for outbound')
	    // } else {
	      this._createOutboundConnection()
	    // }
	  }
	
	  this._pending.push([message, ondelivered])
	  this._outbound.send(message, function (err) {
	    if (self._closed) return
	
	    self._pending.shift()
	    if (err) {
	      // requeue
	      process.nextTick(function () {
	        self.send(message, ondelivered)
	      })
	    } else {
	      ondelivered(err)
	    }
	  })
	}
	
	SymmetricClient.prototype.close =
	SymmetricClient.prototype.destroy = function () {
	  if (this._closed) return
	
	  this._debug('closing')
	  this._closed = true
	  this._inbound.close()
	  if (this._dedicatedOutbound) {
	    this._outbound.close()
	  }
	}
	
	SymmetricClient.prototype.setTimeout = function (millis) {
	  this._timeoutMillis = millis
	  this._inbound.setTimeout(millis)
	  if (this._outbound) {
	    this._outbound.setTimeout(millis)
	  }
	}
	
	SymmetricClient.prototype.clearTimeout = function () {
	  this._inbound.clearTimeout()
	  if (this._outbound) {
	    this._outbound.clearTimeout()
	  }
	}
	
	SymmetricClient.prototype.pause = function () {
	  if (this._outbound) {
	    this._outbound.pause()
	  }
	}
	
	SymmetricClient.prototype.resume = function () {
	  if (this._outbound) {
	    this._outbound.resume()
	  }
	}
	
	SymmetricClient.prototype.isPaused = function () {
	  if (this._outbound) {
	    return this._outbound.isPaused()
	  }
	}
	
	SymmetricClient.prototype.outboundConnection = function () {
	  return this._outbound
	}
	
	SymmetricClient.prototype.inboundConnections = function () {
	  return this._inbound.connections()
	}
	
	SymmetricClient.prototype._debug = function () {
	  if (debugSymmetric.enabled) {
	    var args = [].slice.call(arguments)
	    args.unshift(this._id)
	    return debugSymmetric.apply(null, args)
	  }
	}
	
	exports = module.exports = SymmetricClient
	exports.Connection = Connection
	exports.Server = Server
	exports.createServer = Server
	exports.packetToBuffer = packetToBuffer
	exports.bufferToPacket = bufferToPacket
	// exports.CONNECTIONS = CONNECTIONS
	
	function call (fn) {
	  fn()
	}
	
	function decreasingFreshness (a, b) {
	  return a.idleTime() - b.idleTime()
	}
	
	function unref (obj) {
	  if (obj.unref) obj.unref()
	}
	
	// function oneTickClose (emitter, cb) {
	//   cb = cb || noop
	
	//   if (emitter._closed) return process.nextTick(cb)
	
	//   emitter.once('close', cb)
	//   if (emitter._closing) return
	
	//   emitter._closing = true
	//   process.nextTick(function () {
	//     emitter._closed = true
	//     emitter.emit('close')
	//   })
	
	//   return true
	// }
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 1995 */
/***/ function(module, exports) {

	module.exports = function bitArray (size) {
	  var buckets = []
	
	  for (var i = 0; i < Math.ceil(size / 32); i++) {
	    buckets[i] = 0
	  }
	
	  return {
	    size: function () {
	      return size
	    },
	
	    set: function (index, value) {
	      var i = Math.floor(index / 32)
	
	      // Since "undefined | 1 << index" is equivalent to "0 | 1 << index" we do not need to initialise the array explicitly here.
	      if (value) {
	        buckets[i] |= 1 << index - i * 32
	      } else {
	        buckets[i] &= ~(1 << index - i * 32)
	      }
	    },
	
	    get: function (index) {
	      var i = Math.floor(index / 32)
	      return buckets[i] & (1 << index - i * 32)
	    }
	  }
	}


/***/ },
/* 1996 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	var util = __webpack_require__(1130)
	var EventEmitter = __webpack_require__(786).EventEmitter
	var typeforce = __webpack_require__(1054)
	var extend = __webpack_require__(1151)
	var bindAll = __webpack_require__(1925)
	var once = __webpack_require__(1052)
	var debug = __webpack_require__(787)('sendy:switchboard')
	var Sendy = __webpack_require__(1980)
	var noop = function () {}
	var nochange = function (data) {
	  return data
	}
	
	var DEFAULT_CLIENT_MAKER = function (recipient) {
	  return new Sendy({ name: recipient })
	}
	
	function Switchboard (opts) {
	  var self = this
	  if (!(this instanceof Switchboard)) return new Switchboard(opts)
	
	  typeforce({
	    unreliable: 'Object',
	    clientForRecipient: '?Function',
	    encode: '?Function',
	    decode: '?Function',
	    sendTimeout: '?Number'
	  }, opts)
	
	  EventEmitter.call(this)
	
	  bindAll(this)
	
	  this._encode = opts.encode || nochange
	  this._decode = opts.decode || nochange
	  this._url = opts.url
	  this._clientForRecipient = opts.clientForRecipient || DEFAULT_CLIENT_MAKER
	  this._rclients = {}
	  this._queued = {}
	  this._presence = {}
	  this._sendTimeout = opts.sendTimeout
	
	  this._uclient = opts.unreliable
	  this._uclient.on('receive', function (msg) {
	    if (self._destroyed) return
	
	    msg = self._decode(msg)
	    self._updatePresence(msg.from, true)
	    var rclient = self._getReliableClientFor(msg.from)
	    if (rclient) {
	      // debug('received msg from ' + msg.from + ', length: ' + msg.data.length)
	      self.emit('receiving', msg)
	      rclient.receive(msg.data)
	    }
	  })
	
	  this._uclient.on('disconnect', function () {
	    if (self._destroyed) return
	
	    for (var id in self._rclients) {
	      var rclient = self._rclients[id]
	      self._updatePresence(id, false)
	      if (rclient.pause) rclient.pause()
	    }
	  })
	
	  this._uclient.on('connect', function () {
	    if (self._destroyed) return
	
	    for (var id in self._rclients) {
	      var rclient = self._rclients[id]
	      if (rclient.resume) rclient.resume()
	    }
	  })
	
	  this._uclient.on('404', function (recipient) {
	    self._updatePresence(recipient, false)
	  })
	}
	
	util.inherits(Switchboard, EventEmitter)
	exports = module.exports = Switchboard
	var proto = Switchboard.prototype
	
	proto._updatePresence = function (recipient, present) {
	  if (present === !!this._presence[recipient]) return
	
	  this._presence[recipient] = present
	  this.emit('presence', recipient, present)
	}
	
	proto.send = function (recipient, msg, ondelivered) {
	  var self = this
	
	  if (this._cancelingPending) {
	    return process.nextTick(function () {
	      self.send(recipient, msg, ondelivered)
	    })
	  }
	
	  debug('queueing msg to ' + recipient)
	  var rclient = this._getReliableClientFor(recipient)
	  if (!rclient) return
	
	  ondelivered = once(ondelivered || noop)
	
	  var queue = this._queued[recipient]
	  if (!queue) queue = this._queued[recipient] = []
	
	  var done
	  var timeout
	  queue.push({
	    msg: msg,
	    callback: ondelivered
	  })
	
	  rclient.send(msg, function (err) {
	    clearTimeout(timeout)
	    if (done) return
	
	    done = true
	    if (!err) {
	      var item = queue.shift() // rclient delivers in order
	      if (item.callback) item.callback()
	
	      return
	    }
	
	    // pause operations
	    self._cancelingPending = true
	    process.nextTick(function () {
	      self._cancelingPending = false
	    })
	
	    // as we're in the business of in-order delivery
	    // all the queued messages should be failed
	    // so whoever's running this operation can requeue them
	    var tmp = queue.slice()
	    queue.length = 0
	    tmp.forEach(function (item) {
	      item.callback(err)
	    })
	  })
	
	  // if (!this._sendTimeout) return
	
	  // timeout = setTimeout(function () {
	  //   cbWrapper(new Error('timed out'))
	  // }, self._sendTimeout)
	}
	
	proto.clearTimeout = function () {
	  this._proxyMethod('clearTimeout', arguments)
	}
	
	proto.setTimeout = function (millis) {
	  this._sendTimeout = millis
	  this._proxyMethod('setTimeout', arguments)
	}
	
	proto.cancelPending = function (recipient) {
	  var err = new Error('canceled')
	  for (var id in this._rclients) {
	    if (!recipient || id === recipient) {
	      if (this._queued[id] && this._queued[id].length) {
	        // queues get cleaned up in 'destroy' handler
	        this._rclients[id].destroy()
	        // this._rclients[id].reset(err)
	      }
	    }
	  }
	}
	
	proto.pending = function (recipient) {
	  const q = this._queued[recipient]
	  return q ? q.slice() : []
	}
	
	proto.clients = function () {
	  return Object.keys(this._rclients).map(function (k) {
	    return this._rclients[k]
	  }, this)
	}
	
	proto._getReliableClientFor = function (recipient) {
	  var self = this
	  var rclient = this._rclients[recipient]
	  if (rclient) return rclient
	
	  rclient = this._rclients[recipient] = this._clientForRecipient(recipient)
	  if (!rclient) return
	
	  if (this._sendTimeout) {
	    rclient.setTimeout(this._sendTimeout)
	  }
	
	  rclient.on('timeout', function () {
	    if (self._destroyed) return
	
	    self.emit('timeout', recipient)
	  }),
	
	  rclient.on('receive', function (msg) {
	    if (self._destroyed) return
	
	    // emit message from whoever `recipient` is
	    // debug('bubbling received msg from ' + recipient + ', length: ' + msg.length)
	    self.emit('message', msg, recipient)
	  }),
	
	  rclient.on('send', function (msg) {
	    if (self._destroyed) {
	      rclient.destroy()
	      return
	    }
	
	    debug('sending msg to ' + recipient + ', length: ' + msg.length)
	    msg = self._encode(msg, recipient)
	    self._uclient.send(msg)
	  }),
	
	  rclient.on('destroy', function (err) {
	    // cleanup.forEach(call)
	
	    delete self._rclients[recipient]
	    var queue = self._queued[recipient]
	    if (!queue || !queue.length) return
	
	    err = err || new Error('connection was destroyed')
	    delete self._queued[recipient]
	    for (var i = 0; i < queue.length; i++) {
	      queue[i].callback(err)
	    }
	  })
	
	  return rclient
	}
	
	proto._proxyMethod = function (method, args) {
	  for (var id in this._rclients) {
	    var c = this._rclients[id]
	    c[method].apply(c, args)
	  }
	}
	
	proto.destroy = function () {
	  if (this._destroyed) return
	
	  this._destroyed = true
	
	  for (var recipient in this._rclients) {
	    this._rclients[recipient].destroy()
	  }
	
	  this._uclient.destroy()
	  delete this._reliabilityClient
	  delete this._uclient
	}
	
	;['pause', 'resume'].forEach(function (method) {
	  proto[method] = function (recipient) {
	    for (var id in this._rclients) {
	      if (!recipient || id === recipient) {
	        var rclient = this._rclients[id]
	        rclient[method]()
	      }
	    }
	  }
	})
	
	// function listen (emitter, event, handler) {
	//   emitter.on(event, handler)
	//   return function () {
	//     emitter.removeListener(event, handler)
	//   }
	// }
	
	// function call (fn) {
	//   fn()
	// }
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294)))

/***/ },
/* 1997 */,
/* 1998 */,
/* 1999 */,
/* 2000 */,
/* 2001 */,
/* 2002 */,
/* 2003 */,
/* 2004 */,
/* 2005 */,
/* 2006 */,
/* 2007 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {var stream = __webpack_require__(2008)
	var eos = __webpack_require__(2017)
	var inherits = __webpack_require__(828)
	var shift = __webpack_require__(2019)
	
	var SIGNAL_FLUSH = new Buffer([0])
	
	var onuncork = function(self, fn) {
	  if (self._corked) self.once('uncork', fn)
	  else fn()
	}
	
	var destroyer = function(self, end) {
	  return function(err) {
	    if (err) self.destroy(err.message === 'premature close' ? null : err)
	    else if (end && !self._ended) self.end()
	  }
	}
	
	var end = function(ws, fn) {
	  if (!ws) return fn()
	  if (ws._writableState && ws._writableState.finished) return fn()
	  if (ws._writableState) return ws.end(fn)
	  ws.end()
	  fn()
	}
	
	var toStreams2 = function(rs) {
	  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)
	}
	
	var Duplexify = function(writable, readable, opts) {
	  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)
	  stream.Duplex.call(this, opts)
	
	  this._writable = null
	  this._readable = null
	  this._readable2 = null
	
	  this._forwardDestroy = !opts || opts.destroy !== false
	  this._forwardEnd = !opts || opts.end !== false
	  this._corked = 1 // start corked
	  this._ondrain = null
	  this._drained = false
	  this._forwarding = false
	  this._unwrite = null
	  this._unread = null
	  this._ended = false
	
	  this.destroyed = false
	
	  if (writable) this.setWritable(writable)
	  if (readable) this.setReadable(readable)
	}
	
	inherits(Duplexify, stream.Duplex)
	
	Duplexify.obj = function(writable, readable, opts) {
	  if (!opts) opts = {}
	  opts.objectMode = true
	  opts.highWaterMark = 16
	  return new Duplexify(writable, readable, opts)
	}
	
	Duplexify.prototype.cork = function() {
	  if (++this._corked === 1) this.emit('cork')
	}
	
	Duplexify.prototype.uncork = function() {
	  if (this._corked && --this._corked === 0) this.emit('uncork')
	}
	
	Duplexify.prototype.setWritable = function(writable) {
	  if (this._unwrite) this._unwrite()
	
	  if (this.destroyed) {
	    if (writable && writable.destroy) writable.destroy()
	    return
	  }
	
	  if (writable === null || writable === false) {
	    this.end()
	    return
	  }
	
	  var self = this
	  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))
	
	  var ondrain = function() {
	    var ondrain = self._ondrain
	    self._ondrain = null
	    if (ondrain) ondrain()
	  }
	
	  var clear = function() {
	    self._writable.removeListener('drain', ondrain)
	    unend()
	  }
	
	  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks
	
	  this._writable = writable
	  this._writable.on('drain', ondrain)
	  this._unwrite = clear
	
	  this.uncork() // always uncork setWritable
	}
	
	Duplexify.prototype.setReadable = function(readable) {
	  if (this._unread) this._unread()
	
	  if (this.destroyed) {
	    if (readable && readable.destroy) readable.destroy()
	    return
	  }
	
	  if (readable === null || readable === false) {
	    this.push(null)
	    this.resume()
	    return
	  }
	
	  var self = this
	  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))
	
	  var onreadable = function() {
	    self._forward()
	  }
	
	  var onend = function() {
	    self.push(null)
	  }
	
	  var clear = function() {
	    self._readable2.removeListener('readable', onreadable)
	    self._readable2.removeListener('end', onend)
	    unend()
	  }
	
	  this._drained = true
	  this._readable = readable
	  this._readable2 = readable._readableState ? readable : toStreams2(readable)
	  this._readable2.on('readable', onreadable)
	  this._readable2.on('end', onend)
	  this._unread = clear
	
	  this._forward()
	}
	
	Duplexify.prototype._read = function() {
	  this._drained = true
	  this._forward()
	}
	
	Duplexify.prototype._forward = function() {
	  if (this._forwarding || !this._readable2 || !this._drained) return
	  this._forwarding = true
	
	  var data
	
	  while ((data = shift(this._readable2)) !== null) {
	    this._drained = this.push(data)
	  }
	
	  this._forwarding = false
	}
	
	Duplexify.prototype.destroy = function(err) {
	  if (this.destroyed) return
	  this.destroyed = true
	
	  var self = this
	  process.nextTick(function() {
	    self._destroy(err)
	  })
	}
	
	Duplexify.prototype._destroy = function(err) {
	  if (err) {
	    var ondrain = this._ondrain
	    this._ondrain = null
	    if (ondrain) ondrain(err)
	    else this.emit('error', err)
	  }
	
	  if (this._forwardDestroy) {
	    if (this._readable && this._readable.destroy) this._readable.destroy()
	    if (this._writable && this._writable.destroy) this._writable.destroy()
	  }
	
	  this.emit('close')
	}
	
	Duplexify.prototype._write = function(data, enc, cb) {
	  if (this.destroyed) return cb()
	  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))
	  if (data === SIGNAL_FLUSH) return this._finish(cb)
	  if (!this._writable) return cb()
	
	  if (this._writable.write(data) === false) this._ondrain = cb
	  else cb()
	}
	
	
	Duplexify.prototype._finish = function(cb) {
	  var self = this
	  this.emit('preend')
	  onuncork(this, function() {
	    end(self._forwardEnd && self._writable, function() {
	      // haxx to not emit prefinish twice
	      if (self._writableState.prefinished === false) self._writableState.prefinished = true
	      self.emit('prefinish')
	      onuncork(self, cb)
	    })
	  })
	}
	
	Duplexify.prototype.end = function(data, enc, cb) {
	  if (typeof data === 'function') return this.end(null, null, data)
	  if (typeof enc === 'function') return this.end(data, null, enc)
	  this._ended = true
	  if (data) this.write(data)
	  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)
	  return stream.Writable.prototype.end.call(this, cb)
	}
	
	module.exports = Duplexify
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(820).Buffer, __webpack_require__(294)))

/***/ },
/* 2008 */,
/* 2009 */,
/* 2010 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 2011 */,
/* 2012 */,
/* 2013 */,
/* 2014 */,
/* 2015 */,
/* 2016 */,
/* 2017 */
/***/ function(module, exports, __webpack_require__) {

	var once = __webpack_require__(2018);
	
	var noop = function() {};
	
	var isRequest = function(stream) {
		return stream.setHeader && typeof stream.abort === 'function';
	};
	
	var eos = function(stream, opts, callback) {
		if (typeof opts === 'function') return eos(stream, null, opts);
		if (!opts) opts = {};
	
		callback = once(callback || noop);
	
		var ws = stream._writableState;
		var rs = stream._readableState;
		var readable = opts.readable || (opts.readable !== false && stream.readable);
		var writable = opts.writable || (opts.writable !== false && stream.writable);
	
		var onlegacyfinish = function() {
			if (!stream.writable) onfinish();
		};
	
		var onfinish = function() {
			writable = false;
			if (!readable) callback();
		};
	
		var onend = function() {
			readable = false;
			if (!writable) callback();
		};
	
		var onclose = function() {
			if (readable && !(rs && rs.ended)) return callback(new Error('premature close'));
			if (writable && !(ws && ws.ended)) return callback(new Error('premature close'));
		};
	
		var onrequest = function() {
			stream.req.on('finish', onfinish);
		};
	
		if (isRequest(stream)) {
			stream.on('complete', onfinish);
			stream.on('abort', onclose);
			if (stream.req) onrequest();
			else stream.on('request', onrequest);
		} else if (writable && !ws) { // legacy streams
			stream.on('end', onlegacyfinish);
			stream.on('close', onlegacyfinish);
		}
	
		stream.on('end', onend);
		stream.on('finish', onfinish);
		if (opts.error !== false) stream.on('error', callback);
		stream.on('close', onclose);
	
		return function() {
			stream.removeListener('complete', onfinish);
			stream.removeListener('abort', onclose);
			stream.removeListener('request', onrequest);
			if (stream.req) stream.req.removeListener('finish', onfinish);
			stream.removeListener('end', onlegacyfinish);
			stream.removeListener('close', onlegacyfinish);
			stream.removeListener('finish', onfinish);
			stream.removeListener('end', onend);
			stream.removeListener('error', callback);
			stream.removeListener('close', onclose);
		};
	};
	
	module.exports = eos;

/***/ },
/* 2018 */
/***/ function(module, exports, __webpack_require__) {

	var wrappy = __webpack_require__(1053)
	module.exports = wrappy(once)
	
	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	})
	
	function once (fn) {
	  var f = function () {
	    if (f.called) return f.value
	    f.called = true
	    return f.value = fn.apply(this, arguments)
	  }
	  f.called = false
	  return f
	}


/***/ },
/* 2019 */
/***/ function(module, exports) {

	module.exports = shift
	
	function shift (stream) {
	  var rs = stream._readableState
	  if (!rs) return null
	  return rs.objectMode ? stream.read() : stream.read(getStateLength(rs))
	}
	
	function getStateLength (state) {
	  if (state.buffer.length) {
	    // Since node 6.3.0 state.buffer is a BufferList not an array
	    if (state.buffer.head) {
	      return state.buffer.head.data.length
	    }
	
	    return state.buffer[0].length
	  }
	
	  return state.length
	}


/***/ },
/* 2020 */,
/* 2021 */,
/* 2022 */,
/* 2023 */,
/* 2024 */,
/* 2025 */,
/* 2026 */,
/* 2027 */,
/* 2028 */,
/* 2029 */,
/* 2030 */,
/* 2031 */,
/* 2032 */,
/* 2033 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var Emitter = __webpack_require__(1958);
	var reduce = __webpack_require__(2034);
	var requestBase = __webpack_require__(2035);
	var isObject = __webpack_require__(2036);
	
	/**
	 * Root reference for iframes.
	 */
	
	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  root = this;
	}
	
	/**
	 * Noop.
	 */
	
	function noop(){};
	
	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isHost(obj) {
	  var str = {}.toString.call(obj);
	
	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Expose `request`.
	 */
	
	var request = module.exports = __webpack_require__(2037).bind(null, Request);
	
	/**
	 * Determine XHR.
	 */
	
	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  return false;
	};
	
	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */
	
	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };
	
	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */
	
	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	        }
	      }
	  return pairs.join('&');
	}
	
	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */
	
	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function(v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key)
	    + '=' + encodeURIComponent(val));
	}
	
	/**
	 * Expose serialization method.
	 */
	
	 request.serializeObject = serialize;
	
	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */
	
	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;
	
	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }
	
	  return obj;
	}
	
	/**
	 * Expose parser.
	 */
	
	request.parseString = parseString;
	
	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */
	
	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};
	
	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */
	
	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };
	
	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */
	
	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};
	
	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;
	
	  lines.pop(); // trailing CRLF
	
	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }
	
	  return fields;
	}
	
	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */
	
	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}
	
	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	function type(str){
	  return str.split(/ *; */).shift();
	};
	
	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function params(str){
	  return reduce(str.split(/ *; */), function(obj, str){
	    var parts = str.split(/ *= */)
	      , key = parts.shift()
	      , val = parts.shift();
	
	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};
	
	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */
	
	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this.parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}
	
	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};
	
	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */
	
	Response.prototype.setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);
	
	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};
	
	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */
	
	Response.prototype.parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};
	
	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */
	
	Response.prototype.setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }
	
	  var type = status / 100 | 0;
	
	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;
	
	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;
	
	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};
	
	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */
	
	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;
	
	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;
	
	  return err;
	};
	
	/**
	 * Expose `Response`.
	 */
	
	request.Response = Response;
	
	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */
	
	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;
	
	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }
	
	    self.emit('response', res);
	
	    if (err) {
	      return self.callback(err, res);
	    }
	
	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }
	
	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;
	
	    self.callback(new_err, res);
	  });
	}
	
	/**
	 * Mixin `Emitter` and `requestBase`.
	 */
	
	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}
	
	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */
	
	Request.prototype.abort = function(){
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr && this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};
	
	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and 
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};
	
	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }
	
	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;
	
	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};
	
	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/
	
	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};
	
	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};
	
	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};
	
	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];
	
	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }
	
	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};
	
	/**
	 * @deprecated
	 */
	Response.prototype.parse = function serialize(fn){
	  if (root.console) {
	    console.warn("Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0");
	  }
	  this.serialize(fn);
	  return this;
	};
	
	Response.prototype.serialize = function serialize(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */
	
	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};
	
	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */
	
	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;
	
	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;
	
	  this.callback(err);
	};
	
	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */
	
	Request.prototype.timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};
	
	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */
	
	Request.prototype.withCredentials = function(){
	  this._withCredentials = true;
	  return this;
	};
	
	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;
	
	  // store callback
	  this._callback = fn || noop;
	
	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;
	
	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }
	
	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };
	
	  // progress
	  var handleProgress = function(e){
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = 'download';
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch(e) {
	    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	    // Reported here:
	    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	  }
	
	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }
	
	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }
	
	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }
	
	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;
	
	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }
	
	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }
	
	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }
	
	  // send stuff
	  this.emit('request', this);
	
	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};
	
	
	/**
	 * Expose `Request`.
	 */
	
	request.Request = Request;
	
	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};
	
	request['del'] = del;
	request['delete'] = del;
	
	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },
/* 2034 */
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */
	
	module.exports = function(arr, fn, initial){  
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3
	    ? initial
	    : arr[idx++];
	
	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }
	  
	  return curr;
	};

/***/ },
/* 2035 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(2036);
	
	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};
	
	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */
	
	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};
	
	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */
	
	exports.then = function then(fulfill, reject) {
	  return this.end(function(err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	}
	
	/**
	 * Allow for extension
	 */
	
	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}
	
	
	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};
	
	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */
	
	exports.getHeader = exports.get;
	
	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};
	
	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};
	
	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {
	  this._getFormData().append(name, val);
	  return this;
	};


/***/ },
/* 2036 */
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isObject(obj) {
	  return null != obj && 'object' == typeof obj;
	}
	
	module.exports = isObject;


/***/ },
/* 2037 */
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */
	
	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }
	
	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }
	
	  return new RequestConstructor(method, url);
	}
	
	module.exports = request;


/***/ },
/* 2038 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(1296)
	var debug = __webpack_require__(787)('throttle')
	
	module.exports = function throttle (func, wait) {
	  assert(typeof wait === 'number', 'expected "wait"')
	
	  var queue = []
	  var last = 0
	  var timeout
	  return function () {
	    var now = Date.now()
	    var delay = wait - (now - last)
	    if (timeout) {
	      debug('queueing')
	      queue.push([this, arguments])
	      return
	    }
	
	    if (delay < 0) {
	      debug('running')
	      last = now
	      return func.apply(this, arguments)
	    }
	
	    queue.push([this, arguments])
	    timeoutUnqueue(delay)
	  }
	
	  function timeoutUnqueue (millis) {
	    if (timeout) return
	
	    if (!queue.length) throw Error('empty queue')
	
	    debug('waiting ' + millis + 'ms')
	    timeout = setTimeout(function () {
	      timeout = null
	      last = Date.now()
	      debug('running throttled')
	      var ctxAndArgs = queue.shift()
	      func.apply(ctxAndArgs[0], ctxAndArgs[1])
	
	      if (queue.length) timeoutUnqueue(wait)
	    }, millis)
	  }
	}


/***/ },
/* 2039 */,
/* 2040 */,
/* 2041 */,
/* 2042 */,
/* 2043 */,
/* 2044 */,
/* 2045 */,
/* 2046 */,
/* 2047 */,
/* 2048 */,
/* 2049 */
/***/ function(module, exports, __webpack_require__) {

	
	var Buffer = __webpack_require__(820).Buffer
	var crypto = __webpack_require__(904)
	var hydration = __webpack_require__(1293)
	var levelup = __webpack_require__(1852)
	var updown = __webpack_require__(2050)
	
	// opts from SQLCipher: https://www.zetetic.net/sqlcipher/design/
	var DEFAULT_PASSWORD_BASED_OPTS = {
	  // key derivation parameters
	  password: null,
	  saltBytes: 32,
	  salt: null,
	  digest: 'sha256',
	  keyBytes: 32,
	  iterations: 64000,
	  // encryption parameters
	  algorithm:'aes-256-cbc',
	  ivBytes: 16,
	}
	
	var DEFAULT_KEY_BASED_OPTS = {
	  algorithm:'aes-256-cbc',
	  ivBytes: 16,
	  key: null
	}
	
	exports.encrypt = encrypt
	exports.decrypt = decrypt
	exports.hydration = hydration
	exports.dehydrate = dehydrate
	exports.hydrate = hydrate
	exports.toEncrypted = toEncryptedLevelup
	exports.keyHashFunction = sha256
	exports._unserialize = unserialize // for testing
	
	function toEncryptedLevelup (db, opts) {
	  var kEncoding = db.options.keyEncoding
	  if (kEncoding !== 'binary') {
	    throw new Error('expected "binary" keyEncoding')
	  }
	
	  var vEncoding = db.options.valueEncoding
	  if (vEncoding !== 'binary' && vEncoding !== 'utf8') {
	    throw new Error('expected "binary" or "utf8" valueEncoding')
	  }
	
	  opts = opts || {}
	  if (!opts.encrypt || !opts.decrypt) {
	    opts = normalizeOpts(opts)
	  }
	
	  var encryptValue = opts.encrypt || function (data) {
	    return encrypt(data, opts)
	  }
	
	  var decryptValue = opts.decrypt || function (data) {
	    return decrypt(data, opts)
	  }
	
	  var rawHashKey = opts.keyHashFunction || exports.keyHashFunction
	  return levelup({
	    keyEncoding: db.options.keyEncoding,
	    valueEncoding: {
	      encode: dehydrate,
	      decode: function identity (val) {
	        return val
	      }
	    },
	    db: function () {
	      var ud = updown(db)
	      ud.extendWith({
	        preGet: preHashKey,
	        postGet: postGet,
	        postIterator: postIterator,
	        preDel: preHashKey,
	        prePut: prePut,
	        preBatch: preBatch
	      })
	
	      return ud
	    }
	  })
	
	  function hashKey (key) {
	    var hash = rawHashKey(key)
	    if (!Buffer.isBuffer(hash)) hash = new Buffer(hash)
	
	    return hash
	  }
	
	  function postIterator (iterator) {
	    iterator.extendWith({
	      postNext: postNext
	    })
	
	    return iterator
	  }
	
	  function postNext (err, key, value, callback, next) {
	    if (!err && value) value = hydrate(decryptValue(value))
	
	    next(err, key, value, callback)
	  }
	
	  function preHashKey(key, options, callback, next) {
	    key = hashKey(key)
	    next(key, options, callback)
	  }
	
	  function postGet (key, options, err, value, callback, next) {
	    if (!err) value = hydrate(decryptValue(value))
	
	    next(key, options, err, value, callback)
	  }
	
	  function prePut (key, value, options, callback, next) {
	    key = hashKey(key)
	    value = encryptValue(value)
	    next(key, value, options, callback)
	  }
	
	  function preBatch (array, options, callback, next) {
	    for (var i = 0; i < array.length; i++) {
	      var row = array[i]
	      row.key = hashKey(row.key)
	      if (row.type == 'put') {
	        row.value = encryptValue(row.value)
	      }
	    }
	
	    next(array, options, callback)
	  }
	}
	
	function encrypt (data, opts) {
	  var salt = !opts.key && (opts.salt || crypto.randomBytes(opts.saltBytes))
	  var key = opts.key || crypto.pbkdf2Sync(opts.password, salt, opts.iterations, opts.keyBytes, opts.digest)
	  var iv = opts.iv || crypto.randomBytes(opts.ivBytes)
	  var cipher = crypto.createCipheriv(opts.algorithm, key, iv)
	  var ciphertext = Buffer.concat([cipher.update(data), cipher.final()])
	  var parts = [
	    iv,
	    ciphertext
	  ]
	
	  if (salt) parts.push(salt)
	
	  return serialize(parts)
	}
	
	function decrypt (data, opts) {
	  var parts = unserialize(data)
	  var iv = parts[0]
	  var ciphertext = parts[1]
	  var salt = parts[2]
	  var key = opts.key
	  if (!key) {
	    key = crypto.pbkdf2Sync(opts.password, salt, opts.iterations, opts.keyBytes, opts.digest)
	  }
	
	  var decipher = crypto.createDecipheriv(opts.algorithm, key, iv)
	  var m = decipher.update(parts[1])
	  data = Buffer.concat([m, decipher.final()]).toString()
	  return JSON.parse(data)
	}
	
	function hydrate (entity) {
	  return hydration.hydrate(entity)
	}
	
	function dehydrate (entity) {
	  // if (Buffer.isBuffer(entity)) return entity
	  var data = hydration.dehydrate(entity)
	  return new Buffer(JSON.stringify(data))
	}
	
	function serialize (buffers) {
	  var parts = [], idx = 0
	  buffers.forEach(function (part) {
	    var len = Buffer(4)
	    if (typeof part === 'string') part = Buffer(part)
	    len.writeUInt32BE(part.length, 0)
	    parts.push(len)
	    idx += len.length
	    parts.push(part)
	    idx += part.length
	  })
	
	  return Buffer.concat(parts)
	}
	
	function unserialize (buf) {
	  var parts = []
	  var l = buf.length, idx = 0
	  while (idx < l) {
	    var dlen = buf.readUInt32BE(idx)
	    idx += 4
	    var start = idx
	    var end = start + dlen
	    var part = buf.slice(start, end)
	    parts.push(part)
	    idx += part.length
	  }
	
	  return parts
	}
	
	function assert (statement, errMsg) {
	  if (!statement) throw new Error(errMsg || 'Assertion failed')
	}
	
	function sha256 (key) {
	  return crypto.createHash('sha256').update(key).digest()
	}
	
	function normalizeOpts (_opts) {
	  var opts = {}
	  var defaults = _opts.key ? DEFAULT_KEY_BASED_OPTS : DEFAULT_PASSWORD_BASED_OPTS
	  for (var p in defaults) {
	    opts[p] = p in _opts ? _opts[p] : defaults[p]
	  }
	
	  assert(typeof opts.algorithm === 'string', 'Expected string "algorithm"')
	  assert(typeof opts.ivBytes === 'number', 'Expected number "ivBytes"')
	
	  if (!opts.key) {
	    assert(typeof opts.keyBytes === 'number', 'Expected number "keyBytes"')
	    assert(typeof opts.iterations === 'number', 'Expected number "iterations"')
	    assert(typeof opts.password === 'string' || Buffer.isBuffer(opts.password), 'Expected string or Buffer "password"')
	    assert(typeof opts.digest === 'string', 'Expected string "digest"')
	
	    if (opts.salt) {
	      assert(Buffer.isBuffer(opts.salt), 'Expected Buffer "salt"')
	      // if global salt is provided don't recalculate key every time
	      if (!opts.key) {
	        opts.key = crypto.pbkdf2Sync(opts.password, opts.salt, opts.iterations, opts.keyBytes, opts.digest)
	      }
	    } else {
	      assert(typeof opts.saltBytes === 'number', 'Expected number "saltBytes"')
	    }
	  }
	
	  return opts
	}


/***/ },
/* 2050 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process, Buffer) {var AbstractLevelDOWN = __webpack_require__(1856).AbstractLevelDOWN
	  , AbstractIterator  = __webpack_require__(1856).AbstractIterator
	  , inherits          = __webpack_require__(1130).inherits
	  , EventEmitter      = __webpack_require__(786).EventEmitter
	  , externr           = __webpack_require__(2051)
	  , xtend             = __webpack_require__(859)
	
	function fixOptions (options) {
	  var x = {}
	
	  if (options.asBuffer != null)
	    x.valueEncoding = options.asBuffer ? 'binary' : 'utf8'
	  else if (!options.valueEncoding)
	    x.valueEncoding = 'binary'
	
	  if (options.keyEncoding != 'utf8' && options.valueEncoding != 'utf8')
	    x.keyEncoding = 'binary'
	
	  return xtend(options, x)
	}
	
	function LevelUPDOWNIterator (db, options) {
	  if (!(this instanceof LevelUPDOWNIterator))
	    return new LevelUPDOWNIterator(db, options)
	
	  AbstractIterator.call(this, db)
	
	  this.options = options
	  this._externs = externr({ wrap: [ 'preNext', 'postNext', 'preEnd', 'postEnd' ] })
	  this.extendWith = this._externs.$register.bind(this._externs)
	
	  var self = this
	
	  function start () {
	    self._iterator = self.db.levelup.db.iterator(options)
	  }
	
	  if (db.levelup.isOpen())
	    return start()
	
	  this._deferred = new EventEmitter()
	
	  db.levelup.once('ready', function () {
	    start()
	    setImmediate(function () {
	      self._deferred.emit('ready')
	      self._deferred = null
	    })
	  })
	}
	
	inherits(LevelUPDOWNIterator, AbstractIterator)
	
	
	LevelUPDOWNIterator.prototype._next = function (callback) {
	  var self = this
	
	  function exec () {
	    self._externs.preNext(self, [ callback ], afterPreNext)
	
	    function afterPreNext (callback) {
	      self._iterator.next(afterNext)
	
	      function afterNext (err, key, value) {
	        self._externs.postNext(self, [ err, key, value, callback ], afterPostNext)
	      }
	
	      function afterPostNext (err, key, value, callback) {
	        if (!err && !key && !value)
	          return callback()
	
	        callback(err, key, value)
	      }
	    }
	  }
	
	  if (!this._deferred)
	    return exec()
	
	  this._deferred.on('ready', exec)
	}
	
	
	LevelUPDOWNIterator.prototype._end = function (callback) {
	  var self = this
	
	  function exec () {
	    self._externs.preEnd(self, [ callback ], afterPreEnd)
	
	    function afterPreEnd (callback) {
	      self._iterator.end(afterEnd)
	
	      function afterEnd (err) {
	        self._externs.postEnd(self, [ err, callback ], afterPostEnd)
	      }
	
	      function afterPostEnd (err, callback) {
	        callback(err)
	      }
	    }
	  }
	
	  if (!this._deferred)
	    return exec()
	
	  this._deferred.on('ready', exec)
	}
	
	function LevelUPDOWN (levelup) {
	  if (!(this instanceof LevelUPDOWN))
	    return new LevelUPDOWN(levelup)
	
	  AbstractLevelDOWN.call(this, '')
	
	  this.levelup = levelup
	
	  this._externs = externr({
	      wrap   : [
	          'open'
	        , 'close'
	        , 'prePut'
	        , 'postPut'
	        , 'preGet'
	        , 'postGet'
	        , 'preDel'
	        , 'postDel'
	        , 'preBatch'
	        , 'postBatch'
	      ]
	    , extend : [
	          'preIterator'
	        , 'postIterator'
	      ]
	  })
	
	  this.extendWith = this._externs.$register.bind(this._externs)
	}
	
	inherits(LevelUPDOWN, AbstractLevelDOWN)
	
	
	// noop
	LevelUPDOWN.prototype._open = function (options, callback) {
	  this._externs.open(this, [ options, callback ], afterOpen)
	
	  function afterOpen (options, callback) {
	    process.nextTick(callback)
	  }
	}
	
	
	// noop
	LevelUPDOWN.prototype._close = function (callback) {
	  this._externs.close(this, [ callback ], afterClose)
	
	  function afterClose (callback) {
	    process.nextTick(callback)
	  }
	}
	
	LevelUPDOWN.prototype._put = function (key, value, options, callback) {
	  var self = this
	
	  this._externs.prePut(this, [ key, value, options, callback ], afterPrePut)
	
	  function afterPrePut (key, value, options, callback) {
	    options = xtend(options)
	    delete options.valueEncoding
	
	    self.levelup.put(key, value, options, afterPut)
	
	    function afterPut (err) {
	      self._externs.postPut(self, [ key, value, options, err, callback ], afterPostPut)
	    }
	
	    function afterPostPut (key, value, options, err, callback) {
	      callback(err)
	    }
	  }
	}
	
	
	LevelUPDOWN.prototype._get = function (key, options, callback) {
	  var self = this
	
	  this._externs.preGet(this, [ key, options, callback ], afterPreGet)
	
	  function afterPreGet (key, options, callback) {
	    options = xtend(options)
	    delete options.valueEncoding
	
	    self.levelup.get(key, fixOptions(options), afterGet)
	
	    function afterGet (err, value) {
	      self._externs.postGet(self, [ key, options, err, value, callback ], afterPostGet)
	    }
	
	    function afterPostGet (key, options, err, value, callback) {
	      callback(err, value)
	    }
	  }
	}
	
	
	LevelUPDOWN.prototype._del = function (key, options, callback) {
	  var self = this
	
	  this._externs.preDel(this, [ key, options, callback ], afterPreDel)
	
	  function afterPreDel (key, options, callback) {
	    self.levelup.del(key, options, afterDel)
	
	    function afterDel (err) {
	      self._externs.postDel(self, [ key, options, err, callback ], afterPostDel)
	    }
	
	    function afterPostDel (key, options, err, callback) {
	      callback(err)
	    }
	  }
	}
	
	
	LevelUPDOWN.prototype._batch = function (array, options, callback) {
	  var self = this
	
	  this._externs.preBatch(this, [ array, options, callback ], afterPreBatch)
	
	  function afterPreBatch (array, options, callback) {
	    options = xtend(options)
	    delete options.valueEncoding
	
	    self.levelup.batch(array, options, afterBatch)
	
	    function afterBatch (err) {
	      self._externs.postBatch(self, [ array, options, err, callback ], afterPostBatch)
	    }
	
	    function afterPostBatch (array, options, err, callback) {
	      callback(err)
	    }
	  }
	}
	
	
	LevelUPDOWN.prototype._iterator = function (options) {
	  var self = this
	
	  function iteratorFactory (options) {
	    var iterator = new LevelUPDOWNIterator(self, fixOptions(options))
	    return self._externs.postIterator(iterator)
	  }
	
	  var pre = self._externs.preIterator({
	      options : options
	    , factory : iteratorFactory
	  })
	
	  return pre.factory(pre.options)
	}
	
	
	LevelUPDOWN.prototype._isBuffer = function (obj) {
	  return Buffer.isBuffer(obj)
	}
	
	
	module.exports                     = LevelUPDOWN
	module.exports.LevelUPDOWNIterator = LevelUPDOWNIterator
	module.exports.factory             = function factory () {
	  var args = Array.prototype.slice.call(arguments)
	  return function makeLevelUPDOWN () {
	    return LevelUPDOWN.apply(null, args)
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(702).setImmediate, __webpack_require__(294), __webpack_require__(820).Buffer))

/***/ },
/* 2051 */
/***/ function(module, exports) {

	/*!
	  * Externr: Provide a plug-in mechanism for your objects, exposing their inmost secrets
	  * (c) 2013 Rod Vagg <rod@vagg.org>
	  * https://github.com/rvagg/externr
	  * License: MIT
	  */
	
	(function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports)
	    module.exports = definition()
	  else
	    context[name] = definition()
	})('externr', this, function() {
	
	
	function wrapNoop (that, args, callback) {
	  return callback.apply(that, args)
	}
	
	
	function wrapReverseNoop (that, args, callback) {
	  return callback.apply(that, args)
	}
	
	
	function extendNoop (arg) {
	  return arg
	}
	
	
	function extendReverseNoop (arg) {
	  return arg
	}
	
	
	function handleWrap (that, args, callback) {
	  var i = 0
	
	  function handle () {
	    if (i++ === this.length)
	      return callback.apply(that, arguments)
	    var args = Array.prototype.slice.call(arguments)
	    args.push(handle.bind(this))
	    return this[i - 1].apply(that, args)
	  }
	
	  return handle.apply(this, args)
	}
	
	
	function handleWrapReverse (that, args, callback) {
	  var i = this.length
	
	  function handle () {
	    if (i-- === 0)
	      return callback.apply(that, arguments)
	    var args = Array.prototype.slice.call(arguments)
	    args.push(handle.bind(this))
	    return this[i].apply(that, args)
	  }
	
	  return handle.apply(this, args)
	}
	
	
	function handleExtend (arg) {
	  return this.reduce(function (arg, fn) {
	    return fn(arg)
	  }, arg)
	}
	
	
	function handleExtendReverse (arg) {
	  return this.reduceRight(function (arg, fn) {
	    return fn(arg)
	  }, arg)
	}
	
	
	var Externs = {}
	
	Externs.$register = function $register (handlers) {
	  if (handlers == null)
	    return
	
	  if (Array.isArray(handlers))
	    return handlers.forEach(this.$register.bind(this))
	
	  if (typeof handlers != 'object')
	    return
	
	  Object.keys(handlers).forEach(function (m) {
	    if (typeof handlers[m] != 'function')
	      return
	
	    var arkey = '$_' + m
	
	    if (this[m] === wrapNoop) {
	      this[arkey] = []
	      this[m] = handleWrap.bind(this[arkey])
	    } else if (this[m] === wrapReverseNoop) {
	      this[arkey] = []
	      this[m] = handleWrapReverse.bind(this[arkey])
	    } else if (this[m] === extendNoop) {
	      this[arkey] = []
	      this[m] = handleExtend.bind(this[arkey])
	    } else if (this[m] === extendReverseNoop) {
	      this[arkey] = []
	      this[m] = handleExtendReverse.bind(this[arkey])
	    } else if (!Array.isArray(this[arkey])) {
	      return
	    }
	
	    this[arkey].push(handlers[m])
	  }.bind(this))
	}
	
	
	function externs (methods) {
	  var iface = Object.create(Externs)
	
	  methods.wrap && methods.wrap.forEach(function (method) {
	    iface[method] = wrapNoop
	  })
	
	  methods.wrapReverse && methods.wrapReverse.forEach(function (method) {
	    iface[method] = wrapReverseNoop
	  })
	
	  methods.extend && methods.extend.forEach(function (fn) {
	    iface[fn] = extendNoop
	  })
	
	  methods.extendReverse && methods.extendReverse.forEach(function (fn) {
	    iface[fn] = extendReverseNoop
	  })
	
	  return iface
	}
	
	
	return externs
	
	})


/***/ },
/* 2052 */,
/* 2053 */,
/* 2054 */,
/* 2055 */,
/* 2056 */,
/* 2057 */,
/* 2058 */,
/* 2059 */,
/* 2060 */,
/* 2061 */,
/* 2062 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * object.omit <https://github.com/jonschlinkert/object.omit>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isObject = __webpack_require__(2063);
	var forOwn = __webpack_require__(2064);
	
	module.exports = function omit(obj, keys) {
	  if (!isObject(obj)) return {};
	
	  keys = [].concat.apply([], [].slice.call(arguments, 1));
	  var last = keys[keys.length - 1];
	  var res = {}, fn;
	
	  if (typeof last === 'function') {
	    fn = keys.pop();
	  }
	
	  var isFunction = typeof fn === 'function';
	  if (!keys.length && !isFunction) {
	    return obj;
	  }
	
	  forOwn(obj, function(value, key) {
	    if (keys.indexOf(key) === -1) {
	
	      if (!isFunction) {
	        res[key] = value;
	      } else if (fn(value, key, obj)) {
	        res[key] = value;
	      }
	    }
	  });
	  return res;
	};


/***/ },
/* 2063 */
/***/ function(module, exports) {

	/*!
	 * is-extendable <https://github.com/jonschlinkert/is-extendable>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function isExtendable(val) {
	  return typeof val !== 'undefined' && val !== null
	    && (typeof val === 'object' || typeof val === 'function');
	};


/***/ },
/* 2064 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * for-own <https://github.com/jonschlinkert/for-own>
	 *
	 * Copyright (c) 2014-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var forIn = __webpack_require__(2065);
	var hasOwn = Object.prototype.hasOwnProperty;
	
	module.exports = function forOwn(o, fn, thisArg) {
	  forIn(o, function(val, key) {
	    if (hasOwn.call(o, key)) {
	      return fn.call(thisArg, o[key], key, o);
	    }
	  });
	};


/***/ },
/* 2065 */
/***/ function(module, exports) {

	/*!
	 * for-in <https://github.com/jonschlinkert/for-in>
	 *
	 * Copyright (c) 2014-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function forIn(o, fn, thisArg) {
	  for (var key in o) {
	    if (fn.call(thisArg, o[key], key, o) === false) {
	      break;
	    }
	  }
	};


/***/ },
/* 2066 */,
/* 2067 */,
/* 2068 */,
/* 2069 */,
/* 2070 */,
/* 2071 */,
/* 2072 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.ActionSheetCustom = undefined;
	
	var _reactNative = __webpack_require__(300);
	
	var _ActionSheetIOS2 = __webpack_require__(2073);
	
	var _ActionSheetIOS3 = _interopRequireDefault(_ActionSheetIOS2);
	
	var _ActionSheetCustom2 = __webpack_require__(2074);
	
	var _ActionSheetCustom3 = _interopRequireDefault(_ActionSheetCustom2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ActionSheetCustom = exports.ActionSheetCustom = _ActionSheetCustom3.default;
	
	var ActionSheet = void 0;
	
	if (_reactNative.Platform.OS === 'ios') {
		ActionSheet = _ActionSheetIOS3.default;
	} else {
		ActionSheet = _ActionSheetCustom3.default;
	}
	
	exports.default = ActionSheet;

/***/ },
/* 2073 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
		ActionSheet: {
			displayName: 'ActionSheet'
		}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
		filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-actionsheet/ActionSheetIOS.js',
		components: _components,
		locals: [],
		imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
		return function (Component) {
			return _reactTransformCatchErrors2(Component, id);
		};
	}
	
	var optionNames = ['title', 'options', 'tintColor', 'cancelButtonIndex', 'destructiveButtonIndex'];
	
	function isArray(obj) {
		return Object.prototype.toString.call(obj) === '[object Array]';
	}
	
	var ActionSheet = _wrapComponent('ActionSheet')(function (_React$Component) {
		_inherits(ActionSheet, _React$Component);
	
		function ActionSheet(props) {
			_classCallCheck(this, ActionSheet);
	
			return _possibleConstructorReturn(this, (ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).call(this, props));
		}
	
		_createClass(ActionSheet, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var options = this.props.options;
				if (!isArray(options) || options.length === 0) {
					throw Error('Prop `options` must be an array and it must not be empty.');
				}
			}
		}, {
			key: 'show',
			value: function show() {
				var props = this.props;
				var options = optionNames.reduce(function (obj, name, index) {
					if (typeof props[name] !== 'undefined') obj[name] = props[name];
					return obj;
				}, {});
				_reactNative.ActionSheetIOS.showActionSheetWithOptions(options, props.onPress);
			}
		}, {
			key: 'render',
			value: function render() {
				return null;
			}
		}]);
	
		return ActionSheet;
	}(_react3.default.Component));
	
	ActionSheet.propTypes = {
		title: _react2.PropTypes.string,
		options: _react2.PropTypes.array.isRequired,
		tintColor: _react2.PropTypes.string,
		cancelButtonIndex: _react2.PropTypes.number,
		destructiveButtonIndex: _react2.PropTypes.number,
		onPress: _react2.PropTypes.func
	};
	
	ActionSheet.defaultProps = {
		onPress: function onPress() {}
	};
	
	exports.default = ActionSheet;

/***/ },
/* 2074 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	var _styles = __webpack_require__(2075);
	
	var _styles2 = _interopRequireDefault(_styles);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
		ActionSheet: {
			displayName: 'ActionSheet'
		}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
		filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-actionsheet/ActionSheetCustom.js',
		components: _components,
		locals: [],
		imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
		return function (Component) {
			return _reactTransformCatchErrors2(Component, id);
		};
	}
	
	var TITLE_H = 40;
	var CANCEL_MARGIN = 6;
	var BUTTON_H = 50 + _styles.hairlineWidth;
	var WARN_COLOR = '#ff3b30';
	var MAX_HEIGHT = _reactNative.Dimensions.get('window').height * 0.7;
	
	var ActionSheet = _wrapComponent('ActionSheet')(function (_Component) {
		_inherits(ActionSheet, _Component);
	
		function ActionSheet(props) {
			_classCallCheck(this, ActionSheet);
	
			var _this = _possibleConstructorReturn(this, (ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).call(this, props));
	
			_this.scrollEnabled = false;
			_this.translateY = _this._calculateHeight();
			_this.state = {
				visible: false,
				sheetAnim: new _reactNative.Animated.Value(_this.translateY)
			};
			_this._cancel = _this._cancel.bind(_this);
			return _this;
		}
	
		_createClass(ActionSheet, [{
			key: 'show',
			value: function show() {
				this.setState({ visible: true });
				this._showSheet();
			}
		}, {
			key: 'hide',
			value: function hide(index) {
				var _this2 = this;
	
				this._hideSheet(function () {
					_this2.setState({ visible: false });
					_this2.props.onPress(index);
				});
			}
		}, {
			key: '_cancel',
			value: function _cancel() {
				var cancelButtonIndex = this.props.cancelButtonIndex;
				// 保持和 ActionSheetIOS 一致，
				// 未设置 cancelButtonIndex 时，点击背景不隐藏 ActionSheet
	
				if (cancelButtonIndex > -1) {
					this.hide(cancelButtonIndex);
				}
			}
		}, {
			key: '_showSheet',
			value: function _showSheet() {
				_reactNative.Animated.timing(this.state.sheetAnim, {
					toValue: 0,
					duration: 250
				}).start();
			}
		}, {
			key: '_hideSheet',
			value: function _hideSheet(callback) {
				_reactNative.Animated.timing(this.state.sheetAnim, {
					toValue: this.translateY,
					duration: 150
				}).start(callback || function () {});
			}
		}, {
			key: '_calculateHeight',
			value: function _calculateHeight() {
				var count = this.props.options.length;
				var height = BUTTON_H * count + CANCEL_MARGIN;
				if (this.props.title) height += TITLE_H;
				if (height > MAX_HEIGHT) {
					this.scrollEnabled = true;
					return MAX_HEIGHT;
				} else {
					this.scrollEnabled = false;
					return height;
				}
			}
		}, {
			key: '_renderTitle',
			value: function _renderTitle() {
				if (this.props.title) {
					return _react3.default.createElement(
						_reactNative.View,
						{ style: _styles.sheetStyle.title },
						_react3.default.createElement(
							_reactNative.Text,
							{ style: _styles.sheetStyle.titleText },
							this.props.title
						)
					);
				} else {
					return null;
				}
			}
		}, {
			key: '_renderCancelButton',
			value: function _renderCancelButton() {
				var _props = this.props,
				    options = _props.options,
				    cancelButtonIndex = _props.cancelButtonIndex,
				    tintColor = _props.tintColor;
	
				if (cancelButtonIndex > -1 && options[cancelButtonIndex]) {
					return _react3.default.createElement(
						_reactNative.TouchableHighlight,
						{
							activeOpacity: 1,
							underlayColor: '#f4f4f4',
							style: [_styles.btnStyle.wrapper, { marginTop: 6 }],
							onPress: this._cancel
						},
						_react3.default.createElement(
							_reactNative.Text,
							{ style: [_styles.btnStyle.title, { fontWeight: '700', color: tintColor }] },
							options[cancelButtonIndex]
						)
					);
				} else {
					return null;
				}
			}
		}, {
			key: '_createButton',
			value: function _createButton(title, fontColor, index, style) {
				return _react3.default.createElement(
					_reactNative.TouchableHighlight,
					{
						key: index,
						activeOpacity: 1,
						underlayColor: '#f4f4f4',
						style: [_styles.btnStyle.wrapper, style || {}],
						onPress: this.hide.bind(this, index)
					},
					_react3.default.createElement(
						_reactNative.Text,
						{ style: [_styles.btnStyle.title, { color: fontColor }] },
						title
					)
				);
			}
		}, {
			key: '_renderOptions',
			value: function _renderOptions() {
				var _this3 = this;
	
				var _props2 = this.props,
				    options = _props2.options,
				    tintColor = _props2.tintColor,
				    cancelButtonIndex = _props2.cancelButtonIndex,
				    destructiveButtonIndex = _props2.destructiveButtonIndex;
	
				return options.map(function (title, index) {
					var fontColor = destructiveButtonIndex === index ? WARN_COLOR : tintColor;
					return index === cancelButtonIndex ? null : _this3._createButton(title, fontColor, index);
				});
			}
		}, {
			key: 'render',
			value: function render() {
				var cancelButtonIndex = this.props.cancelButtonIndex;
				var _state = this.state,
				    visible = _state.visible,
				    sheetAnim = _state.sheetAnim;
	
				return _react3.default.createElement(
					_reactNative.Modal,
					{
						visible: visible,
						transparent: true,
						animationType: 'none',
						onRequestClose: function onRequestClose() {}
					},
					_react3.default.createElement(
						_reactNative.View,
						{ style: _styles.sheetStyle.wrapper },
						_react3.default.createElement(_reactNative.Text, { style: _styles2.default.overlay, onPress: this._cancel }),
						_react3.default.createElement(
							_reactNative.Animated.View,
							{
								style: [_styles.sheetStyle.bd, { height: this.translateY, transform: [{ translateY: sheetAnim }] }]
							},
							this._renderTitle(),
							_react3.default.createElement(
								_reactNative.ScrollView,
								{
									scrollEnabled: this.scrollEnabled,
									contentContainerStyle: _styles.sheetStyle.options },
								this._renderOptions()
							),
							this._renderCancelButton()
						)
					)
				);
			}
		}]);
	
		return ActionSheet;
	}(_react2.Component));
	
	ActionSheet.propTypes = {
		title: _react2.PropTypes.string,
		options: _react2.PropTypes.array.isRequired,
		tintColor: _react2.PropTypes.string,
		cancelButtonIndex: _react2.PropTypes.number,
		destructiveButtonIndex: _react2.PropTypes.number,
		onPress: _react2.PropTypes.func
	};
	
	ActionSheet.defaultProps = {
		tintColor: '#007aff',
		onPress: function onPress() {}
	};
	
	exports.default = ActionSheet;

/***/ },
/* 2075 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.btnStyle = exports.sheetStyle = exports.hairlineWidth = undefined;
	
	var _reactNative = __webpack_require__(300);
	
	var hairlineWidth = exports.hairlineWidth = _reactNative.StyleSheet.hairlineWidth;
	
	exports.default = _reactNative.StyleSheet.create({
		overlay: {
			position: 'absolute',
			top: 0,
			right: 0,
			bottom: 0,
			left: 0,
			opacity: 0.4,
			backgroundColor: '#000'
		}
	});
	var sheetStyle = exports.sheetStyle = _reactNative.StyleSheet.create({
		wrapper: {
			flex: 1,
			flexDirection: 'row'
		},
		bd: {
			flex: 1,
			alignSelf: 'flex-end',
			backgroundColor: '#e5e5e5'
		},
		title: {
			height: 40,
			alignItems: 'center',
			justifyContent: 'center',
			backgroundColor: '#fff'
		},
		titleText: {
			color: '#8f8f8f',
			fontSize: 12
		},
		options: {}
	});
	
	var btnStyle = exports.btnStyle = _reactNative.StyleSheet.create({
		wrapper: {
			height: 50,
			marginTop: hairlineWidth,
			alignItems: 'center',
			justifyContent: 'center',
			backgroundColor: '#fff'
		},
		title: {
			fontSize: 18
		}
	});

/***/ },
/* 2076 */,
/* 2077 */,
/* 2078 */,
/* 2079 */,
/* 2080 */,
/* 2081 */,
/* 2082 */,
/* 2083 */,
/* 2084 */,
/* 2085 */,
/* 2086 */,
/* 2087 */,
/* 2088 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createIconSet = __webpack_require__(1665);
	
	Object.defineProperty(exports, 'createIconSet', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_createIconSet).default;
	  }
	});
	
	var _createIconSetFromFontello = __webpack_require__(2089);
	
	Object.defineProperty(exports, 'createIconSetFromFontello', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_createIconSetFromFontello).default;
	  }
	});
	
	var _createIconSetFromIcomoon = __webpack_require__(2090);
	
	Object.defineProperty(exports, 'createIconSetFromIcoMoon', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_createIconSetFromIcomoon).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 2089 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createIconSetFromFontello;
	
	var _createIconSet = __webpack_require__(1665);
	
	var _createIconSet2 = _interopRequireDefault(_createIconSet);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function createIconSetFromFontello(config, fontFamilyArg, fontFile) {
	  var glyphMap = {};
	  config.glyphs.forEach(function (glyph) {
	    glyphMap[glyph.css] = glyph.code;
	  });
	
	  var fontFamily = fontFamilyArg || config.name || 'fontello';
	
	  return (0, _createIconSet2.default)(glyphMap, fontFamily, fontFile || fontFamily + '.ttf');
	}

/***/ },
/* 2090 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createIconSetFromIcoMoon;
	
	var _createIconSet = __webpack_require__(1665);
	
	var _createIconSet2 = _interopRequireDefault(_createIconSet);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function createIconSetFromIcoMoon(config, fontFamilyArg, fontFile) {
	  var glyphMap = {};
	  config.icons.forEach(function (icon) {
	    glyphMap[icon.properties.name] = icon.properties.code;
	  });
	
	  var fontFamily = fontFamilyArg || config.preferences.fontPref.metadata.fontFamily;
	
	  return (0, _createIconSet2.default)(glyphMap, fontFamily, fontFile || fontFamily + '.ttf');
	}

/***/ },
/* 2091 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2092);

/***/ },
/* 2092 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _reactTweenState = __webpack_require__(2093);
	
	var _reactTweenState2 = _interopRequireDefault(_reactTweenState);
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-accordion/src/index.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var Accordion = _wrapComponent('_component')(_react3.default.createClass({
	  displayName: 'Accordion',
	
	  mixins: [_reactTweenState2.default.Mixin],
	
	  propTypes: {
	    activeOpacity: _react3.default.PropTypes.number,
	    animationDuration: _react3.default.PropTypes.number,
	    content: _react3.default.PropTypes.element.isRequired,
	    easing: _react3.default.PropTypes.string,
	    expanded: _react3.default.PropTypes.bool,
	    header: _react3.default.PropTypes.element.isRequired,
	    onPress: _react3.default.PropTypes.func,
	    underlayColor: _react3.default.PropTypes.string,
	    style: _react3.default.PropTypes.object
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      activeOpacity: 1,
	      animationDuration: 300,
	      easing: 'linear',
	      expanded: false,
	      underlayColor: '#000',
	      style: {}
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      is_visible: false,
	      height: undefined,
	      content_height: 0
	    };
	  },
	  close: function close() {
	    this.state.is_visible && this.toggle();
	  },
	  open: function open() {
	    !this.state.is_visible && this.toggle();
	  },
	  toggle: function toggle() {
	    this.state.is_visible = !this.state.is_visible;
	
	    this.tweenState('height', {
	      easing: _reactTweenState2.default.easingTypes[this.props.easing],
	      duration: this.props.animationDuration,
	      endValue: this.state.height === 0 ? this.state.content_height : 0
	    });
	  },
	  _onPress: function _onPress() {
	    this.toggle();
	
	    if (this.props.onPress) {
	      this.props.onPress.call(this);
	    }
	  },
	  _getContentHeight: function _getContentHeight() {
	    var _this = this;
	
	    if (this.refs.AccordionContent) {
	      this.refs.AccordionContent.measure(function (ox, oy, width, height, px, py) {
	        // Sets content height in state
	        _this.setState({
	          height: _this.props.expanded ? height : 0,
	          content_height: height
	        });
	      });
	    }
	  },
	  componentDidMount: function componentDidMount() {
	    // Gets content height when component mounts
	    // without setTimeout, measure returns 0 for every value.
	    // See https://github.com/facebook/react-native/issues/953
	    setTimeout(this._getContentHeight);
	  },
	  render: function render() {
	    var style = {};
	    if (_reactNative.Platform.OS !== 'web' || this.state.height !== undefined) {
	      style.height = this.getTweeningValue('height');
	    } else {
	      // hide until content is measured
	      style.zIndex = -1;
	    }
	
	    return (
	      /*jshint ignore:start */
	      _react3.default.createElement(
	        _reactNative.View,
	        {
	          style: {
	            overflow: 'hidden'
	          }
	        },
	        _react3.default.createElement(
	          _reactNative.TouchableHighlight,
	          {
	            ref: 'AccordionHeader',
	            onPress: this._onPress,
	            underlayColor: this.props.underlayColor,
	            style: this.props.style
	          },
	          this.props.header
	        ),
	        _react3.default.createElement(
	          _reactNative.View,
	          {
	            ref: 'AccordionContentWrapper',
	            style: style
	          },
	          _react3.default.createElement(
	            _reactNative.View,
	            { ref: 'AccordionContent' },
	            this.props.content
	          )
	        )
	      )
	      /*jshint ignore:end */
	
	    );
	  }
	}));
	
	module.exports = Accordion;

/***/ },
/* 2093 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var easingTypes = __webpack_require__(2094);
	
	// additive is the new iOS 8 default. In most cases it simulates a physics-
	// looking overshoot behavior (especially with easeInOut. You can test that in
	// the example
	var DEFAULT_STACK_BEHAVIOR = 'ADDITIVE';
	var DEFAULT_EASING = easingTypes.easeInOutQuad;
	var DEFAULT_DURATION = 300;
	var DEFAULT_DELAY = 0;
	
	// see usage below
	function returnState(state) {
	  return state;
	}
	
	var tweenState = {
	  easingTypes: easingTypes,
	  stackBehavior: {
	    ADDITIVE: 'ADDITIVE',
	    DESTRUCTIVE: 'DESTRUCTIVE'
	  }
	};
	
	tweenState.Mixin = {
	  getInitialState: function getInitialState() {
	    return {
	      tweenQueue: []
	    };
	  },
	
	  tweenState: function tweenState(a, b, c) {
	    // tweenState(stateNameString, config)
	    // tweenState(stateRefFunc, stateNameString, config)
	
	    // passing a state name string and retrieving it later from this.state
	    // doesn't work for values in deeply nested collections (unless you design
	    // the API to be able to parse 'this.state.my.nested[1]', meh). Passing a
	    // direct, resolved reference wouldn't work either, since that reference
	    // points to the old state rather than the subsequent new ones.
	    if (typeof a === 'string') {
	      c = b;
	      b = a;
	      a = returnState;
	    }
	    this._tweenState(a, b, c);
	  },
	
	  _tweenState: function _tweenState(stateRefFunc, stateName, config) {
	    // _pendingState doesn't exist in React 0.13 anymore. No harm leaving it
	    // here for backward compat
	    var state = this._pendingState || this.state;
	    var stateRef = stateRefFunc(state);
	
	    // see the reasoning for these defaults at the top
	    var newConfig = {
	      easing: config.easing || DEFAULT_EASING,
	      duration: config.duration == null ? DEFAULT_DURATION : config.duration,
	      delay: config.delay == null ? DEFAULT_DELAY : config.delay,
	      beginValue: config.beginValue == null ? stateRef[stateName] : config.beginValue,
	      endValue: config.endValue,
	      onEnd: config.onEnd,
	      stackBehavior: config.stackBehavior || DEFAULT_STACK_BEHAVIOR
	    };
	
	    var newTweenQueue = state.tweenQueue;
	    if (newConfig.stackBehavior === tweenState.stackBehavior.DESTRUCTIVE) {
	      newTweenQueue = state.tweenQueue.filter(function (item) {
	        return item.stateName !== stateName || item.stateRefFunc(state) !== stateRef;
	      });
	    }
	
	    newTweenQueue.push({
	      stateRefFunc: stateRefFunc,
	      stateName: stateName,
	      config: newConfig,
	      initTime: Date.now() + newConfig.delay
	    });
	
	    // tweenState calls setState
	    // sorry for mutating. No idea where in the state the value is
	    stateRef[stateName] = newConfig.endValue;
	    // this will also include the above update
	    this.setState({ tweenQueue: newTweenQueue });
	
	    if (newTweenQueue.length === 1) {
	      this.startRaf();
	    }
	  },
	
	  getTweeningValue: function getTweeningValue(a, b) {
	    // see tweenState API
	    if (typeof a === 'string') {
	      b = a;
	      a = returnState;
	    }
	    return this._getTweeningValue(a, b);
	  },
	
	  _getTweeningValue: function _getTweeningValue(stateRefFunc, stateName) {
	    var state = this.state;
	    var stateRef = stateRefFunc(state);
	    var tweeningValue = stateRef[stateName];
	    var now = Date.now();
	
	    for (var i = 0; i < state.tweenQueue.length; i++) {
	      var item = state.tweenQueue[i];
	      var itemStateRef = item.stateRefFunc(state);
	      if (item.stateName !== stateName || itemStateRef !== stateRef) {
	        continue;
	      }
	
	      var progressTime = now - item.initTime > item.config.duration ? item.config.duration : Math.max(0, now - item.initTime);
	      // `now - item.initTime` can be negative if initTime is scheduled in the
	      // future by a delay. In this case we take 0
	
	      var contrib = -item.config.endValue + item.config.easing(progressTime, item.config.beginValue, item.config.endValue, item.config.duration
	      // TODO: some funcs accept a 5th param
	      );
	      tweeningValue += contrib;
	    }
	
	    return tweeningValue;
	  },
	
	  _rafCb: function _rafCb() {
	    var state = this.state;
	    if (state.tweenQueue.length === 0) {
	      return;
	    }
	
	    var now = Date.now();
	    var newTweenQueue = [];
	
	    for (var i = 0; i < state.tweenQueue.length; i++) {
	      var item = state.tweenQueue[i];
	      if (now - item.initTime < item.config.duration) {
	        newTweenQueue.push(item);
	      } else {
	        item.config.onEnd && item.config.onEnd();
	      }
	    }
	
	    // onEnd might trigger a parent callback that removes this component
	    if (!this.isMounted()) {
	      return;
	    }
	
	    this.setState({
	      tweenQueue: newTweenQueue
	    });
	
	    requestAnimationFrame(this._rafCb);
	  },
	
	  startRaf: function startRaf() {
	    requestAnimationFrame(this._rafCb);
	  }
	
	};
	
	module.exports = tweenState;

/***/ },
/* 2094 */
/***/ function(module, exports) {

	'use strict';
	
	// t: current time, b: beginning value, _c: final value, d: total duration
	var tweenFunctions = {
	  linear: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * t / d + b;
	  },
	  easeInQuad: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * (t /= d) * t + b;
	  },
	  easeOutQuad: function(t, b, _c, d) {
	    var c = _c - b;
	    return -c * (t /= d) * (t - 2) + b;
	  },
	  easeInOutQuad: function(t, b, _c, d) {
	    var c = _c - b;
	    if ((t /= d / 2) < 1) {
	      return c / 2 * t * t + b;
	    } else {
	      return -c / 2 * ((--t) * (t - 2) - 1) + b;
	    }
	  },
	  easeInCubic: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * (t /= d) * t * t + b;
	  },
	  easeOutCubic: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * ((t = t / d - 1) * t * t + 1) + b;
	  },
	  easeInOutCubic: function(t, b, _c, d) {
	    var c = _c - b;
	    if ((t /= d / 2) < 1) {
	      return c / 2 * t * t * t + b;
	    } else {
	      return c / 2 * ((t -= 2) * t * t + 2) + b;
	    }
	  },
	  easeInQuart: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * (t /= d) * t * t * t + b;
	  },
	  easeOutQuart: function(t, b, _c, d) {
	    var c = _c - b;
	    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	  },
	  easeInOutQuart: function(t, b, _c, d) {
	    var c = _c - b;
	    if ((t /= d / 2) < 1) {
	      return c / 2 * t * t * t * t + b;
	    } else {
	      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	    }
	  },
	  easeInQuint: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * (t /= d) * t * t * t * t + b;
	  },
	  easeOutQuint: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
	  },
	  easeInOutQuint: function(t, b, _c, d) {
	    var c = _c - b;
	    if ((t /= d / 2) < 1) {
	      return c / 2 * t * t * t * t * t + b;
	    } else {
	      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	    }
	  },
	  easeInSine: function(t, b, _c, d) {
	    var c = _c - b;
	    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	  },
	  easeOutSine: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * Math.sin(t / d * (Math.PI / 2)) + b;
	  },
	  easeInOutSine: function(t, b, _c, d) {
	    var c = _c - b;
	    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	  },
	  easeInExpo: function(t, b, _c, d) {
	    var c = _c - b;
	    return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
	  },
	  easeOutExpo: function(t, b, _c, d) {
	    var c = _c - b;
	    return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	  },
	  easeInOutExpo: function(t, b, _c, d) {
	    var c = _c - b;
	    if (t === 0) {
	      return b;
	    }
	    if (t === d) {
	      return b + c;
	    }
	    if ((t /= d / 2) < 1) {
	      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
	    } else {
	      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
	    }
	  },
	  easeInCirc: function(t, b, _c, d) {
	    var c = _c - b;
	    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
	  },
	  easeOutCirc: function(t, b, _c, d) {
	    var c = _c - b;
	    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
	  },
	  easeInOutCirc: function(t, b, _c, d) {
	    var c = _c - b;
	    if ((t /= d / 2) < 1) {
	      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
	    } else {
	      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
	    }
	  },
	  easeInElastic: function(t, b, _c, d) {
	    var c = _c - b;
	    var a, p, s;
	    s = 1.70158;
	    p = 0;
	    a = c;
	    if (t === 0) {
	      return b;
	    } else if ((t /= d) === 1) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * 0.3;
	    }
	    if (a < Math.abs(c)) {
	      a = c;
	      s = p / 4;
	    } else {
	      s = p / (2 * Math.PI) * Math.asin(c / a);
	    }
	    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
	  },
	  easeOutElastic: function(t, b, _c, d) {
	    var c = _c - b;
	    var a, p, s;
	    s = 1.70158;
	    p = 0;
	    a = c;
	    if (t === 0) {
	      return b;
	    } else if ((t /= d) === 1) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * 0.3;
	    }
	    if (a < Math.abs(c)) {
	      a = c;
	      s = p / 4;
	    } else {
	      s = p / (2 * Math.PI) * Math.asin(c / a);
	    }
	    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
	  },
	  easeInOutElastic: function(t, b, _c, d) {
	    var c = _c - b;
	    var a, p, s;
	    s = 1.70158;
	    p = 0;
	    a = c;
	    if (t === 0) {
	      return b;
	    } else if ((t /= d / 2) === 2) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * (0.3 * 1.5);
	    }
	    if (a < Math.abs(c)) {
	      a = c;
	      s = p / 4;
	    } else {
	      s = p / (2 * Math.PI) * Math.asin(c / a);
	    }
	    if (t < 1) {
	      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
	    } else {
	      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
	    }
	  },
	  easeInBack: function(t, b, _c, d, s) {
	    var c = _c - b;
	    if (s === void 0) {
	      s = 1.70158;
	    }
	    return c * (t /= d) * t * ((s + 1) * t - s) + b;
	  },
	  easeOutBack: function(t, b, _c, d, s) {
	    var c = _c - b;
	    if (s === void 0) {
	      s = 1.70158;
	    }
	    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
	  },
	  easeInOutBack: function(t, b, _c, d, s) {
	    var c = _c - b;
	    if (s === void 0) {
	      s = 1.70158;
	    }
	    if ((t /= d / 2) < 1) {
	      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
	    } else {
	      return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
	    }
	  },
	  easeInBounce: function(t, b, _c, d) {
	    var c = _c - b;
	    var v;
	    v = tweenFunctions.easeOutBounce(d - t, 0, c, d);
	    return c - v + b;
	  },
	  easeOutBounce: function(t, b, _c, d) {
	    var c = _c - b;
	    if ((t /= d) < 1 / 2.75) {
	      return c * (7.5625 * t * t) + b;
	    } else if (t < 2 / 2.75) {
	      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
	    } else if (t < 2.5 / 2.75) {
	      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
	    } else {
	      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
	    }
	  },
	  easeInOutBounce: function(t, b, _c, d) {
	    var c = _c - b;
	    var v;
	    if (t < d / 2) {
	      v = tweenFunctions.easeInBounce(t * 2, 0, c, d);
	      return v * 0.5 + b;
	    } else {
	      v = tweenFunctions.easeOutBounce(t * 2 - d, 0, c, d);
	      return v * 0.5 + c * 0.5 + b;
	    }
	  }
	};
	
	module.exports = tweenFunctions;


/***/ },
/* 2095 */,
/* 2096 */,
/* 2097 */,
/* 2098 */,
/* 2099 */,
/* 2100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-carousel/Carousel.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    Dimensions = _require.Dimensions,
	    StyleSheet = _require.StyleSheet,
	    Text = _require.Text,
	    View = _require.View;
	
	var TimerMixin = __webpack_require__(844);
	var CarouselPager = __webpack_require__(2101);
	
	var Carousel = _wrapComponent('_component')(React.createClass({
	  displayName: 'Carousel',
	
	  mixins: [TimerMixin],
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      hideIndicators: false,
	      indicatorColor: '#000000',
	      indicatorSize: 50,
	      inactiveIndicatorColor: '#999999',
	      indicatorAtBottom: true,
	      indicatorOffset: 250,
	      indicatorText: '•',
	      inactiveIndicatorText: '•',
	      width: null,
	      initialPage: 0,
	      indicatorSpace: 25,
	      animate: true,
	      delay: 1000,
	      loop: true
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      activePage: this.props.initialPage > 0 ? this.props.initialPage : 0
	    };
	  },
	  getWidth: function getWidth() {
	    if (this.props.width !== null) {
	      return this.props.width;
	    } else {
	      return Dimensions.get('window').width;
	    }
	  },
	  componentDidMount: function componentDidMount() {
	    if (this.props.initialPage > 0) {
	      this.refs.pager.scrollToPage(this.props.initialPage, false);
	    }
	
	    if (this.props.animate && this.props.children) {
	      this._setUpTimer();
	    }
	  },
	  indicatorPressed: function indicatorPressed(activePage) {
	    this.changePage(activePage);
	  },
	  next: function next() {
	    this.changePage(this.state.activePage + 1);
	  },
	  changePage: function changePage(nextPage) {
	    this.setState({ activePage: nextPage });
	    this.refs.pager.scrollToPage(nextPage);
	  },
	  renderPageIndicator: function renderPageIndicator() {
	    if (this.props.hideIndicators === true) {
	      return null;
	    }
	
	    var indicators = [],
	        indicatorStyle = this.props.indicatorAtBottom ? { bottom: this.props.indicatorOffset } : { top: this.props.indicatorOffset },
	        style,
	        position;
	
	    position = {
	      width: this.props.children.length * this.props.indicatorSpace
	    };
	    position.left = (this.getWidth() - position.width) / 2;
	
	    for (var i = 0, l = this.props.children.length; i < l; i++) {
	      if (typeof this.props.children[i] === "undefined") {
	        continue;
	      }
	
	      style = i === this.state.activePage ? { color: this.props.indicatorColor } : { color: this.props.inactiveIndicatorColor };
	      indicators.push(React.createElement(
	        Text,
	        {
	          style: [style, { fontSize: this.props.indicatorSize }],
	          key: i,
	          onPress: this.indicatorPressed.bind(this, i)
	        },
	        i === this.state.activePage ? this.props.indicatorText : this.props.inactiveIndicatorText
	      ));
	    }
	
	    if (indicators.length === 1) {
	      return null;
	    }
	
	    return React.createElement(
	      View,
	      { style: [styles.pageIndicator, position, indicatorStyle] },
	      indicators
	    );
	  },
	  _setUpTimer: function _setUpTimer() {
	    if (this.props.children.length > 1) {
	      this.clearTimeout(this.timer);
	      this.timer = this.setTimeout(this._animateNextPage, this.props.delay);
	    }
	  },
	  _animateNextPage: function _animateNextPage() {
	    var activePage = 0;
	    if (this.state.activePage < this.props.children.length - 1) {
	      activePage = this.state.activePage + 1;
	    } else if (!this.props.loop) {
	      return;
	    }
	
	    this.indicatorPressed(activePage);
	    this._setUpTimer();
	  },
	  _onAnimationBegin: function _onAnimationBegin() {
	    this.clearTimeout(this.timer);
	  },
	  _onAnimationEnd: function _onAnimationEnd(activePage) {
	    this.setState({ activePage: activePage });
	    if (this.props.onPageChange) {
	      this.props.onPageChange(activePage);
	    }
	  },
	  render: function render() {
	    return React.createElement(
	      View,
	      { style: { flex: 1 } },
	      React.createElement(
	        CarouselPager,
	        {
	          ref: 'pager',
	          width: this.getWidth(),
	          contentContainerStyle: styles.container,
	          onBegin: this._onAnimationBeginPage,
	          onEnd: this._onAnimationEnd
	        },
	        this.props.children
	      ),
	      this.renderPageIndicator()
	    );
	  }
	}));
	
	var styles = StyleSheet.create({
	  pageIndicator: {
	    position: 'absolute',
	    flexDirection: 'row',
	    flex: 1,
	    justifyContent: 'space-around',
	    alignItems: 'center',
	    alignSelf: 'center',
	    backgroundColor: 'transparent'
	  }
	});
	
	module.exports = Carousel;

/***/ },
/* 2101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-carousel/CarouselPager.web.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    ViewPagerAndroid = _require.ViewPagerAndroid;
	
	var CarouselPager = _wrapComponent('_component')(React.createClass({
	  displayName: 'CarouselPager',
	  scrollToPage: function scrollToPage(page, animated) {
	    if (typeof animated === 'undefined') {
	      animated = true;
	    }
	    if (animated) {
	      this.refs.viewPager.setPage(page);
	    } else {
	      this.refs.viewPager.setPageWithoutAnimation(page);
	    }
	    this._onPageSelected(page);
	  },
	  _onPageSelected: function _onPageSelected(page) {
	    this.props.onEnd(page);
	  },
	  render: function render() {
	    var _this = this;
	
	    return React.createElement(
	      ViewPagerAndroid,
	      {
	        ref: 'viewPager',
	        style: { flex: 1 },
	        contentContainerStyle: this.props.contentContainerStyle,
	        automaticallyAdjustContentInsets: false,
	        horizontal: true,
	        showsHorizontalScrollIndicator: false,
	        bounces: false,
	        onPageScroll: this.props.onBegin,
	        onPageSelected: function onPageSelected(e) {
	          return _this._onPageSelected(e.nativeEvent.position);
	        },
	        scrollsToTop: false
	      },
	      this.props.children.map(function (c, idx) {
	        return React.createElement(
	          View,
	          { key: idx, style: { flex: 1 } },
	          c
	        );
	      })
	    );
	  }
	}));
	
	module.exports = CarouselPager;

/***/ },
/* 2102 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * object.pick <https://github.com/jonschlinkert/object.pick>
	 *
	 * Copyright (c) 2014-2015 Jon Schlinkert, contributors.
	 * Licensed under the MIT License
	 */
	
	'use strict';
	
	var isObject = __webpack_require__(2103);
	
	module.exports = function pick(obj, keys) {
	  if (!isObject(obj) && typeof obj !== 'function') {
	    return {};
	  }
	
	  var res = {};
	  if (typeof keys === 'string') {
	    if (keys in obj) {
	      res[keys] = obj[keys];
	    }
	    return res;
	  }
	
	  var len = keys.length;
	  var idx = -1;
	
	  while (++idx < len) {
	    var key = keys[idx];
	    if (key in obj) {
	      res[key] = obj[key];
	    }
	  }
	  return res;
	};


/***/ },
/* 2103 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * isobject <https://github.com/jonschlinkert/isobject>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isArray = __webpack_require__(2104);
	
	module.exports = function isObject(val) {
	  return val != null && typeof val === 'object' && isArray(val) === false;
	};


/***/ },
/* 2104 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 2105 */,
/* 2106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2107);

/***/ },
/* 2107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-prompt/src/Prompt.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	// const Portal = require('react-native/Libraries/Portal/Portal');
	var styles = __webpack_require__(2108);
	
	var Prompt = _wrapComponent('_component')(_react3.default.createClass({
	  displayName: 'Prompt',
	
	  propTypes: {
	    title: _react3.default.PropTypes.string.isRequired,
	    visible: _react3.default.PropTypes.bool,
	    defaultValue: _react3.default.PropTypes.string,
	    placeholder: _react3.default.PropTypes.string,
	    onCancel: _react3.default.PropTypes.func.isRequired,
	    cancelText: _react3.default.PropTypes.string,
	    onSubmit: _react3.default.PropTypes.func.isRequired,
	    submitText: _react3.default.PropTypes.string,
	    onChangeText: _react3.default.PropTypes.func.isRequired,
	    borderColor: _react3.default.PropTypes.string,
	    promptStyle: _react3.default.PropTypes.object,
	    titleStyle: _react3.default.PropTypes.object,
	    buttonStyle: _react3.default.PropTypes.object,
	    buttonTextStyle: _react3.default.PropTypes.object,
	    submitButtonStyle: _react3.default.PropTypes.object,
	    submitButtonTextStyle: _react3.default.PropTypes.object,
	    cancelButtonStyle: _react3.default.PropTypes.object,
	    cancelButtonTextStyle: _react3.default.PropTypes.object,
	    inputStyle: _react3.default.PropTypes.object
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      visible: false,
	      defaultValue: '',
	      cancelText: 'Cancel',
	      submitText: 'OK',
	      borderColor: '#ccc',
	      promptStyle: {},
	      titleStyle: {},
	      buttonStyle: {},
	      buttonTextStyle: {},
	      submitButtonStyle: {},
	      submitButtonTextStyle: {},
	      cancelButtonStyle: {},
	      cancelButtonTextStyle: {},
	      inputStyle: {},
	      onChangeText: function onChangeText() {}
	    };
	  },
	  getInitialState: function getInitialState() {
	    return { value: this.props.defaultValue };
	  },
	  componentWillMount: function componentWillMount() {
	    this._tag = '';
	    // if (Platform.OS === 'android') {
	    //   this._tag = Portal.allocateTag();
	    // }
	  },
	
	  // componentDidMount() {
	  //   if (Platform.OS === 'android') {
	  //     this._showOrCloseModal(this.props.visible);
	  //   }
	  // },
	  componentWillUnmount: function componentWillUnmount() {
	    // if (Platform.OS === 'android') {
	    //   Portal.closeModal(this._tag);
	    //   this._tag = '';
	    // }
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.visible !== this.props.visible) {
	      this._showOrCloseModal(nextProps.visible);
	    }
	  },
	  _showOrCloseModal: function _showOrCloseModal(visible) {
	    if (visible) {
	      this.setState({ value: this.props.defaultValue });
	    }
	
	    // if (Platform.OS === 'ios') {
	    //   return;
	    // }
	
	    // if (visible) {
	    //   Portal.showModal(this._tag, this._renderDialog());
	    // } else {
	    //   Portal.closeModal(this._tag);
	    // }
	  },
	  _onChangeText: function _onChangeText(value) {
	    this.setState({ value: value });
	    this.props.onChangeText(value);
	  },
	  _onSubmitPress: function _onSubmitPress() {
	    var value = this.state.value;
	
	    this.props.onSubmit(value);
	  },
	  _onCancelPress: function _onCancelPress() {
	    this.props.onCancel();
	  },
	  _renderDialog: function _renderDialog() {
	    var _props = this.props,
	        title = _props.title,
	        placeholder = _props.placeholder,
	        defaultValue = _props.defaultValue,
	        cancelText = _props.cancelText,
	        submitText = _props.submitText,
	        borderColor = _props.borderColor,
	        promptStyle = _props.promptStyle,
	        titleStyle = _props.titleStyle,
	        buttonStyle = _props.buttonStyle,
	        buttonTextStyle = _props.buttonTextStyle,
	        submitButtonStyle = _props.submitButtonStyle,
	        submitButtonTextStyle = _props.submitButtonTextStyle,
	        cancelButtonStyle = _props.cancelButtonStyle,
	        cancelButtonTextStyle = _props.cancelButtonTextStyle,
	        inputStyle = _props.inputStyle;
	
	    return _react3.default.createElement(
	      _reactNative.View,
	      { style: styles.dialog, key: 'prompt' },
	      _react3.default.createElement(_reactNative.View, { style: styles.dialogOverlay }),
	      _react3.default.createElement(
	        _reactNative.View,
	        { style: [styles.dialogContent, { borderColor: borderColor }, promptStyle] },
	        _react3.default.createElement(
	          _reactNative.View,
	          { style: [styles.dialogTitle, { borderColor: borderColor }] },
	          _react3.default.createElement(
	            _reactNative.Text,
	            { style: [styles.dialogTitleText, titleStyle] },
	            title
	          )
	        ),
	        _react3.default.createElement(
	          _reactNative.View,
	          { style: styles.dialogBody },
	          _react3.default.createElement(_reactNative.TextInput, {
	            style: [styles.dialogInput, inputStyle],
	            defaultValue: defaultValue,
	            onChangeText: this._onChangeText,
	            placeholder: placeholder,
	            autoFocus: true,
	            underlineColorAndroid: 'white' })
	        ),
	        _react3.default.createElement(
	          _reactNative.View,
	          { style: [styles.dialogFooter, { borderColor: borderColor }] },
	          _react3.default.createElement(
	            _reactNative.TouchableOpacity,
	            { onPress: this._onCancelPress, style: { flex: 1 } },
	            _react3.default.createElement(
	              _reactNative.View,
	              { style: [styles.dialogAction, buttonStyle, cancelButtonStyle] },
	              _react3.default.createElement(
	                _reactNative.Text,
	                { style: [styles.dialogActionText, buttonTextStyle, cancelButtonTextStyle] },
	                cancelText
	              )
	            )
	          ),
	          _react3.default.createElement(
	            _reactNative.TouchableOpacity,
	            { onPress: this._onSubmitPress, style: { flex: 1 } },
	            _react3.default.createElement(
	              _reactNative.View,
	              { style: [styles.dialogAction, buttonStyle, submitButtonStyle] },
	              _react3.default.createElement(
	                _reactNative.Text,
	                { style: [styles.dialogActionText, buttonTextStyle, submitButtonTextStyle] },
	                submitText
	              )
	            )
	          )
	        )
	      )
	    );
	  },
	  render: function render() {
	    // if (Platform.OS === 'ios') {
	    return _react3.default.createElement(
	      _reactNative.Modal,
	      { transparent: true, visible: this.props.visible },
	      this._renderDialog()
	    );
	    // } else {
	    //   return <View/>;
	    // }
	  }
	}));
	
	module.exports = Prompt;

/***/ },
/* 2108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _reactNative = __webpack_require__(300);
	
	var _reactNative2 = _interopRequireDefault(_reactNative);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	module.exports = _reactNative.StyleSheet.create({
	  dialog: {
	    flex: 1,
	    alignItems: 'center'
	  },
	  dialogOverlay: {
	    backgroundColor: 'rgba(0, 0, 0, 0.8)',
	    position: 'absolute',
	    top: 0,
	    bottom: 0,
	    left: 0,
	    right: 0
	  },
	  dialogContent: {
	    elevation: 5,
	    marginTop: 150,
	    width: _reactNative.Dimensions.get('window').width / 1.5,
	    backgroundColor: 'white',
	    borderRadius: 5,
	    borderWidth: 1,
	    overflow: 'hidden'
	  },
	  dialogTitle: {
	    borderBottomWidth: 1,
	    paddingVertical: 10,
	    paddingHorizontal: 15
	  },
	  dialogTitleText: {
	    fontSize: 18,
	    fontWeight: '600'
	  },
	  dialogBody: {
	    flex: 1,
	    paddingHorizontal: 10
	  },
	  dialogInput: {
	    flex: 1,
	    height: 50,
	    fontSize: 18
	  },
	  dialogFooter: {
	    borderTopWidth: 1,
	    flexDirection: 'row',
	    flex: 1
	  },
	  dialogAction: {
	    flex: 1,
	    padding: 15
	  },
	  dialogActionText: {
	    fontSize: 18,
	    textAlign: 'center',
	    color: '#006dbf'
	  }
	});

/***/ },
/* 2109 */,
/* 2110 */,
/* 2111 */,
/* 2112 */,
/* 2113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Image = exports.Text = exports.View = undefined;
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.createAnimatableComponent = createAnimatableComponent;
	
	var _reactNative = __webpack_require__(300);
	
	var _reactNative2 = _interopRequireDefault(_reactNative);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var _components = {
	  AnimatableComponent: {
	    displayName: 'AnimatableComponent',
	    isInFunction: true
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-animatable/index.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	// Transform an object to an array the way react native wants it for transform styles
	// { a: x, b: y } => [{ a: x }, { b: y }]
	function createKeyedArray(obj) {
	  return Object.keys(obj).map(function (key) {
	    var keyed = {};
	    keyed[key] = obj[key];
	    return keyed;
	  });
	}
	
	// Helper function to calculate transform values, args:
	// direction: in|out
	// originOrDestination: up|down|left|right
	// verticalValue: amplitude for up/down animations
	// horizontalValue: amplitude for left/right animations
	function getAnimationValueForDirection(direction, originOrDestination, verticalValue, horizontalValue) {
	  var isVertical = originOrDestination === 'up' || originOrDestination === 'down';
	  var modifier = (isVertical && direction === 'out' ? -1 : 1) * (originOrDestination === 'down' || originOrDestination === 'left' ? -1 : 1);
	  return modifier * (isVertical ? verticalValue : horizontalValue);
	}
	
	// Animations starting with these keywords use element dimensions
	// thus, any animation needs to be deferred until the element is measured
	var LAYOUT_DEPENDENT_ANIMATIONS = ['slide', 'fade', 'wobble', 'lightSpeed'];
	
	// These styles need to be nested in a transform array
	var TRANSFORM_STYLE_PROPERTIES = ['rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'translateX', 'translateY', 'skewX', 'skewY'];
	
	// These styles are not number based and thus needs to be interpolated
	var INTERPOLATION_STYLE_PROPERTIES = [
	// Transform styles
	'rotate', 'rotateX', 'rotateY', 'rotateZ', 'skewX', 'skewY', 'transformMatrix',
	// View styles
	'backgroundColor', 'borderColor', 'borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor', 'shadowColor',
	// Text styles
	'color', 'textDecorationColor'];
	
	var EASING_FUNCTIONS = {
	  'linear': _reactNative.Easing.linear,
	  'ease': _reactNative.Easing.ease,
	  'ease-in': _reactNative.Easing.in(_reactNative.Easing.ease),
	  'ease-out': _reactNative.Easing.out(_reactNative.Easing.ease),
	  'ease-in-out': _reactNative.Easing.inOut(_reactNative.Easing.ease)
	};
	
	// Transforms { translateX: 1 } to { transform: [{ translateX: 1 }]}
	function wrapStyleTransforms(style) {
	  var wrapped = {};
	  Object.keys(style).forEach(function (key) {
	    if (TRANSFORM_STYLE_PROPERTIES.indexOf(key) !== -1) {
	      if (!wrapped.transform) {
	        wrapped.transform = [];
	      }
	      wrapped.transform.push(_defineProperty({}, key, style[key]));
	    } else {
	      wrapped[key] = style[key];
	    }
	  });
	  return wrapped;
	}
	
	// Determine to what value the animation should tween to
	function getAnimationTarget(iteration, direction) {
	  switch (direction) {
	    case 'reverse':
	      return 0;
	    case 'alternate':
	      return iteration % 2 ? 0 : 1;
	    case 'alternate-reverse':
	      return iteration % 2 ? 1 : 0;
	    case 'normal':
	    default:
	      return 1;
	  }
	}
	
	// Like getAnimationTarget but opposite
	function getAnimationOrigin(iteration, direction) {
	  return getAnimationTarget(iteration, direction) ? 0 : 1;
	}
	
	function getDefaultStyleValue(key) {
	  if (key === 'backgroundColor') {
	    return 'rgba(0,0,0,0)';
	  }
	  if (key === 'color' || key.indexOf('Color') !== -1) {
	    return 'rgba(0,0,0,1)';
	  }
	  if (key.indexOf('rotate') !== -1 || key.indexOf('skew') !== -1) {
	    return '0deg';
	  }
	  if (key === 'fontSize') {
	    return 14;
	  }
	  if (key === 'opacity') {
	    return 1;
	  }
	  return 0;
	}
	
	// Returns a flattened version of style with only `keys` values.
	function getStyleValues(keys, style) {
	  if (!_reactNative.StyleSheet.flatten) {
	    throw new Error('StyleSheet.flatten not available, upgrade React Native or polyfill with StyleSheet.flatten = require(\'flattenStyle\');');
	  }
	  var values = {};
	  var flatStyle = Object.assign({}, _reactNative.StyleSheet.flatten(style));
	  if (flatStyle.transform) {
	    flatStyle.transform.forEach(function (transform) {
	      var key = Object.keys(transform)[0];
	      flatStyle[key] = transform[key];
	    });
	    delete flatStyle.transform;
	  }
	
	  (typeof keys === 'string' ? [keys] : keys).forEach(function (key) {
	    values[key] = key in flatStyle ? flatStyle[key] : getDefaultStyleValue(key);
	  });
	  return values;
	}
	
	// Make (almost) any component animatable, similar to Animated.createAnimatedComponent
	function createAnimatableComponent(component) {
	  var _class, _temp;
	
	  var Animatable = _reactNative.Animated.createAnimatedComponent(component);
	  return _wrapComponent('AnimatableComponent')((_temp = _class = function (_Component) {
	    _inherits(AnimatableComponent, _Component);
	
	    function AnimatableComponent(props) {
	      _classCallCheck(this, AnimatableComponent);
	
	      var _this = _possibleConstructorReturn(this, (AnimatableComponent.__proto__ || Object.getPrototypeOf(AnimatableComponent)).call(this, props));
	
	      _this.state = {
	        animationValue: new _reactNative.Animated.Value(getAnimationOrigin(0, _this.props.direction)),
	        animationStyle: {},
	        transitionStyle: {},
	        transitionValues: {},
	        currentTransitionValues: {}
	      };
	
	      if (props.transition) {
	        _this.state = _extends({}, _this.state, _this.initializeTransitionState(props.transition));
	      }
	      return _this;
	    }
	
	    _createClass(AnimatableComponent, [{
	      key: 'initializeTransitionState',
	      value: function initializeTransitionState(transitionKeys) {
	        var transitionValues = {};
	        var styleValues = {};
	
	        var currentTransitionValues = getStyleValues(transitionKeys, this.props.style);
	        Object.keys(currentTransitionValues).forEach(function (key) {
	          var value = currentTransitionValues[key];
	          if (INTERPOLATION_STYLE_PROPERTIES.indexOf(key) !== -1) {
	            transitionValues[key] = new _reactNative.Animated.Value(0);
	            styleValues[key] = value;
	          } else {
	            transitionValues[key] = styleValues[key] = new _reactNative.Animated.Value(value);
	          }
	        });
	
	        return {
	          transitionStyle: styleValues,
	          transitionValues: transitionValues,
	          currentTransitionValues: currentTransitionValues
	        };
	      }
	    }, {
	      key: 'getTransitionState',
	      value: function getTransitionState(keys) {
	        var _this2 = this;
	
	        var transitionKeys = typeof transitionKeys === 'string' ? [keys] : keys;
	        var _state = this.state,
	            transitionValues = _state.transitionValues,
	            currentTransitionValues = _state.currentTransitionValues,
	            transitionStyle = _state.transitionStyle;
	
	        var missingKeys = transitionKeys.filter(function (key) {
	          return !_this2.state.transitionValues[key];
	        });
	        if (missingKeys.length) {
	          var transitionState = this.initializeTransitionState(missingKeys);
	          transitionValues = _extends({}, transitionValues, transitionState.transitionValues);
	          currentTransitionValues = _extends({}, currentTransitionValues, transitionState.currentTransitionValues);
	          transitionStyle = _extends({}, transitionStyle, transitionState.transitionStyle);
	        }
	        return { transitionValues: transitionValues, currentTransitionValues: currentTransitionValues, transitionStyle: transitionStyle };
	      }
	    }, {
	      key: 'setNativeProps',
	      value: function setNativeProps(nativeProps) {
	        if (this._root) {
	          this._root.setNativeProps(nativeProps);
	        }
	      }
	    }, {
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        var _this3 = this;
	
	        var _props = this.props,
	            animation = _props.animation,
	            duration = _props.duration,
	            delay = _props.delay,
	            onAnimationBegin = _props.onAnimationBegin,
	            onAnimationEnd = _props.onAnimationEnd;
	
	        if (animation) {
	          if (delay) {
	            this.setState({ scheduledAnimation: animation });
	            this._timer = setTimeout(function () {
	              onAnimationBegin();
	              _this3.setState({ scheduledAnimation: false }, function () {
	                return _this3[animation](duration).then(onAnimationEnd);
	              });
	              _this3._timer = false;
	            }, delay);
	            return;
	          }
	          if (!this._layout) {
	            for (var i = LAYOUT_DEPENDENT_ANIMATIONS.length - 1; i >= 0; i--) {
	              if (animation.indexOf(LAYOUT_DEPENDENT_ANIMATIONS[i]) === 0) {
	                this.setState({ scheduledAnimation: animation });
	                return;
	              }
	            }
	          }
	          onAnimationBegin();
	          this[animation](duration).then(onAnimationEnd);
	        }
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        if (this._timer) {
	          clearTimeout(this._timer);
	        }
	      }
	    }, {
	      key: 'componentWillReceiveProps',
	      value: function componentWillReceiveProps(props) {
	        var animation = props.animation,
	            duration = props.duration,
	            easing = props.easing,
	            transition = props.transition,
	            onAnimationBegin = props.onAnimationBegin,
	            onAnimationEnd = props.onAnimationEnd;
	
	
	        if (transition) {
	          var values = getStyleValues(transition, props.style);
	          this.transitionTo(values, duration, easing);
	        } else if (animation !== this.props.animation) {
	          if (animation) {
	            if (this.state.scheduledAnimation) {
	              this.setState({ scheduledAnimation: animation });
	            } else {
	              onAnimationBegin();
	              this[animation](duration).then(onAnimationEnd);
	            }
	          } else {
	            this.stopAnimation();
	          }
	        }
	      }
	    }, {
	      key: '_handleLayout',
	      value: function _handleLayout(event) {
	        var _this4 = this;
	
	        var _props2 = this.props,
	            duration = _props2.duration,
	            onLayout = _props2.onLayout,
	            onAnimationBegin = _props2.onAnimationBegin,
	            onAnimationEnd = _props2.onAnimationEnd;
	        var scheduledAnimation = this.state.scheduledAnimation;
	
	
	        this._layout = event.nativeEvent.layout;
	        if (onLayout) {
	          onLayout(event);
	        }
	
	        if (scheduledAnimation && !this._timer) {
	          onAnimationBegin();
	          this.setState({ scheduledAnimation: false }, function () {
	            _this4[scheduledAnimation](duration).then(onAnimationEnd);
	          });
	        }
	      }
	    }, {
	      key: 'animate',
	      value: function animate(duration, animationStyle) {
	        var _this5 = this;
	
	        return new Promise(function (resolve, reject) {
	          _this5.setState({ animationStyle: animationStyle }, function () {
	            _this5._startAnimation(duration, 0, resolve);
	          });
	        });
	      }
	    }, {
	      key: 'stopAnimation',
	      value: function stopAnimation() {
	        this.setState({
	          scheduledAnimation: false,
	          animationStyle: {}
	        });
	        this.state.animationValue.stopAnimation();
	        if (this._timer) {
	          clearTimeout(this._timer);
	          this._timer = false;
	        }
	      }
	    }, {
	      key: '_startAnimation',
	      value: function _startAnimation(duration, iteration, callback) {
	        var _this6 = this;
	
	        var animationValue = this.state.animationValue;
	        var _props3 = this.props,
	            direction = _props3.direction,
	            iterationCount = _props3.iterationCount;
	
	        var easing = this.props.easing || 'ease-in-out';
	        var currentIteration = iteration || 0;
	        var fromValue = getAnimationOrigin(currentIteration, direction);
	        var toValue = getAnimationTarget(currentIteration, direction);
	        animationValue.setValue(fromValue);
	
	        // This is on the way back reverse
	        if ((direction === 'reverse' || direction === 'alternate' && !toValue || direction === 'alternate-reverse' && !toValue) && easing.match(/^ease\-(in|out)$/)) {
	          if (easing.indexOf('-in') !== -1) {
	            easing = easing.replace('-in', '-out');
	          } else {
	            easing = easing.replace('-out', '-in');
	          }
	        }
	        _reactNative.Animated.timing(animationValue, {
	          toValue: toValue,
	          easing: EASING_FUNCTIONS[easing],
	          isInteraction: !iterationCount,
	          duration: duration || this.props.duration || 1000
	        }).start(function (endState) {
	          currentIteration++;
	          if (endState.finished && _this6.props.animation && (iterationCount === 'infinite' || currentIteration < iterationCount)) {
	            _this6._startAnimation(duration, currentIteration, callback);
	          } else if (callback) {
	            callback(endState);
	          }
	        });
	      }
	    }, {
	      key: 'transition',
	      value: function transition(fromValues, toValues, duration, easing) {
	        var _this7 = this;
	
	        var transitionKeys = Object.keys(toValues);
	
	        var _getTransitionState = this.getTransitionState(transitionKeys),
	            transitionValues = _getTransitionState.transitionValues,
	            currentTransitionValues = _getTransitionState.currentTransitionValues,
	            transitionStyle = _getTransitionState.transitionStyle;
	
	        transitionKeys.forEach(function (property) {
	          var fromValue = fromValues[property];
	          var toValue = toValues[property];
	          var transitionValue = transitionValues[property];
	          if (!transitionValue) {
	            transitionValue = new _reactNative.Animated.Value(0);
	          }
	          transitionStyle[property] = transitionValue;
	
	          if (INTERPOLATION_STYLE_PROPERTIES.indexOf(property) !== -1) {
	            transitionValue.setValue(0);
	            transitionStyle[property] = transitionValue.interpolate({
	              inputRange: [0, 1],
	              outputRange: [fromValue, toValue]
	            });
	            currentTransitionValues[property] = toValue;
	            toValues[property] = 1;
	          } else {
	            transitionValue.setValue(fromValue);
	          }
	        });
	        this.setState({ transitionValues: transitionValues, transitionStyle: transitionStyle, currentTransitionValues: currentTransitionValues }, function () {
	          _this7._transitionToValues(toValues, duration || _this7.props.duration, easing);
	        });
	      }
	    }, {
	      key: 'transitionTo',
	      value: function transitionTo(toValues, duration, easing) {
	        var _this8 = this;
	
	        var currentTransitionValues = this.state.currentTransitionValues;
	
	
	        var transitions = {
	          from: {},
	          to: {}
	        };
	
	        Object.keys(toValues).forEach(function (property) {
	          var toValue = toValues[property];
	
	          if (INTERPOLATION_STYLE_PROPERTIES.indexOf(property) === -1 && _this8.state.transitionStyle[property] && _this8.state.transitionStyle[property] === _this8.state.transitionValues[property]) {
	            return _this8._transitionToValue(_this8.state.transitionValues[property], toValue, duration, easing);
	          }
	
	          var currentTransitionValue = currentTransitionValues[property];
	          if (typeof currentTransitionValue === 'undefined' && _this8.props.style) {
	            var style = getStyleValues(property, _this8.props.style);
	            currentTransitionValue = style[property];
	          }
	          transitions.from[property] = currentTransitionValue;
	          transitions.to[property] = toValue;
	        });
	
	        if (Object.keys(transitions.from).length) {
	          this.transition(transitions.from, transitions.to, duration, easing);
	        }
	      }
	    }, {
	      key: '_transitionToValues',
	      value: function _transitionToValues(toValues, duration, easing) {
	        var _this9 = this;
	
	        Object.keys(toValues).forEach(function (property) {
	          var transitionValue = _this9.state.transitionValues[property];
	          var toValue = toValues[property];
	          _this9._transitionToValue(transitionValue, toValue, duration, easing);
	        });
	      }
	    }, {
	      key: '_transitionToValue',
	      value: function _transitionToValue(transitionValue, toValue, duration, easing) {
	        if (duration || easing) {
	          _reactNative.Animated.timing(transitionValue, {
	            toValue: toValue,
	            duration: duration || 1000,
	            easing: EASING_FUNCTIONS[easing || 'ease-in-out']
	          }).start();
	        } else {
	          _reactNative.Animated.spring(transitionValue, {
	            toValue: toValue
	          }).start();
	        }
	      }
	    }, {
	      key: 'bounce',
	      value: function bounce(duration) {
	        return this.animate(duration, {
	          transform: [{
	            translateY: this.state.animationValue.interpolate({
	              inputRange: [0, 0.2, 0.4, 0.43, 0.53, 0.7, 0.8, 0.9, 1],
	              outputRange: [0, 0, -30, -30, 0, -15, 0, -4, 0]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'flash',
	      value: function flash(duration) {
	        var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
	
	        var inputRange = [0];
	        var outputRange = [1];
	        var totalTimes = times * 2;
	
	        for (var i = 1; i <= totalTimes; i++) {
	          inputRange.push(i / totalTimes);
	          outputRange.push(i % 2 ? 0 : 1);
	        }
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: inputRange,
	            outputRange: outputRange
	          })
	        });
	      }
	    }, {
	      key: 'jello',
	      value: function jello(duration) {
	        var skew = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12.5;
	        var times = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;
	
	        var inputRange = [0];
	        var outputRange = ['0 deg'];
	        var totalTimes = times * 2;
	
	        for (var i = 1; i < totalTimes; i++) {
	          inputRange.push(i / totalTimes);
	          outputRange.push(skew / i * (i % 2 ? -1 : 1) + ' deg');
	        }
	        inputRange.push(1);
	        outputRange.push('0 deg');
	
	        return this.animate(duration, {
	          transform: [{
	            skewX: this.state.animationValue.interpolate({ inputRange: inputRange, outputRange: outputRange })
	          }, {
	            skewY: this.state.animationValue.interpolate({ inputRange: inputRange, outputRange: outputRange })
	          }]
	        });
	      }
	    }, {
	      key: 'pulse',
	      value: function pulse(duration) {
	        return this.animate(duration, {
	          transform: [{
	            scale: this.state.animationValue.interpolate({
	              inputRange: [0, 0.5, 1],
	              outputRange: [1, 1.05, 1]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'rotate',
	      value: function rotate(duration) {
	        return this.animate(duration, {
	          transform: [{
	            rotate: this.state.animationValue.interpolate({
	              inputRange: [0, 0.25, 0.5, 0.75, 1],
	              outputRange: ['0 deg', '90 deg', '180 deg', '270 deg', '360 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'rubberBand',
	      value: function rubberBand(duration) {
	        return this.animate(duration, {
	          transform: [{
	            scaleX: this.state.animationValue.interpolate({
	              inputRange: [0, 0.3, 0.4, 0.5, 0.65, 0.75, 1],
	              outputRange: [1, 1.25, 0.75, 1.15, 0.95, 1.05, 1]
	            })
	          }, {
	            scaleY: this.state.animationValue.interpolate({
	              inputRange: [0, 0.3, 0.4, 0.5, 0.65, 0.75, 1],
	              outputRange: [1, 0.75, 1.25, 0.85, 1.05, 0.95, 1]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'shake',
	      value: function shake(duration) {
	        var distance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
	        var times = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
	
	        var inputRange = [0];
	        var outputRange = [0];
	
	        for (var i = 1; i <= times; i++) {
	          inputRange.push(i / times);
	          outputRange.push(i === times ? 0 : (i % 2 ? 1 : -1) * distance);
	        }
	        return this.animate(duration, {
	          transform: [{
	            translateX: this.state.animationValue.interpolate({
	              inputRange: inputRange,
	              outputRange: outputRange
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'swing',
	      value: function swing(duration) {
	        return this.animate(duration, {
	          transform: [{
	            rotateZ: this.state.animationValue.interpolate({
	              inputRange: [0, 0.2, 0.4, 0.6, 0.8, 1],
	              outputRange: ['0 deg', '15 deg', '-10 deg', '5 deg', '-5 deg', '0 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'tada',
	      value: function tada(duration) {
	        return this.animate(duration, {
	          transform: [{
	            scale: this.state.animationValue.interpolate({
	              inputRange: [0, 0.1, 0.2, 0.3, 0.9, 1],
	              outputRange: [1, 0.9, 0.9, 1.1, 1.1, 1]
	            })
	          }, {
	            rotateZ: this.state.animationValue.interpolate({
	              inputRange: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1],
	              outputRange: ['0 deg', '-3 deg', '-3 deg', '3 deg', '-3 deg', '3 deg', '-3 deg', '3 deg', '-3 deg', '3 deg', '0 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'wobble',
	      value: function wobble(duration) {
	        var width = (this._layout || _reactNative.Dimensions.get('window')).width;
	
	        return this.animate(duration, {
	          transform: [{
	            translateX: this.state.animationValue.interpolate({
	              inputRange: [0, 0.15, 0.3, 0.45, 0.6, 0.75, 1],
	              outputRange: [0, -0.25 * width, 0.2 * width, -0.15 * width, 0.1 * width, -0.05 * width, 1]
	            })
	          }, {
	            rotateZ: this.state.animationValue.interpolate({
	              inputRange: [0, 0.15, 0.3, 0.45, 0.6, 0.75, 1],
	              outputRange: ['0 deg', '-5 deg', '3 deg', '-3 deg', '2 deg', '-1 deg', '0 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: '_bounce',
	      value: function _bounce(duration, direction, originOrDestination) {
	        var style = {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: direction === 'in' ? [0, 0.6, 1] : [0, 0.55, 1],
	            outputRange: direction === 'in' ? [0, 1, 1] : [1, 1, 0]
	          })
	        };
	        if (originOrDestination) {
	          style.transform = createKeyedArray(this._getBounceTransformation(direction, originOrDestination));
	        }
	        return this.animate(duration, style);
	      }
	    }, {
	      key: '_getBounceTransformation',
	      value: function _getBounceTransformation(direction, originOrDestination) {
	        var windowSize = _reactNative.Dimensions.get('window');
	        var animationValue = getAnimationValueForDirection(direction, originOrDestination, windowSize.height, windowSize.width);
	        var translateKey = originOrDestination === 'up' || originOrDestination === 'down' ? 'translateY' : 'translateX';
	        var modifier = animationValue > 0 ? 1 : -1;
	
	        return _defineProperty({}, translateKey, this.state.animationValue.interpolate({
	          inputRange: direction === 'in' ? [0, 0.6, 0.75, 0.9, 1] : [0, 0.2, 0.4, 0.45, 1],
	          outputRange: direction === 'in' ? [animationValue, 25 * modifier, -10 * modifier, 5 * modifier, 0] : [0, 10 * modifier, -20 * modifier, -20 * modifier, animationValue]
	        }));
	      }
	    }, {
	      key: 'bounceIn',
	      value: function bounceIn(duration) {
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.6, 1],
	            outputRange: [0, 1, 1]
	          }),
	          transform: [{
	            scale: this.state.animationValue.interpolate({
	              inputRange: [0, 0.2, 0.4, 0.6, 0.8, 1],
	              outputRange: [0.3, 1.1, 0.9, 1.03, 0.97, 1]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'bounceOut',
	      value: function bounceOut(duration) {
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.55, 1],
	            outputRange: [1, 1, 0]
	          }),
	          transform: [{
	            scale: this.state.animationValue.interpolate({
	              inputRange: [0, 0.2, 0.5, 0.55, 1],
	              outputRange: [1, 0.9, 1.1, 1.1, 0.3]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'bounceInDown',
	      value: function bounceInDown(duration) {
	        return this._bounce(duration, 'in', 'down');
	      }
	    }, {
	      key: 'bounceInUp',
	      value: function bounceInUp(duration) {
	        return this._bounce(duration, 'in', 'up');
	      }
	    }, {
	      key: 'bounceInLeft',
	      value: function bounceInLeft(duration) {
	        return this._bounce(duration, 'in', 'left');
	      }
	    }, {
	      key: 'bounceInRight',
	      value: function bounceInRight(duration) {
	        return this._bounce(duration, 'in', 'right');
	      }
	    }, {
	      key: 'bounceOutDown',
	      value: function bounceOutDown(duration) {
	        return this._bounce(duration, 'out', 'down');
	      }
	    }, {
	      key: 'bounceOutUp',
	      value: function bounceOutUp(duration) {
	        return this._bounce(duration, 'out', 'up');
	      }
	    }, {
	      key: 'bounceOutLeft',
	      value: function bounceOutLeft(duration) {
	        return this._bounce(duration, 'out', 'left');
	      }
	    }, {
	      key: 'bounceOutRight',
	      value: function bounceOutRight(duration) {
	        return this._bounce(duration, 'out', 'right');
	      }
	    }, {
	      key: 'flipInX',
	      value: function flipInX(duration) {
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.6, 1],
	            outputRange: [0, 1, 1]
	          }),
	          transform: [{
	            rotateX: this.state.animationValue.interpolate({
	              inputRange: [0, 0.4, 0.6, 0.8, 1],
	              outputRange: ['90 deg', '-20 deg', '10 deg', '-5 deg', '0 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'flipInY',
	      value: function flipInY(duration) {
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.6, 1],
	            outputRange: [0, 1, 1]
	          }),
	          transform: [{
	            rotateY: this.state.animationValue.interpolate({
	              inputRange: [0, 0.4, 0.6, 0.8, 1],
	              outputRange: ['90 deg', '-20 deg', '10 deg', '-5 deg', '0 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'flipOutX',
	      value: function flipOutX(duration) {
	        return this.animate(duration || 750, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.3, 1],
	            outputRange: [1, 1, 0]
	          }),
	          transform: [{
	            rotateX: this.state.animationValue.interpolate({
	              inputRange: [0, 0.3, 1],
	              outputRange: ['0 deg', '-20 deg', '90 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'flipOutY',
	      value: function flipOutY(duration) {
	        return this.animate(duration || 750, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.3, 1],
	            outputRange: [1, 1, 0]
	          }),
	          transform: [{
	            rotateY: this.state.animationValue.interpolate({
	              inputRange: [0, 0.3, 1],
	              outputRange: ['0 deg', '-20 deg', '90 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'lightSpeedIn',
	      value: function lightSpeedIn(duration) {
	        var width = (this._layout || _reactNative.Dimensions.get('window')).width;
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.6, 1],
	            outputRange: [0, 1, 1]
	          }),
	          transform: [{
	            translateX: this.state.animationValue.interpolate({
	              inputRange: [0, 0.6, 1],
	              outputRange: [width, 0, 0]
	            })
	          }, {
	            skewX: this.state.animationValue.interpolate({
	              inputRange: [0, 0.6, 0.8, 1],
	              outputRange: ['-30 deg', '20 deg', '-5 deg', '0 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'lightSpeedOut',
	      value: function lightSpeedOut(duration) {
	        var width = (this._layout || _reactNative.Dimensions.get('window')).width;
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 1],
	            outputRange: [1, 0]
	          }),
	          transform: [{
	            translateX: this.state.animationValue.interpolate({
	              inputRange: [0, 1],
	              outputRange: [0, width]
	            })
	          }, {
	            skewX: this.state.animationValue.interpolate({
	              inputRange: [0, 1],
	              outputRange: ['0 deg', '30 deg']
	            })
	          }]
	        });
	      }
	    }, {
	      key: '_fade',
	      value: function _fade(duration, direction, originOrDestination, isBig) {
	        var style = {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 1],
	            outputRange: direction === 'in' ? [0, 1] : [1, 0]
	          })
	        };
	        if (originOrDestination) {
	          style.transform = createKeyedArray(this._getSlideTransformation(direction, originOrDestination, isBig));
	        }
	        return this.animate(duration, style);
	      }
	    }, {
	      key: 'fadeIn',
	      value: function fadeIn(duration) {
	        return this._fade(duration, 'in');
	      }
	    }, {
	      key: 'fadeInDown',
	      value: function fadeInDown(duration) {
	        return this._fade(duration, 'in', 'down');
	      }
	    }, {
	      key: 'fadeInUp',
	      value: function fadeInUp(duration) {
	        return this._fade(duration, 'in', 'up');
	      }
	    }, {
	      key: 'fadeInLeft',
	      value: function fadeInLeft(duration) {
	        return this._fade(duration, 'in', 'left');
	      }
	    }, {
	      key: 'fadeInRight',
	      value: function fadeInRight(duration) {
	        return this._fade(duration, 'in', 'right');
	      }
	    }, {
	      key: 'fadeOut',
	      value: function fadeOut(duration) {
	        return this._fade(duration, 'out');
	      }
	    }, {
	      key: 'fadeOutDown',
	      value: function fadeOutDown(duration) {
	        return this._fade(duration, 'out', 'down');
	      }
	    }, {
	      key: 'fadeOutUp',
	      value: function fadeOutUp(duration) {
	        return this._fade(duration, 'out', 'up');
	      }
	    }, {
	      key: 'fadeOutLeft',
	      value: function fadeOutLeft(duration) {
	        return this._fade(duration, 'out', 'left');
	      }
	    }, {
	      key: 'fadeOutRight',
	      value: function fadeOutRight(duration) {
	        return this._fade(duration, 'out', 'right');
	      }
	    }, {
	      key: 'fadeInDownBig',
	      value: function fadeInDownBig(duration) {
	        return this._fade(duration, 'in', 'down', true);
	      }
	    }, {
	      key: 'fadeInUpBig',
	      value: function fadeInUpBig(duration) {
	        return this._fade(duration, 'in', 'up', true);
	      }
	    }, {
	      key: 'fadeInLeftBig',
	      value: function fadeInLeftBig(duration) {
	        return this._fade(duration, 'in', 'left', true);
	      }
	    }, {
	      key: 'fadeInRightBig',
	      value: function fadeInRightBig(duration) {
	        return this._fade(duration, 'in', 'right', true);
	      }
	    }, {
	      key: 'fadeOutDownBig',
	      value: function fadeOutDownBig(duration) {
	        return this._fade(duration, 'out', 'down', true);
	      }
	    }, {
	      key: 'fadeOutUpBig',
	      value: function fadeOutUpBig(duration) {
	        return this._fade(duration, 'out', 'up', true);
	      }
	    }, {
	      key: 'fadeOutLeftBig',
	      value: function fadeOutLeftBig(duration) {
	        return this._fade(duration, 'out', 'left', true);
	      }
	    }, {
	      key: 'fadeOutRightBig',
	      value: function fadeOutRightBig(duration) {
	        return this._fade(duration, 'out', 'right', true);
	      }
	    }, {
	      key: '_getSlideTransformation',
	      value: function _getSlideTransformation(direction, originOrDestination, isBig) {
	        var size = isBig || !this._layout ? _reactNative.Dimensions.get('window') : this._layout;
	        var animationValue = getAnimationValueForDirection(direction, originOrDestination, size.height, size.width);
	        var translateKey = originOrDestination === 'up' || originOrDestination === 'down' ? 'translateY' : 'translateX';
	
	        return _defineProperty({}, translateKey, this.state.animationValue.interpolate({
	          inputRange: [0, 1],
	          outputRange: direction === 'in' ? [animationValue, 0] : [0, animationValue]
	        }));
	      }
	    }, {
	      key: '_slide',
	      value: function _slide(duration, direction, originOrDestination) {
	        return this.animate(duration, {
	          transform: createKeyedArray(this._getSlideTransformation(direction, originOrDestination))
	        });
	      }
	    }, {
	      key: 'slideInDown',
	      value: function slideInDown(duration) {
	        return this._slide(duration, 'in', 'down');
	      }
	    }, {
	      key: 'slideInUp',
	      value: function slideInUp(duration) {
	        return this._slide(duration, 'in', 'up');
	      }
	    }, {
	      key: 'slideInLeft',
	      value: function slideInLeft(duration) {
	        return this._slide(duration, 'in', 'left');
	      }
	    }, {
	      key: 'slideInRight',
	      value: function slideInRight(duration) {
	        return this._slide(duration, 'in', 'right');
	      }
	    }, {
	      key: 'slideOutDown',
	      value: function slideOutDown(duration) {
	        return this._slide(duration, 'out', 'down');
	      }
	    }, {
	      key: 'slideOutUp',
	      value: function slideOutUp(duration) {
	        return this._slide(duration, 'out', 'up');
	      }
	    }, {
	      key: 'slideOutLeft',
	      value: function slideOutLeft(duration) {
	        return this._slide(duration, 'out', 'left');
	      }
	    }, {
	      key: 'slideOutRight',
	      value: function slideOutRight(duration) {
	        return this._slide(duration, 'out', 'right');
	      }
	    }, {
	      key: '_zoom',
	      value: function _zoom(duration, direction, originOrDestination) {
	        var style = {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: direction === 'in' ? [0, 0.6, 1] : [0, 0.4, 1],
	            outputRange: direction === 'in' ? [0, 1, 1] : [1, 1, 0]
	          })
	        };
	        if (originOrDestination) {
	          style.transform = createKeyedArray(this._getZoomTransformation(direction, originOrDestination));
	        }
	        return this.animate(duration, style);
	      }
	    }, {
	      key: '_getZoomTransformation',
	      value: function _getZoomTransformation(direction, originOrDestination) {
	        var windowSize = _reactNative.Dimensions.get('window');
	        var animationValue = getAnimationValueForDirection(direction, originOrDestination, windowSize.height, windowSize.width);
	        var translateKey = originOrDestination === 'up' || originOrDestination === 'down' ? 'translateY' : 'translateX';
	        var modifier = animationValue > 0 ? 1 : -1;
	
	        return _defineProperty({
	          scale: this.state.animationValue.interpolate({
	            inputRange: direction === 'in' ? [0, 0.6, 1] : [0, 0.4, 1],
	            outputRange: direction === 'in' ? [0.1, 0.457, 1] : [1, 0.457, 0.1]
	          })
	        }, translateKey, this.state.animationValue.interpolate({
	          inputRange: direction === 'in' ? [0, 0.6, 1] : [0, 0.4, 1],
	          outputRange: direction === 'in' ? [animationValue, -60 * modifier, 0] : [0, -60 * modifier, animationValue]
	        }));
	      }
	    }, {
	      key: 'zoomIn',
	      value: function zoomIn(duration) {
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.5, 1],
	            outputRange: [0, 1, 1]
	          }),
	          transform: [{
	            scale: this.state.animationValue.interpolate({
	              inputRange: [0, 1],
	              outputRange: [0.3, 1]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'zoomOut',
	      value: function zoomOut(duration) {
	        return this.animate(duration, {
	          opacity: this.state.animationValue.interpolate({
	            inputRange: [0, 0.5, 1],
	            outputRange: [1, 1, 0]
	          }),
	          transform: [{
	            scale: this.state.animationValue.interpolate({
	              inputRange: [0, 0.5, 1],
	              outputRange: [1, 0.3, 0]
	            })
	          }]
	        });
	      }
	    }, {
	      key: 'zoomInDown',
	      value: function zoomInDown(duration) {
	        return this._zoom(duration, 'in', 'down');
	      }
	    }, {
	      key: 'zoomInUp',
	      value: function zoomInUp(duration) {
	        return this._zoom(duration, 'in', 'up');
	      }
	    }, {
	      key: 'zoomInLeft',
	      value: function zoomInLeft(duration) {
	        return this._zoom(duration, 'in', 'left');
	      }
	    }, {
	      key: 'zoomInRight',
	      value: function zoomInRight(duration) {
	        return this._zoom(duration, 'in', 'right');
	      }
	    }, {
	      key: 'zoomOutDown',
	      value: function zoomOutDown(duration) {
	        return this._zoom(duration, 'out', 'down');
	      }
	    }, {
	      key: 'zoomOutUp',
	      value: function zoomOutUp(duration) {
	        return this._zoom(duration, 'out', 'up');
	      }
	    }, {
	      key: 'zoomOutLeft',
	      value: function zoomOutLeft(duration) {
	        return this._zoom(duration, 'out', 'left');
	      }
	    }, {
	      key: 'zoomOutRight',
	      value: function zoomOutRight(duration) {
	        return this._zoom(duration, 'out', 'right');
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _this10 = this;
	
	        var _props4 = this.props,
	            style = _props4.style,
	            children = _props4.children,
	            onLayout = _props4.onLayout,
	            animation = _props4.animation,
	            duration = _props4.duration,
	            delay = _props4.delay,
	            transition = _props4.transition,
	            props = _objectWithoutProperties(_props4, ['style', 'children', 'onLayout', 'animation', 'duration', 'delay', 'transition']);
	
	        if (animation && transition) {
	          throw new Error('You cannot combine animation and transition props');
	        }
	        var scheduledAnimation = this.state.scheduledAnimation;
	
	        var hideStyle = scheduledAnimation && scheduledAnimation.indexOf('In') !== -1 ? { opacity: 0 } : false;
	
	        return _react3.default.createElement(
	          Animatable,
	          _extends({}, props, {
	            ref: function ref(element) {
	              return _this10._root = element;
	            },
	            onLayout: function onLayout(event) {
	              return _this10._handleLayout(event);
	            },
	            style: [style, this.state.animationStyle, wrapStyleTransforms(this.state.transitionStyle), hideStyle]
	          }),
	          children
	        );
	      }
	    }]);
	
	    return AnimatableComponent;
	  }(_react2.Component), _class.propTypes = {
	    animation: _react2.PropTypes.string,
	    duration: _react2.PropTypes.number,
	    direction: _react2.PropTypes.oneOf(['normal', 'reverse', 'alternate', 'alternate-reverse']),
	    delay: _react2.PropTypes.number,
	    easing: _react2.PropTypes.oneOf(Object.keys(EASING_FUNCTIONS)),
	    iterationCount: function iterationCount(props, propName, componentName) {
	      var val = props[propName];
	      if (val !== 'infinite' && !(typeof val === 'number' && val >= 1)) {
	        return new Error('iterationCount must be a positive number or "infinite"');
	      }
	    },
	
	    onAnimationBegin: _react2.PropTypes.func,
	    onAnimationEnd: _react2.PropTypes.func,
	    transition: _react2.PropTypes.oneOfType([_react2.PropTypes.string, _react2.PropTypes.arrayOf(_react2.PropTypes.string)])
	  }, _class.defaultProps = {
	    iterationCount: 1,
	    onAnimationBegin: function onAnimationBegin() {},
	    onAnimationEnd: function onAnimationEnd() {}
	  }, _temp));
	}
	
	var View = exports.View = createAnimatableComponent(_reactNative2.default.View);
	var Text = exports.Text = createAnimatableComponent(_reactNative2.default.Text);
	var Image = exports.Image = createAnimatableComponent(_reactNative2.default.Image);

/***/ },
/* 2114 */,
/* 2115 */,
/* 2116 */,
/* 2117 */,
/* 2118 */,
/* 2119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-file-input/lib/index.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var React = __webpack_require__(301);
	
	var FileInput = _wrapComponent('_component')(React.createClass({
	  displayName: 'FileInput',
	
	  getInitialState: function getInitialState() {
	    return {
	      value: '',
	      styles: {
	        parent: {
	          position: 'relative'
	        },
	        file: {
	          position: 'absolute',
	          top: 0,
	          left: 0,
	          opacity: 0,
	          width: '100%',
	          zIndex: 1
	        },
	        text: {
	          position: 'relative',
	          zIndex: -1
	        }
	      }
	    };
	  },
	
	  handleChange: function handleChange(e) {
	    this.setState({
	      value: e.target.value.split(/(\\|\/)/g).pop()
	    });
	    if (this.props.onChange) this.props.onChange(e);
	  },
	
	  render: function render() {
	    return React.DOM.div({
	      style: this.state.styles.parent
	    },
	
	    // Actual file input
	    React.DOM.input({
	      type: 'file',
	      name: this.props.name,
	      className: this.props.className,
	      onChange: this.handleChange,
	      disabled: this.props.disabled,
	      accept: this.props.accept,
	      style: this.state.styles.file
	    }),
	
	    // Emulated file input
	    React.DOM.input({
	      type: 'text',
	      tabIndex: -1,
	      name: this.props.name + '_filename',
	      value: this.state.value,
	      className: this.props.className,
	      onChange: function onChange() {},
	      placeholder: this.props.placeholder,
	      disabled: this.props.disabled,
	      style: this.state.styles.text
	    }));
	  }
	}));
	
	module.exports = FileInput;

/***/ },
/* 2120 */,
/* 2121 */,
/* 2122 */,
/* 2123 */,
/* 2124 */,
/* 2125 */,
/* 2126 */,
/* 2127 */,
/* 2128 */,
/* 2129 */,
/* 2130 */,
/* 2131 */,
/* 2132 */,
/* 2133 */,
/* 2134 */,
/* 2135 */,
/* 2136 */,
/* 2137 */,
/* 2138 */,
/* 2139 */,
/* 2140 */,
/* 2141 */,
/* 2142 */,
/* 2143 */,
/* 2144 */,
/* 2145 */,
/* 2146 */,
/* 2147 */,
/* 2148 */,
/* 2149 */,
/* 2150 */,
/* 2151 */,
/* 2152 */,
/* 2153 */,
/* 2154 */,
/* 2155 */,
/* 2156 */,
/* 2157 */,
/* 2158 */,
/* 2159 */,
/* 2160 */,
/* 2161 */,
/* 2162 */,
/* 2163 */,
/* 2164 */,
/* 2165 */,
/* 2166 */,
/* 2167 */,
/* 2168 */,
/* 2169 */,
/* 2170 */,
/* 2171 */,
/* 2172 */,
/* 2173 */,
/* 2174 */,
/* 2175 */,
/* 2176 */,
/* 2177 */,
/* 2178 */,
/* 2179 */,
/* 2180 */,
/* 2181 */,
/* 2182 */,
/* 2183 */,
/* 2184 */,
/* 2185 */,
/* 2186 */,
/* 2187 */,
/* 2188 */,
/* 2189 */,
/* 2190 */,
/* 2191 */,
/* 2192 */,
/* 2193 */,
/* 2194 */,
/* 2195 */,
/* 2196 */,
/* 2197 */,
/* 2198 */,
/* 2199 */,
/* 2200 */,
/* 2201 */,
/* 2202 */,
/* 2203 */,
/* 2204 */,
/* 2205 */,
/* 2206 */,
/* 2207 */,
/* 2208 */,
/* 2209 */,
/* 2210 */,
/* 2211 */,
/* 2212 */,
/* 2213 */,
/* 2214 */,
/* 2215 */,
/* 2216 */,
/* 2217 */,
/* 2218 */,
/* 2219 */,
/* 2220 */,
/* 2221 */,
/* 2222 */,
/* 2223 */,
/* 2224 */,
/* 2225 */,
/* 2226 */,
/* 2227 */,
/* 2228 */,
/* 2229 */,
/* 2230 */,
/* 2231 */,
/* 2232 */,
/* 2233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};
	
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _moment = __webpack_require__(2126);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _debounce = __webpack_require__(2235);
	
	var _debounce2 = _interopRequireDefault(_debounce);
	
	var _range = __webpack_require__(2238);
	
	var _range2 = _interopRequireDefault(_range);
	
	var _utils = __webpack_require__(2243);
	
	var _locale = __webpack_require__(2247);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _theme = __webpack_require__(2248);
	
	var _theme2 = _interopRequireDefault(_theme);
	
	var _Today = __webpack_require__(2249);
	
	var _Today2 = _interopRequireDefault(_Today);
	
	var _Header = __webpack_require__(2250);
	
	var _Header2 = _interopRequireDefault(_Header);
	
	var _List = __webpack_require__(2260);
	
	var _List2 = _interopRequireDefault(_List);
	
	var _Weekdays = __webpack_require__(2312);
	
	var _Weekdays2 = _interopRequireDefault(_Weekdays);
	
	var _Years = __webpack_require__(2313);
	
	var _Years2 = _interopRequireDefault(_Years);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}
	
	function _objectWithoutProperties(obj, keys) {
		var target = {};for (var i in obj) {
			if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
		}return target;
	}
	
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}
	
	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var containerStyle = {
		'root': 'Cal__Container__root',
		'landscape': 'Cal__Container__landscape',
		'wrapper': 'Cal__Container__wrapper',
		'listWrapper': 'Cal__Container__listWrapper'
	};
	var dayStyle = {
		'root': 'Cal__Day__root',
		'enabled': 'Cal__Day__enabled',
		'highlighted': 'Cal__Day__highlighted',
		'today': 'Cal__Day__today',
		'disabled': 'Cal__Day__disabled',
		'selected': 'Cal__Day__selected',
		'month': 'Cal__Day__month',
		'year': 'Cal__Day__year',
		'selection': 'Cal__Day__selection',
		'day': 'Cal__Day__day'
	};
	var style = {
		container: containerStyle,
		day: dayStyle
	};
	
	var InfiniteCalendar = function (_Component) {
		_inherits(InfiniteCalendar, _Component);
	
		function InfiniteCalendar(props) {
			_classCallCheck(this, InfiniteCalendar);
	
			// Initialize
	
			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InfiniteCalendar).call(this));
	
			_this.onDaySelect = function (selectedDate, e) {
				var shouldHeaderAnimate = arguments.length <= 2 || arguments[2] === undefined ? _this.props.shouldHeaderAnimate : arguments[2];
				var _this$props = _this.props;
				var afterSelect = _this$props.afterSelect;
				var beforeSelect = _this$props.beforeSelect;
				var onSelect = _this$props.onSelect;
	
				if (!beforeSelect || typeof beforeSelect == 'function' && beforeSelect(selectedDate)) {
					if (typeof onSelect == 'function') {
						onSelect(selectedDate, e);
					}
	
					_this.setState({
						selectedDate: selectedDate,
						shouldHeaderAnimate: shouldHeaderAnimate,
						highlightedDate: selectedDate.clone()
					}, function () {
						_this.clearHighlight();
						if (typeof afterSelect == 'function') {
							afterSelect(selectedDate);
						}
					});
				}
			};
	
			_this.getCurrentOffset = function () {
				return _this.scrollTop;
			};
	
			_this.getDateOffset = function (date) {
				return _this.list && _this.list.getDateOffset(date);
			};
	
			_this.scrollTo = function (offset) {
				return _this.list && _this.list.scrollTo(offset);
			};
	
			_this.scrollToDate = function () {
				var date = arguments.length <= 0 || arguments[0] === undefined ? (0, _moment2.default)() : arguments[0];
				var offset = arguments[1];
	
				return _this.list && _this.list.scrollToDate(date, offset);
			};
	
			_this.getScrollSpeed = (0, _utils.getScrollSpeed)();
	
			_this.onScroll = function (_ref) {
				var scrollTop = _ref.scrollTop;
				var _this$props2 = _this.props;
				var onScroll = _this$props2.onScroll;
				var showOverlay = _this$props2.showOverlay;
				var showTodayHelper = _this$props2.showTodayHelper;
				var isScrolling = _this.state.isScrolling;
	
				var scrollSpeed = _this.scrollSpeed = Math.abs(_this.getScrollSpeed(scrollTop));
				_this.scrollTop = scrollTop;
	
				// We only want to display the months overlay if the user is rapidly scrolling
				if (showOverlay && scrollSpeed >= 50 && !isScrolling) {
					_this.setState({
						isScrolling: true
					});
				}
	
				if (showTodayHelper) {
					_this.updateTodayHelperPosition(scrollSpeed);
				}
				if (typeof onScroll == 'function') {
					onScroll(scrollTop);
				}
				_this.onScrollEnd();
			};
	
			_this.onScrollEnd = (0, _debounce2.default)(function () {
				var _this$props3 = _this.props;
				var onScrollEnd = _this$props3.onScrollEnd;
				var showTodayHelper = _this$props3.showTodayHelper;
				var isScrolling = _this.state.isScrolling;
	
				if (isScrolling) _this.setState({ isScrolling: false });
				if (showTodayHelper) _this.updateTodayHelperPosition(0);
				if (typeof onScrollEnd == 'function') onScrollEnd(_this.scrollTop);
			}, 150);
	
			_this.updateTodayHelperPosition = function (scrollSpeed) {
				var date = _this.today.date;
				if (!_this.todayOffset) _this.todayOffset = _this.getDateOffset(date); //scrollTop offset of the month "today" is in
	
				var scrollTop = _this.scrollTop;
				var showToday = _this.state.showToday;
				var _this$props4 = _this.props;
				var height = _this$props4.height;
				var rowHeight = _this$props4.rowHeight;
				var todayHelperRowOffset = _this$props4.todayHelperRowOffset;
	
				var newState = void 0;
				var dayOffset = Math.ceil((date.date() - 7 + (0, _moment2.default)(date).startOf("month").day()) / 7) * rowHeight; //offset of "today" within its month
	
				if (scrollTop >= _this.todayOffset + dayOffset + rowHeight * (todayHelperRowOffset + 1)) {
					if (showToday !== 1) newState = 1; //today is above the fold
				} else if (scrollTop + height <= _this.todayOffset + dayOffset + rowHeight - rowHeight * (todayHelperRowOffset + 1)) {
					if (showToday !== -1) newState = -1; //today is below the fold
				} else if (showToday && scrollSpeed <= 1) {
					newState = false;
				}
	
				if (scrollTop == 0) {
					newState = false;
				}
	
				if (newState != null) {
					_this.setState({ showToday: newState });
				}
			};
	
			_this.handleKeyDown = function (e) {
				var _this$props5 = _this.props;
				var maxDate = _this$props5.maxDate;
				var minDate = _this$props5.minDate;
				var onKeyDown = _this$props5.onKeyDown;
				var _this$state = _this.state;
				var display = _this$state.display;
				var selectedDate = _this$state.selectedDate;
				var highlightedDate = _this$state.highlightedDate;
				var showToday = _this$state.showToday;
	
				var delta = 0;
	
				if (typeof onKeyDown == 'function') {
					onKeyDown(e);
				}
				if ([_utils.keyCodes.left, _utils.keyCodes.up, _utils.keyCodes.right, _utils.keyCodes.down].indexOf(e.keyCode) > -1 && typeof e.preventDefault == 'function') {
					e.preventDefault();
				}
	
				if (!selectedDate) {
					selectedDate = (0, _moment2.default)();
				}
	
				if (display == 'days') {
					if (!highlightedDate) {
						highlightedDate = selectedDate.clone();
						_this.setState({ highlightedDate: highlightedDate });
					}
	
					switch (e.keyCode) {
						case _utils.keyCodes.enter:
							_this.onDaySelect((0, _moment2.default)(highlightedDate), e);
							return;
						case _utils.keyCodes.left:
							delta = -1;
							break;
						case _utils.keyCodes.right:
							delta = +1;
							break;
						case _utils.keyCodes.down:
							delta = +7;
							break;
						case _utils.keyCodes.up:
							delta = -7;
							break;
					}
	
					if (delta) {
						var rowHeight = _this.props.rowHeight;
	
						var newHighlightedDate = (0, _moment2.default)(highlightedDate).add(delta, 'days');
	
						// Make sure the new highlighted date isn't before min / max
						if (newHighlightedDate.isBefore(minDate)) {
							newHighlightedDate = (0, _moment2.default)(minDate);
						} else if (newHighlightedDate.isAfter(maxDate)) {
							newHighlightedDate = (0, _moment2.default)(maxDate);
						}
	
						// Update the highlight indicator
						_this.clearHighlight();
	
						// Scroll the view
						if (!_this.currentOffset) _this.currentOffset = _this.getCurrentOffset();
						var currentOffset = _this.currentOffset;
						var monthOffset = _this.getDateOffset(newHighlightedDate);
						var navOffset = showToday ? 36 : 0;
	
						var highlightedEl = _this.highlightedEl = _this.node.querySelector('[data-date=\'' + newHighlightedDate.format('YYYYMMDD') + '\']');
	
						// Edge-case: if the user tries to use the keyboard when the new highlighted date isn't rendered because it's too far off-screen
						// We need to scroll to the month of the new highlighted date so it renders
						if (!highlightedEl) {
							_this.scrollTo(monthOffset - navOffset);
							return;
						}
	
						highlightedEl.classList.add(style.day.highlighted);
	
						var dateOffset = highlightedEl.offsetTop - rowHeight;
						var newOffset = monthOffset + dateOffset;
	
						if (currentOffset !== newOffset) {
							_this.currentOffset = newOffset;
							_this.scrollTo(newOffset - navOffset);
						}
	
						// Update the reference to the currently highlighted date
						_this.setState({
							highlightedDate: newHighlightedDate
						});
					}
				} else if (display == 'years' && _this.refs.years) {
					_this.refs.years.handleKeyDown(e);
				}
			};
	
			_this.setDisplay = function (display) {
				_this.setState({ display: display });
			};
	
			_this.updateLocale(props.locale);
			_this.updateYears(props);
			_this.state = {
				selectedDate: _this.parseSelectedDate(props.selectedDate),
				display: props.display,
				shouldHeaderAnimate: props.shouldHeaderAnimate
			};
			return _this;
		}
	
		_createClass(InfiniteCalendar, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var _props = this.props;
				var autoFocus = _props.autoFocus;
				var keyboardSupport = _props.keyboardSupport;
	
				this.node = this.refs.node;
				this.list = this.refs.List;
	
				if (keyboardSupport && autoFocus) {
					this.node.focus();
				}
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(next) {
				var _props2 = this.props;
				var min = _props2.min;
				var minDate = _props2.minDate;
				var max = _props2.max;
				var maxDate = _props2.maxDate;
				var locale = _props2.locale;
				var selectedDate = _props2.selectedDate;
				var display = this.state.display;
	
				if (next.locale !== locale) {
					this.updateLocale(next.locale);
				}
				if (next.min !== min || next.minDate !== minDate || next.max !== max || next.maxDate !== maxDate) {
					this.updateYears(next);
				}
				if (next.selectedDate !== selectedDate) {
					var parsed = this.parseSelectedDate(next.selectedDate);
					this.setState({
						selectedDate: parsed
					});
					if (parsed) this.scrollToDate(parsed, -this.props.rowHeight * 2);
				} else if (next.minDate !== minDate || next.maxDate !== maxDate) {
					// Need to make sure the currently selected date is not before the new minDate or after maxDate
					var _selectedDate = this.parseSelectedDate(this.state.selectedDate);
					if (!_selectedDate.isSame(this.state.selectedDate, 'day')) {
						this.setState({
							selectedDate: _selectedDate
						});
					}
				}
				if (next.display !== display) {
					this.setState({
						display: next.display
					});
				}
			}
		}, {
			key: 'parseSelectedDate',
			value: function parseSelectedDate(selectedDate) {
				if (selectedDate) {
					selectedDate = (0, _moment2.default)(selectedDate);
	
					// Selected Date should not be before min date or after max date
					if (selectedDate.isBefore(this._minDate)) {
						return this._minDate;
					} else if (selectedDate.isAfter(this._maxDate)) {
						return this._maxDate;
					}
				}
	
				return selectedDate;
			}
		}, {
			key: 'updateYears',
			value: function updateYears() {
				var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];
	
				var min = this._min = (0, _moment2.default)(props.min);
				var max = this._max = (0, _moment2.default)(props.max);
				this._minDate = (0, _moment2.default)(props.minDate);
				this._maxDate = (0, _moment2.default)(props.maxDate);
	
				this.years = (0, _range2.default)(min.year(), max.year() + 1).map(function (year) {
					return (0, _utils.getMonthsForYear)(year, min, max);
				});
				this.months = [].concat.apply([], this.years);
			}
		}, {
			key: 'updateLocale',
			value: function updateLocale(locale) {
				locale = this.getLocale(locale);
				_moment2.default.updateLocale(locale.name, locale);
				_moment2.default.locale(locale.name);
			}
		}, {
			key: 'getDisabledDates',
			value: function getDisabledDates(disabledDates) {
				return disabledDates && disabledDates.map(function (date) {
					return (0, _moment2.default)(date).format('YYYYMMDD');
				});
			}
		}, {
			key: 'getLocale',
			value: function getLocale() {
				var customLocale = arguments.length <= 0 || arguments[0] === undefined ? this.props.locale : arguments[0];
	
				return Object.assign({}, _locale2.default, customLocale);
			}
		}, {
			key: 'getTheme',
			value: function getTheme() {
				var customTheme = arguments.length <= 0 || arguments[0] === undefined ? this.props.theme : arguments[0];
	
				return Object.assign({}, _theme2.default, customTheme);
			}
		}, {
			key: 'clearHighlight',
			value: function clearHighlight() {
				if (this.highlightedEl) {
					this.highlightedEl.classList.remove(style.day.highlighted);
					this.highlightedEl = null;
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _props3 = this.props;
				var className = _props3.className;
				var disabledDays = _props3.disabledDays;
				var height = _props3.height;
				var hideYearsOnSelect = _props3.hideYearsOnSelect;
				var keyboardSupport = _props3.keyboardSupport;
				var layout = _props3.layout;
				var overscanMonthCount = _props3.overscanMonthCount;
				var min = _props3.min;
				var minDate = _props3.minDate;
				var max = _props3.max;
				var maxDate = _props3.maxDate;
				var showTodayHelper = _props3.showTodayHelper;
				var showHeader = _props3.showHeader;
				var tabIndex = _props3.tabIndex;
				var width = _props3.width;
	
				var other = _objectWithoutProperties(_props3, ['className', 'disabledDays', 'height', 'hideYearsOnSelect', 'keyboardSupport', 'layout', 'overscanMonthCount', 'min', 'minDate', 'max', 'maxDate', 'showTodayHelper', 'showHeader', 'tabIndex', 'width']);
	
				var disabledDates = this.getDisabledDates(this.props.disabledDates);
				var locale = this.getLocale();
				var theme = this.getTheme();
				var _state = this.state;
				var display = _state.display;
				var isScrolling = _state.isScrolling;
				var selectedDate = _state.selectedDate;
				var showToday = _state.showToday;
				var shouldHeaderAnimate = _state.shouldHeaderAnimate;
	
				var today = this.today = (0, _utils.parseDate)((0, _moment2.default)());
	
				// Selected date should not be disabled
				if (selectedDate && (disabledDates && disabledDates.indexOf(selectedDate.format('YYYYMMDD')) !== -1 || disabledDays && disabledDays.indexOf(selectedDate.day()) !== -1)) {
					selectedDate = null;
				}
	
				return _react2.default.createElement('div', { tabIndex: tabIndex, onKeyDown: keyboardSupport && this.handleKeyDown, className: (0, _classnames2.default)(className, style.container.root, _defineProperty({}, style.container.landscape, layout == 'landscape')), style: { color: theme.textColor.default, width: width }, 'aria-label': 'Calendar', ref: 'node' }, showHeader && _react2.default.createElement(_Header2.default, { selectedDate: selectedDate, shouldHeaderAnimate: shouldHeaderAnimate, layout: layout, theme: theme, locale: locale, scrollToDate: this.scrollToDate, setDisplay: this.setDisplay, display: display }), _react2.default.createElement('div', { className: style.container.wrapper }, _react2.default.createElement(_Weekdays2.default, { theme: theme }), _react2.default.createElement('div', { className: style.container.listWrapper }, showTodayHelper && _react2.default.createElement(_Today2.default, { scrollToDate: this.scrollToDate, show: showToday, today: today, theme: theme, locale: locale }), _react2.default.createElement(_List2.default, _extends({
					ref: 'List'
				}, other, {
					width: width,
					height: height,
					selectedDate: (0, _utils.parseDate)(selectedDate),
					disabledDates: disabledDates,
					disabledDays: disabledDays,
					months: this.months,
					onDaySelect: this.onDaySelect,
					onScroll: this.onScroll,
					isScrolling: isScrolling,
					today: today,
					min: (0, _utils.parseDate)(min),
					minDate: (0, _utils.parseDate)(minDate),
					maxDate: (0, _utils.parseDate)(maxDate),
					theme: theme,
					locale: locale,
					overscanMonthCount: overscanMonthCount
				}))), display == 'years' && _react2.default.createElement(_Years2.default, {
					ref: 'years',
					width: width,
					height: height,
					onDaySelect: this.onDaySelect,
					minDate: minDate,
					maxDate: maxDate,
					selectedDate: selectedDate,
					theme: theme,
					years: (0, _range2.default)((0, _moment2.default)(min).year(), (0, _moment2.default)(max).year() + 1),
					setDisplay: this.setDisplay,
					scrollToDate: this.scrollToDate,
					hideYearsOnSelect: hideYearsOnSelect
				})));
			}
		}]);
	
		return InfiniteCalendar;
	}(_react.Component);
	
	InfiniteCalendar.defaultProps = {
		width: 400,
		height: 500,
		rowHeight: 56,
		overscanMonthCount: 4,
		todayHelperRowOffset: 4,
		layout: 'portrait',
		display: 'days',
		selectedDate: new Date(),
		min: { year: 1980, month: 0, day: 0 },
		minDate: { year: 1980, month: 0, day: 0 },
		max: { year: 2050, month: 11, day: 31 },
		maxDate: { year: 2050, month: 11, day: 31 },
		keyboardSupport: true,
		autoFocus: true,
		shouldHeaderAnimate: true,
		showOverlay: true,
		showTodayHelper: true,
		showHeader: true,
		tabIndex: 1,
		locale: {},
		theme: {},
		hideYearsOnSelect: true
	};
	InfiniteCalendar.propTypes = {
		selectedDate: _utils.validDate,
		min: _utils.validDate,
		max: _utils.validDate,
		minDate: _utils.validDate,
		maxDate: _utils.validDate,
		locale: _react.PropTypes.object,
		theme: _react.PropTypes.object,
		width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
		height: _react.PropTypes.number,
		rowHeight: _react.PropTypes.number,
		className: _react.PropTypes.string,
		overscanMonthCount: _react.PropTypes.number,
		todayHelperRowOffset: _react.PropTypes.number,
		disabledDays: _react.PropTypes.arrayOf(_react.PropTypes.number),
		disabledDates: _react.PropTypes.arrayOf(_utils.validDate),
		beforeSelect: _react.PropTypes.func,
		onSelect: _react.PropTypes.func,
		afterSelect: _react.PropTypes.func,
		onScroll: _react.PropTypes.func,
		onScrollEnd: _react.PropTypes.func,
		keyboardSupport: _react.PropTypes.bool,
		autoFocus: _react.PropTypes.bool,
		onKeyDown: _react.PropTypes.func,
		tabIndex: _react.PropTypes.number,
		layout: _react.PropTypes.oneOf(['portrait', 'landscape']),
		display: _react.PropTypes.oneOf(['years', 'days']),
		hideYearsOnSelect: _react.PropTypes.bool,
		shouldHeaderAnimate: _react.PropTypes.bool,
		showOverlay: _react.PropTypes.bool,
		showTodayHelper: _react.PropTypes.bool,
		showHeader: _react.PropTypes.bool
	};
	exports.default = InfiniteCalendar;

/***/ },
/* 2234 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 2235 */,
/* 2236 */,
/* 2237 */,
/* 2238 */,
/* 2239 */,
/* 2240 */,
/* 2241 */,
/* 2242 */,
/* 2243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.scrollbarSize = exports.keyCodes = undefined;
	exports.getDaysInMonth = getDaysInMonth;
	exports.getMonthsForYear = getMonthsForYear;
	exports.getMonth = getMonth;
	exports.getWeeksInMonth = getWeeksInMonth;
	exports.getScrollSpeed = getScrollSpeed;
	exports.parseDate = parseDate;
	exports.validDate = validDate;
	exports.validParsedDate = validParsedDate;
	
	var _moment = __webpack_require__(2126);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	__webpack_require__(2244);
	
	var _scrollbarSize = __webpack_require__(2245);
	
	var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);
	
	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var keyCodes = exports.keyCodes = {
	    enter: 13,
	    left: 37,
	    up: 38,
	    right: 39,
	    down: 40,
	    shift: 16,
	    control: 17,
	    command: 91,
	    escape: 27
	};
	
	function getDaysInMonth(date) {
	    return (0, _moment2.default)(date).range('month').toArray('days');
	}
	
	function getMonthsForYear(year, min, max) {
	    var months = void 0;
	
	    if (min && min.year() == year) {
	        months = _moment2.default.range([min, max && max.year() == year ? max : (0, _moment2.default)(min).endOf('year')]);
	    } else if (max && max.year() == year) {
	        months = _moment2.default.range([min && min.year() == year ? min : (0, _moment2.default)(year, 'YYYY').startOf('year'), max]);
	    } else if (year) {
	        months = (0, _moment2.default)(year, 'YYYY').range('year');
	    } else {
	        months = (0, _moment2.default)().range('year');
	    }
	
	    return months.toArray('months');
	}
	
	function getMonth(monthDate) {
	    var rows = {};
	    var daysInMonth = monthDate.daysInMonth();
	    var year = monthDate.year();
	    var month = monthDate.month();
	
	    var week = void 0,
	        date = void 0,
	        lastWeekVal = void 0;
	    var weekIndex = -1;
	
	    for (var i = 0; i < daysInMonth; i++) {
	        date = (0, _moment2.default)(new Date(year, month, i + 1));
	        week = date.week();
	
	        if (week !== lastWeekVal) {
	            lastWeekVal = week;
	            weekIndex++;
	        }
	
	        if (!rows[weekIndex]) {
	            rows[weekIndex] = [];
	        }
	
	        rows[weekIndex].push({
	            date: date,
	            yyyymmdd: date.format('YYYYMMDD')
	        });
	    }
	
	    return {
	        date: monthDate,
	        rows: Object.keys(rows).map(function (row) {
	            return rows[row];
	        })
	    };
	}
	
	function getWeeksInMonth(date, locale) {
	    var first = (0, _moment2.default)(date).startOf('month');
	    var last = (0, _moment2.default)(date).endOf('month');
	    var firstWeek = first.locale(locale.name).week();
	    var lastWeek = last.locale(locale.name).week();
	
	    // For those tricky months...
	    //
	    // SCENARIO 1
	    // firstWeek = 48
	    // lastWeek = 1
	    //
	    // SCENARIO 2
	    // firstWeek = 48
	    // lastWeek = 5
	    if (firstWeek > lastWeek) {
	        if (firstWeek > 50) {
	            firstWeek = 0;
	        } else {
	            lastWeek = last.weeksInYear() + 1;
	        }
	    }
	
	    var rows = lastWeek - firstWeek;
	
	    // If the last week contains 7 days, we need to add an extra row
	    if (last.clone().subtract(6, 'day').locale(locale.name).day() == locale.week.dow) {
	        rows++;
	    }
	
	    return rows;
	}
	
	function getScrollSpeed(settings) {
	    settings = settings || {};
	
	    var lastPos,
	        newPos,
	        timer,
	        delta,
	        delay = settings.delay || 50; // in "ms" (higher means lower fidelity )
	
	    function clear() {
	        lastPos = null;
	        delta = 0;
	    }
	
	    clear();
	
	    return function (scrollY) {
	        newPos = scrollY;
	        if (lastPos != null) {
	            // && newPos < maxScroll
	            delta = newPos - lastPos;
	        }
	        lastPos = newPos;
	        clearTimeout(timer);
	        timer = setTimeout(clear, delay);
	        return delta;
	    };
	}
	
	function parseDate(date) {
	    if (date) {
	        if (!date._isAMomentObject) date = (0, _moment2.default)(date);
	
	        return {
	            date: date,
	            yyyymmdd: date.format('YYYYMMDD')
	        };
	    }
	}
	
	// Custom date prop validation
	function validDate(props, propName, componentName) {
	    if (props[propName] && !(0, _moment2.default)(props[propName]).isValid()) {
	        return new Error('Invalid prop `' + propName + '` supplied to ' + componentName + '. Should be a format supported by Moment.js, see http://momentjs.com/docs/.');
	    }
	}
	
	// Custom date prop validation
	function validParsedDate(props, propName, componentName) {
	    var prop = props[propName];
	
	    if (prop.date && (0, _moment2.default)(prop.date).isValid() && prop.yyyymmdd && prop.yyyymmdd.length == 8) {
	        // valid
	    } else {
	        return new Error('Invalid prop `' + propName + '` supplied to ' + componentName + '.');
	    }
	}
	
	var scrollbarSize = exports.scrollbarSize = (0, _scrollbarSize2.default)();

/***/ },
/* 2244 */
/***/ function(module, exports, __webpack_require__) {

	/*** IMPORTS FROM imports-loader ***/
	var define = false;
	
	(function (root, factory) {
	  if (typeof define === 'function' && define.amd) {
	    // AMD. Register as an anonymous module unless amdModuleId is set
	    define(["moment"], function (a0) {
	      return (root['DateRange'] = factory(a0));
	    });
	  } else if (true) {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory(__webpack_require__(2126));
	  } else {
	    root['DateRange'] = factory(moment);
	  }
	}(this, function (moment) {
	
	//-----------------------------------------------------------------------------
	// Contstants
	//-----------------------------------------------------------------------------
	
	
	
	var INTERVALS = {
	  year:   true,
	  month:  true,
	  week:   true,
	  day:    true,
	  hour:   true,
	  minute: true,
	  second: true
	};
	
	
	//-----------------------------------------------------------------------------
	// Date Ranges
	//-----------------------------------------------------------------------------
	
	/**
	 * DateRange class to store ranges and query dates.
	 *
	 * @constructor
	 * @param {(Moment|Date)} start Start of interval
	 * @param {(Moment|Date)} end End of interval
	 *//**
	 * DateRange class to store ranges and query dates.
	 *
	 * @constructor
	 * @param {!Array} range Array containing start and end dates.
	 *//**
	 * DateRange class to store ranges and query dates.
	 *
	 * @constructor
	 * @param {!String} range String formatted as an IS0 8601 time interval
	 */
	function DateRange(start, end) {
	  var parts;
	  var s = start;
	  var e = end;
	
	  if (arguments.length === 1 || end === undefined) {
	    if (typeof start === 'object' && start.length === 2) {
	      s = start[0];
	      e = start[1];
	    }
	    else if (typeof start === 'string') {
	      parts = start.split('/');
	      s = parts[0];
	      e = parts[1];
	    }
	  }
	
	  this.start = (s === null) ? moment(-8640000000000000) : moment(s);
	  this.end   = (e === null) ? moment(8640000000000000) : moment(e);
	}
	
	/**
	 * Constructor for prototype.
	 *
	 * @type {DateRange}
	 */
	DateRange.prototype.constructor = DateRange;
	
	/**
	 * Deep clone range.
	 *
	 * @return {!DateRange}
	 */
	DateRange.prototype.clone = function() {
	  return moment().range(this.start, this.end);
	};
	
	/**
	 * Determine if the current interval contains a given moment/date/range.
	 *
	 * @param {(Moment|Date|DateRange)} other Date to check
	 * @param {!boolean} exclusive True if the to value is exclusive
	 *
	 * @return {!boolean}
	 */
	DateRange.prototype.contains = function(other, exclusive) {
	  var start = this.start;
	  var end   = this.end;
	
	  if (other instanceof DateRange) {
	    return start <= other.start && (end > other.end || (end.isSame(other.end) && !exclusive));
	  }
	  else {
	    return start <= other && (end > other || (end.isSame(other) && !exclusive));
	  }
	};
	
	/**
	 * Determine if the current date range overlaps a given date range.
	 *
	 * @param {!DateRange} range Date range to check
	 *
	 * @return {!boolean}
	 */
	DateRange.prototype.overlaps = function(range) {
	  return this.intersect(range) !== null;
	};
	
	/**
	 * Determine the intersecting periods from one or more date ranges.
	 *
	 * @param {!DateRange} other A date range to intersect with this one
	 *
	 * @return {DateRange} Returns the intersecting date or `null` if the ranges do
	 *                     not intersect
	 */
	DateRange.prototype.intersect = function(other) {
	  var start = this.start;
	  var end   = this.end;
	
	  if ((start <= other.start) && (other.start < end) && (end < other.end)) {
	    return new DateRange(other.start, end);
	  }
	  else if ((other.start < start) && (start < other.end) && (other.end <= end)) {
	    return new DateRange(start, other.end);
	  }
	  else if ((other.start < start) && (start <= end) && (end < other.end)) {
	    return this;
	  }
	  else if ((start <= other.start) && (other.start <= other.end) && (other.end <= end)) {
	    return other;
	  }
	
	  return null;
	};
	
	/**
	 * Merge date ranges if they intersect.
	 *
	 * @param {!DateRange} other A date range to add to this one
	 *
	 * @return {DateRange} Returns the new `DateRange` or `null` if they do not
	 *                     overlap
	 */
	DateRange.prototype.add = function(other) {
	  if (this.overlaps(other)) {
	    return new DateRange(moment.min(this.start, other.start), moment.max(this.end, other.end));
	  }
	
	  return null;
	};
	
	/**
	 * Subtract one range from another.
	 *
	 * @param {!DateRange} other A date range to substract from this one
	 *
	 * @return {!Array<DateRange>}
	 */
	DateRange.prototype.subtract = function(other) {
	  var start = this.start;
	  var end   = this.end;
	
	  if (this.intersect(other) === null) {
	    return [this];
	  }
	  else if ((other.start <= start) && (start < end) && (end <= other.end)) {
	    return [];
	  }
	  else if ((other.start <= start) && (start < other.end) && (other.end < end)) {
	    return [new DateRange(other.end, end)];
	  }
	  else if ((start < other.start) && (other.start < end) && (end <= other.end)) {
	    return [new DateRange(start, other.start)];
	  }
	  else if ((start < other.start) && (other.start < other.end) && (other.end < end)) {
	    return [new DateRange(start, other.start), new DateRange(other.end, end)];
	  }
	  else if ((start < other.start) && (other.start < end) && (other.end < end)) {
	    return [new DateRange(start, other.start), new DateRange(other.start, end)];
	  }
	};
	
	/**
	 * Build a n array of dates.
	 *
	 * @param {(!DateRange|String)} range Date range to be used for iteration or
	 *                                    shorthand string (shorthands:
	 *                                    http://momentjs.com/docs/#/manipulating/add/)
	 * @param {!boolean} exclusive Indicate that the end of the range should not
	 *                             be included in the iter.
	 *
	 * @return {!Array}
	 */
	DateRange.prototype.toArray = function(by, exclusive) {
	  var acc = [];
	  this.by(by, function(unit) {
	    acc.push(unit);
	  }, exclusive);
	  return acc;
	};
	
	/**
	 * Iterate over the date range by a given date range, executing a function
	 * for each sub-range.
	 *
	 * @param {(!DateRange|String)} range Date range to be used for iteration or
	 *                                    shorthand string (shorthands:
	 *                                    http://momentjs.com/docs/#/manipulating/add/)
	 * @param {!DateRange~by} hollaback Callback
	 * @param {!boolean} exclusive Indicate that the end of the range should not
	 *                             be included in the iter.
	 *
	 * @return {DateRange} `this`
	 */
	DateRange.prototype.by = function(range, hollaback, exclusive) {
	  if (typeof range === 'string') {
	    _byString.call(this, range, hollaback, exclusive);
	  }
	  else {
	    _byRange.call(this, range, hollaback, exclusive);
	  }
	  return this;
	};
	
	
	/**
	 * Callback executed for each sub-range.
	 *
	 * @callback DateRange~by
	 *
	 * @param {!Moment} current Current moment object for iteration
	 */
	
	/**
	 * @private
	 */
	function _byString(interval, hollaback, exclusive) {
	  var current = moment(this.start);
	
	  while (this.contains(current, exclusive)) {
	    hollaback.call(this, current.clone());
	    current.add(1, interval);
	  }
	}
	
	/**
	 * @private
	 */
	function _byRange(interval, hollaback, exclusive) {
	  var div = this / interval;
	  var l = Math.floor(div);
	
	  if (l === Infinity) { return; }
	  if (l === div && exclusive) {
	    l--;
	  }
	
	  for (var i = 0; i <= l; i++) {
	    hollaback.call(this, moment(this.start.valueOf() + interval.valueOf() * i));
	  }
	}
	
	/**
	 * Date range formatted as an [ISO8601 Time
	 * Interval](http://en.wikipedia.org/wiki/ISO_8601#Time_intervals).
	 *
	 * @return {!String}
	 */
	DateRange.prototype.toString = function() {
	  return this.start.format() + '/' + this.end.format();
	};
	
	/**
	 * Date range in milliseconds. Allows basic coercion math of date ranges.
	 *
	 * @return {!number}
	 */
	DateRange.prototype.valueOf = function() {
	  return this.end - this.start;
	};
	
	/**
	 * Center date of the range.
	 *
	 * @return {!Moment}
	 */
	DateRange.prototype.center = function() {
	  var center = this.start + this.diff() / 2;
	  return moment(center);
	};
	
	/**
	 * Date range toDate
	 *
	 * @return {!Array<Date>}
	 */
	DateRange.prototype.toDate = function() {
	  return [this.start.toDate(), this.end.toDate()];
	};
	
	/**
	 * Determine if this date range is the same as another.
	 *
	 * @param {!DateRange} other Another date range to compare to
	 *
	 * @return {!boolean}
	 */
	DateRange.prototype.isSame = function(other) {
	  return this.start.isSame(other.start) && this.end.isSame(other.end);
	};
	
	/**
	 * The difference of the end vs start.
	 *
	 * @param {number} unit Unit of difference, if no unit is passed in
	 *                      milliseconds are returned. E.g.: `"days"`, `"months"`,
	 *                      etc...
	 *
	 * @return {!number}
	 */
	DateRange.prototype.diff = function(unit) {
	  return this.end.diff(this.start, unit);
	};
	
	
	//-----------------------------------------------------------------------------
	// Moment Extensions
	//-----------------------------------------------------------------------------
	
	/**
	 * Build a date range.
	 *
	 * @param {(Moment|Date)} start Start of range
	 * @param {(Moment|Date)} end End of range
	 *
	 * @this {Moment}
	 *
	 * @return {!DateRange}
	 */
	moment.range = function(start, end) {
	  if (start in INTERVALS) {
	    return new DateRange(moment(this).startOf(start), moment(this).endOf(start));
	  }
	  else {
	    return new DateRange(start, end);
	  }
	};
	
	/**
	 * Expose constructor
	 *
	 * @const
	 */
	moment.range.constructor = DateRange;
	
	/**
	 * @deprecated
	 */
	moment.fn.range = moment.range;
	
	/**
	 * Check if the current moment is within a given date range.
	 *
	 * @param {!DateRange} range Date range to check
	 *
	 * @this {Moment}
	 *
	 * @return {!boolean}
	 */
	moment.fn.within = function(range) {
	  return range.contains(this._d);
	};
	
	
	//-----------------------------------------------------------------------------
	// Export
	//-----------------------------------------------------------------------------
	
	
	
	return DateRange;
	
	}));
	


/***/ },
/* 2245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var canUseDOM = __webpack_require__(2246);
	
	var size;
	
	module.exports = function (recalc) {
	  if (!size || recalc) {
	    if (canUseDOM) {
	      var scrollDiv = document.createElement('div');
	
	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';
	
	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }
	
	  return size;
	};

/***/ },
/* 2246 */
/***/ function(module, exports) {

	'use strict';
	module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ },
/* 2247 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    name: 'en',
	    todayLabel: {
	        long: 'Today'
	    },
	    blank: 'Select a date...',
	    headerFormat: 'ddd, MMM Do',
	    week: {
	        dow: 0,
	        doy: 4
	    }
	};

/***/ },
/* 2248 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    textColor: {
	        default: '#333',
	        active: '#FFF'
	    },
	    selectionColor: '#559FFF',
	    todayColor: '#FFA726',
	    weekdayColor: '#559FFF',
	    headerColor: '#448AFF',
	    floatingNav: {
	        background: 'rgba(56, 87, 138, 0.94)',
	        color: '#FFF',
	        chevron: '#FFA726'
	    }
	};

/***/ },
/* 2249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _moment = __webpack_require__(2126);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}
	
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}
	
	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var style = {
		'root': 'Cal__Today__root',
		'show': 'Cal__Today__show',
		'chevron': 'Cal__Today__chevron',
		'chevronUp': 'Cal__Today__chevronUp',
		'chevronDown': 'Cal__Today__chevronDown'
	};
	
	var Today = function (_Component) {
		_inherits(Today, _Component);
	
		function Today() {
			var _Object$getPrototypeO;
	
			var _temp, _this, _ret;
	
			_classCallCheck(this, Today);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(Today)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.scrollToToday = function () {
				var scrollToDate = _this.props.scrollToDate;
	
				scrollToDate((0, _moment2.default)(), -40);
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		_createClass(Today, [{
			key: 'shouldComponentUpdate',
			value: function shouldComponentUpdate(nextProps) {
				var _props = this.props;
				var locale = _props.locale;
				var show = _props.show;
				var theme = _props.theme;
	
				return nextProps.locale !== locale || nextProps.show !== show || nextProps.theme !== theme;
			}
		}, {
			key: 'render',
			value: function render() {
				var _classNames;
	
				var _props2 = this.props;
				var locale = _props2.locale;
				var show = _props2.show;
				var theme = _props2.theme;
	
				return _react2.default.createElement('div', { className: (0, _classnames2.default)(style.root, (_classNames = {}, _defineProperty(_classNames, style.show, show), _defineProperty(_classNames, style.chevronUp, show === 1), _defineProperty(_classNames, style.chevronDown, show === -1), _classNames)), style: { color: theme.floatingNav.color, backgroundColor: theme.floatingNav.background }, onClick: this.scrollToToday, ref: 'node' }, _react2.default.createElement('div', { className: style.wrapper }, locale.todayLabel.long, _react2.default.createElement('img', { className: style.chevron, width: '14', src: 'data:image/svg+xml;utf8,<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve"><path fill="' + (theme.floatingNav.chevron || theme.floatingNav.color) + '" d="M256,298.3L256,298.3L256,298.3l174.2-167.2c4.3-4.2,11.4-4.1,15.8,0.2l30.6,29.9c4.4,4.3,4.5,11.3,0.2,15.5L264.1,380.9 c-2.2,2.2-5.2,3.2-8.1,3c-3,0.1-5.9-0.9-8.1-3L35.2,176.7c-4.3-4.2-4.2-11.2,0.2-15.5L66,131.3c4.4-4.3,11.5-4.4,15.8-0.2L256,298.3 z"/></svg>' })));
			}
		}]);
	
		return Today;
	}(_react.Component);
	
	Today.propTypes = {
		locale: _react.PropTypes.object,
		scrollToDate: _react.PropTypes.func,
		show: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.bool]),
		theme: _react.PropTypes.object
	};
	exports.default = Today;

/***/ },
/* 2250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _reactAddonsCssTransitionGroup = __webpack_require__(2253);
	
	var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}
	
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}
	
	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var style = {
		'root': 'Cal__Header__root',
		'blank': 'Cal__Header__blank',
		'wrapper': 'Cal__Header__wrapper',
		'landscape': 'Cal__Header__landscape',
		'dateWrapper': 'Cal__Header__dateWrapper',
		'day': 'Cal__Header__day',
		'active': 'Cal__Header__active',
		'year': 'Cal__Header__year',
		'date': 'Cal__Header__date'
	};
	var animation = {
		'enter': 'Cal__Animation__enter',
		'enterActive': 'Cal__Animation__enterActive',
		'leave': 'Cal__Animation__leave',
		'leaveActive': 'Cal__Animation__leaveActive'
	};
	
	var Header = function (_Component) {
		_inherits(Header, _Component);
	
		function Header() {
			_classCallCheck(this, Header);
	
			return _possibleConstructorReturn(this, Object.getPrototypeOf(Header).apply(this, arguments));
		}
	
		_createClass(Header, [{
			key: 'shouldComponentUpdate',
			value: function shouldComponentUpdate(nextProps) {
				return (0, _reactAddonsShallowCompare2.default)(this, nextProps);
			}
		}, {
			key: 'render',
			value: function render() {
				var _classNames;
	
				var _props = this.props;
				var display = _props.display;
				var layout = _props.layout;
				var locale = _props.locale;
				var scrollToDate = _props.scrollToDate;
				var selectedDate = _props.selectedDate;
				var setDisplay = _props.setDisplay;
				var shouldHeaderAnimate = _props.shouldHeaderAnimate;
				var theme = _props.theme;
	
				var values = selectedDate && [{
					item: 'year',
					value: selectedDate.year(),
					active: display === 'years',
					title: display === 'days' ? 'Change year' : null,
					handleClick: function handleClick(e) {
						e && e.stopPropagation();
						setDisplay('years');
					}
				}, {
					item: 'day',
					key: selectedDate.format('YYYYMMDD'),
					value: selectedDate.format(locale.headerFormat),
					active: display === 'days',
					title: display === 'days' ? 'Scroll to ' + selectedDate.format(locale.headerFormat) : null,
					handleClick: function handleClick(e) {
						e && e.stopPropagation();
	
						if (display !== 'days') {
							setDisplay('days');
						} else if (selectedDate) {
							scrollToDate(selectedDate, -40);
						}
					}
				}];
	
				return _react2.default.createElement('div', { className: (0, _classnames2.default)(style.root, (_classNames = {}, _defineProperty(_classNames, style.blank, !selectedDate), _defineProperty(_classNames, style.landscape, layout == 'landscape'), _classNames)), style: theme && { backgroundColor: theme.headerColor, color: theme.textColor.active } }, selectedDate ? _react2.default.createElement('div', { className: style.wrapper, 'aria-label': selectedDate.format(locale.headerFormat + ' YYYY') }, values.map(function (_ref) {
					var handleClick = _ref.handleClick;
					var item = _ref.item;
					var key = _ref.key;
					var value = _ref.value;
					var active = _ref.active;
					var title = _ref.title;
	
					return _react2.default.createElement('div', { key: item, className: (0, _classnames2.default)(style.dateWrapper, style[item], _defineProperty({}, style.active, active)), title: title }, _react2.default.createElement(_reactAddonsCssTransitionGroup2.default, { transitionName: animation, transitionEnterTimeout: 250, transitionLeaveTimeout: 250, transitionEnter: shouldHeaderAnimate, transitionLeave: shouldHeaderAnimate }, _react2.default.createElement('span', { key: item + '-' + (key || value), className: style.date, 'aria-hidden': true, onClick: handleClick }, value)));
				})) : _react2.default.createElement('div', { className: style.wrapper }, locale.blank));
			}
		}]);
	
		return Header;
	}(_react.Component);
	
	Header.propTypes = {
		layout: _react.PropTypes.string,
		locale: _react.PropTypes.object,
		onClick: _react.PropTypes.func,
		selectedDate: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.bool]),
		shouldHeaderAnimate: _react.PropTypes.bool,
		theme: _react.PropTypes.object,
		display: _react.PropTypes.string
	};
	exports.default = Header;

/***/ },
/* 2251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2252);

/***/ },
/* 2252 */,
/* 2253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2254);

/***/ },
/* 2254 */,
/* 2255 */,
/* 2256 */,
/* 2257 */,
/* 2258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(307);
	
	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */
	
	/* Slow implementation for browsers that don't natively support .matches() */
	function matchesSelector_SLOW(element, selector) {
	  var root = element;
	  while (root.parentNode) {
	    root = root.parentNode;
	  }
	
	  var all = root.querySelectorAll(selector);
	  return Array.prototype.indexOf.call(all, element) !== -1;
	}
	
	var CSSCore = {
	
	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function addClass(element, className) {
	    !!/\s/.test(className) ?  true ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;
	
	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function removeClass(element, className) {
	    !!/\s/.test(className) ?  true ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;
	
	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	        .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },
	
	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function conditionClass(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },
	
	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to check the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function hasClass(element, className) {
	    !!/\s/.test(className) ?  true ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : void 0;
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  },
	
	  /**
	   * Tests whether the element matches the selector specified
	   *
	   * @param {DOMNode|DOMWindow} element the element that we are querying
	   * @param {string} selector the CSS selector
	   * @return {boolean} true if the element matches the selector, false if not
	   */
	  matchesSelector: function matchesSelector(element, selector) {
	    var matchesImpl = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || function (s) {
	      return matchesSelector_SLOW(element, s);
	    };
	    return matchesImpl.call(element, selector);
	  }
	
	};
	
	module.exports = CSSCore;

/***/ },
/* 2259 */,
/* 2260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactVirtualized = __webpack_require__(2261);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _moment = __webpack_require__(2126);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _utils = __webpack_require__(2243);
	
	var _Month = __webpack_require__(2310);
	
	var _Month2 = _interopRequireDefault(_Month);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}
	
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}
	
	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var style = {
		'root': 'Cal__List__root',
		'scrolling': 'Cal__List__scrolling'
	};
	
	var List = function (_Component) {
		_inherits(List, _Component);
	
		function List() {
			var _Object$getPrototypeO;
	
			var _temp, _this, _ret;
	
			_classCallCheck(this, List);
	
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}
	
			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(List)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.cache = {}, _this.state = {}, _this.memoize = function (param) {
				if (!this.cache[param]) {
					var result = (0, _utils.getMonth)(param); //custom function
					this.cache[param] = result;
				}
				return this.cache[param];
			}, _this.monthHeights = [], _this.getMonthHeight = function (_ref) {
				var index = _ref.index;
	
				if (!_this.monthHeights[index]) {
					var _this$props = _this.props;
					var locale = _this$props.locale;
					var months = _this$props.months;
					var rowHeight = _this$props.rowHeight;
	
					var date = months[index];
					var weeks = (0, _utils.getWeeksInMonth)(date, locale);
					var height = weeks * rowHeight;
					_this.monthHeights[index] = height;
				}
	
				return _this.monthHeights[index];
			}, _this.getMonthIndex = function (date) {
				var min = _this.props.min.date;
				var index = date.diff(min, 'months');
	
				return index;
			}, _this.getDateOffset = function (date) {
				var _this$props2 = _this.props;
				var min = _this$props2.min;
				var rowHeight = _this$props2.rowHeight;
	
				var weeks = date.clone().startOf('month').diff(min.date.clone().startOf('month'), 'weeks');
	
				return weeks * rowHeight;
			}, _this.getCurrentOffset = function () {
				if (_this.scrollEl) {
					return _this.scrollEl.scrollTop;
				}
			}, _this.scrollToDate = function (date) {
				var offset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	
				var offsetTop = _this.getDateOffset(date);
				_this.scrollTo(offsetTop + offset);
			}, _this.scrollTo = function () {
				var scrollTop = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	
				if (_this.scrollEl) {
					_this.scrollEl.scrollTop = scrollTop;
				}
			}, _this.renderMonth = function (_ref2) {
				var index = _ref2.index;
				var isScrolling = _ref2.isScrolling;
				var rowStyle = _ref2.style;
				var _this$props3 = _this.props;
				var disabledDates = _this$props3.disabledDates;
				var disabledDays = _this$props3.disabledDays;
				var locale = _this$props3.locale;
				var months = _this$props3.months;
				var maxDate = _this$props3.maxDate;
				var minDate = _this$props3.minDate;
				var onDaySelect = _this$props3.onDaySelect;
				var rowHeight = _this$props3.rowHeight;
				var selectedDate = _this$props3.selectedDate;
				var showOverlay = _this$props3.showOverlay;
				var theme = _this$props3.theme;
				var today = _this$props3.today;
	
				var _this$memoize = _this.memoize(months[index]);
	
				var date = _this$memoize.date;
				var rows = _this$memoize.rows;
	
				return _react2.default.createElement(_Month2.default, {
					key: 'Month-' + index,
					selectedDate: selectedDate,
					displayDate: date,
					disabledDates: disabledDates,
					disabledDays: disabledDays,
					maxDate: maxDate,
					minDate: minDate,
					onDaySelect: onDaySelect,
					rows: rows,
					rowHeight: rowHeight,
					isScrolling: isScrolling,
					showOverlay: showOverlay,
					today: today,
					theme: theme,
					locale: locale,
					rowStyle: rowStyle
				});
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}
	
		_createClass(List, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var vs = this.refs.VirtualScroll;
				var grid = vs && vs.Grid;
	
				this.scrollEl = grid && grid._scrollingContainer;
			}
		}, {
			key: 'render',
			value: function render() {
				var _props = this.props;
				var height = _props.height;
				var isScrolling = _props.isScrolling;
				var onScroll = _props.onScroll;
				var overscanMonthCount = _props.overscanMonthCount;
				var months = _props.months;
				var rowHeight = _props.rowHeight;
				var selectedDate = _props.selectedDate;
				var today = _props.today;
				var width = _props.width;
	
				if (!this._initScrollTop) this._initScrollTop = this.getDateOffset(selectedDate && selectedDate.date || today.date);
				if (typeof width == 'string' && width.indexOf('%') !== -1) {
					width = window.innerWidth * parseInt(width.replace('%', ''), 10) / 100; // See https://github.com/bvaughn/react-virtualized/issues/229
				}
	
				return _react2.default.createElement(_reactVirtualized.List, {
					ref: 'VirtualScroll',
					width: width,
					height: height,
					rowCount: months.length,
					rowHeight: this.getMonthHeight,
					estimatedRowSize: rowHeight * 5,
					rowRenderer: this.renderMonth,
					onScroll: onScroll,
					scrollTop: this._initScrollTop,
					className: (0, _classnames2.default)(style.root, _defineProperty({}, style.scrolling, isScrolling)),
					style: { lineHeight: rowHeight + 'px' },
					overscanRowCount: overscanMonthCount
				});
			}
		}]);
	
		return List;
	}(_react.Component);
	
	List.propTypes = {
		width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
		height: _react.PropTypes.number,
		rowHeight: _react.PropTypes.number,
		selectedDate: _react.PropTypes.object,
		disabledDates: _react.PropTypes.arrayOf(_react.PropTypes.string),
		disabledDays: _react.PropTypes.arrayOf(_react.PropTypes.number),
		months: _react.PropTypes.arrayOf(_react.PropTypes.object),
		onDaySelect: _react.PropTypes.func,
		onScroll: _react.PropTypes.func,
		overscanMonthCount: _react.PropTypes.number,
		isScrolling: _react.PropTypes.bool,
		today: _utils.validParsedDate,
		min: _utils.validParsedDate,
		minDate: _utils.validParsedDate,
		maxDate: _utils.validParsedDate,
		showOverlay: _react.PropTypes.bool,
		theme: _react.PropTypes.object,
		locale: _react.PropTypes.object
	};
	exports.default = List;

/***/ },
/* 2261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ArrowKeyStepper = __webpack_require__(2262);
	
	Object.defineProperty(exports, 'ArrowKeyStepper', {
	  enumerable: true,
	  get: function get() {
	    return _ArrowKeyStepper.ArrowKeyStepper;
	  }
	});
	
	var _AutoSizer = __webpack_require__(2264);
	
	Object.defineProperty(exports, 'AutoSizer', {
	  enumerable: true,
	  get: function get() {
	    return _AutoSizer.AutoSizer;
	  }
	});
	
	var _CellMeasurer = __webpack_require__(2267);
	
	Object.defineProperty(exports, 'CellMeasurer', {
	  enumerable: true,
	  get: function get() {
	    return _CellMeasurer.CellMeasurer;
	  }
	});
	Object.defineProperty(exports, 'defaultCellMeasurerCellSizeCache', {
	  enumerable: true,
	  get: function get() {
	    return _CellMeasurer.defaultCellSizeCache;
	  }
	});
	Object.defineProperty(exports, 'uniformSizeCellMeasurerCellSizeCache', {
	  enumerable: true,
	  get: function get() {
	    return _CellMeasurer.defaultCellSizeCache;
	  }
	});
	Object.defineProperty(exports, 'idCellMeasurerCellSizeCache', {
	  enumerable: true,
	  get: function get() {
	    return _CellMeasurer.idCellSizeCache;
	  }
	});
	
	var _Collection = __webpack_require__(2271);
	
	Object.defineProperty(exports, 'Collection', {
	  enumerable: true,
	  get: function get() {
	    return _Collection.Collection;
	  }
	});
	
	var _ColumnSizer = __webpack_require__(2279);
	
	Object.defineProperty(exports, 'ColumnSizer', {
	  enumerable: true,
	  get: function get() {
	    return _ColumnSizer.ColumnSizer;
	  }
	});
	
	var _Table = __webpack_require__(2281);
	
	Object.defineProperty(exports, 'defaultTableCellDataGetter', {
	  enumerable: true,
	  get: function get() {
	    return _Table.defaultCellDataGetter;
	  }
	});
	Object.defineProperty(exports, 'defaultTableCellRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _Table.defaultCellRenderer;
	  }
	});
	Object.defineProperty(exports, 'defaultTableHeaderRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _Table.defaultHeaderRenderer;
	  }
	});
	Object.defineProperty(exports, 'defaultTableRowRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _Table.defaultRowRenderer;
	  }
	});
	Object.defineProperty(exports, 'Table', {
	  enumerable: true,
	  get: function get() {
	    return _Table.Table;
	  }
	});
	Object.defineProperty(exports, 'Column', {
	  enumerable: true,
	  get: function get() {
	    return _Table.Column;
	  }
	});
	Object.defineProperty(exports, 'SortDirection', {
	  enumerable: true,
	  get: function get() {
	    return _Table.SortDirection;
	  }
	});
	Object.defineProperty(exports, 'SortIndicator', {
	  enumerable: true,
	  get: function get() {
	    return _Table.SortIndicator;
	  }
	});
	
	var _Grid = __webpack_require__(2289);
	
	Object.defineProperty(exports, 'defaultCellRangeRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _Grid.defaultCellRangeRenderer;
	  }
	});
	Object.defineProperty(exports, 'Grid', {
	  enumerable: true,
	  get: function get() {
	    return _Grid.Grid;
	  }
	});
	
	var _InfiniteLoader = __webpack_require__(2298);
	
	Object.defineProperty(exports, 'InfiniteLoader', {
	  enumerable: true,
	  get: function get() {
	    return _InfiniteLoader.InfiniteLoader;
	  }
	});
	
	var _List = __webpack_require__(2300);
	
	Object.defineProperty(exports, 'List', {
	  enumerable: true,
	  get: function get() {
	    return _List.List;
	  }
	});
	
	var _MultiGrid = __webpack_require__(2302);
	
	Object.defineProperty(exports, 'MultiGrid', {
	  enumerable: true,
	  get: function get() {
	    return _MultiGrid.MultiGrid;
	  }
	});
	
	var _ScrollSync = __webpack_require__(2304);
	
	Object.defineProperty(exports, 'ScrollSync', {
	  enumerable: true,
	  get: function get() {
	    return _ScrollSync.ScrollSync;
	  }
	});
	
	var _WindowScroller = __webpack_require__(2306);
	
	Object.defineProperty(exports, 'WindowScroller', {
	  enumerable: true,
	  get: function get() {
	    return _WindowScroller.WindowScroller;
	  }
	});

/***/ },
/* 2262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ArrowKeyStepper = exports.default = undefined;
	
	var _ArrowKeyStepper2 = __webpack_require__(2263);
	
	var _ArrowKeyStepper3 = _interopRequireDefault(_ArrowKeyStepper2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _ArrowKeyStepper3.default;
	exports.ArrowKeyStepper = _ArrowKeyStepper3.default;

/***/ },
/* 2263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * This HOC decorates a virtualized component and responds to arrow-key events by scrolling one row or column at a time.
	 */
	var ArrowKeyStepper = function (_Component) {
	  _inherits(ArrowKeyStepper, _Component);
	
	  function ArrowKeyStepper(props, context) {
	    _classCallCheck(this, ArrowKeyStepper);
	
	    var _this = _possibleConstructorReturn(this, (ArrowKeyStepper.__proto__ || Object.getPrototypeOf(ArrowKeyStepper)).call(this, props, context));
	
	    _this.state = {
	      scrollToColumn: props.scrollToColumn,
	      scrollToRow: props.scrollToRow
	    };
	
	    _this._columnStartIndex = 0;
	    _this._columnStopIndex = 0;
	    _this._rowStartIndex = 0;
	    _this._rowStopIndex = 0;
	
	    _this._onKeyDown = _this._onKeyDown.bind(_this);
	    _this._onSectionRendered = _this._onSectionRendered.bind(_this);
	    return _this;
	  }
	
	  _createClass(ArrowKeyStepper, [{
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var scrollToColumn = nextProps.scrollToColumn;
	      var scrollToRow = nextProps.scrollToRow;
	
	      if (this.props.scrollToColumn !== scrollToColumn) {
	        this.setState({ scrollToColumn: scrollToColumn });
	      }
	
	      if (this.props.scrollToRow !== scrollToRow) {
	        this.setState({ scrollToRow: scrollToRow });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var className = _props.className;
	      var children = _props.children;
	      var _state = this.state;
	      var scrollToColumn = _state.scrollToColumn;
	      var scrollToRow = _state.scrollToRow;
	
	      return _react2.default.createElement('div', {
	        className: className,
	        onKeyDown: this._onKeyDown
	      }, children({
	        onSectionRendered: this._onSectionRendered,
	        scrollToColumn: scrollToColumn,
	        scrollToRow: scrollToRow
	      }));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_onKeyDown',
	    value: function _onKeyDown(event) {
	      var _props2 = this.props;
	      var columnCount = _props2.columnCount;
	      var disabled = _props2.disabled;
	      var mode = _props2.mode;
	      var rowCount = _props2.rowCount;
	
	      if (disabled) {
	        return;
	      }
	
	      var _state2 = this.state;
	      var scrollToColumnPrevious = _state2.scrollToColumn;
	      var scrollToRowPrevious = _state2.scrollToRow;
	      var _state3 = this.state;
	      var scrollToColumn = _state3.scrollToColumn;
	      var scrollToRow = _state3.scrollToRow;
	
	      // The above cases all prevent default event event behavior.
	      // This is to keep the grid from scrolling after the snap-to update.
	
	      switch (event.key) {
	        case 'ArrowDown':
	          scrollToRow = mode === 'cells' ? Math.min(scrollToRow + 1, rowCount - 1) : Math.min(this._rowStopIndex + 1, rowCount - 1);
	          break;
	        case 'ArrowLeft':
	          scrollToColumn = mode === 'cells' ? Math.max(scrollToColumn - 1, 0) : Math.max(this._columnStartIndex - 1, 0);
	          break;
	        case 'ArrowRight':
	          scrollToColumn = mode === 'cells' ? Math.min(scrollToColumn + 1, columnCount - 1) : Math.min(this._columnStopIndex + 1, columnCount - 1);
	          break;
	        case 'ArrowUp':
	          scrollToRow = mode === 'cells' ? Math.max(scrollToRow - 1, 0) : Math.max(this._rowStartIndex - 1, 0);
	          break;
	      }
	
	      if (scrollToColumn !== scrollToColumnPrevious || scrollToRow !== scrollToRowPrevious) {
	        event.preventDefault();
	
	        this.setState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
	      }
	    }
	  }, {
	    key: '_onSectionRendered',
	    value: function _onSectionRendered(_ref) {
	      var columnStartIndex = _ref.columnStartIndex;
	      var columnStopIndex = _ref.columnStopIndex;
	      var rowStartIndex = _ref.rowStartIndex;
	      var rowStopIndex = _ref.rowStopIndex;
	
	      this._columnStartIndex = columnStartIndex;
	      this._columnStopIndex = columnStopIndex;
	      this._rowStartIndex = rowStartIndex;
	      this._rowStopIndex = rowStopIndex;
	    }
	  }]);
	
	  return ArrowKeyStepper;
	}(_react.Component);
	
	ArrowKeyStepper.defaultProps = {
	  disabled: false,
	  mode: 'edges',
	  scrollToColumn: 0,
	  scrollToRow: 0
	};
	exports.default = ArrowKeyStepper;
	 true ? ArrowKeyStepper.propTypes = {
	  children: _react.PropTypes.func.isRequired,
	  className: _react.PropTypes.string,
	  columnCount: _react.PropTypes.number.isRequired,
	  disabled: _react.PropTypes.bool.isRequired,
	  mode: _react.PropTypes.oneOf(['cells', 'edges']),
	  rowCount: _react.PropTypes.number.isRequired,
	  scrollToColumn: _react.PropTypes.number.isRequired,
	  scrollToRow: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.AutoSizer = exports.default = undefined;
	
	var _AutoSizer2 = __webpack_require__(2265);
	
	var _AutoSizer3 = _interopRequireDefault(_AutoSizer2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _AutoSizer3.default;
	exports.AutoSizer = _AutoSizer3.default;

/***/ },
/* 2265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _detectElementResize = __webpack_require__(2266);
	
	var _detectElementResize2 = _interopRequireDefault(_detectElementResize);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Decorator component that automatically adjusts the width and height of a single child.
	 * Child component should not be declared as a child but should rather be specified by a `ChildComponent` property.
	 * All other properties will be passed through to the child component.
	 */
	var AutoSizer = function (_Component) {
	  _inherits(AutoSizer, _Component);
	
	  function AutoSizer(props) {
	    _classCallCheck(this, AutoSizer);
	
	    var _this = _possibleConstructorReturn(this, (AutoSizer.__proto__ || Object.getPrototypeOf(AutoSizer)).call(this, props));
	
	    _this.state = {
	      height: 0,
	      width: 0
	    };
	
	    _this._onResize = _this._onResize.bind(_this);
	    _this._setRef = _this._setRef.bind(_this);
	    return _this;
	  }
	
	  _createClass(AutoSizer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      // Delay access of parentNode until mount.
	      // This handles edge-cases where the component has already been unmounted before its ref has been set,
	      // As well as libraries like react-lite which have a slightly different lifecycle.
	      this._parentNode = this._autoSizer.parentNode;
	
	      // Defer requiring resize handler in order to support server-side rendering.
	      // See issue #41
	      this._detectElementResize = (0, _detectElementResize2.default)();
	      this._detectElementResize.addResizeListener(this._parentNode, this._onResize);
	
	      this._onResize();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._detectElementResize) {
	        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var children = _props.children;
	      var disableHeight = _props.disableHeight;
	      var disableWidth = _props.disableWidth;
	      var _state = this.state;
	      var height = _state.height;
	      var width = _state.width;
	
	      // Outer div should not force width/height since that may prevent containers from shrinking.
	      // Inner component should overflow and use calculated width/height.
	      // See issue #68 for more information.
	
	      var outerStyle = { overflow: 'visible' };
	
	      if (!disableHeight) {
	        outerStyle.height = 0;
	      }
	
	      if (!disableWidth) {
	        outerStyle.width = 0;
	      }
	
	      return _react2.default.createElement('div', {
	        ref: this._setRef,
	        style: outerStyle
	      }, children({ height: height, width: width }));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      var onResize = this.props.onResize;
	
	      // Gaurd against AutoSizer component being removed from the DOM immediately after being added.
	      // This can result in invalid style values which can result in NaN values if we don't handle them.
	      // See issue #150 for more context.
	
	      var boundingRect = this._parentNode.getBoundingClientRect();
	      var height = boundingRect.height || 0;
	      var width = boundingRect.width || 0;
	
	      var style = window.getComputedStyle(this._parentNode) || {};
	      var paddingLeft = parseInt(style.paddingLeft, 10) || 0;
	      var paddingRight = parseInt(style.paddingRight, 10) || 0;
	      var paddingTop = parseInt(style.paddingTop, 10) || 0;
	      var paddingBottom = parseInt(style.paddingBottom, 10) || 0;
	
	      this.setState({
	        height: height - paddingTop - paddingBottom,
	        width: width - paddingLeft - paddingRight
	      });
	
	      onResize({ height: height, width: width });
	    }
	  }, {
	    key: '_setRef',
	    value: function _setRef(autoSizer) {
	      this._autoSizer = autoSizer;
	    }
	  }]);
	
	  return AutoSizer;
	}(_react.Component);
	
	AutoSizer.defaultProps = {
	  onResize: function onResize() {}
	};
	exports.default = AutoSizer;
	 true ? AutoSizer.propTypes = {
	  /**
	  * Function responsible for rendering children.
	  * This function should implement the following signature:
	  * ({ height, width }) => PropTypes.element
	  */
	  children: _react.PropTypes.func.isRequired,
	
	  /** Disable dynamic :height property */
	  disableHeight: _react.PropTypes.bool,
	
	  /** Disable dynamic :width property */
	  disableWidth: _react.PropTypes.bool,
	
	  /** Callback to be invoked on-resize: ({ height, width }) */
	  onResize: _react.PropTypes.func.isRequired
	} : void 0;

/***/ },
/* 2266 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createDetectElementResize;
	/**
	 * Detect Element Resize.
	 * https://github.com/sdecima/javascript-detect-element-resize
	 * Sebastian Decima
	 *
	 * Forked from version 0.5.3; includes the following modifications:
	 * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
	 * 2) Defer initialization code via a top-level function wrapper (to support SSR).
	 * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
	 **/
	
	function createDetectElementResize() {
	  // Check `document` and `window` in case of server-side rendering
	  var _window;
	  if (typeof window !== 'undefined') {
	    _window = window;
	  } else if (typeof self !== 'undefined') {
	    _window = self;
	  } else {
	    _window = this;
	  }
	
	  var attachEvent = typeof document !== 'undefined' && document.attachEvent;
	
	  if (!attachEvent) {
	    var requestFrame = function () {
	      var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {
	        return _window.setTimeout(fn, 20);
	      };
	      return function (fn) {
	        return raf(fn);
	      };
	    }();
	
	    var cancelFrame = function () {
	      var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;
	      return function (id) {
	        return cancel(id);
	      };
	    }();
	
	    var resetTriggers = function resetTriggers(element) {
	      var triggers = element.__resizeTriggers__,
	          expand = triggers.firstElementChild,
	          contract = triggers.lastElementChild,
	          expandChild = expand.firstElementChild;
	      contract.scrollLeft = contract.scrollWidth;
	      contract.scrollTop = contract.scrollHeight;
	      expandChild.style.width = expand.offsetWidth + 1 + 'px';
	      expandChild.style.height = expand.offsetHeight + 1 + 'px';
	      expand.scrollLeft = expand.scrollWidth;
	      expand.scrollTop = expand.scrollHeight;
	    };
	
	    var checkTriggers = function checkTriggers(element) {
	      return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
	    };
	
	    var scrollListener = function scrollListener(e) {
	      // Don't measure (which forces) reflow for scrolls that happen inside of children!
	      if (e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {
	        return;
	      }
	
	      var element = this;
	      resetTriggers(this);
	      if (this.__resizeRAF__) cancelFrame(this.__resizeRAF__);
	      this.__resizeRAF__ = requestFrame(function () {
	        if (checkTriggers(element)) {
	          element.__resizeLast__.width = element.offsetWidth;
	          element.__resizeLast__.height = element.offsetHeight;
	          element.__resizeListeners__.forEach(function (fn) {
	            fn.call(element, e);
	          });
	        }
	      });
	    };
	
	    /* Detect CSS Animations support to detect element display/re-attach */
	    var animation = false,
	        animationstring = 'animation',
	        keyframeprefix = '',
	        animationstartevent = 'animationstart',
	        domPrefixes = 'Webkit Moz O ms'.split(' '),
	        startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),
	        pfx = '';
	    {
	      var elm = document.createElement('fakeelement');
	      if (elm.style.animationName !== undefined) {
	        animation = true;
	      }
	
	      if (animation === false) {
	        for (var i = 0; i < domPrefixes.length; i++) {
	          if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
	            pfx = domPrefixes[i];
	            animationstring = pfx + 'Animation';
	            keyframeprefix = '-' + pfx.toLowerCase() + '-';
	            animationstartevent = startEvents[i];
	            animation = true;
	            break;
	          }
	        }
	      }
	    }
	
	    var animationName = 'resizeanim';
	    var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';
	    var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';
	  }
	
	  var createStyles = function createStyles() {
	    if (!document.getElementById('detectElementResize')) {
	      //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
	      var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: \" \"; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
	          head = document.head || document.getElementsByTagName('head')[0],
	          style = document.createElement('style');
	
	      style.id = 'detectElementResize';
	      style.type = 'text/css';
	      if (style.styleSheet) {
	        style.styleSheet.cssText = css;
	      } else {
	        style.appendChild(document.createTextNode(css));
	      }
	
	      head.appendChild(style);
	    }
	  };
	
	  var addResizeListener = function addResizeListener(element, fn) {
	    if (attachEvent) element.attachEvent('onresize', fn);else {
	      if (!element.__resizeTriggers__) {
	        var elementStyle = _window.getComputedStyle(element);
	        if (elementStyle && elementStyle.position == 'static') {
	          element.style.position = 'relative';
	        }
	        createStyles();
	        element.__resizeLast__ = {};
	        element.__resizeListeners__ = [];
	        (element.__resizeTriggers__ = document.createElement('div')).className = 'resize-triggers';
	        element.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div>' + '<div class="contract-trigger"></div>';
	        element.appendChild(element.__resizeTriggers__);
	        resetTriggers(element);
	        element.addEventListener('scroll', scrollListener, true);
	
	        /* Listen for a css animation to detect element display/re-attach */
	        if (animationstartevent) {
	          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
	            if (e.animationName == animationName) resetTriggers(element);
	          };
	          element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
	        }
	      }
	      element.__resizeListeners__.push(fn);
	    }
	  };
	
	  var removeResizeListener = function removeResizeListener(element, fn) {
	    if (attachEvent) element.detachEvent('onresize', fn);else {
	      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
	      if (!element.__resizeListeners__.length) {
	        element.removeEventListener('scroll', scrollListener, true);
	        if (element.__resizeTriggers__.__animationListener__) {
	          element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
	          element.__resizeTriggers__.__animationListener__ = null;
	        }
	        try {
	          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
	        } catch (e) {
	          // Preact compat; see developit/preact-compat/issues/228
	        }
	      }
	    }
	  };
	
	  return {
	    addResizeListener: addResizeListener,
	    removeResizeListener: removeResizeListener
	  };
	}

/***/ },
/* 2267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.idCellSizeCache = exports.defaultCellSizeCache = exports.CellMeasurer = exports.default = undefined;
	
	var _CellMeasurer2 = __webpack_require__(2268);
	
	var _CellMeasurer3 = _interopRequireDefault(_CellMeasurer2);
	
	var _defaultCellSizeCache2 = __webpack_require__(2269);
	
	var _defaultCellSizeCache3 = _interopRequireDefault(_defaultCellSizeCache2);
	
	var _idCellSizeCache2 = __webpack_require__(2270);
	
	var _idCellSizeCache3 = _interopRequireDefault(_idCellSizeCache2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _CellMeasurer3.default;
	exports.CellMeasurer = _CellMeasurer3.default;
	exports.defaultCellSizeCache = _defaultCellSizeCache3.default;
	exports.idCellSizeCache = _idCellSizeCache3.default;

/***/ },
/* 2268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _reactDom = __webpack_require__(345);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _defaultCellSizeCache = __webpack_require__(2269);
	
	var _defaultCellSizeCache2 = _interopRequireDefault(_defaultCellSizeCache);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Measures a Grid cell's contents by rendering them in a way that is not visible to the user.
	 * Either a fixed width or height may be provided if it is desirable to measure only in one direction.
	 */
	var CellMeasurer = function (_Component) {
	  _inherits(CellMeasurer, _Component);
	
	  function CellMeasurer(props, state) {
	    _classCallCheck(this, CellMeasurer);
	
	    var _this = _possibleConstructorReturn(this, (CellMeasurer.__proto__ || Object.getPrototypeOf(CellMeasurer)).call(this, props, state));
	
	    _this._cellSizeCache = props.cellSizeCache || new _defaultCellSizeCache2.default();
	
	    _this.getColumnWidth = _this.getColumnWidth.bind(_this);
	    _this.getRowHeight = _this.getRowHeight.bind(_this);
	    _this.resetMeasurements = _this.resetMeasurements.bind(_this);
	    _this.resetMeasurementForColumn = _this.resetMeasurementForColumn.bind(_this);
	    _this.resetMeasurementForRow = _this.resetMeasurementForRow.bind(_this);
	    return _this;
	  }
	
	  _createClass(CellMeasurer, [{
	    key: 'getColumnWidth',
	    value: function getColumnWidth(_ref) {
	      var index = _ref.index;
	
	      var columnWidth = this._cellSizeCache.getColumnWidth(index);
	      if (columnWidth != null) {
	        return columnWidth;
	      }
	
	      var rowCount = this.props.rowCount;
	
	      var maxWidth = 0;
	
	      for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	        var _measureCell2 = this._measureCell({
	          clientWidth: true,
	          columnIndex: index,
	          rowIndex: rowIndex
	        });
	
	        var width = _measureCell2.width;
	
	        maxWidth = Math.max(maxWidth, width);
	      }
	
	      this._cellSizeCache.setColumnWidth(index, maxWidth);
	
	      return maxWidth;
	    }
	  }, {
	    key: 'getRowHeight',
	    value: function getRowHeight(_ref2) {
	      var index = _ref2.index;
	
	      var rowHeight = this._cellSizeCache.getRowHeight(index);
	      if (rowHeight != null) {
	        return rowHeight;
	      }
	
	      var columnCount = this.props.columnCount;
	
	      var maxHeight = 0;
	
	      for (var columnIndex = 0; columnIndex < columnCount; columnIndex++) {
	        var _measureCell3 = this._measureCell({
	          clientHeight: true,
	          columnIndex: columnIndex,
	          rowIndex: index
	        });
	
	        var height = _measureCell3.height;
	
	        maxHeight = Math.max(maxHeight, height);
	      }
	
	      this._cellSizeCache.setRowHeight(index, maxHeight);
	
	      return maxHeight;
	    }
	  }, {
	    key: 'resetMeasurementForColumn',
	    value: function resetMeasurementForColumn(columnIndex) {
	      this._cellSizeCache.clearColumnWidth(columnIndex);
	    }
	  }, {
	    key: 'resetMeasurementForRow',
	    value: function resetMeasurementForRow(rowIndex) {
	      this._cellSizeCache.clearRowHeight(rowIndex);
	    }
	  }, {
	    key: 'resetMeasurements',
	    value: function resetMeasurements() {
	      this._cellSizeCache.clearAllColumnWidths();
	      this._cellSizeCache.clearAllRowHeights();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._renderAndMount();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var cellSizeCache = this.props.cellSizeCache;
	
	      if (cellSizeCache !== nextProps.cellSizeCache) {
	        this._cellSizeCache = nextProps.cellSizeCache;
	      }
	
	      this._updateDivDimensions(nextProps);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._unmountContainer();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;
	
	      return children({
	        getColumnWidth: this.getColumnWidth,
	        getRowHeight: this.getRowHeight,
	        resetMeasurements: this.resetMeasurements,
	        resetMeasurementForColumn: this.resetMeasurementForColumn,
	        resetMeasurementForRow: this.resetMeasurementForRow
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_getContainerNode',
	    value: function _getContainerNode(props) {
	      var container = props.container;
	
	      if (container) {
	        return _reactDom2.default.findDOMNode(typeof container === 'function' ? container() : container);
	      } else {
	        return document.body;
	      }
	    }
	  }, {
	    key: '_measureCell',
	    value: function _measureCell(_ref3) {
	      var _ref3$clientHeight = _ref3.clientHeight;
	      var clientHeight = _ref3$clientHeight === undefined ? false : _ref3$clientHeight;
	      var _ref3$clientWidth = _ref3.clientWidth;
	      var clientWidth = _ref3$clientWidth === undefined ? true : _ref3$clientWidth;
	      var columnIndex = _ref3.columnIndex;
	      var rowIndex = _ref3.rowIndex;
	      var cellRenderer = this.props.cellRenderer;
	
	      var rendered = cellRenderer({
	        columnIndex: columnIndex,
	        index: rowIndex, // Simplify List :rowRenderer use case
	        rowIndex: rowIndex
	      });
	
	      // Handle edge case where this method is called before the CellMeasurer has completed its initial render (and mounted).
	      this._renderAndMount();
	
	      // @TODO Keep an eye on this for future React updates as the interface may change:
	      // https://twitter.com/soprano/status/737316379712331776
	      _reactDom2.default.unstable_renderSubtreeIntoContainer(this, rendered, this._div);
	
	      var measurements = {
	        height: clientHeight && this._div.clientHeight,
	        width: clientWidth && this._div.clientWidth
	      };
	
	      _reactDom2.default.unmountComponentAtNode(this._div);
	
	      return measurements;
	    }
	  }, {
	    key: '_renderAndMount',
	    value: function _renderAndMount() {
	      if (!this._div) {
	        this._div = document.createElement('div');
	        this._div.style.display = 'inline-block';
	        this._div.style.position = 'absolute';
	        this._div.style.visibility = 'hidden';
	        this._div.style.zIndex = -1;
	
	        this._updateDivDimensions(this.props);
	
	        this._containerNode = this._getContainerNode(this.props);
	        this._containerNode.appendChild(this._div);
	      }
	    }
	  }, {
	    key: '_unmountContainer',
	    value: function _unmountContainer() {
	      if (this._div) {
	        this._containerNode.removeChild(this._div);
	
	        this._div = null;
	      }
	
	      this._containerNode = null;
	    }
	  }, {
	    key: '_updateDivDimensions',
	    value: function _updateDivDimensions(props) {
	      var height = props.height;
	      var width = props.width;
	
	      if (height && height !== this._divHeight) {
	        this._divHeight = height;
	        this._div.style.height = height + 'px';
	      }
	
	      if (width && width !== this._divWidth) {
	        this._divWidth = width;
	        this._div.style.width = width + 'px';
	      }
	    }
	  }]);
	
	  return CellMeasurer;
	}(_react.Component);
	
	exports.default = CellMeasurer;
	 true ? CellMeasurer.propTypes = {
	  /**
	   * Renders a cell given its indices.
	   * Should implement the following interface: ({ columnIndex: number, rowIndex: number }): PropTypes.node
	   */
	  cellRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Optional, custom caching strategy for cell sizes.
	   */
	  cellSizeCache: _react.PropTypes.object,
	
	  /**
	   * Function responsible for rendering a virtualized component.
	   * This function should implement the following signature:
	   * ({ getColumnWidth, getRowHeight, resetMeasurements }) => PropTypes.element
	   */
	  children: _react.PropTypes.func.isRequired,
	
	  /**
	   * Number of columns in grid.
	   */
	  columnCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * A Node, Component instance, or function that returns either.
	   * If this property is not specified the document body will be used.
	   */
	  container: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.func, _react2.default.PropTypes.node]),
	
	  /**
	   * Assign a fixed :height in order to measure dynamic text :width only.
	   */
	  height: _react.PropTypes.number,
	
	  /**
	   * Number of rows in grid.
	   */
	  rowCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Assign a fixed :width in order to measure dynamic text :height only.
	   */
	  width: _react.PropTypes.number
	} : void 0;

/***/ },
/* 2269 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	/**
	 * Default CellMeasurer `cellSizeCache` implementation.
	 * Permanently caches all cell sizes (identified by column and row index) unless explicitly cleared.
	 * Can be configured to handle uniform cell widths and/or heights as a way of optimizing certain use cases.
	 */
	var DefaultCellSizeCache = function () {
	  function DefaultCellSizeCache() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    var _ref$uniformRowHeight = _ref.uniformRowHeight;
	    var uniformRowHeight = _ref$uniformRowHeight === undefined ? false : _ref$uniformRowHeight;
	    var _ref$uniformColumnWid = _ref.uniformColumnWidth;
	    var uniformColumnWidth = _ref$uniformColumnWid === undefined ? false : _ref$uniformColumnWid;
	
	    _classCallCheck(this, DefaultCellSizeCache);
	
	    this._uniformRowHeight = uniformRowHeight;
	    this._uniformColumnWidth = uniformColumnWidth;
	
	    this._cachedColumnWidth = undefined;
	    this._cachedRowHeight = undefined;
	
	    this._cachedColumnWidths = {};
	    this._cachedRowHeights = {};
	  }
	
	  _createClass(DefaultCellSizeCache, [{
	    key: "clearAllColumnWidths",
	    value: function clearAllColumnWidths() {
	      this._cachedColumnWidth = undefined;
	      this._cachedColumnWidths = {};
	    }
	  }, {
	    key: "clearAllRowHeights",
	    value: function clearAllRowHeights() {
	      this._cachedRowHeight = undefined;
	      this._cachedRowHeights = {};
	    }
	  }, {
	    key: "clearColumnWidth",
	    value: function clearColumnWidth(index) {
	      this._cachedColumnWidth = undefined;
	
	      delete this._cachedColumnWidths[index];
	    }
	  }, {
	    key: "clearRowHeight",
	    value: function clearRowHeight(index) {
	      this._cachedRowHeight = undefined;
	
	      delete this._cachedRowHeights[index];
	    }
	  }, {
	    key: "getColumnWidth",
	    value: function getColumnWidth(index) {
	      return this._uniformColumnWidth ? this._cachedColumnWidth : this._cachedColumnWidths[index];
	    }
	  }, {
	    key: "getRowHeight",
	    value: function getRowHeight(index) {
	      return this._uniformRowHeight ? this._cachedRowHeight : this._cachedRowHeights[index];
	    }
	  }, {
	    key: "setColumnWidth",
	    value: function setColumnWidth(index, width) {
	      this._cachedColumnWidth = width;
	      this._cachedColumnWidths[index] = width;
	    }
	  }, {
	    key: "setRowHeight",
	    value: function setRowHeight(index, height) {
	      this._cachedRowHeight = height;
	      this._cachedRowHeights[index] = height;
	    }
	  }]);
	
	  return DefaultCellSizeCache;
	}();
	
	exports.default = DefaultCellSizeCache;

/***/ },
/* 2270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = idCellSizeCache;
	
	var _defaultCellSizeCache = __webpack_require__(2269);
	
	var _defaultCellSizeCache2 = _interopRequireDefault(_defaultCellSizeCache);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/**
	 * Alternate CellMeasurer `cellSizeCache` implementation.
	 * Similar to `defaultCellSizeCache` except that sizes are tied to data id rather than index.
	 * Requires an index-to-id map function (passed in externally) to operate.
	 */
	function idCellSizeCache(_ref) {
	  var indexToIdMap = _ref.indexToIdMap;
	  var _ref$uniformColumnWid = _ref.uniformColumnWidth;
	  var uniformColumnWidth = _ref$uniformColumnWid === undefined ? false : _ref$uniformColumnWid;
	  var _ref$uniformRowHeight = _ref.uniformRowHeight;
	  var uniformRowHeight = _ref$uniformRowHeight === undefined ? false : _ref$uniformRowHeight;
	
	  var cellSizeCache = new _defaultCellSizeCache2.default({
	    uniformColumnWidth: uniformColumnWidth,
	    uniformRowHeight: uniformRowHeight
	  });
	
	  return {
	    clearAllColumnWidths: function clearAllColumnWidths() {
	      cellSizeCache.clearAllColumnWidths();
	    },
	    clearAllRowHeights: function clearAllRowHeights() {
	      cellSizeCache.clearAllRowHeights();
	    },
	    clearColumnWidth: function clearColumnWidth(index) {
	      cellSizeCache.clearColumnWidth(indexToIdMap(index));
	    },
	    clearRowHeight: function clearRowHeight(index) {
	      cellSizeCache.clearRowHeight(indexToIdMap(index));
	    },
	    getColumnWidth: function getColumnWidth(index) {
	      return cellSizeCache.getColumnWidth(indexToIdMap(index));
	    },
	    getRowHeight: function getRowHeight(index) {
	      return cellSizeCache.getRowHeight(indexToIdMap(index));
	    },
	    setColumnWidth: function setColumnWidth(index, width) {
	      cellSizeCache.setColumnWidth(indexToIdMap(index), width);
	    },
	    setRowHeight: function setRowHeight(index, height) {
	      cellSizeCache.setRowHeight(indexToIdMap(index), height);
	    }
	  };
	}

/***/ },
/* 2271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Collection = exports.default = undefined;
	
	var _Collection2 = __webpack_require__(2272);
	
	var _Collection3 = _interopRequireDefault(_Collection2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _Collection3.default;
	exports.Collection = _Collection3.default;

/***/ },
/* 2272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _CollectionView = __webpack_require__(2273);
	
	var _CollectionView2 = _interopRequireDefault(_CollectionView);
	
	var _calculateSizeAndPositionData2 = __webpack_require__(2275);
	
	var _calculateSizeAndPositionData3 = _interopRequireDefault(_calculateSizeAndPositionData2);
	
	var _getUpdatedOffsetForIndex = __webpack_require__(2278);
	
	var _getUpdatedOffsetForIndex2 = _interopRequireDefault(_getUpdatedOffsetForIndex);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Renders scattered or non-linear data.
	 * Unlike Grid, which renders checkerboard data, Collection can render arbitrarily positioned- even overlapping- data.
	 */
	var Collection = function (_Component) {
	  _inherits(Collection, _Component);
	
	  function Collection(props, context) {
	    _classCallCheck(this, Collection);
	
	    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this, props, context));
	
	    _this._cellMetadata = [];
	    _this._lastRenderedCellIndices = [];
	
	    // Cell cache during scroll (for perforamnce)
	    _this._cellCache = [];
	
	    _this._isScrollingChange = _this._isScrollingChange.bind(_this);
	    return _this;
	  }
	
	  /** See Collection#recomputeCellSizesAndPositions */
	
	  _createClass(Collection, [{
	    key: 'recomputeCellSizesAndPositions',
	    value: function recomputeCellSizesAndPositions() {
	      this._cellCache = [];
	      this._collectionView.recomputeCellSizesAndPositions();
	    }
	
	    /** React lifecycle methods */
	
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var props = _objectWithoutProperties(this.props, []);
	
	      return _react2.default.createElement(_CollectionView2.default, _extends({
	        cellLayoutManager: this,
	        isScrollingChange: this._isScrollingChange,
	        ref: function ref(_ref) {
	          _this2._collectionView = _ref;
	        }
	      }, props));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	
	    /** CellLayoutManager interface */
	
	  }, {
	    key: 'calculateSizeAndPositionData',
	    value: function calculateSizeAndPositionData() {
	      var _props = this.props;
	      var cellCount = _props.cellCount;
	      var cellSizeAndPositionGetter = _props.cellSizeAndPositionGetter;
	      var sectionSize = _props.sectionSize;
	
	      var data = (0, _calculateSizeAndPositionData3.default)({
	        cellCount: cellCount,
	        cellSizeAndPositionGetter: cellSizeAndPositionGetter,
	        sectionSize: sectionSize
	      });
	
	      this._cellMetadata = data.cellMetadata;
	      this._sectionManager = data.sectionManager;
	      this._height = data.height;
	      this._width = data.width;
	    }
	
	    /**
	     * Returns the most recently rendered set of cell indices.
	     */
	
	  }, {
	    key: 'getLastRenderedIndices',
	    value: function getLastRenderedIndices() {
	      return this._lastRenderedCellIndices;
	    }
	
	    /**
	     * Calculates the minimum amount of change from the current scroll position to ensure the specified cell is (fully) visible.
	     */
	
	  }, {
	    key: 'getScrollPositionForCell',
	    value: function getScrollPositionForCell(_ref2) {
	      var align = _ref2.align;
	      var cellIndex = _ref2.cellIndex;
	      var height = _ref2.height;
	      var scrollLeft = _ref2.scrollLeft;
	      var scrollTop = _ref2.scrollTop;
	      var width = _ref2.width;
	      var cellCount = this.props.cellCount;
	
	      if (cellIndex >= 0 && cellIndex < cellCount) {
	        var cellMetadata = this._cellMetadata[cellIndex];
	
	        scrollLeft = (0, _getUpdatedOffsetForIndex2.default)({
	          align: align,
	          cellOffset: cellMetadata.x,
	          cellSize: cellMetadata.width,
	          containerSize: width,
	          currentOffset: scrollLeft,
	          targetIndex: cellIndex
	        });
	
	        scrollTop = (0, _getUpdatedOffsetForIndex2.default)({
	          align: align,
	          cellOffset: cellMetadata.y,
	          cellSize: cellMetadata.height,
	          containerSize: height,
	          currentOffset: scrollTop,
	          targetIndex: cellIndex
	        });
	      }
	
	      return {
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop
	      };
	    }
	  }, {
	    key: 'getTotalSize',
	    value: function getTotalSize() {
	      return {
	        height: this._height,
	        width: this._width
	      };
	    }
	  }, {
	    key: 'cellRenderers',
	    value: function cellRenderers(_ref3) {
	      var _this3 = this;
	
	      var height = _ref3.height;
	      var isScrolling = _ref3.isScrolling;
	      var width = _ref3.width;
	      var x = _ref3.x;
	      var y = _ref3.y;
	      var _props2 = this.props;
	      var cellGroupRenderer = _props2.cellGroupRenderer;
	      var cellRenderer = _props2.cellRenderer;
	
	      // Store for later calls to getLastRenderedIndices()
	
	      this._lastRenderedCellIndices = this._sectionManager.getCellIndices({
	        height: height,
	        width: width,
	        x: x,
	        y: y
	      });
	
	      return cellGroupRenderer({
	        cellCache: this._cellCache,
	        cellRenderer: cellRenderer,
	        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(_ref4) {
	          var index = _ref4.index;
	          return _this3._sectionManager.getCellMetadata({ index: index });
	        },
	        indices: this._lastRenderedCellIndices,
	        isScrolling: isScrolling
	      });
	    }
	  }, {
	    key: '_isScrollingChange',
	    value: function _isScrollingChange(isScrolling) {
	      if (!isScrolling) {
	        this._cellCache = [];
	      }
	    }
	  }]);
	
	  return Collection;
	}(_react.Component);
	
	Collection.defaultProps = {
	  'aria-label': 'grid',
	  cellGroupRenderer: defaultCellGroupRenderer
	};
	exports.default = Collection;
	 true ? Collection.propTypes = {
	  'aria-label': _react.PropTypes.string,
	
	  /**
	   * Number of cells in Collection.
	   */
	  cellCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Responsible for rendering a group of cells given their indices.
	   * Should implement the following interface: ({
	   *   cellSizeAndPositionGetter:Function,
	   *   indices: Array<number>,
	   *   cellRenderer: Function
	   * }): Array<PropTypes.node>
	   */
	  cellGroupRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Responsible for rendering a cell given an row and column index.
	   * Should implement the following interface: ({ index: number, key: string, style: object }): PropTypes.element
	   */
	  cellRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback responsible for returning size and offset/position information for a given cell (index).
	   * ({ index: number }): { height: number, width: number, x: number, y: number }
	   */
	  cellSizeAndPositionGetter: _react.PropTypes.func.isRequired,
	
	  /**
	   * Optionally override the size of the sections a Collection's cells are split into.
	   */
	  sectionSize: _react.PropTypes.number
	} : void 0;
	
	function defaultCellGroupRenderer(_ref5) {
	  var cellCache = _ref5.cellCache;
	  var cellRenderer = _ref5.cellRenderer;
	  var cellSizeAndPositionGetter = _ref5.cellSizeAndPositionGetter;
	  var indices = _ref5.indices;
	  var isScrolling = _ref5.isScrolling;
	
	  return indices.map(function (index) {
	    var cellMetadata = cellSizeAndPositionGetter({ index: index });
	
	    var cellRendererProps = {
	      index: index,
	      isScrolling: isScrolling,
	      key: index,
	      style: {
	        height: cellMetadata.height,
	        left: cellMetadata.x,
	        position: 'absolute',
	        top: cellMetadata.y,
	        width: cellMetadata.width
	      }
	    };
	
	    // Avoid re-creating cells while scrolling.
	    // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
	    // If a scroll is in progress- cache and reuse cells.
	    // This cache will be thrown away once scrolling complets.
	    if (isScrolling) {
	      if (!(index in cellCache)) {
	        cellCache[index] = cellRenderer(cellRendererProps);
	      }
	
	      return cellCache[index];
	    } else {
	      return cellRenderer(cellRendererProps);
	    }
	  }).filter(function (renderedCell) {
	    return !!renderedCell;
	  });
	}

/***/ },
/* 2273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _createCallbackMemoizer = __webpack_require__(2274);
	
	var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);
	
	var _scrollbarSize = __webpack_require__(2245);
	
	var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	// @TODO It would be nice to refactor Grid to use this code as well.
	
	/**
	 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var IS_SCROLLING_TIMEOUT = 150;
	
	/**
	 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
	 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
	 */
	var SCROLL_POSITION_CHANGE_REASONS = {
	  OBSERVED: 'observed',
	  REQUESTED: 'requested'
	};
	
	/**
	 * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.
	 * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.
	 */
	
	var CollectionView = function (_Component) {
	  _inherits(CollectionView, _Component);
	
	  function CollectionView(props, context) {
	    _classCallCheck(this, CollectionView);
	
	    var _this = _possibleConstructorReturn(this, (CollectionView.__proto__ || Object.getPrototypeOf(CollectionView)).call(this, props, context));
	
	    _this.state = {
	      calculateSizeAndPositionDataOnNextUpdate: false,
	      isScrolling: false,
	      scrollLeft: 0,
	      scrollTop: 0
	    };
	
	    // Invokes callbacks only when their values have changed.
	    _this._onSectionRenderedMemoizer = (0, _createCallbackMemoizer2.default)();
	    _this._onScrollMemoizer = (0, _createCallbackMemoizer2.default)(false);
	
	    // Bind functions to instance so they don't lose context when passed around.
	    _this._invokeOnSectionRenderedHelper = _this._invokeOnSectionRenderedHelper.bind(_this);
	    _this._onScroll = _this._onScroll.bind(_this);
	    _this._updateScrollPositionForScrollToCell = _this._updateScrollPositionForScrollToCell.bind(_this);
	    return _this;
	  }
	
	  /**
	   * Forced recompute of cell sizes and positions.
	   * This function should be called if cell sizes have changed but nothing else has.
	   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.
	   */
	
	  _createClass(CollectionView, [{
	    key: 'recomputeCellSizesAndPositions',
	    value: function recomputeCellSizesAndPositions() {
	      this.setState({
	        calculateSizeAndPositionDataOnNextUpdate: true
	      });
	    }
	
	    /* ---------------------------- Component lifecycle methods ---------------------------- */
	
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props;
	      var cellLayoutManager = _props.cellLayoutManager;
	      var scrollLeft = _props.scrollLeft;
	      var scrollToCell = _props.scrollToCell;
	      var scrollTop = _props.scrollTop;
	
	      // If this component was first rendered server-side, scrollbar size will be undefined.
	      // In that event we need to remeasure.
	
	      if (!this._scrollbarSizeMeasured) {
	        this._scrollbarSize = (0, _scrollbarSize2.default)();
	        this._scrollbarSizeMeasured = true;
	        this.setState({});
	      }
	
	      if (scrollToCell >= 0) {
	        this._updateScrollPositionForScrollToCell();
	      } else if (scrollLeft >= 0 || scrollTop >= 0) {
	        this._setScrollPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
	      }
	
	      // Update onSectionRendered callback.
	      this._invokeOnSectionRenderedHelper();
	
	      var _cellLayoutManager$ge = cellLayoutManager.getTotalSize();
	
	      var totalHeight = _cellLayoutManager$ge.height;
	      var totalWidth = _cellLayoutManager$ge.width;
	
	      // Initialize onScroll callback.
	
	      this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft || 0,
	        scrollTop: scrollTop || 0,
	        totalHeight: totalHeight,
	        totalWidth: totalWidth
	      });
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props2 = this.props;
	      var height = _props2.height;
	      var scrollToAlignment = _props2.scrollToAlignment;
	      var scrollToCell = _props2.scrollToCell;
	      var width = _props2.width;
	      var _state = this.state;
	      var scrollLeft = _state.scrollLeft;
	      var scrollPositionChangeReason = _state.scrollPositionChangeReason;
	      var scrollTop = _state.scrollTop;
	
	      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
	      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
	      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
	      // So we only set these when we require an adjustment of the scroll position.
	      // See issue #2 for more information.
	
	      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
	        if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {
	          this._scrollingContainer.scrollLeft = scrollLeft;
	        }
	        if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {
	          this._scrollingContainer.scrollTop = scrollTop;
	        }
	      }
	
	      // Update scroll offsets if the current :scrollToCell values requires it
	      if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {
	        this._updateScrollPositionForScrollToCell();
	      }
	
	      // Update onRowsRendered callback if start/stop indices have changed
	      this._invokeOnSectionRenderedHelper();
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var cellLayoutManager = this.props.cellLayoutManager;
	
	      cellLayoutManager.calculateSizeAndPositionData();
	
	      // If this component is being rendered server-side, getScrollbarSize() will return undefined.
	      // We handle this case in componentDidMount()
	      this._scrollbarSize = (0, _scrollbarSize2.default)();
	      if (this._scrollbarSize === undefined) {
	        this._scrollbarSizeMeasured = false;
	        this._scrollbarSize = 0;
	      } else {
	        this._scrollbarSizeMeasured = true;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._disablePointerEventsTimeoutId) {
	        clearTimeout(this._disablePointerEventsTimeoutId);
	      }
	    }
	
	    /**
	     * @private
	     * This method updates scrollLeft/scrollTop in state for the following conditions:
	     * 1) Empty content (0 rows or columns)
	     * 2) New scroll props overriding the current state
	     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
	     */
	
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextProps.cellCount === 0 && (nextState.scrollLeft !== 0 || nextState.scrollTop !== 0)) {
	        this._setScrollPosition({
	          scrollLeft: 0,
	          scrollTop: 0
	        });
	      } else if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
	        this._setScrollPosition({
	          scrollLeft: nextProps.scrollLeft,
	          scrollTop: nextProps.scrollTop
	        });
	      }
	
	      if (nextProps.cellCount !== this.props.cellCount || nextProps.cellLayoutManager !== this.props.cellLayoutManager || nextState.calculateSizeAndPositionDataOnNextUpdate) {
	        nextProps.cellLayoutManager.calculateSizeAndPositionData();
	      }
	
	      if (nextState.calculateSizeAndPositionDataOnNextUpdate) {
	        this.setState({
	          calculateSizeAndPositionDataOnNextUpdate: false
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props3 = this.props;
	      var autoHeight = _props3.autoHeight;
	      var cellCount = _props3.cellCount;
	      var cellLayoutManager = _props3.cellLayoutManager;
	      var className = _props3.className;
	      var height = _props3.height;
	      var horizontalOverscanSize = _props3.horizontalOverscanSize;
	      var id = _props3.id;
	      var noContentRenderer = _props3.noContentRenderer;
	      var style = _props3.style;
	      var verticalOverscanSize = _props3.verticalOverscanSize;
	      var width = _props3.width;
	      var _state2 = this.state;
	      var isScrolling = _state2.isScrolling;
	      var scrollLeft = _state2.scrollLeft;
	      var scrollTop = _state2.scrollTop;
	
	      var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize();
	
	      var totalHeight = _cellLayoutManager$ge2.height;
	      var totalWidth = _cellLayoutManager$ge2.width;
	
	      // Safely expand the rendered area by the specified overscan amount
	
	      var left = Math.max(0, scrollLeft - horizontalOverscanSize);
	      var top = Math.max(0, scrollTop - verticalOverscanSize);
	      var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);
	      var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);
	
	      var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({
	        height: bottom - top,
	        isScrolling: isScrolling,
	        width: right - left,
	        x: left,
	        y: top
	      }) : [];
	
	      var collectionStyle = {
	        boxSizing: 'border-box',
	        direction: 'ltr',
	        height: autoHeight ? 'auto' : height,
	        position: 'relative',
	        WebkitOverflowScrolling: 'touch',
	        width: width,
	        willChange: 'transform'
	      };
	
	      // Force browser to hide scrollbars when we know they aren't necessary.
	      // Otherwise once scrollbars appear they may not disappear again.
	      // For more info see issue #116
	      var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;
	      var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0;
	
	      // Also explicitly init styles to 'auto' if scrollbars are required.
	      // This works around an obscure edge case where external CSS styles have not yet been loaded,
	      // But an initial scroll index of offset is set as an external prop.
	      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
	      // This was originally reported via clauderic/react-infinite-calendar/issues/23
	      collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
	      collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';
	
	      return _react2.default.createElement('div', {
	        ref: function ref(_ref) {
	          _this2._scrollingContainer = _ref;
	        },
	        'aria-label': this.props['aria-label'],
	        className: (0, _classnames2.default)('ReactVirtualized__Collection', className),
	        id: id,
	        onScroll: this._onScroll,
	        role: 'grid',
	        style: _extends({}, collectionStyle, style),
	        tabIndex: 0
	      }, cellCount > 0 && _react2.default.createElement('div', {
	        className: 'ReactVirtualized__Collection__innerScrollContainer',
	        style: {
	          height: totalHeight,
	          maxHeight: totalHeight,
	          maxWidth: totalWidth,
	          overflow: 'hidden',
	          pointerEvents: isScrolling ? 'none' : '',
	          width: totalWidth
	        }
	      }, childrenToDisplay), cellCount === 0 && noContentRenderer());
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	
	    /* ---------------------------- Helper methods ---------------------------- */
	
	    /**
	     * Sets an :isScrolling flag for a small window of time.
	     * This flag is used to disable pointer events on the scrollable portion of the Collection.
	     * This prevents jerky/stuttery mouse-wheel scrolling.
	     */
	
	  }, {
	    key: '_enablePointerEventsAfterDelay',
	    value: function _enablePointerEventsAfterDelay() {
	      var _this3 = this;
	
	      if (this._disablePointerEventsTimeoutId) {
	        clearTimeout(this._disablePointerEventsTimeoutId);
	      }
	
	      this._disablePointerEventsTimeoutId = setTimeout(function () {
	        var isScrollingChange = _this3.props.isScrollingChange;
	
	        isScrollingChange(false);
	
	        _this3._disablePointerEventsTimeoutId = null;
	        _this3.setState({
	          isScrolling: false
	        });
	      }, IS_SCROLLING_TIMEOUT);
	    }
	  }, {
	    key: '_invokeOnSectionRenderedHelper',
	    value: function _invokeOnSectionRenderedHelper() {
	      var _props4 = this.props;
	      var cellLayoutManager = _props4.cellLayoutManager;
	      var onSectionRendered = _props4.onSectionRendered;
	
	      this._onSectionRenderedMemoizer({
	        callback: onSectionRendered,
	        indices: {
	          indices: cellLayoutManager.getLastRenderedIndices()
	        }
	      });
	    }
	  }, {
	    key: '_invokeOnScrollMemoizer',
	    value: function _invokeOnScrollMemoizer(_ref2) {
	      var _this4 = this;
	
	      var scrollLeft = _ref2.scrollLeft;
	      var scrollTop = _ref2.scrollTop;
	      var totalHeight = _ref2.totalHeight;
	      var totalWidth = _ref2.totalWidth;
	
	      this._onScrollMemoizer({
	        callback: function callback(_ref3) {
	          var scrollLeft = _ref3.scrollLeft;
	          var scrollTop = _ref3.scrollTop;
	          var _props5 = _this4.props;
	          var height = _props5.height;
	          var onScroll = _props5.onScroll;
	          var width = _props5.width;
	
	          onScroll({
	            clientHeight: height,
	            clientWidth: width,
	            scrollHeight: totalHeight,
	            scrollLeft: scrollLeft,
	            scrollTop: scrollTop,
	            scrollWidth: totalWidth
	          });
	        },
	        indices: {
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop
	        }
	      });
	    }
	  }, {
	    key: '_setScrollPosition',
	    value: function _setScrollPosition(_ref4) {
	      var scrollLeft = _ref4.scrollLeft;
	      var scrollTop = _ref4.scrollTop;
	
	      var newState = {
	        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
	      };
	
	      if (scrollLeft >= 0) {
	        newState.scrollLeft = scrollLeft;
	      }
	
	      if (scrollTop >= 0) {
	        newState.scrollTop = scrollTop;
	      }
	
	      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
	        this.setState(newState);
	      }
	    }
	  }, {
	    key: '_updateScrollPositionForScrollToCell',
	    value: function _updateScrollPositionForScrollToCell() {
	      var _props6 = this.props;
	      var cellLayoutManager = _props6.cellLayoutManager;
	      var height = _props6.height;
	      var scrollToAlignment = _props6.scrollToAlignment;
	      var scrollToCell = _props6.scrollToCell;
	      var width = _props6.width;
	      var _state3 = this.state;
	      var scrollLeft = _state3.scrollLeft;
	      var scrollTop = _state3.scrollTop;
	
	      if (scrollToCell >= 0) {
	        var scrollPosition = cellLayoutManager.getScrollPositionForCell({
	          align: scrollToAlignment,
	          cellIndex: scrollToCell,
	          height: height,
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop,
	          width: width
	        });
	
	        if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {
	          this._setScrollPosition(scrollPosition);
	        }
	      }
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(event) {
	      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
	      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
	      // See issue #404 for more information.
	      if (event.target !== this._scrollingContainer) {
	        return;
	      }
	
	      // Prevent pointer events from interrupting a smooth scroll
	      this._enablePointerEventsAfterDelay();
	
	      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
	      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
	      // This causes a series of rapid renders that is slow for long lists.
	      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.
	      var _props7 = this.props;
	      var cellLayoutManager = _props7.cellLayoutManager;
	      var height = _props7.height;
	      var isScrollingChange = _props7.isScrollingChange;
	      var width = _props7.width;
	
	      var scrollbarSize = this._scrollbarSize;
	
	      var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize();
	
	      var totalHeight = _cellLayoutManager$ge3.height;
	      var totalWidth = _cellLayoutManager$ge3.width;
	
	      var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));
	      var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop));
	
	      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
	      // Don't force a re-render if this is the case.
	      // The mouse may move faster then the animation frame does.
	      // Use requestAnimationFrame to avoid over-updating.
	      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
	        // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.
	        // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).
	        // All things considered, this seems to be the best current work around that I'm aware of.
	        // For more information see https://github.com/bvaughn/react-virtualized/pull/124
	        var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS.OBSERVED : SCROLL_POSITION_CHANGE_REASONS.REQUESTED;
	
	        // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)
	        if (!this.state.isScrolling) {
	          isScrollingChange(true);
	        }
	
	        this.setState({
	          isScrolling: true,
	          scrollLeft: scrollLeft,
	          scrollPositionChangeReason: scrollPositionChangeReason,
	          scrollTop: scrollTop
	        });
	      }
	
	      this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        totalWidth: totalWidth,
	        totalHeight: totalHeight
	      });
	    }
	  }]);
	
	  return CollectionView;
	}(_react.Component);
	
	CollectionView.defaultProps = {
	  'aria-label': 'grid',
	  horizontalOverscanSize: 0,
	  noContentRenderer: function noContentRenderer() {
	    return null;
	  },
	  onScroll: function onScroll() {
	    return null;
	  },
	  onSectionRendered: function onSectionRendered() {
	    return null;
	  },
	  scrollToAlignment: 'auto',
	  style: {},
	  verticalOverscanSize: 0
	};
	exports.default = CollectionView;
	 true ? CollectionView.propTypes = {
	  'aria-label': _react.PropTypes.string,
	
	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: _react.PropTypes.bool,
	
	  /**
	   * Number of cells in collection.
	   */
	  cellCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.
	   */
	  cellLayoutManager: _react.PropTypes.object.isRequired,
	
	  /**
	   * Optional custom CSS class name to attach to root Collection element.
	   */
	  className: _react.PropTypes.string,
	
	  /**
	   * Height of Collection; this property determines the number of visible (vs virtualized) rows.
	   */
	  height: _react.PropTypes.number.isRequired,
	
	  /**
	   * Optional custom id to attach to root Collection element.
	   */
	  id: _react.PropTypes.string,
	
	  /**
	   * Enables the `Collection` to horiontally "overscan" its content similar to how `Grid` does.
	   * This can reduce flicker around the edges when a user scrolls quickly.
	   */
	  horizontalOverscanSize: _react.PropTypes.number.isRequired,
	
	  isScrollingChange: _react.PropTypes.func,
	
	  /**
	   * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.
	   */
	  noContentRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void
	   */
	  onScroll: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback invoked with information about the section of the Collection that was just rendered.
	   * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.
	   */
	  onSectionRendered: _react.PropTypes.func.isRequired,
	
	  /**
	   * Horizontal offset.
	   */
	  scrollLeft: _react.PropTypes.number,
	
	  /**
	   * Controls scroll-to-cell behavior of the Grid.
	   * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
	   * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
	   */
	  scrollToAlignment: _react.PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,
	
	  /**
	   * Cell index to ensure visible (by forcefully scrolling if necessary).
	   */
	  scrollToCell: _react.PropTypes.number,
	
	  /**
	   * Vertical offset.
	   */
	  scrollTop: _react.PropTypes.number,
	
	  /**
	   * Optional custom inline style to attach to root Collection element.
	   */
	  style: _react.PropTypes.object,
	
	  /**
	   * Enables the `Collection` to vertically "overscan" its content similar to how `Grid` does.
	   * This can reduce flicker around the edges when a user scrolls quickly.
	   */
	  verticalOverscanSize: _react.PropTypes.number.isRequired,
	
	  /**
	   * Width of Collection; this property determines the number of visible (vs virtualized) columns.
	   */
	  width: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2274 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createCallbackMemoizer;
	/**
	 * Helper utility that updates the specified callback whenever any of the specified indices have changed.
	 */
	function createCallbackMemoizer() {
	  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	  var cachedIndices = {};
	
	  return function (_ref) {
	    var callback = _ref.callback;
	    var indices = _ref.indices;
	
	    var keys = Object.keys(indices);
	    var allInitialized = !requireAllKeys || keys.every(function (key) {
	      var value = indices[key];
	      return Array.isArray(value) ? value.length > 0 : value >= 0;
	    });
	    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {
	      var cachedValue = cachedIndices[key];
	      var value = indices[key];
	
	      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;
	    });
	
	    cachedIndices = indices;
	
	    if (allInitialized && indexChanged) {
	      callback(indices);
	    }
	  };
	}

/***/ },
/* 2275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calculateSizeAndPositionData;
	
	var _SectionManager = __webpack_require__(2276);
	
	var _SectionManager2 = _interopRequireDefault(_SectionManager);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function calculateSizeAndPositionData(_ref) {
	  var cellCount = _ref.cellCount;
	  var cellSizeAndPositionGetter = _ref.cellSizeAndPositionGetter;
	  var sectionSize = _ref.sectionSize;
	
	  var cellMetadata = [];
	  var sectionManager = new _SectionManager2.default(sectionSize);
	  var height = 0;
	  var width = 0;
	
	  for (var index = 0; index < cellCount; index++) {
	    var cellMetadatum = cellSizeAndPositionGetter({ index: index });
	
	    if (cellMetadatum.height == null || isNaN(cellMetadatum.height) || cellMetadatum.width == null || isNaN(cellMetadatum.width) || cellMetadatum.x == null || isNaN(cellMetadatum.x) || cellMetadatum.y == null || isNaN(cellMetadatum.y)) {
	      throw Error('Invalid metadata returned for cell ' + index + ':\n        x:' + cellMetadatum.x + ', y:' + cellMetadatum.y + ', width:' + cellMetadatum.width + ', height:' + cellMetadatum.height);
	    }
	
	    height = Math.max(height, cellMetadatum.y + cellMetadatum.height);
	    width = Math.max(width, cellMetadatum.x + cellMetadatum.width);
	
	    cellMetadata[index] = cellMetadatum;
	    sectionManager.registerCell({
	      cellMetadatum: cellMetadatum,
	      index: index
	    });
	  }
	
	  return {
	    cellMetadata: cellMetadata,
	    height: height,
	    sectionManager: sectionManager,
	    width: width
	  };
	}

/***/ },
/* 2276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}(); /**
	      * Window Sections are used to group nearby cells.
	      * This enables us to more quickly determine which cells to display in a given region of the Window.
	      * 
	      */
	
	var _Section = __webpack_require__(2277);
	
	var _Section2 = _interopRequireDefault(_Section);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	var SECTION_SIZE = 100;
	
	/**
	 * Contains 0 to many Sections.
	 * Grows (and adds Sections) dynamically as cells are registered.
	 * Automatically adds cells to the appropriate Section(s).
	 */
	var SectionManager = function () {
	  function SectionManager() {
	    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;
	
	    _classCallCheck(this, SectionManager);
	
	    this._sectionSize = sectionSize;
	
	    this._cellMetadata = [];
	    this._sections = {};
	  }
	
	  /**
	   * Gets all cell indices contained in the specified region.
	   * A region may encompass 1 or more Sections.
	   */
	
	  _createClass(SectionManager, [{
	    key: 'getCellIndices',
	    value: function getCellIndices(_ref) {
	      var height = _ref.height;
	      var width = _ref.width;
	      var x = _ref.x;
	      var y = _ref.y;
	
	      var indices = {};
	
	      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {
	        return section.getCellIndices().forEach(function (index) {
	          indices[index] = index;
	        });
	      });
	
	      // Object keys are strings; this function returns numbers
	      return Object.keys(indices).map(function (index) {
	        return indices[index];
	      });
	    }
	
	    /** Get size and position information for the cell specified. */
	
	  }, {
	    key: 'getCellMetadata',
	    value: function getCellMetadata(_ref2) {
	      var index = _ref2.index;
	
	      return this._cellMetadata[index];
	    }
	
	    /** Get all Sections overlapping the specified region. */
	
	  }, {
	    key: 'getSections',
	    value: function getSections(_ref3) {
	      var height = _ref3.height;
	      var width = _ref3.width;
	      var x = _ref3.x;
	      var y = _ref3.y;
	
	      var sectionXStart = Math.floor(x / this._sectionSize);
	      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);
	      var sectionYStart = Math.floor(y / this._sectionSize);
	      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);
	
	      var sections = [];
	
	      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {
	        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {
	          var key = sectionX + '.' + sectionY;
	
	          if (!this._sections[key]) {
	            this._sections[key] = new _Section2.default({
	              height: this._sectionSize,
	              width: this._sectionSize,
	              x: sectionX * this._sectionSize,
	              y: sectionY * this._sectionSize
	            });
	          }
	
	          sections.push(this._sections[key]);
	        }
	      }
	
	      return sections;
	    }
	
	    /** Total number of Sections based on the currently registered cells. */
	
	  }, {
	    key: 'getTotalSectionCount',
	    value: function getTotalSectionCount() {
	      return Object.keys(this._sections).length;
	    }
	
	    /** Intended for debugger/test purposes only */
	
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var _this = this;
	
	      return Object.keys(this._sections).map(function (index) {
	        return _this._sections[index].toString();
	      });
	    }
	
	    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */
	
	  }, {
	    key: 'registerCell',
	    value: function registerCell(_ref4) {
	      var cellMetadatum = _ref4.cellMetadatum;
	      var index = _ref4.index;
	
	      this._cellMetadata[index] = cellMetadatum;
	
	      this.getSections(cellMetadatum).forEach(function (section) {
	        return section.addCellIndex({ index: index });
	      });
	    }
	  }]);
	
	  return SectionManager;
	}();
	
	exports.default = SectionManager;

/***/ },
/* 2277 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	/**
	 * A section of the Window.
	 * Window Sections are used to group nearby cells.
	 * This enables us to more quickly determine which cells to display in a given region of the Window.
	 * Sections have a fixed size and contain 0 to many cells (tracked by their indices).
	 */
	var Section = function () {
	  function Section(_ref) {
	    var height = _ref.height;
	    var width = _ref.width;
	    var x = _ref.x;
	    var y = _ref.y;
	
	    _classCallCheck(this, Section);
	
	    this.height = height;
	    this.width = width;
	    this.x = x;
	    this.y = y;
	
	    this._indexMap = {};
	    this._indices = [];
	  }
	
	  /** Add a cell to this section. */
	
	  _createClass(Section, [{
	    key: 'addCellIndex',
	    value: function addCellIndex(_ref2) {
	      var index = _ref2.index;
	
	      if (!this._indexMap[index]) {
	        this._indexMap[index] = true;
	        this._indices.push(index);
	      }
	    }
	
	    /** Get all cell indices that have been added to this section. */
	
	  }, {
	    key: 'getCellIndices',
	    value: function getCellIndices() {
	      return this._indices;
	    }
	
	    /** Intended for debugger/test purposes only */
	
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return this.x + ',' + this.y + ' ' + this.width + 'x' + this.height;
	    }
	  }]);
	
	  return Section;
	}(); /** @rlow */
	
	exports.default = Section;

/***/ },
/* 2278 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getUpdatedOffsetForIndex;
	/**
	 * Determines a new offset that ensures a certain cell is visible, given the current offset.
	 * If the cell is already visible then the current offset will be returned.
	 * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
	 *
	 * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
	 * @param cellOffset Offset (x or y) position for cell
	 * @param cellSize Size (width or height) of cell
	 * @param containerSize Total size (width or height) of the container
	 * @param currentOffset Container's current (x or y) offset
	 * @return Offset to use to ensure the specified cell is visible
	 */
	function getUpdatedOffsetForIndex(_ref) {
	  var _ref$align = _ref.align;
	  var align = _ref$align === undefined ? 'auto' : _ref$align;
	  var cellOffset = _ref.cellOffset;
	  var cellSize = _ref.cellSize;
	  var containerSize = _ref.containerSize;
	  var currentOffset = _ref.currentOffset;
	
	  var maxOffset = cellOffset;
	  var minOffset = maxOffset - containerSize + cellSize;
	
	  switch (align) {
	    case 'start':
	      return maxOffset;
	    case 'end':
	      return minOffset;
	    case 'center':
	      return maxOffset - (containerSize - cellSize) / 2;
	    default:
	      return Math.max(minOffset, Math.min(maxOffset, currentOffset));
	  }
	}

/***/ },
/* 2279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ColumnSizer = exports.default = undefined;
	
	var _ColumnSizer2 = __webpack_require__(2280);
	
	var _ColumnSizer3 = _interopRequireDefault(_ColumnSizer2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _ColumnSizer3.default;
	exports.ColumnSizer = _ColumnSizer3.default;

/***/ },
/* 2280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * High-order component that auto-calculates column-widths for `Grid` cells.
	 */
	var ColumnSizer = function (_Component) {
	  _inherits(ColumnSizer, _Component);
	
	  function ColumnSizer(props, context) {
	    _classCallCheck(this, ColumnSizer);
	
	    var _this = _possibleConstructorReturn(this, (ColumnSizer.__proto__ || Object.getPrototypeOf(ColumnSizer)).call(this, props, context));
	
	    _this._registerChild = _this._registerChild.bind(_this);
	    return _this;
	  }
	
	  _createClass(ColumnSizer, [{
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props = this.props;
	      var columnMaxWidth = _props.columnMaxWidth;
	      var columnMinWidth = _props.columnMinWidth;
	      var columnCount = _props.columnCount;
	      var width = _props.width;
	
	      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {
	        if (this._registeredChild) {
	          this._registeredChild.recomputeGridSize();
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props;
	      var children = _props2.children;
	      var columnMaxWidth = _props2.columnMaxWidth;
	      var columnMinWidth = _props2.columnMinWidth;
	      var columnCount = _props2.columnCount;
	      var width = _props2.width;
	
	      var safeColumnMinWidth = columnMinWidth || 1;
	
	      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;
	
	      var columnWidth = width / columnCount;
	      columnWidth = Math.max(safeColumnMinWidth, columnWidth);
	      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);
	      columnWidth = Math.floor(columnWidth);
	
	      var adjustedWidth = Math.min(width, columnWidth * columnCount);
	
	      return children({
	        adjustedWidth: adjustedWidth,
	        getColumnWidth: function getColumnWidth() {
	          return columnWidth;
	        },
	        registerChild: this._registerChild
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_registerChild',
	    value: function _registerChild(child) {
	      if (child && typeof child.recomputeGridSize !== 'function') {
	        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');
	      }
	
	      this._registeredChild = child;
	
	      if (this._registeredChild) {
	        this._registeredChild.recomputeGridSize();
	      }
	    }
	  }]);
	
	  return ColumnSizer;
	}(_react.Component);
	
	exports.default = ColumnSizer;
	 true ? ColumnSizer.propTypes = {
	  /**
	   * Function responsible for rendering a virtualized Grid.
	   * This function should implement the following signature:
	   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element
	   *
	   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.
	   * The :registerChild should be passed to the Grid's :ref property.
	   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.
	   */
	  children: _react.PropTypes.func.isRequired,
	
	  /** Optional maximum allowed column width */
	  columnMaxWidth: _react.PropTypes.number,
	
	  /** Optional minimum allowed column width */
	  columnMinWidth: _react.PropTypes.number,
	
	  /** Number of columns in Grid or Table child */
	  columnCount: _react.PropTypes.number.isRequired,
	
	  /** Width of Grid or Table child */
	  width: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SortIndicator = exports.SortDirection = exports.Column = exports.Table = exports.defaultRowRenderer = exports.defaultHeaderRenderer = exports.defaultCellRenderer = exports.defaultCellDataGetter = exports.default = undefined;
	
	var _Table2 = __webpack_require__(2282);
	
	var _Table3 = _interopRequireDefault(_Table2);
	
	var _defaultCellDataGetter2 = __webpack_require__(2288);
	
	var _defaultCellDataGetter3 = _interopRequireDefault(_defaultCellDataGetter2);
	
	var _defaultCellRenderer2 = __webpack_require__(2287);
	
	var _defaultCellRenderer3 = _interopRequireDefault(_defaultCellRenderer2);
	
	var _defaultHeaderRenderer2 = __webpack_require__(2284);
	
	var _defaultHeaderRenderer3 = _interopRequireDefault(_defaultHeaderRenderer2);
	
	var _defaultRowRenderer2 = __webpack_require__(2297);
	
	var _defaultRowRenderer3 = _interopRequireDefault(_defaultRowRenderer2);
	
	var _Column2 = __webpack_require__(2283);
	
	var _Column3 = _interopRequireDefault(_Column2);
	
	var _SortDirection2 = __webpack_require__(2286);
	
	var _SortDirection3 = _interopRequireDefault(_SortDirection2);
	
	var _SortIndicator2 = __webpack_require__(2285);
	
	var _SortIndicator3 = _interopRequireDefault(_SortIndicator2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _Table3.default;
	exports.defaultCellDataGetter = _defaultCellDataGetter3.default;
	exports.defaultCellRenderer = _defaultCellRenderer3.default;
	exports.defaultHeaderRenderer = _defaultHeaderRenderer3.default;
	exports.defaultRowRenderer = _defaultRowRenderer3.default;
	exports.Table = _Table3.default;
	exports.Column = _Column3.default;
	exports.SortDirection = _SortDirection3.default;
	exports.SortIndicator = _SortIndicator3.default;

/***/ },
/* 2282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Column = __webpack_require__(2283);
	
	var _Column2 = _interopRequireDefault(_Column);
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(345);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _Grid = __webpack_require__(2289);
	
	var _Grid2 = _interopRequireDefault(_Grid);
	
	var _defaultRowRenderer = __webpack_require__(2297);
	
	var _defaultRowRenderer2 = _interopRequireDefault(_defaultRowRenderer);
	
	var _SortDirection = __webpack_require__(2286);
	
	var _SortDirection2 = _interopRequireDefault(_SortDirection);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Table component with fixed headers and virtualized rows for improved performance with large data sets.
	 * This component expects explicit width, height, and padding parameters.
	 */
	var Table = function (_Component) {
	  _inherits(Table, _Component);
	
	  function Table(props) {
	    _classCallCheck(this, Table);
	
	    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));
	
	    _this.state = {
	      scrollbarWidth: 0
	    };
	
	    _this._createColumn = _this._createColumn.bind(_this);
	    _this._createRow = _this._createRow.bind(_this);
	    _this._onScroll = _this._onScroll.bind(_this);
	    _this._onSectionRendered = _this._onSectionRendered.bind(_this);
	    return _this;
	  }
	
	  _createClass(Table, [{
	    key: 'forceUpdateGrid',
	    value: function forceUpdateGrid() {
	      this.Grid.forceUpdate();
	    }
	
	    /** See Grid#measureAllCells */
	
	  }, {
	    key: 'measureAllRows',
	    value: function measureAllRows() {
	      this.Grid.measureAllCells();
	    }
	
	    /** See Grid#recomputeGridSize */
	
	  }, {
	    key: 'recomputeRowHeights',
	    value: function recomputeRowHeights() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      this.Grid.recomputeGridSize({
	        rowIndex: index
	      });
	    }
	
	    /** See Grid#scrollToCell */
	
	  }, {
	    key: 'scrollToRow',
	    value: function scrollToRow() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      this.Grid.scrollToCell({
	        columnIndex: 0,
	        rowIndex: index
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._setScrollbarWidth();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._setScrollbarWidth();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props = this.props;
	      var children = _props.children;
	      var className = _props.className;
	      var disableHeader = _props.disableHeader;
	      var gridClassName = _props.gridClassName;
	      var gridStyle = _props.gridStyle;
	      var headerHeight = _props.headerHeight;
	      var height = _props.height;
	      var id = _props.id;
	      var noRowsRenderer = _props.noRowsRenderer;
	      var rowClassName = _props.rowClassName;
	      var rowStyle = _props.rowStyle;
	      var scrollToIndex = _props.scrollToIndex;
	      var style = _props.style;
	      var width = _props.width;
	      var scrollbarWidth = this.state.scrollbarWidth;
	
	      var availableRowsHeight = disableHeader ? height : height - headerHeight;
	
	      var rowClass = rowClassName instanceof Function ? rowClassName({ index: -1 }) : rowClassName;
	      var rowStyleObject = rowStyle instanceof Function ? rowStyle({ index: -1 }) : rowStyle;
	
	      // Precompute and cache column styles before rendering rows and columns to speed things up
	      this._cachedColumnStyles = [];
	      _react2.default.Children.toArray(children).forEach(function (column, index) {
	        var flexStyles = _this2._getFlexStyleForColumn(column, column.props.style);
	
	        _this2._cachedColumnStyles[index] = _extends({}, flexStyles, {
	          overflow: 'hidden'
	        });
	      });
	
	      // Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.
	      // This is done because Grid is a pure component and won't update unless its properties or state has changed.
	      // Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.
	      return _react2.default.createElement('div', {
	        className: (0, _classnames2.default)('ReactVirtualized__Table', className),
	        id: id,
	        style: style
	      }, !disableHeader && _react2.default.createElement('div', {
	        className: (0, _classnames2.default)('ReactVirtualized__Table__headerRow', rowClass),
	        style: _extends({}, rowStyleObject, {
	          height: headerHeight,
	          overflow: 'hidden',
	          paddingRight: scrollbarWidth,
	          width: width
	        })
	      }, this._getRenderedHeaderRow()), _react2.default.createElement(_Grid2.default, _extends({}, this.props, {
	        autoContainerWidth: true,
	        className: (0, _classnames2.default)('ReactVirtualized__Table__Grid', gridClassName),
	        cellRenderer: this._createRow,
	        columnWidth: width,
	        columnCount: 1,
	        height: availableRowsHeight,
	        id: undefined,
	        noContentRenderer: noRowsRenderer,
	        onScroll: this._onScroll,
	        onSectionRendered: this._onSectionRendered,
	        ref: function ref(_ref) {
	          _this2.Grid = _ref;
	        },
	        scrollbarWidth: scrollbarWidth,
	        scrollToRow: scrollToIndex,
	        style: _extends({}, gridStyle, {
	          overflowX: 'hidden'
	        })
	      })));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_createColumn',
	    value: function _createColumn(_ref2) {
	      var column = _ref2.column;
	      var columnIndex = _ref2.columnIndex;
	      var isScrolling = _ref2.isScrolling;
	      var rowData = _ref2.rowData;
	      var rowIndex = _ref2.rowIndex;
	      var _column$props = column.props;
	      var cellDataGetter = _column$props.cellDataGetter;
	      var cellRenderer = _column$props.cellRenderer;
	      var className = _column$props.className;
	      var columnData = _column$props.columnData;
	      var dataKey = _column$props.dataKey;
	
	      var cellData = cellDataGetter({ columnData: columnData, dataKey: dataKey, rowData: rowData });
	      var renderedCell = cellRenderer({ cellData: cellData, columnData: columnData, dataKey: dataKey, isScrolling: isScrolling, rowData: rowData, rowIndex: rowIndex });
	
	      var style = this._cachedColumnStyles[columnIndex];
	
	      var title = typeof renderedCell === 'string' ? renderedCell : null;
	
	      return _react2.default.createElement('div', {
	        key: 'Row' + rowIndex + '-Col' + columnIndex,
	        className: (0, _classnames2.default)('ReactVirtualized__Table__rowColumn', className),
	        style: style,
	        title: title
	      }, renderedCell);
	    }
	  }, {
	    key: '_createHeader',
	    value: function _createHeader(_ref3) {
	      var column = _ref3.column;
	      var index = _ref3.index;
	      var _props2 = this.props;
	      var headerClassName = _props2.headerClassName;
	      var headerStyle = _props2.headerStyle;
	      var onHeaderClick = _props2.onHeaderClick;
	      var sort = _props2.sort;
	      var sortBy = _props2.sortBy;
	      var sortDirection = _props2.sortDirection;
	      var _column$props2 = column.props;
	      var dataKey = _column$props2.dataKey;
	      var disableSort = _column$props2.disableSort;
	      var headerRenderer = _column$props2.headerRenderer;
	      var label = _column$props2.label;
	      var columnData = _column$props2.columnData;
	
	      var sortEnabled = !disableSort && sort;
	
	      var classNames = (0, _classnames2.default)('ReactVirtualized__Table__headerColumn', headerClassName, column.props.headerClassName, {
	        'ReactVirtualized__Table__sortableHeaderColumn': sortEnabled
	      });
	      var style = this._getFlexStyleForColumn(column, headerStyle);
	
	      var renderedHeader = headerRenderer({
	        columnData: columnData,
	        dataKey: dataKey,
	        disableSort: disableSort,
	        label: label,
	        sortBy: sortBy,
	        sortDirection: sortDirection
	      });
	
	      var a11yProps = {};
	
	      if (sortEnabled || onHeaderClick) {
	        (function () {
	          // If this is a sortable header, clicking it should update the table data's sorting.
	          var newSortDirection = sortBy !== dataKey || sortDirection === _SortDirection2.default.DESC ? _SortDirection2.default.ASC : _SortDirection2.default.DESC;
	
	          var onClick = function onClick() {
	            sortEnabled && sort({
	              sortBy: dataKey,
	              sortDirection: newSortDirection
	            });
	            onHeaderClick && onHeaderClick({ columnData: columnData, dataKey: dataKey });
	          };
	
	          var onKeyDown = function onKeyDown(event) {
	            if (event.key === 'Enter' || event.key === ' ') {
	              onClick();
	            }
	          };
	
	          a11yProps['aria-label'] = column.props['aria-label'] || label || dataKey;
	          a11yProps.role = 'rowheader';
	          a11yProps.tabIndex = 0;
	          a11yProps.onClick = onClick;
	          a11yProps.onKeyDown = onKeyDown;
	        })();
	      }
	
	      return _react2.default.createElement('div', _extends({}, a11yProps, {
	        key: 'Header-Col' + index,
	        className: classNames,
	        style: style
	      }), renderedHeader);
	    }
	  }, {
	    key: '_createRow',
	    value: function _createRow(_ref4) {
	      var _this3 = this;
	
	      var index = _ref4.rowIndex;
	      var isScrolling = _ref4.isScrolling;
	      var key = _ref4.key;
	      var style = _ref4.style;
	      var _props3 = this.props;
	      var children = _props3.children;
	      var onRowClick = _props3.onRowClick;
	      var onRowDoubleClick = _props3.onRowDoubleClick;
	      var onRowMouseOver = _props3.onRowMouseOver;
	      var onRowMouseOut = _props3.onRowMouseOut;
	      var rowClassName = _props3.rowClassName;
	      var rowGetter = _props3.rowGetter;
	      var rowRenderer = _props3.rowRenderer;
	      var rowStyle = _props3.rowStyle;
	      var scrollbarWidth = this.state.scrollbarWidth;
	
	      var rowClass = rowClassName instanceof Function ? rowClassName({ index: index }) : rowClassName;
	      var rowStyleObject = rowStyle instanceof Function ? rowStyle({ index: index }) : rowStyle;
	      var rowData = rowGetter({ index: index });
	
	      var columns = _react2.default.Children.toArray(children).map(function (column, columnIndex) {
	        return _this3._createColumn({
	          column: column,
	          columnIndex: columnIndex,
	          isScrolling: isScrolling,
	          rowData: rowData,
	          rowIndex: index,
	          scrollbarWidth: scrollbarWidth
	        });
	      });
	
	      var className = (0, _classnames2.default)('ReactVirtualized__Table__row', rowClass);
	      var flattenedStyle = _extends({}, style, rowStyleObject, {
	        height: this._getRowHeight(index),
	        overflow: 'hidden',
	        paddingRight: scrollbarWidth
	      });
	
	      return rowRenderer({
	        className: className,
	        columns: columns,
	        index: index,
	        isScrolling: isScrolling,
	        key: key,
	        onRowClick: onRowClick,
	        onRowDoubleClick: onRowDoubleClick,
	        onRowMouseOver: onRowMouseOver,
	        onRowMouseOut: onRowMouseOut,
	        rowData: rowData,
	        style: flattenedStyle
	      });
	    }
	
	    /**
	     * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).
	     */
	
	  }, {
	    key: '_getFlexStyleForColumn',
	    value: function _getFlexStyleForColumn(column) {
	      var customStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	      var flexValue = column.props.flexGrow + ' ' + column.props.flexShrink + ' ' + column.props.width + 'px';
	
	      var style = _extends({}, customStyle, {
	        flex: flexValue,
	        msFlex: flexValue,
	        WebkitFlex: flexValue
	      });
	
	      if (column.props.maxWidth) {
	        style.maxWidth = column.props.maxWidth;
	      }
	
	      if (column.props.minWidth) {
	        style.minWidth = column.props.minWidth;
	      }
	
	      return style;
	    }
	  }, {
	    key: '_getRenderedHeaderRow',
	    value: function _getRenderedHeaderRow() {
	      var _this4 = this;
	
	      var _props4 = this.props;
	      var children = _props4.children;
	      var disableHeader = _props4.disableHeader;
	
	      var items = disableHeader ? [] : _react2.default.Children.toArray(children);
	
	      return items.map(function (column, index) {
	        return _this4._createHeader({ column: column, index: index });
	      });
	    }
	  }, {
	    key: '_getRowHeight',
	    value: function _getRowHeight(rowIndex) {
	      var rowHeight = this.props.rowHeight;
	
	      return rowHeight instanceof Function ? rowHeight({ index: rowIndex }) : rowHeight;
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(_ref5) {
	      var clientHeight = _ref5.clientHeight;
	      var scrollHeight = _ref5.scrollHeight;
	      var scrollTop = _ref5.scrollTop;
	      var onScroll = this.props.onScroll;
	
	      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
	    }
	  }, {
	    key: '_onSectionRendered',
	    value: function _onSectionRendered(_ref6) {
	      var rowOverscanStartIndex = _ref6.rowOverscanStartIndex;
	      var rowOverscanStopIndex = _ref6.rowOverscanStopIndex;
	      var rowStartIndex = _ref6.rowStartIndex;
	      var rowStopIndex = _ref6.rowStopIndex;
	      var onRowsRendered = this.props.onRowsRendered;
	
	      onRowsRendered({
	        overscanStartIndex: rowOverscanStartIndex,
	        overscanStopIndex: rowOverscanStopIndex,
	        startIndex: rowStartIndex,
	        stopIndex: rowStopIndex
	      });
	    }
	  }, {
	    key: '_setScrollbarWidth',
	    value: function _setScrollbarWidth() {
	      var Grid = (0, _reactDom.findDOMNode)(this.Grid);
	      var clientWidth = Grid.clientWidth || 0;
	      var offsetWidth = Grid.offsetWidth || 0;
	      var scrollbarWidth = offsetWidth - clientWidth;
	
	      this.setState({ scrollbarWidth: scrollbarWidth });
	    }
	  }]);
	
	  return Table;
	}(_react.Component);
	
	Table.defaultProps = {
	  disableHeader: false,
	  estimatedRowSize: 30,
	  headerHeight: 0,
	  headerStyle: {},
	  noRowsRenderer: function noRowsRenderer() {
	    return null;
	  },
	  onRowsRendered: function onRowsRendered() {
	    return null;
	  },
	  onScroll: function onScroll() {
	    return null;
	  },
	  overscanRowCount: 10,
	  rowRenderer: _defaultRowRenderer2.default,
	  rowStyle: {},
	  scrollToAlignment: 'auto',
	  style: {}
	};
	exports.default = Table;
	 true ? Table.propTypes = {
	  'aria-label': _react.PropTypes.string,
	
	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: _react.PropTypes.bool,
	
	  /** One or more Columns describing the data displayed in this row */
	  children: function children(props, propName, componentName) {
	    var children = _react2.default.Children.toArray(props.children);
	    for (var i = 0; i < children.length; i++) {
	      if (children[i].type !== _Column2.default) {
	        return new Error('Table only accepts children of type Column');
	      }
	    }
	  },
	
	  /** Optional CSS class name */
	  className: _react.PropTypes.string,
	
	  /** Disable rendering the header at all */
	  disableHeader: _react.PropTypes.bool,
	
	  /**
	   * Used to estimate the total height of a Table before all of its rows have actually been measured.
	   * The estimated total height is adjusted as rows are rendered.
	   */
	  estimatedRowSize: _react.PropTypes.number.isRequired,
	
	  /** Optional custom CSS class name to attach to inner Grid element. */
	  gridClassName: _react.PropTypes.string,
	
	  /** Optional inline style to attach to inner Grid element. */
	  gridStyle: _react.PropTypes.object,
	
	  /** Optional CSS class to apply to all column headers */
	  headerClassName: _react.PropTypes.string,
	
	  /** Fixed height of header row */
	  headerHeight: _react.PropTypes.number.isRequired,
	
	  /** Fixed/available height for out DOM element */
	  height: _react.PropTypes.number.isRequired,
	
	  /** Optional id */
	  id: _react.PropTypes.string,
	
	  /** Optional renderer to be used in place of table body rows when rowCount is 0 */
	  noRowsRenderer: _react.PropTypes.func,
	
	  /**
	  * Optional callback when a column's header is clicked.
	  * ({ columnData: any, dataKey: string }): void
	  */
	  onHeaderClick: _react.PropTypes.func,
	
	  /** Optional custom inline style to attach to table header columns. */
	  headerStyle: _react.PropTypes.object,
	
	  /**
	   * Callback invoked when a user clicks on a table row.
	   * ({ index: number }): void
	   */
	  onRowClick: _react.PropTypes.func,
	
	  /**
	   * Callback invoked when a user double-clicks on a table row.
	   * ({ index: number }): void
	   */
	  onRowDoubleClick: _react.PropTypes.func,
	
	  /**
	   * Callback invoked when the mouse leaves a table row.
	   * ({ index: number }): void
	   */
	  onRowMouseOut: _react.PropTypes.func,
	
	  /**
	   * Callback invoked when a user moves the mouse over a table row.
	   * ({ index: number }): void
	   */
	  onRowMouseOver: _react.PropTypes.func,
	
	  /**
	   * Callback invoked with information about the slice of rows that were just rendered.
	   * ({ startIndex, stopIndex }): void
	   */
	  onRowsRendered: _react.PropTypes.func,
	
	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   * ({ clientHeight, scrollHeight, scrollTop }): void
	   */
	  onScroll: _react.PropTypes.func.isRequired,
	
	  /**
	   * Number of rows to render above/below the visible bounds of the list.
	   * These rows can help for smoother scrolling on touch devices.
	   */
	  overscanRowCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Optional CSS class to apply to all table rows (including the header row).
	   * This property can be a CSS class name (string) or a function that returns a class name.
	   * If a function is provided its signature should be: ({ index: number }): string
	   */
	  rowClassName: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
	
	  /**
	   * Callback responsible for returning a data row given an index.
	   * ({ index: number }): any
	   */
	  rowGetter: _react.PropTypes.func.isRequired,
	
	  /**
	   * Either a fixed row height (number) or a function that returns the height of a row given its index.
	   * ({ index: number }): number
	   */
	  rowHeight: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.func]).isRequired,
	
	  /** Number of rows in table. */
	  rowCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Responsible for rendering a table row given an array of columns:
	   * Should implement the following interface: ({
	   *   className: string,
	   *   columns: Array,
	   *   index: number,
	   *   isScrolling: boolean,
	   *   onRowClick: ?Function,
	   *   onRowDoubleClick: ?Function,
	   *   onRowMouseOver: ?Function,
	   *   onRowMouseOut: ?Function,
	   *   rowData: any,
	   *   style: any
	   * }): PropTypes.node
	   */
	  rowRenderer: _react.PropTypes.func,
	
	  /** Optional custom inline style to attach to table rows. */
	  rowStyle: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.func]).isRequired,
	
	  /** See Grid#scrollToAlignment */
	  scrollToAlignment: _react.PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,
	
	  /** Row index to ensure visible (by forcefully scrolling if necessary) */
	  scrollToIndex: _react.PropTypes.number,
	
	  /** Vertical offset. */
	  scrollTop: _react.PropTypes.number,
	
	  /**
	   * Sort function to be called if a sortable header is clicked.
	   * ({ sortBy: string, sortDirection: SortDirection }): void
	   */
	  sort: _react.PropTypes.func,
	
	  /** Table data is currently sorted by this :dataKey (if it is sorted at all) */
	  sortBy: _react.PropTypes.string,
	
	  /** Table data is currently sorted in this direction (if it is sorted at all) */
	  sortDirection: _react.PropTypes.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC]),
	
	  /** Optional inline style */
	  style: _react.PropTypes.object,
	
	  /** Tab index for focus */
	  tabIndex: _react.PropTypes.number,
	
	  /** Width of list */
	  width: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(301);
	
	var _defaultHeaderRenderer = __webpack_require__(2284);
	
	var _defaultHeaderRenderer2 = _interopRequireDefault(_defaultHeaderRenderer);
	
	var _defaultCellRenderer = __webpack_require__(2287);
	
	var _defaultCellRenderer2 = _interopRequireDefault(_defaultCellRenderer);
	
	var _defaultCellDataGetter = __webpack_require__(2288);
	
	var _defaultCellDataGetter2 = _interopRequireDefault(_defaultCellDataGetter);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Describes the header and cell contents of a table column.
	 */
	var Column = function (_Component) {
	  _inherits(Column, _Component);
	
	  function Column() {
	    _classCallCheck(this, Column);
	
	    return _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).apply(this, arguments));
	  }
	
	  return Column;
	}(_react.Component);
	
	Column.defaultProps = {
	  cellDataGetter: _defaultCellDataGetter2.default,
	  cellRenderer: _defaultCellRenderer2.default,
	  flexGrow: 0,
	  flexShrink: 1,
	  headerRenderer: _defaultHeaderRenderer2.default,
	  style: {}
	};
	exports.default = Column;
	 true ? Column.propTypes = {
	  /** Optional aria-label value to set on the column header */
	  'aria-label': _react.PropTypes.string,
	
	  /**
	   * Callback responsible for returning a cell's data, given its :dataKey
	   * ({ columnData: any, dataKey: string, rowData: any }): any
	   */
	  cellDataGetter: _react.PropTypes.func,
	
	  /**
	   * Callback responsible for rendering a cell's contents.
	   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node
	   */
	  cellRenderer: _react.PropTypes.func,
	
	  /** Optional CSS class to apply to cell */
	  className: _react.PropTypes.string,
	
	  /** Optional additional data passed to this column's :cellDataGetter */
	  columnData: _react.PropTypes.object,
	
	  /** Uniquely identifies the row-data attribute correspnding to this cell */
	  dataKey: _react.PropTypes.any.isRequired,
	
	  /** If sort is enabled for the table at large, disable it for this column */
	  disableSort: _react.PropTypes.bool,
	
	  /** Flex grow style; defaults to 0 */
	  flexGrow: _react.PropTypes.number,
	
	  /** Flex shrink style; defaults to 1 */
	  flexShrink: _react.PropTypes.number,
	
	  /** Optional CSS class to apply to this column's header */
	  headerClassName: _react.PropTypes.string,
	
	  /**
	   * Optional callback responsible for rendering a column header contents.
	   * ({ columnData: object, dataKey: string, disableSort: boolean, label: string, sortBy: string, sortDirection: string }): PropTypes.node
	   */
	  headerRenderer: _react.PropTypes.func.isRequired,
	
	  /** Header label for this column */
	  label: _react.PropTypes.string,
	
	  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */
	  maxWidth: _react.PropTypes.number,
	
	  /** Minimum width of column. */
	  minWidth: _react.PropTypes.number,
	
	  /** Optional inline style to apply to cell */
	  style: _react.PropTypes.object,
	
	  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */
	  width: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = defaultHeaderRenderer;
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _SortIndicator = __webpack_require__(2285);
	
	var _SortIndicator2 = _interopRequireDefault(_SortIndicator);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/**
	 * Default table header renderer.
	 */
	function defaultHeaderRenderer(_ref) {
	  var columnData = _ref.columnData;
	  var dataKey = _ref.dataKey;
	  var disableSort = _ref.disableSort;
	  var label = _ref.label;
	  var sortBy = _ref.sortBy;
	  var sortDirection = _ref.sortDirection;
	
	  var showSortIndicator = sortBy === dataKey;
	  var children = [_react2.default.createElement('span', {
	    className: 'ReactVirtualized__Table__headerTruncatedText',
	    key: 'label',
	    title: label
	  }, label)];
	
	  if (showSortIndicator) {
	    children.push(_react2.default.createElement(_SortIndicator2.default, {
	      key: 'SortIndicator',
	      sortDirection: sortDirection
	    }));
	  }
	
	  return children;
	}

/***/ },
/* 2285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = SortIndicator;
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _SortDirection = __webpack_require__(2286);
	
	var _SortDirection2 = _interopRequireDefault(_SortDirection);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/**
	 * Displayed beside a header to indicate that a Table is currently sorted by this column.
	 */
	function SortIndicator(_ref) {
	  var sortDirection = _ref.sortDirection;
	
	  var classNames = (0, _classnames2.default)('ReactVirtualized__Table__sortableHeaderIcon', {
	    'ReactVirtualized__Table__sortableHeaderIcon--ASC': sortDirection === _SortDirection2.default.ASC,
	    'ReactVirtualized__Table__sortableHeaderIcon--DESC': sortDirection === _SortDirection2.default.DESC
	  });
	
	  return _react2.default.createElement('svg', {
	    className: classNames,
	    width: 18,
	    height: 18,
	    viewBox: '0 0 24 24'
	  }, sortDirection === _SortDirection2.default.ASC ? _react2.default.createElement('path', { d: 'M7 14l5-5 5 5z' }) : _react2.default.createElement('path', { d: 'M7 10l5 5 5-5z' }), _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' }));
	}
	
	 true ? SortIndicator.propTypes = {
	  sortDirection: _react.PropTypes.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC])
	} : void 0;

/***/ },
/* 2286 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var SortDirection = {
	  /**
	   * Sort items in ascending order.
	   * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).
	   */
	  ASC: 'ASC',
	
	  /**
	   * Sort items in descending order.
	   * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).
	   */
	  DESC: 'DESC'
	};
	
	exports.default = SortDirection;

/***/ },
/* 2287 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = defaultCellRenderer;
	
	/**
	 * Default cell renderer that displays an attribute as a simple string
	 * You should override the column's cellRenderer if your data is some other type of object.
	 */
	function defaultCellRenderer(_ref) {
	  var cellData = _ref.cellData;
	  var cellDataKey = _ref.cellDataKey;
	  var columnData = _ref.columnData;
	  var rowData = _ref.rowData;
	  var rowIndex = _ref.rowIndex;
	
	  if (cellData == null) {
	    return '';
	  } else {
	    return String(cellData);
	  }
	}

/***/ },
/* 2288 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = defaultCellDataGetter;
	
	/**
	 * Default accessor for returning a cell value for a given attribute.
	 * This function expects to operate on either a vanilla Object or an Immutable Map.
	 * You should override the column's cellDataGetter if your data is some other type of object.
	 */
	function defaultCellDataGetter(_ref) {
	  var columnData = _ref.columnData;
	  var dataKey = _ref.dataKey;
	  var rowData = _ref.rowData;
	
	  if (rowData.get instanceof Function) {
	    return rowData.get(dataKey);
	  } else {
	    return rowData[dataKey];
	  }
	}

/***/ },
/* 2289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.defaultCellRangeRenderer = exports.Grid = exports.default = undefined;
	
	var _Grid2 = __webpack_require__(2290);
	
	var _Grid3 = _interopRequireDefault(_Grid2);
	
	var _defaultCellRangeRenderer2 = __webpack_require__(2296);
	
	var _defaultCellRangeRenderer3 = _interopRequireDefault(_defaultCellRangeRenderer2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _Grid3.default;
	exports.Grid = _Grid3.default;
	exports.defaultCellRangeRenderer = _defaultCellRangeRenderer3.default;

/***/ },
/* 2290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = undefined;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _calculateSizeAndPositionDataAndUpdateScrollOffset = __webpack_require__(2291);
	
	var _calculateSizeAndPositionDataAndUpdateScrollOffset2 = _interopRequireDefault(_calculateSizeAndPositionDataAndUpdateScrollOffset);
	
	var _ScalingCellSizeAndPositionManager = __webpack_require__(2292);
	
	var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);
	
	var _createCallbackMemoizer = __webpack_require__(2274);
	
	var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);
	
	var _getOverscanIndices = __webpack_require__(2294);
	
	var _getOverscanIndices2 = _interopRequireDefault(_getOverscanIndices);
	
	var _scrollbarSize = __webpack_require__(2245);
	
	var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _updateScrollIndexHelper = __webpack_require__(2295);
	
	var _updateScrollIndexHelper2 = _interopRequireDefault(_updateScrollIndexHelper);
	
	var _defaultCellRangeRenderer = __webpack_require__(2296);
	
	var _defaultCellRangeRenderer2 = _interopRequireDefault(_defaultCellRangeRenderer);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;
	
	/**
	 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
	 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
	 */
	var SCROLL_POSITION_CHANGE_REASONS = {
	  OBSERVED: 'observed',
	  REQUESTED: 'requested'
	};
	
	/**
	 * Renders tabular data with virtualization along the vertical and horizontal axes.
	 * Row heights and column widths must be known ahead of time and specified as properties.
	 */
	
	var Grid = function (_Component) {
	  _inherits(Grid, _Component);
	
	  function Grid(props, context) {
	    _classCallCheck(this, Grid);
	
	    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).call(this, props, context));
	
	    _this.state = {
	      isScrolling: false,
	      scrollDirectionHorizontal: _getOverscanIndices.SCROLL_DIRECTION_FORWARD,
	      scrollDirectionVertical: _getOverscanIndices.SCROLL_DIRECTION_FORWARD,
	      scrollLeft: 0,
	      scrollTop: 0
	    };
	
	    // Invokes onSectionRendered callback only when start/stop row or column indices change
	    _this._onGridRenderedMemoizer = (0, _createCallbackMemoizer2.default)();
	    _this._onScrollMemoizer = (0, _createCallbackMemoizer2.default)(false);
	
	    // Bind functions to instance so they don't lose context when passed around
	    _this._debounceScrollEndedCallback = _this._debounceScrollEndedCallback.bind(_this);
	    _this._invokeOnGridRenderedHelper = _this._invokeOnGridRenderedHelper.bind(_this);
	    _this._onScroll = _this._onScroll.bind(_this);
	    _this._updateScrollLeftForScrollToColumn = _this._updateScrollLeftForScrollToColumn.bind(_this);
	    _this._updateScrollTopForScrollToRow = _this._updateScrollTopForScrollToRow.bind(_this);
	
	    _this._columnWidthGetter = _this._wrapSizeGetter(props.columnWidth);
	    _this._rowHeightGetter = _this._wrapSizeGetter(props.rowHeight);
	
	    _this._columnSizeAndPositionManager = new _ScalingCellSizeAndPositionManager2.default({
	      cellCount: props.columnCount,
	      cellSizeGetter: function cellSizeGetter(params) {
	        return _this._columnWidthGetter(params);
	      },
	      estimatedCellSize: _this._getEstimatedColumnSize(props)
	    });
	    _this._rowSizeAndPositionManager = new _ScalingCellSizeAndPositionManager2.default({
	      cellCount: props.rowCount,
	      cellSizeGetter: function cellSizeGetter(params) {
	        return _this._rowHeightGetter(params);
	      },
	      estimatedCellSize: _this._getEstimatedRowSize(props)
	    });
	
	    // See defaultCellRangeRenderer() for more information on the usage of these caches
	    _this._cellCache = {};
	    _this._styleCache = {};
	    return _this;
	  }
	
	  /**
	   * Pre-measure all columns and rows in a Grid.
	   * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.
	   * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).
	   */
	
	  _createClass(Grid, [{
	    key: 'measureAllCells',
	    value: function measureAllCells() {
	      var _props = this.props;
	      var columnCount = _props.columnCount;
	      var rowCount = _props.rowCount;
	
	      this._columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);
	      this._rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);
	    }
	
	    /**
	     * Forced recompute of row heights and column widths.
	     * This function should be called if dynamic column or row sizes have changed but nothing else has.
	     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.
	     */
	
	  }, {
	    key: 'recomputeGridSize',
	    value: function recomputeGridSize() {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	      var _ref$columnIndex = _ref.columnIndex;
	      var columnIndex = _ref$columnIndex === undefined ? 0 : _ref$columnIndex;
	      var _ref$rowIndex = _ref.rowIndex;
	      var rowIndex = _ref$rowIndex === undefined ? 0 : _ref$rowIndex;
	
	      this._columnSizeAndPositionManager.resetCell(columnIndex);
	      this._rowSizeAndPositionManager.resetCell(rowIndex);
	
	      // Clear cell cache in case we are scrolling;
	      // Invalid row heights likely mean invalid cached content as well.
	      this._cellCache = {};
	      this._styleCache = {};
	
	      this.forceUpdate();
	    }
	
	    /**
	     * Ensure column and row are visible.
	     */
	
	  }, {
	    key: 'scrollToCell',
	    value: function scrollToCell(_ref2) {
	      var columnIndex = _ref2.columnIndex;
	      var rowIndex = _ref2.rowIndex;
	
	      var props = this.props;
	      this._updateScrollLeftForScrollToColumn(_extends({}, props, {
	        scrollToColumn: columnIndex
	      }));
	      this._updateScrollTopForScrollToRow(_extends({}, props, {
	        scrollToRow: rowIndex
	      }));
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props2 = this.props;
	      var scrollLeft = _props2.scrollLeft;
	      var scrollToColumn = _props2.scrollToColumn;
	      var scrollTop = _props2.scrollTop;
	      var scrollToRow = _props2.scrollToRow;
	
	      // If this component was first rendered server-side, scrollbar size will be undefined.
	      // In that event we need to remeasure.
	
	      if (!this._scrollbarSizeMeasured) {
	        this._scrollbarSize = (0, _scrollbarSize2.default)();
	        this._scrollbarSizeMeasured = true;
	        this.setState({});
	      }
	
	      if (scrollLeft >= 0 || scrollTop >= 0) {
	        this._setScrollPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
	      }
	
	      if (scrollToColumn >= 0 || scrollToRow >= 0) {
	        this._updateScrollLeftForScrollToColumn();
	        this._updateScrollTopForScrollToRow();
	      }
	
	      // Update onRowsRendered callback
	      this._invokeOnGridRenderedHelper();
	
	      // Initialize onScroll callback
	      this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft || 0,
	        scrollTop: scrollTop || 0,
	        totalColumnsWidth: this._columnSizeAndPositionManager.getTotalSize(),
	        totalRowsHeight: this._rowSizeAndPositionManager.getTotalSize()
	      });
	    }
	
	    /**
	     * @private
	     * This method updates scrollLeft/scrollTop in state for the following conditions:
	     * 1) New scroll-to-cell props have been set
	     */
	
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _this2 = this;
	
	      var _props3 = this.props;
	      var autoHeight = _props3.autoHeight;
	      var columnCount = _props3.columnCount;
	      var height = _props3.height;
	      var rowCount = _props3.rowCount;
	      var scrollToAlignment = _props3.scrollToAlignment;
	      var scrollToColumn = _props3.scrollToColumn;
	      var scrollToRow = _props3.scrollToRow;
	      var width = _props3.width;
	      var _state = this.state;
	      var scrollLeft = _state.scrollLeft;
	      var scrollPositionChangeReason = _state.scrollPositionChangeReason;
	      var scrollTop = _state.scrollTop;
	
	      // Handle edge case where column or row count has only just increased over 0.
	      // In this case we may have to restore a previously-specified scroll offset.
	      // For more info see bvaughn/react-virtualized/issues/218
	
	      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0;
	
	      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
	      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
	      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
	      // So we only set these when we require an adjustment of the scroll position.
	      // See issue #2 for more information.
	      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
	        if (scrollLeft >= 0 && (scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {
	          this._scrollingContainer.scrollLeft = scrollLeft;
	        }
	
	        // @TRICKY :autoHeight property instructs Grid to leave :scrollTop management to an external HOC (eg WindowScroller).
	        // In this case we should avoid checking scrollingContainer.scrollTop since it forces layout/flow.
	        if (!autoHeight && scrollTop >= 0 && (scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {
	          this._scrollingContainer.scrollTop = scrollTop;
	        }
	      }
	
	      // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it
	      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?
	      (0, _updateScrollIndexHelper2.default)({
	        cellSizeAndPositionManager: this._columnSizeAndPositionManager,
	        previousCellsCount: prevProps.columnCount,
	        previousCellSize: prevProps.columnWidth,
	        previousScrollToAlignment: prevProps.scrollToAlignment,
	        previousScrollToIndex: prevProps.scrollToColumn,
	        previousSize: prevProps.width,
	        scrollOffset: scrollLeft,
	        scrollToAlignment: scrollToAlignment,
	        scrollToIndex: scrollToColumn,
	        size: width,
	        updateScrollIndexCallback: function updateScrollIndexCallback(scrollToColumn) {
	          return _this2._updateScrollLeftForScrollToColumn(_extends({}, _this2.props, { scrollToColumn: scrollToColumn }));
	        }
	      });
	      (0, _updateScrollIndexHelper2.default)({
	        cellSizeAndPositionManager: this._rowSizeAndPositionManager,
	        previousCellsCount: prevProps.rowCount,
	        previousCellSize: prevProps.rowHeight,
	        previousScrollToAlignment: prevProps.scrollToAlignment,
	        previousScrollToIndex: prevProps.scrollToRow,
	        previousSize: prevProps.height,
	        scrollOffset: scrollTop,
	        scrollToAlignment: scrollToAlignment,
	        scrollToIndex: scrollToRow,
	        size: height,
	        updateScrollIndexCallback: function updateScrollIndexCallback(scrollToRow) {
	          return _this2._updateScrollTopForScrollToRow(_extends({}, _this2.props, { scrollToRow: scrollToRow }));
	        }
	      });
	
	      // Update onRowsRendered callback if start/stop indices have changed
	      this._invokeOnGridRenderedHelper();
	
	      // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners
	      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {
	        var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
	        var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
	
	        this._invokeOnScrollMemoizer({ scrollLeft: scrollLeft, scrollTop: scrollTop, totalColumnsWidth: totalColumnsWidth, totalRowsHeight: totalRowsHeight });
	      }
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      // If this component is being rendered server-side, getScrollbarSize() will return undefined.
	      // We handle this case in componentDidMount()
	      this._scrollbarSize = (0, _scrollbarSize2.default)();
	      if (this._scrollbarSize === undefined) {
	        this._scrollbarSizeMeasured = false;
	        this._scrollbarSize = 0;
	      } else {
	        this._scrollbarSizeMeasured = true;
	      }
	
	      this._calculateChildrenToRender();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._disablePointerEventsTimeoutId) {
	        clearTimeout(this._disablePointerEventsTimeoutId);
	      }
	    }
	
	    /**
	     * @private
	     * This method updates scrollLeft/scrollTop in state for the following conditions:
	     * 1) Empty content (0 rows or columns)
	     * 2) New scroll props overriding the current state
	     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
	     */
	
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var _this3 = this;
	
	      if (nextProps.columnCount === 0 && nextState.scrollLeft !== 0 || nextProps.rowCount === 0 && nextState.scrollTop !== 0) {
	        this._setScrollPosition({
	          scrollLeft: 0,
	          scrollTop: 0
	        });
	      } else if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
	        var newState = {};
	
	        if (nextProps.scrollLeft != null) {
	          newState.scrollLeft = nextProps.scrollLeft;
	        }
	        if (nextProps.scrollTop != null) {
	          newState.scrollTop = nextProps.scrollTop;
	        }
	
	        this._setScrollPosition(newState);
	      }
	
	      if (nextProps.columnWidth !== this.props.columnWidth || nextProps.rowHeight !== this.props.rowHeight) {
	        this._styleCache = {};
	      }
	
	      this._columnWidthGetter = this._wrapSizeGetter(nextProps.columnWidth);
	      this._rowHeightGetter = this._wrapSizeGetter(nextProps.rowHeight);
	
	      this._columnSizeAndPositionManager.configure({
	        cellCount: nextProps.columnCount,
	        estimatedCellSize: this._getEstimatedColumnSize(nextProps)
	      });
	      this._rowSizeAndPositionManager.configure({
	        cellCount: nextProps.rowCount,
	        estimatedCellSize: this._getEstimatedRowSize(nextProps)
	      });
	
	      // Update scroll offsets if the size or number of cells have changed, invalidating the previous value
	      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset2.default)({
	        cellCount: this.props.columnCount,
	        cellSize: this.props.columnWidth,
	        computeMetadataCallback: function computeMetadataCallback() {
	          return _this3._columnSizeAndPositionManager.resetCell(0);
	        },
	        computeMetadataCallbackProps: nextProps,
	        nextCellsCount: nextProps.columnCount,
	        nextCellSize: nextProps.columnWidth,
	        nextScrollToIndex: nextProps.scrollToColumn,
	        scrollToIndex: this.props.scrollToColumn,
	        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
	          return _this3._updateScrollLeftForScrollToColumn(nextProps, nextState);
	        }
	      });
	      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset2.default)({
	        cellCount: this.props.rowCount,
	        cellSize: this.props.rowHeight,
	        computeMetadataCallback: function computeMetadataCallback() {
	          return _this3._rowSizeAndPositionManager.resetCell(0);
	        },
	        computeMetadataCallbackProps: nextProps,
	        nextCellsCount: nextProps.rowCount,
	        nextCellSize: nextProps.rowHeight,
	        nextScrollToIndex: nextProps.scrollToRow,
	        scrollToIndex: this.props.scrollToRow,
	        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
	          return _this3._updateScrollTopForScrollToRow(nextProps, nextState);
	        }
	      });
	
	      this._calculateChildrenToRender(nextProps, nextState);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;
	
	      var _props4 = this.props;
	      var autoContainerWidth = _props4.autoContainerWidth;
	      var autoHeight = _props4.autoHeight;
	      var className = _props4.className;
	      var containerStyle = _props4.containerStyle;
	      var height = _props4.height;
	      var id = _props4.id;
	      var noContentRenderer = _props4.noContentRenderer;
	      var style = _props4.style;
	      var tabIndex = _props4.tabIndex;
	      var width = _props4.width;
	      var isScrolling = this.state.isScrolling;
	
	      var gridStyle = {
	        boxSizing: 'border-box',
	        direction: 'ltr',
	        height: autoHeight ? 'auto' : height,
	        position: 'relative',
	        width: width,
	        WebkitOverflowScrolling: 'touch',
	        willChange: 'transform'
	      };
	
	      var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
	      var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
	
	      // Force browser to hide scrollbars when we know they aren't necessary.
	      // Otherwise once scrollbars appear they may not disappear again.
	      // For more info see issue #116
	      var verticalScrollBarSize = totalRowsHeight > height ? this._scrollbarSize : 0;
	      var horizontalScrollBarSize = totalColumnsWidth > width ? this._scrollbarSize : 0;
	
	      // Also explicitly init styles to 'auto' if scrollbars are required.
	      // This works around an obscure edge case where external CSS styles have not yet been loaded,
	      // But an initial scroll index of offset is set as an external prop.
	      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
	      // This was originally reported via clauderic/react-infinite-calendar/issues/23
	      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
	      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';
	
	      var childrenToDisplay = this._childrenToDisplay;
	
	      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;
	
	      return _react2.default.createElement('div', {
	        ref: function ref(_ref3) {
	          _this4._scrollingContainer = _ref3;
	        },
	        'aria-label': this.props['aria-label'],
	        className: (0, _classnames2.default)('ReactVirtualized__Grid', className),
	        id: id,
	        onScroll: this._onScroll,
	        role: 'grid',
	        style: _extends({}, gridStyle, style),
	        tabIndex: tabIndex
	      }, childrenToDisplay.length > 0 && _react2.default.createElement('div', {
	        className: 'ReactVirtualized__Grid__innerScrollContainer',
	        style: _extends({
	          width: autoContainerWidth ? 'auto' : totalColumnsWidth,
	          height: totalRowsHeight,
	          maxWidth: totalColumnsWidth,
	          maxHeight: totalRowsHeight,
	          overflow: 'hidden',
	          pointerEvents: isScrolling ? 'none' : ''
	        }, containerStyle)
	      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	
	    /* ---------------------------- Helper methods ---------------------------- */
	
	  }, {
	    key: '_calculateChildrenToRender',
	    value: function _calculateChildrenToRender() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
	      var cellRenderer = props.cellRenderer;
	      var cellRangeRenderer = props.cellRangeRenderer;
	      var columnCount = props.columnCount;
	      var height = props.height;
	      var overscanColumnCount = props.overscanColumnCount;
	      var overscanRowCount = props.overscanRowCount;
	      var rowCount = props.rowCount;
	      var width = props.width;
	      var isScrolling = state.isScrolling;
	      var scrollDirectionHorizontal = state.scrollDirectionHorizontal;
	      var scrollDirectionVertical = state.scrollDirectionVertical;
	      var scrollLeft = state.scrollLeft;
	      var scrollTop = state.scrollTop;
	
	      this._childrenToDisplay = [];
	
	      // Render only enough columns and rows to cover the visible area of the grid.
	      if (height > 0 && width > 0) {
	        var visibleColumnIndices = this._columnSizeAndPositionManager.getVisibleCellRange({
	          containerSize: width,
	          offset: scrollLeft
	        });
	        var visibleRowIndices = this._rowSizeAndPositionManager.getVisibleCellRange({
	          containerSize: height,
	          offset: scrollTop
	        });
	
	        var horizontalOffsetAdjustment = this._columnSizeAndPositionManager.getOffsetAdjustment({
	          containerSize: width,
	          offset: scrollLeft
	        });
	        var verticalOffsetAdjustment = this._rowSizeAndPositionManager.getOffsetAdjustment({
	          containerSize: height,
	          offset: scrollTop
	        });
	
	        // Store for _invokeOnGridRenderedHelper()
	        this._renderedColumnStartIndex = visibleColumnIndices.start;
	        this._renderedColumnStopIndex = visibleColumnIndices.stop;
	        this._renderedRowStartIndex = visibleRowIndices.start;
	        this._renderedRowStopIndex = visibleRowIndices.stop;
	
	        var overscanColumnIndices = (0, _getOverscanIndices2.default)({
	          cellCount: columnCount,
	          overscanCellsCount: overscanColumnCount,
	          scrollDirection: scrollDirectionHorizontal,
	          startIndex: this._renderedColumnStartIndex,
	          stopIndex: this._renderedColumnStopIndex
	        });
	
	        var overscanRowIndices = (0, _getOverscanIndices2.default)({
	          cellCount: rowCount,
	          overscanCellsCount: overscanRowCount,
	          scrollDirection: scrollDirectionVertical,
	          startIndex: this._renderedRowStartIndex,
	          stopIndex: this._renderedRowStopIndex
	        });
	
	        // Store for _invokeOnGridRenderedHelper()
	        this._columnStartIndex = overscanColumnIndices.overscanStartIndex;
	        this._columnStopIndex = overscanColumnIndices.overscanStopIndex;
	        this._rowStartIndex = overscanRowIndices.overscanStartIndex;
	        this._rowStopIndex = overscanRowIndices.overscanStopIndex;
	
	        this._childrenToDisplay = cellRangeRenderer({
	          cellCache: this._cellCache,
	          cellRenderer: cellRenderer,
	          columnSizeAndPositionManager: this._columnSizeAndPositionManager,
	          columnStartIndex: this._columnStartIndex,
	          columnStopIndex: this._columnStopIndex,
	          horizontalOffsetAdjustment: horizontalOffsetAdjustment,
	          isScrolling: isScrolling,
	          rowSizeAndPositionManager: this._rowSizeAndPositionManager,
	          rowStartIndex: this._rowStartIndex,
	          rowStopIndex: this._rowStopIndex,
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop,
	          styleCache: this._styleCache,
	          verticalOffsetAdjustment: verticalOffsetAdjustment,
	          visibleColumnIndices: visibleColumnIndices,
	          visibleRowIndices: visibleRowIndices
	        });
	      }
	    }
	
	    /**
	     * Sets an :isScrolling flag for a small window of time.
	     * This flag is used to disable pointer events on the scrollable portion of the Grid.
	     * This prevents jerky/stuttery mouse-wheel scrolling.
	     */
	
	  }, {
	    key: '_debounceScrollEnded',
	    value: function _debounceScrollEnded() {
	      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;
	
	      if (this._disablePointerEventsTimeoutId) {
	        clearTimeout(this._disablePointerEventsTimeoutId);
	      }
	
	      this._disablePointerEventsTimeoutId = setTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);
	    }
	  }, {
	    key: '_debounceScrollEndedCallback',
	    value: function _debounceScrollEndedCallback() {
	      this._disablePointerEventsTimeoutId = null;
	
	      var styleCache = this._styleCache;
	
	      // Reset cell and style caches once scrolling stops.
	      // This makes Grid simpler to use (since cells commonly change).
	      // And it keeps the caches from growing too large.
	      // Performance is most sensitive when a user is scrolling.
	      this._cellCache = {};
	      this._styleCache = {};
	
	      // Copy over the visible cell styles so avoid unnecessary re-render.
	      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {
	        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {
	          var key = rowIndex + '-' + columnIndex;
	          this._styleCache[key] = styleCache[key];
	        }
	      }
	
	      this.setState({
	        isScrolling: false
	      });
	    }
	  }, {
	    key: '_getEstimatedColumnSize',
	    value: function _getEstimatedColumnSize(props) {
	      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;
	    }
	  }, {
	    key: '_getEstimatedRowSize',
	    value: function _getEstimatedRowSize(props) {
	      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;
	    }
	  }, {
	    key: '_invokeOnGridRenderedHelper',
	    value: function _invokeOnGridRenderedHelper() {
	      var onSectionRendered = this.props.onSectionRendered;
	
	      this._onGridRenderedMemoizer({
	        callback: onSectionRendered,
	        indices: {
	          columnOverscanStartIndex: this._columnStartIndex,
	          columnOverscanStopIndex: this._columnStopIndex,
	          columnStartIndex: this._renderedColumnStartIndex,
	          columnStopIndex: this._renderedColumnStopIndex,
	          rowOverscanStartIndex: this._rowStartIndex,
	          rowOverscanStopIndex: this._rowStopIndex,
	          rowStartIndex: this._renderedRowStartIndex,
	          rowStopIndex: this._renderedRowStopIndex
	        }
	      });
	    }
	  }, {
	    key: '_invokeOnScrollMemoizer',
	    value: function _invokeOnScrollMemoizer(_ref4) {
	      var _this5 = this;
	
	      var scrollLeft = _ref4.scrollLeft;
	      var scrollTop = _ref4.scrollTop;
	      var totalColumnsWidth = _ref4.totalColumnsWidth;
	      var totalRowsHeight = _ref4.totalRowsHeight;
	
	      this._onScrollMemoizer({
	        callback: function callback(_ref5) {
	          var scrollLeft = _ref5.scrollLeft;
	          var scrollTop = _ref5.scrollTop;
	          var _props5 = _this5.props;
	          var height = _props5.height;
	          var onScroll = _props5.onScroll;
	          var width = _props5.width;
	
	          onScroll({
	            clientHeight: height,
	            clientWidth: width,
	            scrollHeight: totalRowsHeight,
	            scrollLeft: scrollLeft,
	            scrollTop: scrollTop,
	            scrollWidth: totalColumnsWidth
	          });
	        },
	        indices: {
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop
	        }
	      });
	    }
	  }, {
	    key: '_setScrollPosition',
	    value: function _setScrollPosition(_ref6) {
	      var scrollLeft = _ref6.scrollLeft;
	      var scrollTop = _ref6.scrollTop;
	
	      var newState = {
	        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
	      };
	
	      if (scrollLeft >= 0) {
	        newState.scrollDirectionHorizontal = scrollLeft > this.state.scrollLeft ? _getOverscanIndices.SCROLL_DIRECTION_FORWARD : _getOverscanIndices.SCROLL_DIRECTION_BACKWARD;
	        newState.scrollLeft = scrollLeft;
	      }
	
	      if (scrollTop >= 0) {
	        newState.scrollDirectionVertical = scrollTop > this.state.scrollTop ? _getOverscanIndices.SCROLL_DIRECTION_FORWARD : _getOverscanIndices.SCROLL_DIRECTION_BACKWARD;
	        newState.scrollTop = scrollTop;
	      }
	
	      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
	        this.setState(newState);
	      }
	    }
	  }, {
	    key: '_wrapPropertyGetter',
	    value: function _wrapPropertyGetter(value) {
	      return value instanceof Function ? value : function () {
	        return value;
	      };
	    }
	  }, {
	    key: '_wrapSizeGetter',
	    value: function _wrapSizeGetter(size) {
	      return this._wrapPropertyGetter(size);
	    }
	  }, {
	    key: '_updateScrollLeftForScrollToColumn',
	    value: function _updateScrollLeftForScrollToColumn() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
	      var columnCount = props.columnCount;
	      var scrollToAlignment = props.scrollToAlignment;
	      var scrollToColumn = props.scrollToColumn;
	      var width = props.width;
	      var scrollLeft = state.scrollLeft;
	
	      if (scrollToColumn >= 0 && columnCount > 0) {
	        var targetIndex = Math.max(0, Math.min(columnCount - 1, scrollToColumn));
	
	        var calculatedScrollLeft = this._columnSizeAndPositionManager.getUpdatedOffsetForIndex({
	          align: scrollToAlignment,
	          containerSize: width,
	          currentOffset: scrollLeft,
	          targetIndex: targetIndex
	        });
	
	        if (scrollLeft !== calculatedScrollLeft) {
	          this._setScrollPosition({
	            scrollLeft: calculatedScrollLeft
	          });
	        }
	      }
	    }
	  }, {
	    key: '_updateScrollTopForScrollToRow',
	    value: function _updateScrollTopForScrollToRow() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
	      var height = props.height;
	      var rowCount = props.rowCount;
	      var scrollToAlignment = props.scrollToAlignment;
	      var scrollToRow = props.scrollToRow;
	      var scrollTop = state.scrollTop;
	
	      if (scrollToRow >= 0 && rowCount > 0) {
	        var targetIndex = Math.max(0, Math.min(rowCount - 1, scrollToRow));
	
	        var calculatedScrollTop = this._rowSizeAndPositionManager.getUpdatedOffsetForIndex({
	          align: scrollToAlignment,
	          containerSize: height,
	          currentOffset: scrollTop,
	          targetIndex: targetIndex
	        });
	
	        if (scrollTop !== calculatedScrollTop) {
	          this._setScrollPosition({
	            scrollTop: calculatedScrollTop
	          });
	        }
	      }
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(event) {
	      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
	      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
	      // See issue #404 for more information.
	      if (event.target !== this._scrollingContainer) {
	        return;
	      }
	
	      // Prevent pointer events from interrupting a smooth scroll
	      this._debounceScrollEnded();
	
	      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
	      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
	      // This causes a series of rapid renders that is slow for long lists.
	      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.
	      var _props6 = this.props;
	      var autoHeight = _props6.autoHeight;
	      var height = _props6.height;
	      var width = _props6.width;
	
	      var scrollbarSize = this._scrollbarSize;
	      var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
	      var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
	      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), event.target.scrollLeft);
	      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), event.target.scrollTop);
	
	      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
	      // Don't force a re-render if this is the case.
	      // The mouse may move faster then the animation frame does.
	      // Use requestAnimationFrame to avoid over-updating.
	      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
	        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.
	        var scrollDirectionHorizontal = scrollLeft > this.state.scrollLeft ? _getOverscanIndices.SCROLL_DIRECTION_FORWARD : _getOverscanIndices.SCROLL_DIRECTION_BACKWARD;
	        var scrollDirectionVertical = scrollTop > this.state.scrollTop ? _getOverscanIndices.SCROLL_DIRECTION_FORWARD : _getOverscanIndices.SCROLL_DIRECTION_BACKWARD;
	
	        var newState = {
	          isScrolling: true,
	          scrollDirectionHorizontal: scrollDirectionHorizontal,
	          scrollDirectionVertical: scrollDirectionVertical,
	          scrollLeft: scrollLeft,
	          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED
	        };
	
	        if (!autoHeight) {
	          newState.scrollTop = scrollTop;
	        }
	
	        this.setState(newState);
	      }
	
	      this._invokeOnScrollMemoizer({ scrollLeft: scrollLeft, scrollTop: scrollTop, totalColumnsWidth: totalColumnsWidth, totalRowsHeight: totalRowsHeight });
	    }
	  }]);
	
	  return Grid;
	}(_react.Component);
	
	Grid.defaultProps = {
	  'aria-label': 'grid',
	  cellRangeRenderer: _defaultCellRangeRenderer2.default,
	  estimatedColumnSize: 100,
	  estimatedRowSize: 30,
	  noContentRenderer: function noContentRenderer() {
	    return null;
	  },
	  onScroll: function onScroll() {
	    return null;
	  },
	  onSectionRendered: function onSectionRendered() {
	    return null;
	  },
	  overscanColumnCount: 0,
	  overscanRowCount: 10,
	  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
	  scrollToAlignment: 'auto',
	  style: {},
	  tabIndex: 0
	};
	exports.default = Grid;
	 true ? Grid.propTypes = {
	  'aria-label': _react.PropTypes.string,
	
	  /**
	   * Set the width of the inner scrollable container to 'auto'.
	   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.
	   */
	  autoContainerWidth: _react.PropTypes.bool,
	
	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: _react.PropTypes.bool,
	
	  /**
	   * Responsible for rendering a cell given an row and column index.
	   * Should implement the following interface: ({ columnIndex: number, rowIndex: number }): PropTypes.node
	   */
	  cellRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Responsible for rendering a group of cells given their index ranges.
	   * Should implement the following interface: ({
	   *   cellCache: Map,
	   *   cellRenderer: Function,
	   *   columnSizeAndPositionManager: CellSizeAndPositionManager,
	   *   columnStartIndex: number,
	   *   columnStopIndex: number,
	   *   isScrolling: boolean,
	   *   rowSizeAndPositionManager: CellSizeAndPositionManager,
	   *   rowStartIndex: number,
	   *   rowStopIndex: number,
	   *   scrollLeft: number,
	   *   scrollTop: number
	   * }): Array<PropTypes.node>
	   */
	  cellRangeRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Optional custom CSS class name to attach to root Grid element.
	   */
	  className: _react.PropTypes.string,
	
	  /**
	   * Number of columns in grid.
	   */
	  columnCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Either a fixed column width (number) or a function that returns the width of a column given its index.
	   * Should implement the following interface: (index: number): number
	   */
	  columnWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.func]).isRequired,
	
	  /** Optional inline style applied to inner cell-container */
	  containerStyle: _react.PropTypes.object,
	
	  /**
	   * Used to estimate the total width of a Grid before all of its columns have actually been measured.
	   * The estimated total width is adjusted as columns are rendered.
	   */
	  estimatedColumnSize: _react.PropTypes.number.isRequired,
	
	  /**
	   * Used to estimate the total height of a Grid before all of its rows have actually been measured.
	   * The estimated total height is adjusted as rows are rendered.
	   */
	  estimatedRowSize: _react.PropTypes.number.isRequired,
	
	  /**
	   * Height of Grid; this property determines the number of visible (vs virtualized) rows.
	   */
	  height: _react.PropTypes.number.isRequired,
	
	  /**
	   * Optional custom id to attach to root Grid element.
	   */
	  id: _react.PropTypes.string,
	
	  /**
	   * Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.
	   */
	  noContentRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void
	   */
	  onScroll: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback invoked with information about the section of the Grid that was just rendered.
	   * ({ columnStartIndex, columnStopIndex, rowStartIndex, rowStopIndex }): void
	   */
	  onSectionRendered: _react.PropTypes.func.isRequired,
	
	  /**
	   * Number of columns to render before/after the visible section of the grid.
	   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.
	   */
	  overscanColumnCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Number of rows to render above/below the visible section of the grid.
	   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.
	   */
	  overscanRowCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Either a fixed row height (number) or a function that returns the height of a row given its index.
	   * Should implement the following interface: ({ index: number }): number
	   */
	  rowHeight: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.func]).isRequired,
	
	  /**
	   * Number of rows in grid.
	   */
	  rowCount: _react.PropTypes.number.isRequired,
	
	  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */
	  scrollingResetTimeInterval: _react.PropTypes.number,
	
	  /** Horizontal offset. */
	  scrollLeft: _react.PropTypes.number,
	
	  /**
	   * Controls scroll-to-cell behavior of the Grid.
	   * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
	   * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
	   */
	  scrollToAlignment: _react.PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,
	
	  /**
	   * Column index to ensure visible (by forcefully scrolling if necessary)
	   */
	  scrollToColumn: _react.PropTypes.number,
	
	  /** Vertical offset. */
	  scrollTop: _react.PropTypes.number,
	
	  /**
	   * Row index to ensure visible (by forcefully scrolling if necessary)
	   */
	  scrollToRow: _react.PropTypes.number,
	
	  /** Optional inline style */
	  style: _react.PropTypes.object,
	
	  /** Tab index for focus */
	  tabIndex: _react.PropTypes.number,
	
	  /**
	   * Width of Grid; this property determines the number of visible (vs virtualized) columns.
	   */
	  width: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2291 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calculateSizeAndPositionDataAndUpdateScrollOffset;
	/**
	 * Helper method that determines when to recalculate row or column metadata.
	 *
	 * @param cellCount Number of rows or columns in the current axis
	 * @param cellsSize Width or height of cells for the current axis
	 * @param computeMetadataCallback Method to invoke if cell metadata should be recalculated
	 * @param computeMetadataCallbackProps Parameters to pass to :computeMetadataCallback
	 * @param nextCellsCount Newly updated number of rows or columns in the current axis
	 * @param nextCellsSize Newly updated width or height of cells for the current axis
	 * @param nextScrollToIndex Newly updated scroll-to-index
	 * @param scrollToIndex Scroll-to-index
	 * @param updateScrollOffsetForScrollToIndex Callback to invoke if the scroll position should be recalculated
	 */
	function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {
	  var cellCount = _ref.cellCount;
	  var cellSize = _ref.cellSize;
	  var computeMetadataCallback = _ref.computeMetadataCallback;
	  var computeMetadataCallbackProps = _ref.computeMetadataCallbackProps;
	  var nextCellsCount = _ref.nextCellsCount;
	  var nextCellSize = _ref.nextCellSize;
	  var nextScrollToIndex = _ref.nextScrollToIndex;
	  var scrollToIndex = _ref.scrollToIndex;
	  var updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;
	
	  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.
	  // In that event users should use the manual recompute methods to inform of changes.
	  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {
	    computeMetadataCallback(computeMetadataCallbackProps);
	
	    // Updated cell metadata may have hidden the previous scrolled-to item.
	    // In this case we should also update the scrollTop to ensure it stays visible.
	    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {
	      updateScrollOffsetForScrollToIndex();
	    }
	  }
	}

/***/ },
/* 2292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DEFAULT_MAX_SCROLL_SIZE = undefined;
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _CellSizeAndPositionManager = __webpack_require__(2293);
	
	var _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	/**
	 * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).
	 * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).
	 * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.
	 */
	var DEFAULT_MAX_SCROLL_SIZE = exports.DEFAULT_MAX_SCROLL_SIZE = 1500000;
	
	/**
	 * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.
	 */
	
	var ScalingCellSizeAndPositionManager = function () {
	  function ScalingCellSizeAndPositionManager(_ref) {
	    var _ref$maxScrollSize = _ref.maxScrollSize;
	    var maxScrollSize = _ref$maxScrollSize === undefined ? DEFAULT_MAX_SCROLL_SIZE : _ref$maxScrollSize;
	
	    var params = _objectWithoutProperties(_ref, ['maxScrollSize']);
	
	    _classCallCheck(this, ScalingCellSizeAndPositionManager);
	
	    // Favor composition over inheritance to simplify IE10 support
	    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);
	    this._maxScrollSize = maxScrollSize;
	  }
	
	  _createClass(ScalingCellSizeAndPositionManager, [{
	    key: 'configure',
	    value: function configure(params) {
	      this._cellSizeAndPositionManager.configure(params);
	    }
	  }, {
	    key: 'getCellCount',
	    value: function getCellCount() {
	      return this._cellSizeAndPositionManager.getCellCount();
	    }
	  }, {
	    key: 'getEstimatedCellSize',
	    value: function getEstimatedCellSize() {
	      return this._cellSizeAndPositionManager.getEstimatedCellSize();
	    }
	  }, {
	    key: 'getLastMeasuredIndex',
	    value: function getLastMeasuredIndex() {
	      return this._cellSizeAndPositionManager.getLastMeasuredIndex();
	    }
	
	    /**
	     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.
	     * The offset passed to this function is scalled (safe) as well.
	     */
	
	  }, {
	    key: 'getOffsetAdjustment',
	    value: function getOffsetAdjustment(_ref2) {
	      var containerSize = _ref2.containerSize;
	      var offset = _ref2.offset;
	
	      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
	      var safeTotalSize = this.getTotalSize();
	      var offsetPercentage = this._getOffsetPercentage({
	        containerSize: containerSize,
	        offset: offset,
	        totalSize: safeTotalSize
	      });
	
	      return Math.round(offsetPercentage * (safeTotalSize - totalSize));
	    }
	  }, {
	    key: 'getSizeAndPositionOfCell',
	    value: function getSizeAndPositionOfCell(index) {
	      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);
	    }
	  }, {
	    key: 'getSizeAndPositionOfLastMeasuredCell',
	    value: function getSizeAndPositionOfLastMeasuredCell() {
	      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
	    }
	
	    /** See CellSizeAndPositionManager#getTotalSize */
	
	  }, {
	    key: 'getTotalSize',
	    value: function getTotalSize() {
	      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
	    }
	
	    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */
	
	  }, {
	    key: 'getUpdatedOffsetForIndex',
	    value: function getUpdatedOffsetForIndex(_ref3) {
	      var _ref3$align = _ref3.align;
	      var align = _ref3$align === undefined ? 'auto' : _ref3$align;
	      var containerSize = _ref3.containerSize;
	      var currentOffset = _ref3.currentOffset;
	      var targetIndex = _ref3.targetIndex;
	      var totalSize = _ref3.totalSize;
	
	      currentOffset = this._safeOffsetToOffset({
	        containerSize: containerSize,
	        offset: currentOffset
	      });
	
	      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
	        align: align,
	        containerSize: containerSize,
	        currentOffset: currentOffset,
	        targetIndex: targetIndex,
	        totalSize: totalSize
	      });
	
	      return this._offsetToSafeOffset({
	        containerSize: containerSize,
	        offset: offset
	      });
	    }
	
	    /** See CellSizeAndPositionManager#getVisibleCellRange */
	
	  }, {
	    key: 'getVisibleCellRange',
	    value: function getVisibleCellRange(_ref4) {
	      var containerSize = _ref4.containerSize;
	      var offset = _ref4.offset;
	
	      offset = this._safeOffsetToOffset({
	        containerSize: containerSize,
	        offset: offset
	      });
	
	      return this._cellSizeAndPositionManager.getVisibleCellRange({
	        containerSize: containerSize,
	        offset: offset
	      });
	    }
	  }, {
	    key: 'resetCell',
	    value: function resetCell(index) {
	      this._cellSizeAndPositionManager.resetCell(index);
	    }
	  }, {
	    key: '_getOffsetPercentage',
	    value: function _getOffsetPercentage(_ref5) {
	      var containerSize = _ref5.containerSize;
	      var offset = _ref5.offset;
	      var totalSize = _ref5.totalSize;
	
	      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);
	    }
	  }, {
	    key: '_offsetToSafeOffset',
	    value: function _offsetToSafeOffset(_ref6) {
	      var containerSize = _ref6.containerSize;
	      var offset = _ref6.offset;
	
	      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
	      var safeTotalSize = this.getTotalSize();
	
	      if (totalSize === safeTotalSize) {
	        return offset;
	      } else {
	        var offsetPercentage = this._getOffsetPercentage({
	          containerSize: containerSize,
	          offset: offset,
	          totalSize: totalSize
	        });
	
	        return Math.round(offsetPercentage * (safeTotalSize - containerSize));
	      }
	    }
	  }, {
	    key: '_safeOffsetToOffset',
	    value: function _safeOffsetToOffset(_ref7) {
	      var containerSize = _ref7.containerSize;
	      var offset = _ref7.offset;
	
	      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
	      var safeTotalSize = this.getTotalSize();
	
	      if (totalSize === safeTotalSize) {
	        return offset;
	      } else {
	        var offsetPercentage = this._getOffsetPercentage({
	          containerSize: containerSize,
	          offset: offset,
	          totalSize: safeTotalSize
	        });
	
	        return Math.round(offsetPercentage * (totalSize - containerSize));
	      }
	    }
	  }]);
	
	  return ScalingCellSizeAndPositionManager;
	}();
	
	exports.default = ScalingCellSizeAndPositionManager;

/***/ },
/* 2293 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	/**
	 * Just-in-time calculates and caches size and position information for a collection of cells.
	 */
	var CellSizeAndPositionManager = function () {
	  function CellSizeAndPositionManager(_ref) {
	    var cellCount = _ref.cellCount;
	    var cellSizeGetter = _ref.cellSizeGetter;
	    var estimatedCellSize = _ref.estimatedCellSize;
	
	    _classCallCheck(this, CellSizeAndPositionManager);
	
	    this._cellSizeGetter = cellSizeGetter;
	    this._cellCount = cellCount;
	    this._estimatedCellSize = estimatedCellSize;
	
	    // Cache of size and position data for cells, mapped by cell index.
	    // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex
	    this._cellSizeAndPositionData = {};
	
	    // Measurements for cells up to this index can be trusted; cells afterward should be estimated.
	    this._lastMeasuredIndex = -1;
	  }
	
	  _createClass(CellSizeAndPositionManager, [{
	    key: 'configure',
	    value: function configure(_ref2) {
	      var cellCount = _ref2.cellCount;
	      var estimatedCellSize = _ref2.estimatedCellSize;
	
	      this._cellCount = cellCount;
	      this._estimatedCellSize = estimatedCellSize;
	    }
	  }, {
	    key: 'getCellCount',
	    value: function getCellCount() {
	      return this._cellCount;
	    }
	  }, {
	    key: 'getEstimatedCellSize',
	    value: function getEstimatedCellSize() {
	      return this._estimatedCellSize;
	    }
	  }, {
	    key: 'getLastMeasuredIndex',
	    value: function getLastMeasuredIndex() {
	      return this._lastMeasuredIndex;
	    }
	
	    /**
	     * This method returns the size and position for the cell at the specified index.
	     * It just-in-time calculates (or used cached values) for cells leading up to the index.
	     */
	
	  }, {
	    key: 'getSizeAndPositionOfCell',
	    value: function getSizeAndPositionOfCell(index) {
	      if (index < 0 || index >= this._cellCount) {
	        throw Error('Requested index ' + index + ' is outside of range 0..' + this._cellCount);
	      }
	
	      if (index > this._lastMeasuredIndex) {
	        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
	        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;
	
	        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {
	          var _size = this._cellSizeGetter({ index: i });
	
	          if (_size == null || isNaN(_size)) {
	            throw Error('Invalid size returned for cell ' + i + ' of value ' + _size);
	          }
	
	          this._cellSizeAndPositionData[i] = {
	            offset: _offset,
	            size: _size
	          };
	
	          _offset += _size;
	        }
	
	        this._lastMeasuredIndex = index;
	      }
	
	      return this._cellSizeAndPositionData[index];
	    }
	  }, {
	    key: 'getSizeAndPositionOfLastMeasuredCell',
	    value: function getSizeAndPositionOfLastMeasuredCell() {
	      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
	        offset: 0,
	        size: 0
	      };
	    }
	
	    /**
	     * Total size of all cells being measured.
	     * This value will be completedly estimated initially.
	     * As cells as measured the estimate will be updated.
	     */
	
	  }, {
	    key: 'getTotalSize',
	    value: function getTotalSize() {
	      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
	
	      return lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size + (this._cellCount - this._lastMeasuredIndex - 1) * this._estimatedCellSize;
	    }
	
	    /**
	     * Determines a new offset that ensures a certain cell is visible, given the current offset.
	     * If the cell is already visible then the current offset will be returned.
	     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
	     *
	     * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
	     * @param containerSize Size (width or height) of the container viewport
	     * @param currentOffset Container's current (x or y) offset
	     * @param totalSize Total size (width or height) of all cells
	     * @return Offset to use to ensure the specified cell is visible
	     */
	
	  }, {
	    key: 'getUpdatedOffsetForIndex',
	    value: function getUpdatedOffsetForIndex(_ref3) {
	      var _ref3$align = _ref3.align;
	      var align = _ref3$align === undefined ? 'auto' : _ref3$align;
	      var containerSize = _ref3.containerSize;
	      var currentOffset = _ref3.currentOffset;
	      var targetIndex = _ref3.targetIndex;
	
	      if (containerSize <= 0) {
	        return 0;
	      }
	
	      var datum = this.getSizeAndPositionOfCell(targetIndex);
	      var maxOffset = datum.offset;
	      var minOffset = maxOffset - containerSize + datum.size;
	
	      var idealOffset = void 0;
	
	      switch (align) {
	        case 'start':
	          idealOffset = maxOffset;
	          break;
	        case 'end':
	          idealOffset = minOffset;
	          break;
	        case 'center':
	          idealOffset = maxOffset - (containerSize - datum.size) / 2;
	          break;
	        default:
	          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));
	          break;
	      }
	
	      var totalSize = this.getTotalSize();
	
	      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));
	    }
	  }, {
	    key: 'getVisibleCellRange',
	    value: function getVisibleCellRange(_ref4) {
	      var containerSize = _ref4.containerSize;
	      var offset = _ref4.offset;
	
	      var totalSize = this.getTotalSize();
	
	      if (totalSize === 0) {
	        return {};
	      }
	
	      var maxOffset = offset + containerSize;
	      var start = this._findNearestCell(offset);
	
	      var datum = this.getSizeAndPositionOfCell(start);
	      offset = datum.offset + datum.size;
	
	      var stop = start;
	
	      while (offset < maxOffset && stop < this._cellCount - 1) {
	        stop++;
	
	        offset += this.getSizeAndPositionOfCell(stop).size;
	      }
	
	      return {
	        start: start,
	        stop: stop
	      };
	    }
	
	    /**
	     * Clear all cached values for cells after the specified index.
	     * This method should be called for any cell that has changed its size.
	     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.
	     */
	
	  }, {
	    key: 'resetCell',
	    value: function resetCell(index) {
	      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);
	    }
	  }, {
	    key: '_binarySearch',
	    value: function _binarySearch(_ref5) {
	      var high = _ref5.high;
	      var low = _ref5.low;
	      var offset = _ref5.offset;
	
	      var middle = void 0;
	      var currentOffset = void 0;
	
	      while (low <= high) {
	        middle = low + Math.floor((high - low) / 2);
	        currentOffset = this.getSizeAndPositionOfCell(middle).offset;
	
	        if (currentOffset === offset) {
	          return middle;
	        } else if (currentOffset < offset) {
	          low = middle + 1;
	        } else if (currentOffset > offset) {
	          high = middle - 1;
	        }
	      }
	
	      if (low > 0) {
	        return low - 1;
	      }
	    }
	  }, {
	    key: '_exponentialSearch',
	    value: function _exponentialSearch(_ref6) {
	      var index = _ref6.index;
	      var offset = _ref6.offset;
	
	      var interval = 1;
	
	      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {
	        index += interval;
	        interval *= 2;
	      }
	
	      return this._binarySearch({
	        high: Math.min(index, this._cellCount - 1),
	        low: Math.floor(index / 2),
	        offset: offset
	      });
	    }
	
	    /**
	     * Searches for the cell (index) nearest the specified offset.
	     *
	     * If no exact match is found the next lowest cell index will be returned.
	     * This allows partially visible cells (with offsets just before/above the fold) to be visible.
	     */
	
	  }, {
	    key: '_findNearestCell',
	    value: function _findNearestCell(offset) {
	      if (isNaN(offset)) {
	        throw Error('Invalid offset ' + offset + ' specified');
	      }
	
	      // Our search algorithms find the nearest match at or below the specified offset.
	      // So make sure the offset is at least 0 or no match will be found.
	      offset = Math.max(0, offset);
	
	      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
	      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);
	
	      if (lastMeasuredCellSizeAndPosition.offset >= offset) {
	        // If we've already measured cells within this range just use a binary search as it's faster.
	        return this._binarySearch({
	          high: lastMeasuredIndex,
	          low: 0,
	          offset: offset
	        });
	      } else {
	        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
	        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.
	        // The overall complexity for this approach is O(log n).
	        return this._exponentialSearch({
	          index: lastMeasuredIndex,
	          offset: offset
	        });
	      }
	    }
	  }]);
	
	  return CellSizeAndPositionManager;
	}();
	
	exports.default = CellSizeAndPositionManager;

/***/ },
/* 2294 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getOverscanIndices;
	var SCROLL_DIRECTION_BACKWARD = exports.SCROLL_DIRECTION_BACKWARD = -1;
	var SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_FORWARD = 1;
	
	/**
	 * Calculates the number of cells to overscan before and after a specified range.
	 * This function ensures that overscanning doesn't exceed the available cells.
	 *
	 * @param cellCount Number of rows or columns in the current axis
	 * @param scrollDirection One of SCROLL_DIRECTION_BACKWARD
	 * @param overscanCellsCount Maximum number of cells to over-render in either direction
	 * @param startIndex Begin of range of visible cells
	 * @param stopIndex End of range of visible cells
	 */
	function getOverscanIndices(_ref) {
	  var cellCount = _ref.cellCount;
	  var overscanCellsCount = _ref.overscanCellsCount;
	  var scrollDirection = _ref.scrollDirection;
	  var startIndex = _ref.startIndex;
	  var stopIndex = _ref.stopIndex;
	
	  var overscanStartIndex = void 0;
	  var overscanStopIndex = void 0;
	
	  switch (scrollDirection) {
	    case SCROLL_DIRECTION_FORWARD:
	      overscanStartIndex = startIndex;
	      overscanStopIndex = stopIndex + overscanCellsCount;
	      break;
	    case SCROLL_DIRECTION_BACKWARD:
	      overscanStartIndex = startIndex - overscanCellsCount;
	      overscanStopIndex = stopIndex;
	      break;
	  }
	
	  return {
	    overscanStartIndex: Math.max(0, overscanStartIndex),
	    overscanStopIndex: Math.min(cellCount - 1, overscanStopIndex)
	  };
	}

/***/ },
/* 2295 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = updateScrollIndexHelper;
	/**
	 * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.
	 * This function also ensures that the scroll ofset isn't past the last column/row of cells.
	 *
	 * @param cellsSize Width or height of cells for the current axis
	 * @param cellSizeAndPositionManager Manages size and position metadata of cells
	 * @param previousCellsCount Previous number of rows or columns
	 * @param previousCellsSize Previous width or height of cells
	 * @param previousScrollToIndex Previous scroll-to-index
	 * @param previousSize Previous width or height of the virtualized container
	 * @param scrollOffset Current scrollLeft or scrollTop
	 * @param scrollToIndex Scroll-to-index
	 * @param size Width or height of the virtualized container
	 * @param updateScrollIndexCallback Callback to invoke with an scroll-to-index value
	 */
	function updateScrollIndexHelper(_ref) {
	  var cellSize = _ref.cellSize;
	  var cellSizeAndPositionManager = _ref.cellSizeAndPositionManager;
	  var previousCellsCount = _ref.previousCellsCount;
	  var previousCellSize = _ref.previousCellSize;
	  var previousScrollToAlignment = _ref.previousScrollToAlignment;
	  var previousScrollToIndex = _ref.previousScrollToIndex;
	  var previousSize = _ref.previousSize;
	  var scrollOffset = _ref.scrollOffset;
	  var scrollToAlignment = _ref.scrollToAlignment;
	  var scrollToIndex = _ref.scrollToIndex;
	  var size = _ref.size;
	  var updateScrollIndexCallback = _ref.updateScrollIndexCallback;
	
	  var cellCount = cellSizeAndPositionManager.getCellCount();
	  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;
	  var sizeHasChanged = size !== previousSize || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize;
	
	  // If we have a new scroll target OR if height/row-height has changed,
	  // We should ensure that the scroll target is visible.
	  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {
	    updateScrollIndexCallback(scrollToIndex);
	
	    // If we don't have a selected item but list size or number of children have decreased,
	    // Make sure we aren't scrolled too far past the current content.
	  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {
	    // We need to ensure that the current scroll offset is still within the collection's range.
	    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.
	    // Just check to make sure we're still okay.
	    // Only adjust the scroll position if we've scrolled below the last set of rows.
	    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {
	      updateScrollIndexCallback(cellCount - 1);
	    }
	  }
	}

/***/ },
/* 2296 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = defaultCellRangeRenderer;
	
	/**
	 * Default implementation of cellRangeRenderer used by Grid.
	 * This renderer supports cell-caching while the user is scrolling.
	 */
	function defaultCellRangeRenderer(_ref) {
	  var cellCache = _ref.cellCache;
	  var cellRenderer = _ref.cellRenderer;
	  var columnSizeAndPositionManager = _ref.columnSizeAndPositionManager;
	  var columnStartIndex = _ref.columnStartIndex;
	  var columnStopIndex = _ref.columnStopIndex;
	  var horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment;
	  var isScrolling = _ref.isScrolling;
	  var rowSizeAndPositionManager = _ref.rowSizeAndPositionManager;
	  var rowStartIndex = _ref.rowStartIndex;
	  var rowStopIndex = _ref.rowStopIndex;
	  var scrollLeft = _ref.scrollLeft;
	  var scrollTop = _ref.scrollTop;
	  var styleCache = _ref.styleCache;
	  var verticalOffsetAdjustment = _ref.verticalOffsetAdjustment;
	  var visibleColumnIndices = _ref.visibleColumnIndices;
	  var visibleRowIndices = _ref.visibleRowIndices;
	
	  var renderedCells = [];
	  var offsetAdjusted = verticalOffsetAdjustment || horizontalOffsetAdjustment;
	  var canCacheStyle = !isScrolling || !offsetAdjusted;
	
	  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
	    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);
	
	    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
	      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);
	      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;
	      var key = rowIndex + '-' + columnIndex;
	      var style = void 0;
	
	      // Cache style objects so shallow-compare doesn't re-render unnecessarily.
	      if (canCacheStyle && styleCache[key]) {
	        style = styleCache[key];
	      } else {
	        style = {
	          height: rowDatum.size,
	          left: columnDatum.offset + horizontalOffsetAdjustment,
	          position: 'absolute',
	          top: rowDatum.offset + verticalOffsetAdjustment,
	          width: columnDatum.size
	        };
	
	        styleCache[key] = style;
	      }
	
	      var cellRendererParams = {
	        columnIndex: columnIndex,
	        isScrolling: isScrolling,
	        isVisible: isVisible,
	        key: key,
	        rowIndex: rowIndex,
	        style: style
	      };
	
	      var renderedCell = void 0;
	
	      // Avoid re-creating cells while scrolling.
	      // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
	      // If a scroll is in progress- cache and reuse cells.
	      // This cache will be thrown away once scrolling completes.
	      // However if we are scaling scroll positions and sizes, we should also avoid caching.
	      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.
	      // For more info refer to issue #395
	      if (isScrolling && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {
	        if (!cellCache[key]) {
	          cellCache[key] = cellRenderer(cellRendererParams);
	        }
	
	        renderedCell = cellCache[key];
	
	        // If the user is no longer scrolling, don't cache cells.
	        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.
	      } else {
	        renderedCell = cellRenderer(cellRendererParams);
	      }
	
	      if (renderedCell == null || renderedCell === false) {
	        continue;
	      }
	
	      renderedCells.push(renderedCell);
	    }
	  }
	
	  return renderedCells;
	}

/***/ },
/* 2297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	exports.default = defaultRowRenderer;
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	/**
	 * Default row renderer for Table.
	 */
	function defaultRowRenderer(_ref) {
	  var className = _ref.className;
	  var columns = _ref.columns;
	  var index = _ref.index;
	  var isScrolling = _ref.isScrolling;
	  var key = _ref.key;
	  var onRowClick = _ref.onRowClick;
	  var onRowDoubleClick = _ref.onRowDoubleClick;
	  var onRowMouseOver = _ref.onRowMouseOver;
	  var onRowMouseOut = _ref.onRowMouseOut;
	  var rowData = _ref.rowData;
	  var style = _ref.style;
	
	  var a11yProps = {};
	
	  if (onRowClick || onRowDoubleClick || onRowMouseOver || onRowMouseOut) {
	    a11yProps['aria-label'] = 'row';
	    a11yProps.role = 'row';
	    a11yProps.tabIndex = 0;
	
	    if (onRowClick) {
	      a11yProps.onClick = function () {
	        return onRowClick({ index: index, rowData: rowData });
	      };
	    }
	    if (onRowDoubleClick) {
	      a11yProps.onDoubleClick = function () {
	        return onRowDoubleClick({ index: index, rowData: rowData });
	      };
	    }
	    if (onRowMouseOut) {
	      a11yProps.onMouseOut = function () {
	        return onRowMouseOut({ index: index, rowData: rowData });
	      };
	    }
	    if (onRowMouseOver) {
	      a11yProps.onMouseOver = function () {
	        return onRowMouseOver({ index: index, rowData: rowData });
	      };
	    }
	  }
	
	  return _react2.default.createElement('div', _extends({}, a11yProps, {
	    className: className,
	    key: key,
	    style: style
	  }), columns);
	}

/***/ },
/* 2298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.InfiniteLoader = exports.default = undefined;
	
	var _InfiniteLoader2 = __webpack_require__(2299);
	
	var _InfiniteLoader3 = _interopRequireDefault(_InfiniteLoader2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _InfiniteLoader3.default;
	exports.InfiniteLoader = _InfiniteLoader3.default;

/***/ },
/* 2299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	exports.isRangeVisible = isRangeVisible;
	exports.scanForUnloadedRanges = scanForUnloadedRanges;
	exports.forceUpdateReactVirtualizedComponent = forceUpdateReactVirtualizedComponent;
	
	var _react = __webpack_require__(301);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _createCallbackMemoizer = __webpack_require__(2274);
	
	var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Higher-order component that manages lazy-loading for "infinite" data.
	 * This component decorates a virtual component and just-in-time prefetches rows as a user scrolls.
	 * It is intended as a convenience component; fork it if you'd like finer-grained control over data-loading.
	 */
	var InfiniteLoader = function (_Component) {
	  _inherits(InfiniteLoader, _Component);
	
	  function InfiniteLoader(props, context) {
	    _classCallCheck(this, InfiniteLoader);
	
	    var _this = _possibleConstructorReturn(this, (InfiniteLoader.__proto__ || Object.getPrototypeOf(InfiniteLoader)).call(this, props, context));
	
	    _this._loadMoreRowsMemoizer = (0, _createCallbackMemoizer2.default)();
	
	    _this._onRowsRendered = _this._onRowsRendered.bind(_this);
	    _this._registerChild = _this._registerChild.bind(_this);
	    return _this;
	  }
	
	  _createClass(InfiniteLoader, [{
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;
	
	      return children({
	        onRowsRendered: this._onRowsRendered,
	        registerChild: this._registerChild
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_loadUnloadedRanges',
	    value: function _loadUnloadedRanges(unloadedRanges) {
	      var _this2 = this;
	
	      var loadMoreRows = this.props.loadMoreRows;
	
	      unloadedRanges.forEach(function (unloadedRange) {
	        var promise = loadMoreRows(unloadedRange);
	        if (promise) {
	          promise.then(function () {
	            // Refresh the visible rows if any of them have just been loaded.
	            // Otherwise they will remain in their unloaded visual state.
	            if (isRangeVisible({
	              lastRenderedStartIndex: _this2._lastRenderedStartIndex,
	              lastRenderedStopIndex: _this2._lastRenderedStopIndex,
	              startIndex: unloadedRange.startIndex,
	              stopIndex: unloadedRange.stopIndex
	            })) {
	              if (_this2._registeredChild) {
	                forceUpdateReactVirtualizedComponent(_this2._registeredChild);
	              }
	            }
	          });
	        }
	      });
	    }
	  }, {
	    key: '_onRowsRendered',
	    value: function _onRowsRendered(_ref) {
	      var _this3 = this;
	
	      var startIndex = _ref.startIndex;
	      var stopIndex = _ref.stopIndex;
	      var _props = this.props;
	      var isRowLoaded = _props.isRowLoaded;
	      var minimumBatchSize = _props.minimumBatchSize;
	      var rowCount = _props.rowCount;
	      var threshold = _props.threshold;
	
	      this._lastRenderedStartIndex = startIndex;
	      this._lastRenderedStopIndex = stopIndex;
	
	      var unloadedRanges = scanForUnloadedRanges({
	        isRowLoaded: isRowLoaded,
	        minimumBatchSize: minimumBatchSize,
	        rowCount: rowCount,
	        startIndex: Math.max(0, startIndex - threshold),
	        stopIndex: Math.min(rowCount - 1, stopIndex + threshold)
	      });
	
	      // For memoize comparison
	      var squashedUnloadedRanges = unloadedRanges.reduce(function (reduced, unloadedRange) {
	        return reduced.concat([unloadedRange.startIndex, unloadedRange.stopIndex]);
	      }, []);
	
	      this._loadMoreRowsMemoizer({
	        callback: function callback() {
	          _this3._loadUnloadedRanges(unloadedRanges);
	        },
	        indices: { squashedUnloadedRanges: squashedUnloadedRanges }
	      });
	    }
	  }, {
	    key: '_registerChild',
	    value: function _registerChild(registeredChild) {
	      this._registeredChild = registeredChild;
	    }
	  }]);
	
	  return InfiniteLoader;
	}(_react.Component);
	
	/**
	 * Determines if the specified start/stop range is visible based on the most recently rendered range.
	 */
	
	InfiniteLoader.defaultProps = {
	  minimumBatchSize: 10,
	  rowCount: 0,
	  threshold: 15
	};
	exports.default = InfiniteLoader;
	 true ? InfiniteLoader.propTypes = {
	  /**
	   * Function responsible for rendering a virtualized component.
	   * This function should implement the following signature:
	   * ({ onRowsRendered, registerChild }) => PropTypes.element
	   *
	   * The specified :onRowsRendered function should be passed through to the child's :onRowsRendered property.
	   * The :registerChild callback should be set as the virtualized component's :ref.
	   */
	  children: _react.PropTypes.func.isRequired,
	
	  /**
	   * Function responsible for tracking the loaded state of each row.
	   * It should implement the following signature: ({ index: number }): boolean
	   */
	  isRowLoaded: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback to be invoked when more rows must be loaded.
	   * It should implement the following signature: ({ startIndex, stopIndex }): Promise
	   * The returned Promise should be resolved once row data has finished loading.
	   * It will be used to determine when to refresh the list with the newly-loaded data.
	   * This callback may be called multiple times in reaction to a single scroll event.
	   */
	  loadMoreRows: _react.PropTypes.func.isRequired,
	
	  /**
	   * Minimum number of rows to be loaded at a time.
	   * This property can be used to batch requests to reduce HTTP requests.
	   */
	  minimumBatchSize: _react.PropTypes.number.isRequired,
	
	  /**
	   * Number of rows in list; can be arbitrary high number if actual number is unknown.
	   */
	  rowCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Threshold at which to pre-fetch data.
	   * A threshold X means that data will start loading when a user scrolls within X rows.
	   * This value defaults to 15.
	   */
	  threshold: _react.PropTypes.number.isRequired
	} : void 0;
	function isRangeVisible(_ref2) {
	  var lastRenderedStartIndex = _ref2.lastRenderedStartIndex;
	  var lastRenderedStopIndex = _ref2.lastRenderedStopIndex;
	  var startIndex = _ref2.startIndex;
	  var stopIndex = _ref2.stopIndex;
	
	  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);
	}
	
	/**
	 * Returns all of the ranges within a larger range that contain unloaded rows.
	 */
	function scanForUnloadedRanges(_ref3) {
	  var isRowLoaded = _ref3.isRowLoaded;
	  var minimumBatchSize = _ref3.minimumBatchSize;
	  var rowCount = _ref3.rowCount;
	  var startIndex = _ref3.startIndex;
	  var stopIndex = _ref3.stopIndex;
	
	  var unloadedRanges = [];
	
	  var rangeStartIndex = null;
	  var rangeStopIndex = null;
	
	  for (var index = startIndex; index <= stopIndex; index++) {
	    var loaded = isRowLoaded({ index: index });
	
	    if (!loaded) {
	      rangeStopIndex = index;
	      if (rangeStartIndex === null) {
	        rangeStartIndex = index;
	      }
	    } else if (rangeStopIndex !== null) {
	      unloadedRanges.push({
	        startIndex: rangeStartIndex,
	        stopIndex: rangeStopIndex
	      });
	
	      rangeStartIndex = rangeStopIndex = null;
	    }
	  }
	
	  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.
	  // Scan forward to try filling our :minimumBatchSize.
	  if (rangeStopIndex !== null) {
	    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), rowCount - 1);
	
	    for (var _index = rangeStopIndex + 1; _index <= potentialStopIndex; _index++) {
	      if (!isRowLoaded({ index: _index })) {
	        rangeStopIndex = _index;
	      } else {
	        break;
	      }
	    }
	
	    unloadedRanges.push({
	      startIndex: rangeStartIndex,
	      stopIndex: rangeStopIndex
	    });
	  }
	
	  // Check to see if our first range ended prematurely.
	  // In this case we should scan backwards to try filling our :minimumBatchSize.
	  if (unloadedRanges.length) {
	    var firstUnloadedRange = unloadedRanges[0];
	
	    while (firstUnloadedRange.stopIndex - firstUnloadedRange.startIndex + 1 < minimumBatchSize && firstUnloadedRange.startIndex > 0) {
	      var _index2 = firstUnloadedRange.startIndex - 1;
	
	      if (!isRowLoaded({ index: _index2 })) {
	        firstUnloadedRange.startIndex = _index2;
	      } else {
	        break;
	      }
	    }
	  }
	
	  return unloadedRanges;
	}
	
	/**
	 * Since RV components use shallowCompare we need to force a render (even though props haven't changed).
	 * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.
	 * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,
	 * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.
	 * Else the inner Grid will not be re-rendered and visuals may be stale.
	 *
	 * Additionally, while a Grid is scrolling the cells can be cached,
	 * So it's important to invalidate that cache by recalculating sizes
	 * before forcing a rerender.
	 */
	function forceUpdateReactVirtualizedComponent(component) {
	  var recomputeSize = typeof component.recomputeGridSize === 'function' ? component.recomputeGridSize : component.recomputeRowHeights;
	
	  if (recomputeSize) {
	    recomputeSize.call(component);
	  } else {
	    component.forceUpdate();
	  }
	}

/***/ },
/* 2300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.List = exports.default = undefined;
	
	var _List2 = __webpack_require__(2301);
	
	var _List3 = _interopRequireDefault(_List2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _List3.default;
	exports.List = _List3.default;

/***/ },
/* 2301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _Grid = __webpack_require__(2289);
	
	var _Grid2 = _interopRequireDefault(_Grid);
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * It is inefficient to create and manage a large list of DOM elements within a scrolling container
	 * if only a few of those elements are visible. The primary purpose of this component is to improve
	 * performance by only rendering the DOM nodes that a user is able to see based on their current
	 * scroll position.
	 *
	 * This component renders a virtualized list of elements with either fixed or dynamic heights.
	 */
	var List = function (_Component) {
	  _inherits(List, _Component);
	
	  function List(props, context) {
	    _classCallCheck(this, List);
	
	    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props, context));
	
	    _this._cellRenderer = _this._cellRenderer.bind(_this);
	    _this._onScroll = _this._onScroll.bind(_this);
	    _this._onSectionRendered = _this._onSectionRendered.bind(_this);
	    return _this;
	  }
	
	  _createClass(List, [{
	    key: 'forceUpdateGrid',
	    value: function forceUpdateGrid() {
	      this.Grid.forceUpdate();
	    }
	
	    /** See Grid#measureAllCells */
	
	  }, {
	    key: 'measureAllRows',
	    value: function measureAllRows() {
	      this.Grid.measureAllCells();
	    }
	
	    /** See Grid#recomputeGridSize */
	
	  }, {
	    key: 'recomputeRowHeights',
	    value: function recomputeRowHeights() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      this.Grid.recomputeGridSize({
	        rowIndex: index
	      });
	    }
	
	    /** See Grid#scrollToCell */
	
	  }, {
	    key: 'scrollToRow',
	    value: function scrollToRow() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      this.Grid.scrollToCell({
	        columnIndex: 0,
	        rowIndex: index
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props = this.props;
	      var className = _props.className;
	      var noRowsRenderer = _props.noRowsRenderer;
	      var scrollToIndex = _props.scrollToIndex;
	      var width = _props.width;
	
	      var classNames = (0, _classnames2.default)('ReactVirtualized__List', className);
	
	      return _react2.default.createElement(_Grid2.default, _extends({}, this.props, {
	        autoContainerWidth: true,
	        cellRenderer: this._cellRenderer,
	        className: classNames,
	        columnWidth: width,
	        columnCount: 1,
	        noContentRenderer: noRowsRenderer,
	        onScroll: this._onScroll,
	        onSectionRendered: this._onSectionRendered,
	        ref: function ref(_ref) {
	          _this2.Grid = _ref;
	        },
	        scrollToRow: scrollToIndex
	      }));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_cellRenderer',
	    value: function _cellRenderer(_ref2) {
	      var rowIndex = _ref2.rowIndex;
	      var style = _ref2.style;
	
	      var rest = _objectWithoutProperties(_ref2, ['rowIndex', 'style']);
	
	      var rowRenderer = this.props.rowRenderer;
	
	      // TRICKY The style object is sometimes cached by Grid.
	      // This prevents new style objects from bypassing shallowCompare().
	      // However as of React 16, style props are auto-frozen (at least in dev mode)
	      // Check to make sure we can still modify the style before proceeding.
	      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713
	
	      var _Object$getOwnPropert = Object.getOwnPropertyDescriptor(style, 'width');
	
	      var writable = _Object$getOwnPropert.writable;
	
	      if (writable) {
	        // By default, List cells should be 100% width.
	        // This prevents them from flowing under a scrollbar (if present).
	        style.width = '100%';
	      }
	
	      return rowRenderer(_extends({
	        index: rowIndex,
	        style: style
	      }, rest));
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(_ref3) {
	      var clientHeight = _ref3.clientHeight;
	      var scrollHeight = _ref3.scrollHeight;
	      var scrollTop = _ref3.scrollTop;
	      var onScroll = this.props.onScroll;
	
	      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
	    }
	  }, {
	    key: '_onSectionRendered',
	    value: function _onSectionRendered(_ref4) {
	      var rowOverscanStartIndex = _ref4.rowOverscanStartIndex;
	      var rowOverscanStopIndex = _ref4.rowOverscanStopIndex;
	      var rowStartIndex = _ref4.rowStartIndex;
	      var rowStopIndex = _ref4.rowStopIndex;
	      var onRowsRendered = this.props.onRowsRendered;
	
	      onRowsRendered({
	        overscanStartIndex: rowOverscanStartIndex,
	        overscanStopIndex: rowOverscanStopIndex,
	        startIndex: rowStartIndex,
	        stopIndex: rowStopIndex
	      });
	    }
	  }]);
	
	  return List;
	}(_react.Component);
	
	List.defaultProps = {
	  estimatedRowSize: 30,
	  noRowsRenderer: function noRowsRenderer() {
	    return null;
	  },
	  onRowsRendered: function onRowsRendered() {
	    return null;
	  },
	  onScroll: function onScroll() {
	    return null;
	  },
	  overscanRowCount: 10,
	  scrollToAlignment: 'auto',
	  style: {}
	};
	exports.default = List;
	 true ? List.propTypes = {
	  'aria-label': _react.PropTypes.string,
	
	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: _react.PropTypes.bool,
	
	  /** Optional CSS class name */
	  className: _react.PropTypes.string,
	
	  /**
	   * Used to estimate the total height of a List before all of its rows have actually been measured.
	   * The estimated total height is adjusted as rows are rendered.
	   */
	  estimatedRowSize: _react.PropTypes.number.isRequired,
	
	  /** Height constraint for list (determines how many actual rows are rendered) */
	  height: _react.PropTypes.number.isRequired,
	
	  /** Optional renderer to be used in place of rows when rowCount is 0 */
	  noRowsRenderer: _react.PropTypes.func.isRequired,
	
	  /**
	   * Callback invoked with information about the slice of rows that were just rendered.
	   * ({ startIndex, stopIndex }): void
	   */
	  onRowsRendered: _react.PropTypes.func.isRequired,
	
	  /**
	   * Number of rows to render above/below the visible bounds of the list.
	   * These rows can help for smoother scrolling on touch devices.
	   */
	  overscanRowCount: _react.PropTypes.number.isRequired,
	
	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   * ({ clientHeight, scrollHeight, scrollTop }): void
	   */
	  onScroll: _react.PropTypes.func.isRequired,
	
	  /**
	   * Either a fixed row height (number) or a function that returns the height of a row given its index.
	   * ({ index: number }): number
	   */
	  rowHeight: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.func]).isRequired,
	
	  /** Responsible for rendering a row given an index; ({ index: number }): node */
	  rowRenderer: _react.PropTypes.func.isRequired,
	
	  /** Number of rows in list. */
	  rowCount: _react.PropTypes.number.isRequired,
	
	  /** See Grid#scrollToAlignment */
	  scrollToAlignment: _react.PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,
	
	  /** Row index to ensure visible (by forcefully scrolling if necessary) */
	  scrollToIndex: _react.PropTypes.number,
	
	  /** Vertical offset. */
	  scrollTop: _react.PropTypes.number,
	
	  /** Optional inline style */
	  style: _react.PropTypes.object,
	
	  /** Tab index for focus */
	  tabIndex: _react.PropTypes.number,
	
	  /** Width of list */
	  width: _react.PropTypes.number.isRequired
	} : void 0;

/***/ },
/* 2302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MultiGrid = exports.default = undefined;
	
	var _MultiGrid2 = __webpack_require__(2303);
	
	var _MultiGrid3 = _interopRequireDefault(_MultiGrid2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _MultiGrid3.default;
	exports.MultiGrid = _MultiGrid3.default;

/***/ },
/* 2303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _Grid = __webpack_require__(2289);
	
	var _Grid2 = _interopRequireDefault(_Grid);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * Renders 1, 2, or 4 Grids depending on configuration.
	 * A main (body) Grid will always be rendered.
	 * Optionally, 1-2 Grids for sticky header rows will also be rendered.
	 * If no sticky columns, only 1 sticky header Grid will be rendered.
	 * If sticky columns, 2 sticky header Grids will be rendered.
	 */
	var MultiGrid = function (_Component) {
	  _inherits(MultiGrid, _Component);
	
	  function MultiGrid(props, context) {
	    _classCallCheck(this, MultiGrid);
	
	    var _this = _possibleConstructorReturn(this, (MultiGrid.__proto__ || Object.getPrototypeOf(MultiGrid)).call(this, props, context));
	
	    _this.state = {
	      scrollLeft: 0,
	      scrollTop: 0
	    };
	
	    _this._bottomLeftGridRef = _this._bottomLeftGridRef.bind(_this);
	    _this._bottomRightGridRef = _this._bottomRightGridRef.bind(_this);
	    _this._cellRendererBottomLeftGrid = _this._cellRendererBottomLeftGrid.bind(_this);
	    _this._cellRendererBottomRightGrid = _this._cellRendererBottomRightGrid.bind(_this);
	    _this._cellRendererTopRightGrid = _this._cellRendererTopRightGrid.bind(_this);
	    _this._columnWidthRightGrid = _this._columnWidthRightGrid.bind(_this);
	    _this._onScroll = _this._onScroll.bind(_this);
	    _this._rowHeightBottomGrid = _this._rowHeightBottomGrid.bind(_this);
	    _this._topLeftGridRef = _this._topLeftGridRef.bind(_this);
	    _this._topRightGridRef = _this._topRightGridRef.bind(_this);
	    return _this;
	  }
	
	  /** See Grid#measureAllCells */
	
	  _createClass(MultiGrid, [{
	    key: 'measureAllCells',
	    value: function measureAllCells() {
	      this._bottomLeftGrid && this._bottomLeftGrid.measureAllCells();
	      this._bottomRightGrid && this._bottomRightGrid.measureAllCells();
	      this._topLeftGrid && this._topLeftGrid.measureAllCells();
	      this._topRightGrid && this._topRightGrid.measureAllCells();
	    }
	
	    /** See issue #546 */
	
	  }, {
	    key: 'measureAllRows',
	    value: function measureAllRows() {
	      console.warn('MultiGrid measureAllRows() is deprecated; use measureAllCells() instead.');
	
	      this.measureAllCells();
	    }
	
	    /** See Grid#recomputeGridSize */
	
	  }, {
	    key: 'recomputeGridSize',
	    value: function recomputeGridSize() {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	      var _ref$columnIndex = _ref.columnIndex;
	      var columnIndex = _ref$columnIndex === undefined ? 0 : _ref$columnIndex;
	      var _ref$rowIndex = _ref.rowIndex;
	      var rowIndex = _ref$rowIndex === undefined ? 0 : _ref$rowIndex;
	      var _props = this.props;
	      var fixedColumnCount = _props.fixedColumnCount;
	      var fixedRowCount = _props.fixedRowCount;
	
	      var adjustedColumnIndex = Math.max(0, columnIndex - fixedColumnCount);
	      var adjustedRowIndex = Math.max(0, rowIndex - fixedRowCount);
	
	      this._bottomLeftGrid && this._bottomLeftGrid.recomputeGridSize({
	        columnIndex: columnIndex,
	        rowIndex: adjustedRowIndex
	      });
	      this._bottomRightGrid && this._bottomRightGrid.recomputeGridSize({
	        columnIndex: adjustedColumnIndex,
	        rowIndex: adjustedRowIndex
	      });
	      this._topLeftGrid && this._topLeftGrid.recomputeGridSize({
	        columnIndex: columnIndex,
	        rowIndex: rowIndex
	      });
	      this._topRightGrid && this._topRightGrid.recomputeGridSize({
	        columnIndex: adjustedColumnIndex,
	        rowIndex: rowIndex
	      });
	
	      this._leftGridWidth = null;
	      this._topGridHeight = null;
	      this._maybeCalculateCachedStyles(null, this.props);
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this._maybeCalculateCachedStyles(null, this.props);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _props2 = this.props;
	      var columnWidth = _props2.columnWidth;
	      var fixedColumnCount = _props2.fixedColumnCount;
	      var fixedRowCount = _props2.fixedRowCount;
	      var rowHeight = _props2.rowHeight;
	
	      if (columnWidth !== nextProps.columnWidth || fixedColumnCount !== nextProps.fixedColumnCount) {
	        this._leftGridWidth = null;
	      }
	
	      if (fixedRowCount !== nextProps.fixedRowCount || rowHeight !== nextProps.rowHeight) {
	        this._topGridHeight = null;
	      }
	
	      this._maybeCalculateCachedStyles(this.props, nextProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props;
	      var onScroll = _props3.onScroll;
	      var onSectionRendered = _props3.onSectionRendered;
	      var scrollLeftProp = _props3.scrollLeft;
	      var scrollToColumn = _props3.scrollToColumn;
	      var scrollTopProp = _props3.scrollTop;
	      var scrollToRow = _props3.scrollToRow;
	
	      var rest = _objectWithoutProperties(_props3, ['onScroll', 'onSectionRendered', 'scrollLeft', 'scrollToColumn', 'scrollTop', 'scrollToRow']);
	
	      // scrollTop and scrollToRow props are explicitly filtered out and ignored
	
	      var _state = this.state;
	      var scrollLeft = _state.scrollLeft;
	      var scrollTop = _state.scrollTop;
	
	      return _react2.default.createElement('div', { style: this._containerOuterStyle }, _react2.default.createElement('div', { style: this._containerTopStyle }, this._renderTopLeftGrid(rest), this._renderTopRightGrid(_extends({}, rest, {
	        scrollLeft: scrollLeft
	      }))), _react2.default.createElement('div', { style: this._containerBottomStyle }, this._renderBottomLeftGrid(_extends({}, rest, {
	        scrollTop: scrollTop
	      })), this._renderBottomRightGrid(_extends({}, rest, {
	        onScroll: onScroll,
	        onSectionRendered: onSectionRendered,
	        scrollLeft: scrollLeft,
	        scrollToColumn: scrollToColumn,
	        scrollToRow: scrollToRow,
	        scrollTop: scrollTop
	      }))));
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_bottomLeftGridRef',
	    value: function _bottomLeftGridRef(ref) {
	      this._bottomLeftGrid = ref;
	    }
	  }, {
	    key: '_bottomRightGridRef',
	    value: function _bottomRightGridRef(ref) {
	      this._bottomRightGrid = ref;
	    }
	  }, {
	    key: '_cellRendererBottomLeftGrid',
	    value: function _cellRendererBottomLeftGrid(_ref2) {
	      var rowIndex = _ref2.rowIndex;
	
	      var rest = _objectWithoutProperties(_ref2, ['rowIndex']);
	
	      var _props4 = this.props;
	      var cellRenderer = _props4.cellRenderer;
	      var fixedRowCount = _props4.fixedRowCount;
	
	      return cellRenderer(_extends({}, rest, {
	        rowIndex: rowIndex + fixedRowCount
	      }));
	    }
	  }, {
	    key: '_cellRendererBottomRightGrid',
	    value: function _cellRendererBottomRightGrid(_ref3) {
	      var columnIndex = _ref3.columnIndex;
	      var rowIndex = _ref3.rowIndex;
	
	      var rest = _objectWithoutProperties(_ref3, ['columnIndex', 'rowIndex']);
	
	      var _props5 = this.props;
	      var cellRenderer = _props5.cellRenderer;
	      var fixedColumnCount = _props5.fixedColumnCount;
	      var fixedRowCount = _props5.fixedRowCount;
	
	      return cellRenderer(_extends({}, rest, {
	        columnIndex: columnIndex + fixedColumnCount,
	        rowIndex: rowIndex + fixedRowCount
	      }));
	    }
	  }, {
	    key: '_cellRendererTopRightGrid',
	    value: function _cellRendererTopRightGrid(_ref4) {
	      var columnIndex = _ref4.columnIndex;
	
	      var rest = _objectWithoutProperties(_ref4, ['columnIndex']);
	
	      var _props6 = this.props;
	      var cellRenderer = _props6.cellRenderer;
	      var fixedColumnCount = _props6.fixedColumnCount;
	
	      return cellRenderer(_extends({}, rest, {
	        columnIndex: columnIndex + fixedColumnCount
	      }));
	    }
	  }, {
	    key: '_columnWidthRightGrid',
	    value: function _columnWidthRightGrid(_ref5) {
	      var index = _ref5.index;
	      var _props7 = this.props;
	      var fixedColumnCount = _props7.fixedColumnCount;
	      var columnWidth = _props7.columnWidth;
	
	      return columnWidth instanceof Function ? columnWidth({ index: index + fixedColumnCount }) : columnWidth;
	    }
	  }, {
	    key: '_getBottomGridHeight',
	    value: function _getBottomGridHeight(props) {
	      var height = props.height;
	
	      var topGridHeight = this._getTopGridHeight(props);
	
	      return height - topGridHeight;
	    }
	  }, {
	    key: '_getLeftGridWidth',
	    value: function _getLeftGridWidth(props) {
	      var fixedColumnCount = props.fixedColumnCount;
	      var columnWidth = props.columnWidth;
	
	      if (this._leftGridWidth == null) {
	        if (columnWidth instanceof Function) {
	          var leftGridWidth = 0;
	
	          for (var index = 0; index < fixedColumnCount; index++) {
	            leftGridWidth += columnWidth({ index: index });
	          }
	
	          this._leftGridWidth = leftGridWidth;
	        } else {
	          this._leftGridWidth = columnWidth * fixedColumnCount;
	        }
	      }
	
	      return this._leftGridWidth;
	    }
	  }, {
	    key: '_getRightGridWidth',
	    value: function _getRightGridWidth(props) {
	      var width = props.width;
	
	      var leftGridWidth = this._getLeftGridWidth(props);
	
	      return width - leftGridWidth;
	    }
	  }, {
	    key: '_getTopGridHeight',
	    value: function _getTopGridHeight(props) {
	      var fixedRowCount = props.fixedRowCount;
	      var rowHeight = props.rowHeight;
	
	      if (this._topGridHeight == null) {
	        if (rowHeight instanceof Function) {
	          var topGridHeight = 0;
	
	          for (var index = 0; index < fixedRowCount; index++) {
	            topGridHeight += rowHeight({ index: index });
	          }
	
	          this._topGridHeight = topGridHeight;
	        } else {
	          this._topGridHeight = rowHeight * fixedRowCount;
	        }
	      }
	
	      return this._topGridHeight;
	    }
	
	    /**
	     * Avoid recreating inline styles each render; this bypasses Grid's shallowCompare.
	     * This method recalculates styles only when specific props change.
	     */
	
	  }, {
	    key: '_maybeCalculateCachedStyles',
	    value: function _maybeCalculateCachedStyles(prevProps, props) {
	      var columnWidth = props.columnWidth;
	      var height = props.height;
	      var fixedColumnCount = props.fixedColumnCount;
	      var fixedRowCount = props.fixedRowCount;
	      var rowHeight = props.rowHeight;
	      var style = props.style;
	      var styleBottomLeftGrid = props.styleBottomLeftGrid;
	      var styleBottomRightGrid = props.styleBottomRightGrid;
	      var styleTopLeftGrid = props.styleTopLeftGrid;
	      var styleTopRightGrid = props.styleTopRightGrid;
	      var width = props.width;
	
	      var firstRender = !prevProps;
	      var sizeChange = firstRender || height !== prevProps.height || width !== prevProps.width;
	      var leftSizeChange = firstRender || columnWidth !== prevProps.columnWidth || fixedColumnCount !== prevProps.fixedColumnCount;
	      var topSizeChange = firstRender || fixedRowCount !== prevProps.fixedRowCount || rowHeight !== prevProps.rowHeight;
	
	      if (firstRender || sizeChange || style !== prevProps.style) {
	        this._containerOuterStyle = _extends({
	          height: height,
	          width: width
	        }, style);
	      }
	
	      if (firstRender || sizeChange || topSizeChange) {
	        this._containerTopStyle = {
	          height: this._getTopGridHeight(props),
	          position: 'relative',
	          width: width
	        };
	
	        this._containerBottomStyle = {
	          height: height - this._getTopGridHeight(props),
	          overflow: 'hidden',
	          position: 'relative',
	          width: width
	        };
	      }
	
	      if (firstRender || styleBottomLeftGrid !== prevProps.styleBottomLeftGrid) {
	        this._bottomLeftGridStyle = _extends({
	          left: 0,
	          outline: 0,
	          overflowX: 'hidden',
	          overflowY: 'hidden',
	          position: 'absolute'
	        }, styleBottomLeftGrid);
	      }
	
	      if (firstRender || leftSizeChange || styleBottomRightGrid !== prevProps.styleBottomRightGrid) {
	        this._bottomRightGridStyle = _extends({
	          left: this._getLeftGridWidth(props),
	          outline: 0,
	          position: 'absolute'
	        }, styleBottomRightGrid);
	      }
	
	      if (firstRender || styleTopLeftGrid !== prevProps.styleTopLeftGrid) {
	        this._topLeftGridStyle = _extends({
	          left: 0,
	          outline: 0,
	          overflowX: 'hidden',
	          overflowY: 'hidden',
	          position: 'absolute',
	          top: 0
	        }, styleTopLeftGrid);
	      }
	
	      if (firstRender || leftSizeChange || styleTopRightGrid !== prevProps.styleTopRightGrid) {
	        this._topRightGridStyle = _extends({
	          left: this._getLeftGridWidth(props),
	          outline: 0,
	          overflowX: 'hidden',
	          overflowY: 'hidden',
	          position: 'absolute',
	          top: 0
	        }, styleTopRightGrid);
	      }
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(scrollInfo) {
	      var scrollLeft = scrollInfo.scrollLeft;
	      var scrollTop = scrollInfo.scrollTop;
	
	      this.setState({
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop
	      });
	      var onScroll = this.props.onScroll;
	      if (onScroll) {
	        onScroll(scrollInfo);
	      }
	    }
	  }, {
	    key: '_renderBottomLeftGrid',
	    value: function _renderBottomLeftGrid(props) {
	      var fixedColumnCount = props.fixedColumnCount;
	      var fixedRowCount = props.fixedRowCount;
	      var rowCount = props.rowCount;
	      var scrollTop = props.scrollTop;
	
	      if (!fixedColumnCount) {
	        return null;
	      }
	
	      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
	        cellRenderer: this._cellRendererBottomLeftGrid,
	        columnCount: fixedColumnCount,
	        height: this._getBottomGridHeight(props),
	        ref: this._bottomLeftGridRef,
	        rowCount: Math.max(0, rowCount - fixedRowCount),
	        rowHeight: this._rowHeightBottomGrid,
	        scrollTop: scrollTop,
	        style: this._bottomLeftGridStyle,
	        width: this._getLeftGridWidth(props)
	      }));
	    }
	  }, {
	    key: '_renderBottomRightGrid',
	    value: function _renderBottomRightGrid(props) {
	      var columnCount = props.columnCount;
	      var fixedColumnCount = props.fixedColumnCount;
	      var fixedRowCount = props.fixedRowCount;
	      var rowCount = props.rowCount;
	      var scrollToColumn = props.scrollToColumn;
	      var scrollToRow = props.scrollToRow;
	
	      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
	        cellRenderer: this._cellRendererBottomRightGrid,
	        columnCount: Math.max(0, columnCount - fixedColumnCount),
	        columnWidth: this._columnWidthRightGrid,
	        height: this._getBottomGridHeight(props),
	        onScroll: this._onScroll,
	        ref: this._bottomRightGridRef,
	        rowCount: Math.max(0, rowCount - fixedRowCount),
	        rowHeight: this._rowHeightBottomGrid,
	        scrollToColumn: scrollToColumn - fixedColumnCount,
	        scrollToRow: scrollToRow - fixedRowCount,
	        style: this._bottomRightGridStyle,
	        width: this._getRightGridWidth(props)
	      }));
	    }
	  }, {
	    key: '_renderTopLeftGrid',
	    value: function _renderTopLeftGrid(props) {
	      var fixedColumnCount = props.fixedColumnCount;
	      var fixedRowCount = props.fixedRowCount;
	
	      if (!fixedColumnCount || !fixedRowCount) {
	        return null;
	      }
	
	      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
	        columnCount: fixedColumnCount,
	        height: this._getTopGridHeight(props),
	        ref: this._topLeftGridRef,
	        rowCount: fixedRowCount,
	        style: this._topLeftGridStyle,
	        width: this._getLeftGridWidth(props)
	      }));
	    }
	  }, {
	    key: '_renderTopRightGrid',
	    value: function _renderTopRightGrid(props) {
	      var columnCount = props.columnCount;
	      var fixedColumnCount = props.fixedColumnCount;
	      var fixedRowCount = props.fixedRowCount;
	      var scrollLeft = props.scrollLeft;
	
	      if (!fixedRowCount) {
	        return null;
	      }
	
	      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
	        cellRenderer: this._cellRendererTopRightGrid,
	        columnCount: Math.max(0, columnCount - fixedColumnCount),
	        columnWidth: this._columnWidthRightGrid,
	        height: this._getTopGridHeight(props),
	        ref: this._topRightGridRef,
	        rowCount: fixedRowCount,
	        scrollLeft: scrollLeft,
	        style: this._topRightGridStyle,
	        width: this._getRightGridWidth(props)
	      }));
	    }
	  }, {
	    key: '_rowHeightBottomGrid',
	    value: function _rowHeightBottomGrid(_ref6) {
	      var index = _ref6.index;
	      var _props8 = this.props;
	      var fixedRowCount = _props8.fixedRowCount;
	      var rowHeight = _props8.rowHeight;
	
	      return rowHeight instanceof Function ? rowHeight({ index: index + fixedRowCount }) : rowHeight;
	    }
	  }, {
	    key: '_topLeftGridRef',
	    value: function _topLeftGridRef(ref) {
	      this._topLeftGrid = ref;
	    }
	  }, {
	    key: '_topRightGridRef',
	    value: function _topRightGridRef(ref) {
	      this._topRightGrid = ref;
	    }
	  }]);
	
	  return MultiGrid;
	}(_react.Component);
	
	MultiGrid.defaultProps = {
	  fixedColumnCount: 0,
	  fixedRowCount: 0,
	  style: {},
	  styleBottomLeftGrid: {},
	  styleBottomRightGrid: {},
	  styleTopLeftGrid: {},
	  styleTopRightGrid: {}
	};
	exports.default = MultiGrid;
	 true ? MultiGrid.propTypes = {
	  fixedColumnCount: _react.PropTypes.number.isRequired,
	  fixedRowCount: _react.PropTypes.number.isRequired,
	  style: _react.PropTypes.object.isRequired,
	  styleBottomLeftGrid: _react.PropTypes.object.isRequired,
	  styleBottomRightGrid: _react.PropTypes.object.isRequired,
	  styleTopLeftGrid: _react.PropTypes.object.isRequired,
	  styleTopRightGrid: _react.PropTypes.object.isRequired
	} : void 0;

/***/ },
/* 2304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ScrollSync = exports.default = undefined;
	
	var _ScrollSync2 = __webpack_require__(2305);
	
	var _ScrollSync3 = _interopRequireDefault(_ScrollSync2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _ScrollSync3.default;
	exports.ScrollSync = _ScrollSync3.default;

/***/ },
/* 2305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * HOC that simplifies the process of synchronizing scrolling between two or more virtualized components.
	 */
	var ScrollSync = function (_Component) {
	  _inherits(ScrollSync, _Component);
	
	  function ScrollSync(props, context) {
	    _classCallCheck(this, ScrollSync);
	
	    var _this = _possibleConstructorReturn(this, (ScrollSync.__proto__ || Object.getPrototypeOf(ScrollSync)).call(this, props, context));
	
	    _this.state = {
	      clientHeight: 0,
	      clientWidth: 0,
	      scrollHeight: 0,
	      scrollLeft: 0,
	      scrollTop: 0,
	      scrollWidth: 0
	    };
	
	    _this._onScroll = _this._onScroll.bind(_this);
	    return _this;
	  }
	
	  _createClass(ScrollSync, [{
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;
	      var _state = this.state;
	      var clientHeight = _state.clientHeight;
	      var clientWidth = _state.clientWidth;
	      var scrollHeight = _state.scrollHeight;
	      var scrollLeft = _state.scrollLeft;
	      var scrollTop = _state.scrollTop;
	      var scrollWidth = _state.scrollWidth;
	
	      return children({
	        clientHeight: clientHeight,
	        clientWidth: clientWidth,
	        onScroll: this._onScroll,
	        scrollHeight: scrollHeight,
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        scrollWidth: scrollWidth
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(_ref) {
	      var clientHeight = _ref.clientHeight;
	      var clientWidth = _ref.clientWidth;
	      var scrollHeight = _ref.scrollHeight;
	      var scrollLeft = _ref.scrollLeft;
	      var scrollTop = _ref.scrollTop;
	      var scrollWidth = _ref.scrollWidth;
	
	      this.setState({ clientHeight: clientHeight, clientWidth: clientWidth, scrollHeight: scrollHeight, scrollLeft: scrollLeft, scrollTop: scrollTop, scrollWidth: scrollWidth });
	    }
	  }]);
	
	  return ScrollSync;
	}(_react.Component);
	
	exports.default = ScrollSync;
	 true ? ScrollSync.propTypes = {
	  /**
	   * Function responsible for rendering 2 or more virtualized components.
	   * This function should implement the following signature:
	   * ({ onScroll, scrollLeft, scrollTop }) => PropTypes.element
	   */
	  children: _react.PropTypes.func.isRequired
	} : void 0;

/***/ },
/* 2306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.IS_SCROLLING_TIMEOUT = exports.WindowScroller = exports.default = undefined;
	
	var _onScroll = __webpack_require__(2307);
	
	Object.defineProperty(exports, 'IS_SCROLLING_TIMEOUT', {
	  enumerable: true,
	  get: function get() {
	    return _onScroll.IS_SCROLLING_TIMEOUT;
	  }
	});
	
	var _WindowScroller2 = __webpack_require__(2308);
	
	var _WindowScroller3 = _interopRequireDefault(_WindowScroller2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = _WindowScroller3.default;
	exports.WindowScroller = _WindowScroller3.default;

/***/ },
/* 2307 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.registerScrollListener = registerScrollListener;
	exports.unregisterScrollListener = unregisterScrollListener;
	var mountedInstances = [];
	var originalBodyPointerEvents = null;
	var disablePointerEventsTimeoutId = null;
	
	/**
	 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var IS_SCROLLING_TIMEOUT = exports.IS_SCROLLING_TIMEOUT = 150;
	
	function enablePointerEventsIfDisabled() {
	  if (disablePointerEventsTimeoutId) {
	    disablePointerEventsTimeoutId = null;
	
	    document.body.style.pointerEvents = originalBodyPointerEvents;
	
	    originalBodyPointerEvents = null;
	  }
	}
	
	function enablePointerEventsAfterDelayCallback() {
	  enablePointerEventsIfDisabled();
	  mountedInstances.forEach(function (instance) {
	    return instance.__resetIsScrolling();
	  });
	}
	
	function enablePointerEventsAfterDelay() {
	  if (disablePointerEventsTimeoutId) {
	    clearTimeout(disablePointerEventsTimeoutId);
	  }
	
	  disablePointerEventsTimeoutId = setTimeout(enablePointerEventsAfterDelayCallback, IS_SCROLLING_TIMEOUT);
	}
	
	function onScrollWindow(event) {
	  if (event.currentTarget === window && originalBodyPointerEvents == null) {
	    originalBodyPointerEvents = document.body.style.pointerEvents;
	
	    document.body.style.pointerEvents = 'none';
	  }
	  enablePointerEventsAfterDelay();
	  mountedInstances.forEach(function (instance) {
	    if (instance.scrollElement === event.currentTarget) {
	      instance.__handleWindowScrollEvent(event);
	    }
	  });
	}
	
	function registerScrollListener(component, element) {
	  if (!mountedInstances.some(function (instance) {
	    return instance.scrollElement === element;
	  })) {
	    element.addEventListener('scroll', onScrollWindow);
	  }
	  mountedInstances.push(component);
	}
	
	function unregisterScrollListener(component, element) {
	  mountedInstances = mountedInstances.filter(function (instance) {
	    return instance !== component;
	  });
	  if (!mountedInstances.length) {
	    element.removeEventListener('scroll', onScrollWindow);
	    if (disablePointerEventsTimeoutId) {
	      clearTimeout(disablePointerEventsTimeoutId);
	      enablePointerEventsIfDisabled();
	    }
	  }
	}

/***/ },
/* 2308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();
	
	var _react = __webpack_require__(301);
	
	var _reactDom = __webpack_require__(345);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _onScroll = __webpack_require__(2307);
	
	var _dimensions = __webpack_require__(2309);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var WindowScroller = function (_Component) {
	  _inherits(WindowScroller, _Component);
	
	  function WindowScroller(props) {
	    _classCallCheck(this, WindowScroller);
	
	    // Handle server-side rendering case
	    var _this = _possibleConstructorReturn(this, (WindowScroller.__proto__ || Object.getPrototypeOf(WindowScroller)).call(this, props));
	
	    var height = typeof window !== 'undefined' ? (0, _dimensions.getHeight)(props.scrollElement || window) : 0;
	
	    _this.state = {
	      height: height,
	      isScrolling: false,
	      scrollTop: 0
	    };
	
	    _this._onResize = _this._onResize.bind(_this);
	    _this.__handleWindowScrollEvent = _this.__handleWindowScrollEvent.bind(_this);
	    _this.__resetIsScrolling = _this.__resetIsScrolling.bind(_this);
	    return _this;
	  }
	
	  // Can’t use defaultProps for scrollElement without breaking server-side rendering
	
	
	  _createClass(WindowScroller, [{
	    key: 'updatePosition',
	    value: function updatePosition(scrollElement) {
	      var onResize = this.props.onResize;
	      var height = this.state.height;
	
	      scrollElement = scrollElement || this.props.scrollElement || window;
	      this._positionFromTop = (0, _dimensions.getPositionFromTop)(_reactDom2.default.findDOMNode(this), scrollElement);
	
	      var newHeight = (0, _dimensions.getHeight)(scrollElement);
	      if (height !== newHeight) {
	        this.setState({
	          height: newHeight
	        });
	        onResize({
	          height: newHeight
	        });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var scrollElement = this.props.scrollElement || window;
	
	      this.updatePosition(scrollElement);
	
	      (0, _onScroll.registerScrollListener)(this, scrollElement);
	
	      window.addEventListener('resize', this._onResize, false);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var scrollElement = this.props.scrollElement || window;
	      var nextScrollElement = nextProps.scrollElement || window;
	
	      if (scrollElement !== nextScrollElement) {
	        this.updatePosition(nextScrollElement);
	
	        (0, _onScroll.unregisterScrollListener)(this, scrollElement);
	        (0, _onScroll.registerScrollListener)(this, nextScrollElement);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      (0, _onScroll.unregisterScrollListener)(this, this.props.scrollElement || window);
	
	      window.removeEventListener('resize', this._onResize, false);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;
	      var _state = this.state;
	      var isScrolling = _state.isScrolling;
	      var scrollTop = _state.scrollTop;
	      var height = _state.height;
	
	      return children({
	        height: height,
	        isScrolling: isScrolling,
	        scrollTop: scrollTop
	      });
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	    }
	  }, {
	    key: '_onResize',
	    value: function _onResize(event) {
	      this.updatePosition();
	    }
	
	    // Referenced by utils/onScroll
	
	  }, {
	    key: '__handleWindowScrollEvent',
	    value: function __handleWindowScrollEvent(event) {
	      var onScroll = this.props.onScroll;
	
	      var scrollElement = this.props.scrollElement || window;
	      var scrollTop = Math.max(0, (0, _dimensions.getScrollTop)(scrollElement) - this._positionFromTop);
	
	      this.setState({
	        isScrolling: true,
	        scrollTop: scrollTop
	      });
	
	      onScroll({
	        scrollTop: scrollTop
	      });
	    }
	
	    // Referenced by utils/onScroll
	
	  }, {
	    key: '__resetIsScrolling',
	    value: function __resetIsScrolling() {
	      this.setState({
	        isScrolling: false
	      });
	    }
	  }, {
	    key: 'scrollElement',
	    get: function get() {
	      return this.props.scrollElement || window;
	    }
	  }]);
	
	  return WindowScroller;
	}(_react.Component);
	
	WindowScroller.defaultProps = {
	  onResize: function onResize() {},
	  onScroll: function onScroll() {}
	};
	exports.default = WindowScroller;
	 true ? WindowScroller.propTypes = {
	  /**
	   * Function responsible for rendering children.
	   * This function should implement the following signature:
	   * ({ height, isScrolling, scrollTop }) => PropTypes.element
	   */
	  children: _react.PropTypes.func.isRequired,
	
	  /** Callback to be invoked on-resize: ({ height }) */
	  onResize: _react.PropTypes.func.isRequired,
	
	  /** Callback to be invoked on-scroll: ({ scrollTop }) */
	  onScroll: _react.PropTypes.func.isRequired,
	
	  /** Element to attach scroll event listeners. Defaults to window. */
	  scrollElement: _react.PropTypes.any
	} : void 0;

/***/ },
/* 2309 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getHeight = getHeight;
	exports.getPositionFromTop = getPositionFromTop;
	exports.getScrollTop = getScrollTop;
	/**
	 * Gets the height of the element, accounting for API differences between
	 * `window` and other DOM elements.
	 */
	function getHeight(element) {
	  return element === window ? window.innerHeight : element.getBoundingClientRect().height;
	}
	
	/**
	 * Gets the vertical position of an element within its scroll container.
	 * Elements that have been “scrolled past” return negative values.
	 * Handles edge-case where a user is navigating back (history) from an already-scrolled page.
	 * In this case the body’s top position will be a negative number and this element’s top will be increased (by that amount).
	 */
	function getPositionFromTop(element, container) {
	  var offset = container === window ? 0 : getScrollTop(container);
	  var containerElement = container === window ? document.documentElement : container;
	  return element.getBoundingClientRect().top + offset - containerElement.getBoundingClientRect().top;
	}
	
	/**
	 * Gets the vertical scroll amount of the element, accounting for IE compatibility
	 * and API differences between `window` and other DOM elements.
	 */
	function getScrollTop(element) {
	  if (element === window) {
	    return 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop;
	  } else {
	    return element.scrollTop;
	  }
	}

/***/ },
/* 2310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _Day = __webpack_require__(2311);
	
	var _Day2 = _interopRequireDefault(_Day);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
		if (key in obj) {
			Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
		} else {
			obj[key] = value;
		}return obj;
	}
	
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}
	
	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var style = {
		'root': 'Cal__Month__root',
		'rows': 'Cal__Month__rows',
		'row': 'Cal__Month__row',
		'partial': 'Cal__Month__partial',
		'label': 'Cal__Month__label',
		'partialFirstRow': 'Cal__Month__partialFirstRow'
	};
	
	var Month = function (_Component) {
		_inherits(Month, _Component);
	
		function Month() {
			_classCallCheck(this, Month);
	
			return _possibleConstructorReturn(this, Object.getPrototypeOf(Month).apply(this, arguments));
		}
	
		_createClass(Month, [{
			key: 'shouldComponentUpdate',
			value: function shouldComponentUpdate(nextProps) {
				return !nextProps.isScrolling && !this.props.isScrolling;
			}
		}, {
			key: 'renderRows',
			value: function renderRows() {
				var _props = this.props;
				var disabledDates = _props.disabledDates;
				var disabledDays = _props.disabledDays;
				var displayDate = _props.displayDate;
				var locale = _props.locale;
				var maxDate = _props.maxDate;
				var minDate = _props.minDate;
				var onDaySelect = _props.onDaySelect;
				var rowHeight = _props.rowHeight;
				var rows = _props.rows;
				var selectedDate = _props.selectedDate;
				var today = _props.today;
				var theme = _props.theme;
	
				var currentYear = today.date.year();
				var monthShort = displayDate.format('MMM');
				var monthRows = [];
				var day = 0;
				var isDisabled = false;
				var isSelected = false;
				var isToday = false;
				var row = void 0,
				    date = void 0,
				    days = void 0;
	
				// Oh the things we do in the name of performance...
				for (var i = 0, len = rows.length; i < len; i++) {
					row = rows[i];
					days = [];
	
					for (var k = 0, _len = row.length; k < _len; k++) {
						date = row[k];
						day++;
	
						isSelected = selectedDate && date.yyyymmdd == selectedDate.yyyymmdd;
						isToday = today && date.yyyymmdd == today.yyyymmdd;
						isDisabled = minDate && date.yyyymmdd < minDate.yyyymmdd || maxDate && date.yyyymmdd > maxDate.yyyymmdd || disabledDays && disabledDays.length && disabledDays.indexOf(date.date.day()) !== -1 || disabledDates && disabledDates.length && disabledDates.indexOf(date.yyyymmdd) !== -1;
	
						days[k] = _react2.default.createElement(_Day2.default, {
							key: 'day-' + day,
							currentYear: currentYear,
							date: date,
							day: day,
							handleDayClick: onDaySelect,
							isDisabled: isDisabled,
							isToday: isToday,
							isSelected: isSelected,
							locale: locale,
							monthShort: monthShort,
							theme: theme
						});
					}
					monthRows[i] = _react2.default.createElement('ul', { className: (0, _classnames2.default)(style.row, _defineProperty({}, style.partial, row.length !== 7)), style: { height: rowHeight }, key: 'Row-' + i, role: 'row', 'aria-label': 'Week ' + (i + 1) }, days);
				}
	
				return monthRows;
			}
		}, {
			key: 'render',
			value: function render() {
				var _props2 = this.props;
				var displayDate = _props2.displayDate;
				var today = _props2.today;
				var rows = _props2.rows;
				var showOverlay = _props2.showOverlay;
				var rowStyle = _props2.rowStyle;
				var theme = _props2.theme;
	
				return _react2.default.createElement('div', { className: style.root, style: rowStyle }, _react2.default.createElement('div', { className: style.rows }, this.renderRows(), showOverlay && _react2.default.createElement('label', { className: (0, _classnames2.default)(style.label, _defineProperty({}, style.partialFirstRow, rows[0].length !== 7)), style: theme && theme.overlayColor && { backgroundColor: theme.overlayColor } }, _react2.default.createElement('span', null, '' + displayDate.format('MMMM') + (!displayDate.isSame(today.date, 'year') ? ' ' + displayDate.year() : '')))));
			}
		}]);
	
		return Month;
	}(_react.Component);
	
	exports.default = Month;

/***/ },
/* 2311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = Day;
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var style = {
		'root': 'Cal__Day__root',
		'enabled': 'Cal__Day__enabled',
		'highlighted': 'Cal__Day__highlighted',
		'today': 'Cal__Day__today',
		'disabled': 'Cal__Day__disabled',
		'selected': 'Cal__Day__selected',
		'month': 'Cal__Day__month',
		'year': 'Cal__Day__year',
		'selection': 'Cal__Day__selection',
		'day': 'Cal__Day__day'
	};
	
	function Day(_ref) {
		var currentYear = _ref.currentYear;
		var date = _ref.date;
		var day = _ref.day;
		var handleDayClick = _ref.handleDayClick;
		var isDisabled = _ref.isDisabled;
		var isToday = _ref.isToday;
		var isSelected = _ref.isSelected;
		var monthShort = _ref.monthShort;
		var locale = _ref.locale;
		var theme = _ref.theme;
		var mmt = date.date;
		var yyyymmdd = date.yyyymmdd;
	
		var year = mmt.year();
	
		return _react2.default.createElement('li', {
			style: isToday ? { color: theme.todayColor } : null,
			className: '' + style.root + (isToday ? ' ' + style.today : '') + (isSelected ? ' ' + style.selected : '') + (isDisabled ? ' ' + style.disabled : ' ' + style.enabled),
			'data-date': yyyymmdd,
			onClick: !isDisabled && handleDayClick ? handleDayClick.bind(this, mmt) : null
		}, day === 1 && _react2.default.createElement('span', { className: style.month }, monthShort), _react2.default.createElement('span', null, day), day === 1 && currentYear !== year && _react2.default.createElement('span', { className: style.year }, year), isSelected && _react2.default.createElement('div', { className: style.selection, style: { backgroundColor: typeof theme.selectionColor == 'function' ? theme.selectionColor(mmt) : theme.selectionColor, color: theme.textColor.active } }, _react2.default.createElement('span', { className: style.month }, isToday ? locale.todayLabel.short || locale.todayLabel.long : monthShort), _react2.default.createElement('span', { className: style.day }, day)));
	}

/***/ },
/* 2312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsShallowCompare = __webpack_require__(2251);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	var _moment = __webpack_require__(2126);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _range = __webpack_require__(2238);
	
	var _range2 = _interopRequireDefault(_range);
	
	var _utils = __webpack_require__(2243);
	
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}
	
	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var style = {
		'root': 'Cal__Weekdays__root',
		'day': 'Cal__Weekdays__day'
	};
	
	var Weekdays = function (_Component) {
		_inherits(Weekdays, _Component);
	
		function Weekdays() {
			_classCallCheck(this, Weekdays);
	
			return _possibleConstructorReturn(this, Object.getPrototypeOf(Weekdays).apply(this, arguments));
		}
	
		_createClass(Weekdays, [{
			key: 'shouldComponentUpdate',
			value: function shouldComponentUpdate(nextProps) {
				return (0, _reactAddonsShallowCompare2.default)(this, nextProps);
			}
		}, {
			key: 'render',
			value: function render() {
				var theme = this.props.theme;
	
				return _react2.default.createElement('ul', { className: style.root, style: { backgroundColor: theme.weekdayColor, color: theme.textColor.active, paddingRight: _utils.scrollbarSize }, 'aria-hidden': true }, (0, _range2.default)(0, 7).map(function (val, index) {
					return _react2.default.createElement('li', { key: 'Weekday-' + index, className: style.day }, (0, _moment2.default)().weekday(index).format('ddd'));
				}));
			}
		}]);
	
		return Weekdays;
	}(_react.Component);
	
	Weekdays.propTypes = {
		locale: _react.PropTypes.object,
		theme: _react.PropTypes.object
	};
	exports.default = Weekdays;

/***/ },
/* 2313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactVirtualized = __webpack_require__(2261);
	
	var _classnames = __webpack_require__(2234);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _utils = __webpack_require__(2243);
	
	var _moment = __webpack_require__(2126);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}
	
	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}
	
	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var style = {
	    'root': 'Cal__Years__root',
	    'list': 'Cal__Years__list',
	    'center': 'Cal__Years__center',
	    'year': 'Cal__Years__year',
	    'active': 'Cal__Years__active',
	    'currentYear': 'Cal__Years__currentYear'
	};
	
	var Years = function (_Component) {
	    _inherits(Years, _Component);
	
	    function Years(props) {
	        _classCallCheck(this, Years);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Years).call(this, props));
	
	        _this.state = {
	            selectedYear: props.selectedDate ? props.selectedDate.year() : (0, _moment2.default)().year()
	        };
	        return _this;
	    }
	
	    _createClass(Years, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var vs = this.refs.VirtualScroll;
	            var grid = vs && vs.refs.Grid;
	
	            this.scrollEl = grid && grid.refs.scrollingContainer;
	        }
	    }, {
	        key: 'handleClick',
	        value: function handleClick(year, e) {
	            var _props = this.props;
	            var hideYearsOnSelect = _props.hideYearsOnSelect;
	            var scrollToDate = _props.scrollToDate;
	            var selectedDate = _props.selectedDate;
	            var setDisplay = _props.setDisplay;
	
	            var date = selectedDate || (0, _moment2.default)();
	            var newDate = date.clone().year(year);
	
	            this.selectDate(newDate, e, !hideYearsOnSelect);
	            scrollToDate(newDate, -40);
	
	            if (hideYearsOnSelect) {
	                setDisplay('days');
	            }
	        }
	    }, {
	        key: 'selectDate',
	        value: function selectDate(date, e) {
	            var updateState = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	            var shouldHeaderAnimate = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	            var _props2 = this.props;
	            var minDate = _props2.minDate;
	            var maxDate = _props2.maxDate;
	            var onDaySelect = _props2.onDaySelect;
	
	            if (!date.isBefore(minDate, 'day') && !date.isAfter(maxDate, 'day')) {
	                if (updateState) {
	                    this.setState({
	                        selectedYear: date.year()
	                    });
	                }
	
	                onDaySelect(date, e, shouldHeaderAnimate);
	            }
	        }
	    }, {
	        key: 'handleKeyDown',
	        value: function handleKeyDown(e) {
	            var _props3 = this.props;
	            var scrollToDate = _props3.scrollToDate;
	            var setDisplay = _props3.setDisplay;
	            var selectedDate = _props3.selectedDate;
	            var selectedYear = this.state.selectedYear;
	
	            var delta = 0;
	
	            switch (e.keyCode) {
	                case _utils.keyCodes.enter:
	                case _utils.keyCodes.escape:
	                    setDisplay('days');
	                    scrollToDate(selectedDate || (0, _moment2.default)(selectedYear, 'YYYY'), -40);
	                    return;
	                case _utils.keyCodes.down:
	                    delta = +1;
	                    break;
	                case _utils.keyCodes.up:
	                    delta = -1;
	                    break;
	            }
	
	            if (delta) {
	                if (!selectedDate) selectedDate = (0, _moment2.default)().year(selectedYear);
	
	                var newSelectedDate = selectedDate.clone().add(delta, 'year');
	                this.selectDate(newSelectedDate, e);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _props4 = this.props;
	            var height = _props4.height;
	            var selectedDate = _props4.selectedDate;
	            var theme = _props4.theme;
	            var width = _props4.width;
	            var selectedYear = this.state.selectedYear;
	
	            var currentYear = (0, _moment2.default)().year();
	            var years = this.props.years.slice(0, this.props.years.length);
	            // Add spacer rows at the top and bottom
	            years.unshift(null);
	            years.push(null);
	
	            var selectedYearIndex = years.indexOf(selectedYear);
	            var rowHeight = 50;
	            var containerHeight = years.length * rowHeight < height + 50 ? years.length * rowHeight : height + 50;
	
	            if (typeof width == 'string' && width.indexOf('%') !== -1) {
	                width = window.innerWidth * parseInt(width.replace('%', ''), 10) / 100; // See https://github.com/bvaughn/react-virtualized/issues/229
	            }
	
	            return _react2.default.createElement('div', {
	                className: style.root,
	                style: { color: theme.selectionColor, height: height + 50 }
	            }, _react2.default.createElement(_reactVirtualized.List, {
	                ref: 'VirtualScroll',
	                className: style.list,
	                width: width,
	                height: containerHeight,
	                rowCount: years.length,
	                rowHeight: rowHeight,
	                scrollToIndex: selectedYearIndex + 1,
	                scrollToAlignment: 'center',
	                rowRenderer: function rowRenderer(_ref) {
	                    var index = _ref.index;
	                    var rowStyle = _ref.style;
	
	                    var year = years[index];
	
	                    if (year !== null) {
	                        var _classNames;
	
	                        var isActive = index == selectedYearIndex;
	
	                        return _react2.default.createElement('div', {
	                            className: (0, _classnames2.default)(style.year, (_classNames = {}, _defineProperty(_classNames, style.active, isActive), _defineProperty(_classNames, style.currentYear, year == currentYear), _classNames)),
	                            onClick: function onClick() {
	                                return _this2.handleClick(year);
	                            },
	                            title: 'Set year to ' + year,
	                            'data-year': year,
	                            style: Object.assign({}, rowStyle, { color: typeof theme.selectionColor == 'function' ? theme.selectionColor(selectedDate.clone().year(year)) : theme.selectionColor })
	                        }, _react2.default.createElement('span', { style: year == currentYear ? { borderColor: theme.todayColor } : null }, year));
	                    } else {
	                        return _react2.default.createElement('div', { className: style.spacer });
	                    }
	                }
	            }));
	        }
	    }]);
	
	    return Years;
	}(_react.Component);
	
	Years.propTypes = {
	    height: _react.PropTypes.number,
	    width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
	    hideYearsOnSelect: _react.PropTypes.bool,
	    maxDate: _react.PropTypes.object,
	    minDate: _react.PropTypes.object,
	    onDaySelect: _react.PropTypes.func,
	    scrollToDate: _react.PropTypes.func,
	    selectedDate: _react.PropTypes.object,
	    setDisplay: _react.PropTypes.func,
	    theme: _react.PropTypes.object,
	    years: _react.PropTypes.array
	};
	exports.default = Years;

/***/ },
/* 2314 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2315);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(762)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../css-loader/index.js!./styles.css", function() {
				var newContent = require("!!../css-loader/index.js!./styles.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2315 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(757)();
	// imports
	
	
	// module
	exports.push([module.id, ".Cal__Today__root {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  height: 32px;\n  padding: 6px;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, -100%, 0);\n          transform: translate3d(0, -100%, 0);\n  font-weight: 500;\n  line-height: 0;\n  z-index: 10;\n  cursor: pointer;\n  -webkit-transition: -webkit-transform 0.3s ease;\n  transition: -webkit-transform 0.3s ease;\n  transition: transform 0.3s ease;\n  transition: transform 0.3s ease, -webkit-transform 0.3s ease;\n  -webkit-transition-delay: 0.3s;\n          transition-delay: 0.3s; }\n  .Cal__Today__root.Cal__Today__show {\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n    -webkit-transition-delay: 0s;\n            transition-delay: 0s; }\n    .Cal__Today__root.Cal__Today__show .Cal__Today__chevron {\n      -webkit-transition: -webkit-transform 0.3s ease;\n      transition: -webkit-transform 0.3s ease;\n      transition: transform 0.3s ease;\n      transition: transform 0.3s ease, -webkit-transform 0.3s ease; }\n  .Cal__Today__root .Cal__Today__chevron {\n    position: absolute;\n    top: 50%;\n    margin-top: -6px;\n    margin-left: 5px;\n    -webkit-transform: rotate(270deg);\n            transform: rotate(270deg);\n    -webkit-transition: -webkit-transform 0.3s ease;\n    transition: -webkit-transform 0.3s ease;\n    transition: transform 0.3s ease;\n    transition: transform 0.3s ease, -webkit-transform 0.3s ease; }\n  .Cal__Today__root.Cal__Today__chevronUp .Cal__Today__chevron {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  .Cal__Today__root.Cal__Today__chevronDown .Cal__Today__chevron {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); }\n.Cal__Header__root {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  box-sizing: border-box;\n  padding: 20px;\n  line-height: 1.3;\n  font-weight: 400;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px; }\n  .Cal__Header__root.Cal__Header__blank {\n    height: 98px; }\n    .Cal__Header__root.Cal__Header__blank .Cal__Header__wrapper {\n      color: rgba(255, 255, 255, 0.5);\n      font-size: 18px;\n      cursor: default; }\n  .Cal__Header__root.Cal__Header__landscape {\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n                -ms-grid-row-align: flex-start;\n            align-items: flex-start;\n    min-width: 200px;\n    border-top-right-radius: 0;\n    border-bottom-left-radius: 3px; }\n    .Cal__Header__root.Cal__Header__landscape .Cal__Header__dateWrapper.Cal__Header__day {\n      -webkit-box-flex: 1;\n          -ms-flex-positive: 1;\n              flex-grow: 1;\n      height: 76px; }\n\n.Cal__Header__wrapper {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-flex: 1;\n      -ms-flex-positive: 1;\n          flex-grow: 1;\n  cursor: pointer; }\n\n.Cal__Header__dateWrapper {\n  position: relative;\n  display: block;\n  overflow: hidden;\n  color: rgba(255, 255, 255, 0.5);\n  -webkit-transition: color 0.3s ease;\n  transition: color 0.3s ease; }\n  .Cal__Header__dateWrapper.Cal__Header__active {\n    color: white; }\n  .Cal__Header__dateWrapper.Cal__Header__day {\n    height: 38px;\n    font-size: 36px;\n    line-height: 36px; }\n  .Cal__Header__dateWrapper.Cal__Header__year {\n    height: 20px;\n    font-size: 18px;\n    line-height: 18px; }\n\n.Cal__Header__date {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0; }\n.Cal__Animation__enter {\n  opacity: 0;\n  -webkit-transform: translate3d(0, -100%, 0);\n          transform: translate3d(0, -100%, 0);\n  -webkit-transition: 0.25s ease;\n  transition: 0.25s ease; }\n\n.Cal__Animation__enter.Cal__Animation__enterActive {\n  opacity: 1;\n  -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0); }\n\n.Cal__Animation__leave {\n  -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n  -webkit-transition: 0.25s ease;\n  transition: 0.25s ease; }\n\n.Cal__Animation__leave.Cal__Animation__leaveActive {\n  opacity: 0;\n  -webkit-transform: translate3d(0, 100%, 0);\n          transform: translate3d(0, 100%, 0); }\n.Cal__Day__root {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 14.28571%;\n  list-style: none;\n  font-size: 16px;\n  text-align: center;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none; }\n  .Cal__Day__root.Cal__Day__enabled.Cal__Day__highlighted, .Cal__Day__root.Cal__Day__enabled:active, .Cal__Day__root.Cal__Day__enabled:hover {\n    position: relative;\n    z-index: 1; }\n    .Cal__Day__root.Cal__Day__enabled.Cal__Day__highlighted:before, .Cal__Day__root.Cal__Day__enabled:active:before, .Cal__Day__root.Cal__Day__enabled:hover:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      width: 52px;\n      height: 52px;\n      margin-top: -26px;\n      margin-left: -26px;\n      border-radius: 50%;\n      background-color: #EFEFEF;\n      z-index: -1; }\n  .Cal__Day__root.Cal__Day__enabled:hover:before {\n    opacity: 0.5; }\n  .Cal__Day__root.Cal__Day__enabled.Cal__Day__highlighted:before, .Cal__Day__root.Cal__Day__enabled:active:before {\n    opacity: 1; }\n  .Cal__Day__root:first-child {\n    position: relative; }\n  .Cal__Day__root.Cal__Day__today {\n    position: relative;\n    z-index: 2; }\n    .Cal__Day__root.Cal__Day__today > span {\n      color: #3d3d3d; }\n    .Cal__Day__root.Cal__Day__today.Cal__Day__disabled > span {\n      color: #AAA; }\n    .Cal__Day__root.Cal__Day__today:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      width: 52px;\n      height: 52px;\n      margin-top: -26px;\n      margin-left: -26px;\n      border-radius: 50%;\n      box-shadow: inset 0 0 0 1px;\n      z-index: -1; }\n    .Cal__Day__root.Cal__Day__today.Cal__Day__disabled:before {\n      box-shadow: inset 0 0 0 1px #BBB; }\n  .Cal__Day__root.Cal__Day__selected {\n    position: relative; }\n    .Cal__Day__root.Cal__Day__selected > .Cal__Day__month, .Cal__Day__root.Cal__Day__selected > .Cal__Day__year {\n      display: none; }\n    .Cal__Day__root.Cal__Day__selected:before {\n      display: none; }\n    .Cal__Day__root.Cal__Day__selected .Cal__Day__selection {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      width: 52px;\n      height: 52px;\n      margin-top: -26px;\n      margin-left: -26px;\n      border-radius: 50%;\n      line-height: 56px;\n      z-index: 2; }\n      .Cal__Day__root.Cal__Day__selected .Cal__Day__selection .Cal__Day__month {\n        top: 9px; }\n      .Cal__Day__root.Cal__Day__selected .Cal__Day__selection .Cal__Day__day {\n        position: relative;\n        top: 5px;\n        font-weight: bold;\n        font-size: 18px; }\n  .Cal__Day__root.Cal__Day__disabled {\n    cursor: default;\n    color: #AAA;\n    cursor: not-allowed; }\n\n.Cal__Day__month, .Cal__Day__year {\n  position: absolute;\n  left: 0;\n  right: 0;\n  font-size: 12px;\n  line-height: 12px; }\n\n.Cal__Day__month {\n  top: 5px; }\n\n.Cal__Day__year {\n  bottom: 5px; }\n.Cal__Month__root {\n  position: absolute;\n  width: 100%; }\n\n.Cal__Month__rows {\n  position: relative;\n  background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0) 50%, rgba(0, 0, 0, 0.05) 100%);\n  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 50%, rgba(0, 0, 0, 0.05) 100%); }\n\n.Cal__Month__row {\n  padding: 0;\n  margin: 0; }\n  .Cal__Month__row:first-child {\n    text-align: right; }\n    .Cal__Month__row:first-child li {\n      position: relative;\n      top: 1px;\n      z-index: 1;\n      margin-top: -1px;\n      background-color: #FFF;\n      box-shadow: 0 -1px 0 #E9E9E9; }\n  .Cal__Month__row:nth-child(2) {\n    box-shadow: 0 -1px 0 #E9E9E9; }\n  .Cal__Month__row.Cal__Month__partial:first-child li:first-child {\n    border-left: 1px solid #E9E9E9; }\n  .Cal__Month__row.Cal__Month__partial:last-of-type li {\n    position: relative;\n    z-index: 1; }\n\n.Cal__Month__label {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  font-size: 30px;\n  font-weight: 500;\n  z-index: 3;\n  pointer-events: none;\n  background-color: rgba(255, 255, 255, 0.6);\n  opacity: 0;\n  -webkit-transition: opacity 0.3s ease;\n  transition: opacity 0.3s ease; }\n  .Cal__Month__label > span {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 56px;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center; }\n  .Cal__Month__label.Cal__Month__partialFirstRow {\n    top: 56px; }\n.Cal__List__root {\n  width: 100% !important;\n  background-color: #FFF; }\n  .Cal__List__root.Cal__List__scrolling label {\n    opacity: 1; }\n.Cal__Weekdays__root {\n  position: relative;\n  z-index: 5;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  padding: 0;\n  margin: 0;\n  list-style: none; }\n\n.Cal__Weekdays__day {\n  padding: 15px 0;\n  -ms-flex-preferred-size: 14.28571%;\n      flex-basis: 14.28571%;\n  -webkit-box-flex: 1;\n      -ms-flex-positive: 1;\n          flex-grow: 1;\n  font-weight: 500;\n  text-align: center; }\n.Cal__Years__root {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 10;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  background-color: #F9F9F9; }\n  .Cal__Years__root:before, .Cal__Years__root:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    height: 100px;\n    pointer-events: none;\n    z-index: 1; }\n  .Cal__Years__root:before {\n    top: 0;\n    background: -webkit-linear-gradient(top, white 0%, rgba(255, 255, 255, 0) 100%);\n    background: linear-gradient(to bottom, white 0%, rgba(255, 255, 255, 0) 100%); }\n  .Cal__Years__root:after {\n    bottom: 0;\n    background: -webkit-linear-gradient(top, rgba(255, 255, 255, 0) 0%, white 100%);\n    background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, white 100%); }\n\n.Cal__Years__list {\n  box-sizing: border-box; }\n  .Cal__Years__list.Cal__Years__center {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center; }\n\n.Cal__Years__year {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  height: 100%;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  font-size: 18px;\n  font-weight: 500;\n  text-align: center;\n  cursor: pointer;\n  -webkit-user-select: none; }\n  .Cal__Years__year > span {\n    color: #666; }\n  .Cal__Years__year:hover > span, .Cal__Years__year.Cal__Years__active > span {\n    color: inherit; }\n  .Cal__Years__year:hover, .Cal__Years__year.Cal__Years__active {\n    position: relative;\n    z-index: 2; }\n  .Cal__Years__year.Cal__Years__active {\n    font-size: 32px; }\n  .Cal__Years__year.Cal__Years__currentYear {\n    position: relative; }\n    .Cal__Years__year.Cal__Years__currentYear > span {\n      min-width: 50px;\n      padding-bottom: 5px;\n      border-bottom: 3px solid; }\n    .Cal__Years__year.Cal__Years__currentYear.Cal__Years__active > span {\n      padding-bottom: 10px;\n      min-width: 85px; }\n.Cal__Container__root {\n  position: relative;\n  display: table;\n  z-index: 1;\n  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  line-height: 1.4em;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-weight: 300;\n  outline: none; }\n  .Cal__Container__root.Cal__Container__landscape {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row; }\n    .Cal__Container__root.Cal__Container__landscape .Cal__Container__wrapper {\n      position: relative;\n      -webkit-box-flex: 1;\n          -ms-flex-positive: 1;\n              flex-grow: 1;\n      overflow: hidden;\n      z-index: 1;\n      border-top-right-radius: 3px;\n      border-bottom-right-radius: 3px; }\n  .Cal__Container__root .ReactVirtualized__List {\n    position: relative;\n    overflow: auto;\n    outline: none;\n    overflow-x: hidden !important;\n    -webkit-overflow-scrolling: touch; }\n  .Cal__Container__root .ReactVirtualized__Grid__innerScrollContainer {\n    width: 100% !important; }\n\n.Cal__Container__listWrapper {\n  position: relative;\n  overflow: hidden; }\n", ""]);
	
	// exports


/***/ },
/* 2316 */,
/* 2317 */,
/* 2318 */,
/* 2319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-floating-labels/index.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var textPropTypes = _reactNative.Text.propTypes || _reactNative.View.propTypes;
	var textInputPropTypes = _reactNative.TextInput.propTypes || textPropTypes;
	var propTypes = _extends({}, textInputPropTypes, {
	  inputStyle: textInputPropTypes.style,
	  labelStyle: textPropTypes.style,
	  disabled: _react2.PropTypes.bool,
	  style: _reactNative.View.propTypes.style
	});
	
	var FloatingLabel = _wrapComponent('_component')(_react3.default.createClass({
	  displayName: 'FloatingLabel',
	
	  propTypes: propTypes,
	
	  getInitialState: function getInitialState() {
	    var state = {
	      text: this.props.value,
	      dirty: !!this.props.value
	    };
	
	    var style = state.dirty ? dirtyStyle : cleanStyle;
	    state.labelStyle = {
	      fontSize: new _reactNative.Animated.Value(style.fontSize),
	      top: new _reactNative.Animated.Value(style.top)
	    };
	
	    return state;
	  },
	  _animate: function _animate(dirty) {
	    var nextStyle = dirty ? dirtyStyle : cleanStyle;
	    var labelStyle = this.state.labelStyle;
	    var anims = Object.keys(nextStyle).map(function (prop) {
	      return _reactNative.Animated.timing(labelStyle[prop], {
	        toValue: nextStyle[prop],
	        duration: 200
	      }, _reactNative.Easing.ease);
	    });
	
	    _reactNative.Animated.parallel(anims).start();
	  },
	  _onFocus: function _onFocus() {
	    this._animate(true);
	    this.setState({ dirty: true });
	    if (this.props.onFocus) {
	      this.props.onFocus(arguments);
	    }
	  },
	  _onBlur: function _onBlur() {
	    if (!this.state.text) {
	      this._animate(false);
	      this.setState({ dirty: false });
	    }
	
	    if (this.props.onBlur) {
	      this.props.onBlur(arguments);
	    }
	  },
	  onChangeText: function onChangeText(text) {
	    this.setState({ text: text });
	    if (this.props.onChangeText) {
	      this.props.onChangeText(text);
	    }
	  },
	  updateText: function updateText(event) {
	    var text = event.nativeEvent.text;
	    this.setState({ text: text });
	
	    if (this.props.onEndEditing) {
	      this.props.onEndEditing(event);
	    }
	  },
	  _renderLabel: function _renderLabel() {
	    return _react3.default.createElement(
	      _reactNative.Animated.Text,
	      {
	        pointerEvents: 'none',
	        ref: 'label',
	        style: [this.state.labelStyle, styles.label, this.props.labelStyle]
	      },
	      this.props.children
	    );
	  },
	  render: function render() {
	    var props = {
	      autoCapitalize: this.props.autoCapitalize,
	      autoCorrect: this.props.autoCorrect,
	      autoFocus: this.props.autoFocus,
	      bufferDelay: this.props.bufferDelay,
	      clearButtonMode: this.props.clearButtonMode,
	      clearTextOnFocus: this.props.clearTextOnFocus,
	      controlled: this.props.controlled,
	      editable: this.props.editable,
	      enablesReturnKeyAutomatically: this.props.enablesReturnKeyAutomatically,
	      keyboardType: this.props.keyboardType,
	      multiline: this.props.multiline,
	      onBlur: this._onBlur,
	      onChange: this.props.onChange,
	      onChangeText: this.onChangeText,
	      onEndEditing: this.updateText,
	      onFocus: this._onFocus,
	      onSubmitEditing: this.props.onSubmitEditing,
	      password: this.props.password,
	      returnKeyType: this.props.returnKeyType,
	      selectTextOnFocus: this.props.selectTextOnFocus,
	      selectionState: this.props.selectionState,
	      style: [styles.input],
	      testID: this.props.testID,
	      value: this.props.value,
	      underlineColorAndroid: this.props.underlineColorAndroid, // android TextInput will show the default bottom border
	      onKeyPress: this.props.onKeyPress
	    },
	        elementStyles = [styles.element];
	
	    if (this.props.inputStyle) {
	      props.style.push(this.props.inputStyle);
	    }
	
	    if (this.props.style) {
	      elementStyles.push(this.props.style);
	    }
	
	    return _react3.default.createElement(
	      _reactNative.View,
	      { style: elementStyles },
	      this._renderLabel(),
	      _react3.default.createElement(_reactNative.TextInput, props)
	    );
	  }
	}));
	
	var labelStyleObj = {
	  marginTop: 21,
	  paddingLeft: 9,
	  color: '#AAA',
	  position: 'absolute'
	};
	
	if (_reactNative.Platform.OS === 'web') {
	  labelStyleObj.pointerEvents = 'none';
	}
	
	var styles = _reactNative.StyleSheet.create({
	  element: {
	    position: 'relative'
	  },
	  input: {
	    height: 40,
	    borderColor: 'gray',
	    backgroundColor: 'transparent',
	    justifyContent: 'center',
	    borderWidth: 1,
	    color: 'black',
	    fontSize: 20,
	    borderRadius: 4,
	    paddingLeft: 10,
	    marginTop: 20
	  },
	  label: labelStyleObj
	});
	
	var cleanStyle = {
	  fontSize: 20,
	  top: 7
	};
	
	var dirtyStyle = {
	  fontSize: 12,
	  top: -17
	};
	
	FloatingLabel.propTypes = {
	  disabled: _react2.PropTypes.bool,
	  style: _reactNative.Text.propTypes.style
	};
	
	module.exports = FloatingLabel;

/***/ },
/* 2320 */,
/* 2321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class, _temp;
	
	var _reactDom = __webpack_require__(345);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Webcam: {
	    displayName: 'Webcam'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-webcam/src/react-webcam.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var getUserMedia = void 0;
	try {
	  getUserMedia = __webpack_require__(862);
	} catch (err) {
	  console.log('getUserMedia not supported', err);
	}
	
	function hasGetUserMedia() {
	  return !!getUserMedia;
	}
	
	var Webcam = _wrapComponent('Webcam')((_temp = _class = function (_Component) {
	  _inherits(Webcam, _Component);
	
	  function Webcam() {
	    _classCallCheck(this, Webcam);
	
	    var _this = _possibleConstructorReturn(this, (Webcam.__proto__ || Object.getPrototypeOf(Webcam)).call(this));
	
	    _this.state = {
	      hasUserMedia: false
	    };
	    return _this;
	  }
	
	  _createClass(Webcam, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (!hasGetUserMedia()) return;
	
	      Webcam.mountedInstances.push(this);
	
	      if (!this.state.hasUserMedia && !Webcam.userMediaRequested) {
	        this.requestUserMedia();
	      }
	    }
	  }, {
	    key: 'requestUserMedia',
	    value: function requestUserMedia() {
	      this._requestUserMedia();
	      Webcam.userMediaRequested = true;
	    }
	  }, {
	    key: '_requestUserMedia',
	    value: function () {
	      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
	        var _this2 = this;
	
	        var sourceSelected, devices, audioSource, videoSource;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                sourceSelected = function sourceSelected(_ref2) {
	                  var audioSource = _ref2.audioSource,
	                      videoSource = _ref2.videoSource;
	
	                  var constraints = {
	                    video: {
	                      optional: [{ sourceId: videoSource }]
	                    }
	                  };
	
	                  if (_this2.props.audio) {
	                    constraints.audio = {
	                      optional: [{ sourceId: audioSource }]
	                    };
	                  }
	
	                  getUserMedia(constraints, function (err, stream) {
	                    if (err) {
	                      return Webcam.mountedInstances.forEach(function (instance) {
	                        return instance.handleUserMedia(err);
	                      });
	                    }
	
	                    Webcam.mountedInstances.forEach(function (instance) {
	                      return instance.handleUserMedia(null, stream);
	                    });
	                  });
	                };
	
	                if (!(this.props.audioSource && this.props.videoSource)) {
	                  _context.next = 3;
	                  break;
	                }
	
	                return _context.abrupt('return', sourceSelected(this.props));
	
	              case 3:
	                if (!('mediaDevices' in navigator)) {
	                  _context.next = 19;
	                  break;
	                }
	
	                devices = void 0;
	                _context.prev = 5;
	                _context.next = 8;
	                return navigator.mediaDevices.enumerateDevices();
	
	              case 8:
	                devices = _context.sent;
	                _context.next = 15;
	                break;
	
	              case 11:
	                _context.prev = 11;
	                _context.t0 = _context['catch'](5);
	
	                console.log(_context.t0.name + ': ' + _context.t0.message); // eslint-disable-line no-console
	                return _context.abrupt('return');
	
	              case 15:
	                audioSource = null;
	                videoSource = null;
	
	
	                devices.forEach(function (device) {
	                  if (device.kind === 'audioinput') {
	                    audioSource = device.deviceId;
	                  } else if (device.kind === 'videoinput') {
	                    videoSource = device.deviceId;
	                  }
	                });
	
	                return _context.abrupt('return', sourceSelected({ audioSource: audioSource, videoSource: videoSource }));
	
	              case 19:
	
	                MediaStreamTrack.getSources(function (sources) {
	                  var audioSource = null;
	                  var videoSource = null;
	
	                  sources.forEach(function (source) {
	                    if (source.kind === 'audio') {
	                      audioSource = source.id;
	                    } else if (source.kind === 'video') {
	                      videoSource = source.id;
	                    }
	                  });
	
	                  sourceSelected({ audioSource: audioSource, videoSource: videoSource });
	                });
	
	              case 20:
	              case 'end':
	                return _context.stop();
	            }
	          }
	        }, _callee, this, [[5, 11]]);
	      }));
	
	      function _requestUserMedia() {
	        return _ref.apply(this, arguments);
	      }
	
	      return _requestUserMedia;
	    }()
	  }, {
	    key: 'handleUserMedia',
	    value: function handleUserMedia(error, stream) {
	      if (error) {
	        this.setState({
	          hasUserMedia: false
	        });
	
	        this.props.onUserMedia(error);
	        return;
	      }
	
	      var src = window.URL.createObjectURL(stream);
	
	      this.stream = stream;
	      this.setState({
	        hasUserMedia: true,
	        src: src
	      });
	
	      this.props.onUserMedia();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var index = Webcam.mountedInstances.indexOf(this);
	      Webcam.mountedInstances.splice(index, 1);
	
	      if (Webcam.mountedInstances.length === 0 && this.state.hasUserMedia) {
	        if (this.stream.stop) {
	          this.stream.stop();
	        } else {
	          if (this.stream.getVideoTracks) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	              for (var _iterator = this.stream.getVideoTracks()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var track = _step.value;
	
	                track.stop();
	              }
	            } catch (err) {
	              _didIteratorError = true;
	              _iteratorError = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                  _iterator.return();
	                }
	              } finally {
	                if (_didIteratorError) {
	                  throw _iteratorError;
	                }
	              }
	            }
	          }
	          if (this.stream.getAudioTracks) {
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;
	
	            try {
	              for (var _iterator2 = this.stream.getAudioTracks()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var _track = _step2.value;
	
	                _track.stop();
	              }
	            } catch (err) {
	              _didIteratorError2 = true;
	              _iteratorError2 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                  _iterator2.return();
	                }
	              } finally {
	                if (_didIteratorError2) {
	                  throw _iteratorError2;
	                }
	              }
	            }
	          }
	        }
	        Webcam.userMediaRequested = false;
	        window.URL.revokeObjectURL(this.state.src);
	      }
	    }
	  }, {
	    key: 'getScreenshot',
	    value: function getScreenshot() {
	      if (!this.state.hasUserMedia) return null;
	
	      var canvas = this.getCanvas();
	      return canvas.toDataURL(this.props.screenshotFormat);
	    }
	  }, {
	    key: 'getCanvas',
	    value: function getCanvas() {
	      if (!this.state.hasUserMedia) return null;
	
	      var video = (0, _reactDom.findDOMNode)(this);
	      if (!this.ctx) {
	        var _canvas = document.createElement('canvas');
	        var aspectRatio = video.videoWidth / video.videoHeight;
	        var width = Math.min(video.clientHeight * aspectRatio, video.clientWidth);
	        _canvas.width = width;
	        _canvas.height = width / aspectRatio;
	
	        this.canvas = _canvas;
	        this.ctx = _canvas.getContext('2d');
	      }
	
	      var ctx = this.ctx,
	          canvas = this.canvas;
	
	      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
	
	      return canvas;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react3.default.createElement('video', {
	        autoPlay: true,
	        width: this.props.width,
	        height: this.props.height,
	        src: this.state.src,
	        muted: this.props.muted,
	        className: this.props.className
	      });
	    }
	  }]);
	
	  return Webcam;
	}(_react2.Component), _class.defaultProps = {
	  audio: true,
	  height: 480,
	  width: 640,
	  screenshotFormat: 'image/webp',
	  onUserMedia: function onUserMedia() {}
	}, _class.propTypes = {
	  audio: _react2.PropTypes.bool,
	  muted: _react2.PropTypes.bool,
	  onUserMedia: _react2.PropTypes.func,
	  height: _react2.PropTypes.oneOfType([_react2.PropTypes.number, _react2.PropTypes.string]),
	  width: _react2.PropTypes.oneOfType([_react2.PropTypes.number, _react2.PropTypes.string]),
	  screenshotFormat: _react2.PropTypes.oneOf(['image/webp', 'image/png', 'image/jpeg']),
	  className: _react2.PropTypes.string
	}, _class.mountedInstances = [], _class.userMediaRequested = false, _temp));
	
	exports.default = Webcam;

/***/ },
/* 2322 */,
/* 2323 */,
/* 2324 */,
/* 2325 */,
/* 2326 */,
/* 2327 */,
/* 2328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _require = __webpack_require__(300),
	    NativeModules = _require.NativeModules;
	
	module.exports = NativeModules.ImagePickerManager;

/***/ },
/* 2329 */,
/* 2330 */,
/* 2331 */,
/* 2332 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	(function webpackUniversalModuleDefinition(root, factory) {
		if (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory(__webpack_require__(301));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(301)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports["Dropzone"] = factory(require("react"));else root["Dropzone"] = factory(root["react"]);
	})(undefined, function (__WEBPACK_EXTERNAL_MODULE_1__) {
		return (/******/function (modules) {
				// webpackBootstrap
				/******/ // The module cache
				/******/var installedModules = {};
				/******/
				/******/ // The require function
				/******/function __webpack_require__(moduleId) {
					/******/
					/******/ // Check if module is in cache
					/******/if (installedModules[moduleId])
						/******/return installedModules[moduleId].exports;
					/******/
					/******/ // Create a new module (and put it into the cache)
					/******/var module = installedModules[moduleId] = {
						/******/exports: {},
						/******/id: moduleId,
						/******/loaded: false
						/******/ };
					/******/
					/******/ // Execute the module function
					/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
					/******/
					/******/ // Flag the module as loaded
					/******/module.loaded = true;
					/******/
					/******/ // Return the exports of the module
					/******/return module.exports;
					/******/
				}
				/******/
				/******/
				/******/ // expose the modules object (__webpack_modules__)
				/******/__webpack_require__.m = modules;
				/******/
				/******/ // expose the module cache
				/******/__webpack_require__.c = installedModules;
				/******/
				/******/ // __webpack_public_path__
				/******/__webpack_require__.p = "";
				/******/
				/******/ // Load entry module and return exports
				/******/return __webpack_require__(0);
				/******/
			}(
			/************************************************************************/
			/******/[
			/* 0 */
			/***/function (module, exports, __webpack_require__) {
	
				'use strict';
	
				Object.defineProperty(exports, "__esModule", {
					value: true
				});
	
				var _extends = Object.assign || function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}return target;
				};
	
				var _createClass = function () {
					function defineProperties(target, props) {
						for (var i = 0; i < props.length; i++) {
							var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
						}
					}return function (Constructor, protoProps, staticProps) {
						if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
					};
				}();
	
				var _react = __webpack_require__(1);
	
				var _react2 = _interopRequireDefault(_react);
	
				var _attrAccept = __webpack_require__(2);
	
				var _attrAccept2 = _interopRequireDefault(_attrAccept);
	
				var _reactIsDeprecated = __webpack_require__(3);
	
				var _getDataTransferItems = __webpack_require__(4);
	
				var _getDataTransferItems2 = _interopRequireDefault(_getDataTransferItems);
	
				function _interopRequireDefault(obj) {
					return obj && obj.__esModule ? obj : { default: obj };
				}
	
				function _objectWithoutProperties(obj, keys) {
					var target = {};for (var i in obj) {
						if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
					}return target;
				}
	
				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}
	
				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}
	
				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
				} /* eslint prefer-template: 0 */
	
				var supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;
	
				var Dropzone = function (_React$Component) {
					_inherits(Dropzone, _React$Component);
	
					_createClass(Dropzone, null, [{
						key: 'renderChildren',
						value: function renderChildren(children, isDragActive, isDragReject) {
							if (typeof children === 'function') {
								return children({ isDragActive: isDragActive, isDragReject: isDragReject });
							}
							return children;
						}
					}]);
	
					function Dropzone(props, context) {
						_classCallCheck(this, Dropzone);
	
						var _this = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this, props, context));
	
						_this.onClick = _this.onClick.bind(_this);
						_this.onDragStart = _this.onDragStart.bind(_this);
						_this.onDragEnter = _this.onDragEnter.bind(_this);
						_this.onDragLeave = _this.onDragLeave.bind(_this);
						_this.onDragOver = _this.onDragOver.bind(_this);
						_this.onDrop = _this.onDrop.bind(_this);
						_this.onFileDialogCancel = _this.onFileDialogCancel.bind(_this);
						_this.fileAccepted = _this.fileAccepted.bind(_this);
						_this.isFileDialogActive = false;
						_this.state = {
							isDragActive: false
						};
						return _this;
					}
	
					_createClass(Dropzone, [{
						key: 'componentDidMount',
						value: function componentDidMount() {
							this.enterCounter = 0;
							// Tried implementing addEventListener, but didn't work out
							document.body.onfocus = this.onFileDialogCancel;
						}
					}, {
						key: 'componentWillUnmount',
						value: function componentWillUnmount() {
							// Can be replaced with removeEventListener, if addEventListener works
							document.body.onfocus = null;
						}
					}, {
						key: 'onDragStart',
						value: function onDragStart(e) {
							if (this.props.onDragStart) {
								this.props.onDragStart.call(this, e);
							}
						}
					}, {
						key: 'onDragEnter',
						value: function onDragEnter(e) {
							e.preventDefault();
	
							// Count the dropzone and any children that are entered.
							++this.enterCounter;
	
							var allFilesAccepted = this.allFilesAccepted((0, _getDataTransferItems2.default)(e, this.props.multiple));
	
							this.setState({
								isDragActive: allFilesAccepted,
								isDragReject: !allFilesAccepted
							});
	
							if (this.props.onDragEnter) {
								this.props.onDragEnter.call(this, e);
							}
						}
					}, {
						key: 'onDragOver',
						value: function onDragOver(e) {
							// eslint-disable-line class-methods-use-this
							e.preventDefault();
							e.stopPropagation();
							try {
								e.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign
							} catch (err) {
								// continue regardless of error
							}
	
							if (this.props.onDragOver) {
								this.props.onDragOver.call(this, e);
							}
							return false;
						}
					}, {
						key: 'onDragLeave',
						value: function onDragLeave(e) {
							e.preventDefault();
	
							// Only deactivate once the dropzone and all children was left.
							if (--this.enterCounter > 0) {
								return;
							}
	
							this.setState({
								isDragActive: false,
								isDragReject: false
							});
	
							if (this.props.onDragLeave) {
								this.props.onDragLeave.call(this, e);
							}
						}
					}, {
						key: 'onDrop',
						value: function onDrop(e) {
							var _this2 = this;
	
							var _props = this.props,
							    onDrop = _props.onDrop,
							    onDropAccepted = _props.onDropAccepted,
							    onDropRejected = _props.onDropRejected,
							    multiple = _props.multiple,
							    disablePreview = _props.disablePreview;
	
							var fileList = (0, _getDataTransferItems2.default)(e, multiple);
							var acceptedFiles = [];
							var rejectedFiles = [];
	
							// Stop default browser behavior
							e.preventDefault();
	
							// Reset the counter along with the drag on a drop.
							this.enterCounter = 0;
							this.isFileDialogActive = false;
	
							fileList.forEach(function (file) {
								if (!disablePreview) {
									file.preview = window.URL.createObjectURL(file); // eslint-disable-line no-param-reassign
								}
	
								if (_this2.fileAccepted(file) && _this2.fileMatchSize(file)) {
									acceptedFiles.push(file);
								} else {
									rejectedFiles.push(file);
								}
							});
	
							if (onDrop) {
								onDrop.call(this, acceptedFiles, rejectedFiles, e);
							}
	
							if (rejectedFiles.length > 0 && onDropRejected) {
								onDropRejected.call(this, rejectedFiles, e);
							}
	
							if (acceptedFiles.length > 0 && onDropAccepted) {
								onDropAccepted.call(this, acceptedFiles, e);
							}
	
							// Reset drag state
							this.setState({
								isDragActive: false,
								isDragReject: false
							});
						}
					}, {
						key: 'onClick',
						value: function onClick(e) {
							var _props2 = this.props,
							    onClick = _props2.onClick,
							    disableClick = _props2.disableClick;
	
							if (!disableClick) {
								e.stopPropagation();
								this.open();
								if (onClick) {
									onClick.call(this, e);
								}
							}
						}
					}, {
						key: 'onFileDialogCancel',
						value: function onFileDialogCancel() {
							// timeout will not recognize context of this method
							var onFileDialogCancel = this.props.onFileDialogCancel;
							var fileInputEl = this.fileInputEl;
							var isFileDialogActive = this.isFileDialogActive;
							// execute the timeout only if the onFileDialogCancel is defined and FileDialog
							// is opened in the browser
	
							if (onFileDialogCancel && isFileDialogActive) {
								setTimeout(function () {
									// Returns an object as FileList
									var FileList = fileInputEl.files;
									if (!FileList.length) {
										isFileDialogActive = false;
										onFileDialogCancel();
									}
								}, 300);
							}
						}
					}, {
						key: 'fileAccepted',
						value: function fileAccepted(file) {
							return (0, _attrAccept2.default)(file, this.props.accept);
						}
					}, {
						key: 'fileMatchSize',
						value: function fileMatchSize(file) {
							return file.size <= this.props.maxSize && file.size >= this.props.minSize;
						}
					}, {
						key: 'allFilesAccepted',
						value: function allFilesAccepted(files) {
							return files.every(this.fileAccepted);
						}
					}, {
						key: 'open',
						value: function open() {
							this.isFileDialogActive = true;
							this.fileInputEl.value = null;
							this.fileInputEl.click();
						}
					}, {
						key: 'render',
						value: function render() {
							var _this3 = this;
	
							var _props3 = this.props,
							    accept = _props3.accept,
							    activeClassName = _props3.activeClassName,
							    inputProps = _props3.inputProps,
							    multiple = _props3.multiple,
							    name = _props3.name,
							    rejectClassName = _props3.rejectClassName,
							    children = _props3.children,
							    rest = _objectWithoutProperties(_props3, ['accept', 'activeClassName', 'inputProps', 'multiple', 'name', 'rejectClassName', 'children']);
	
							var activeStyle = rest.activeStyle,
							    className = rest.className,
							    rejectStyle = rest.rejectStyle,
							    style = rest.style,
							    props = _objectWithoutProperties(rest, ['activeStyle', 'className', 'rejectStyle', 'style']);
	
							var _state = this.state,
							    isDragActive = _state.isDragActive,
							    isDragReject = _state.isDragReject;
	
							className = className || '';
	
							if (isDragActive && activeClassName) {
								className += ' ' + activeClassName;
							}
							if (isDragReject && rejectClassName) {
								className += ' ' + rejectClassName;
							}
	
							if (!className && !style && !activeStyle && !rejectStyle) {
								style = {
									width: 200,
									height: 200,
									borderWidth: 2,
									borderColor: '#666',
									borderStyle: 'dashed',
									borderRadius: 5
								};
								activeStyle = {
									borderStyle: 'solid',
									backgroundColor: '#eee'
								};
								rejectStyle = {
									borderStyle: 'solid',
									backgroundColor: '#ffdddd'
								};
							}
	
							var appliedStyle = void 0;
							if (activeStyle && isDragActive) {
								appliedStyle = _extends({}, style, activeStyle);
							} else if (rejectStyle && isDragReject) {
								appliedStyle = _extends({}, style, rejectStyle);
							} else {
								appliedStyle = _extends({}, style);
							}
	
							var inputAttributes = {
								accept: accept,
								type: 'file',
								style: { display: 'none' },
								multiple: supportMultiple && multiple,
								ref: function ref(el) {
									return _this3.fileInputEl = el;
								}, // eslint-disable-line
								onChange: this.onDrop
							};
	
							if (name && name.length) {
								inputAttributes.name = name;
							}
	
							// Remove custom properties before passing them to the wrapper div element
							var customProps = ['acceptedFiles', 'disablePreview', 'disableClick', 'onDropAccepted', 'onDropRejected', 'onFileDialogCancel', 'maxSize', 'minSize'];
							var divProps = _extends({}, props);
							customProps.forEach(function (prop) {
								return delete divProps[prop];
							});
	
							return _react2.default.createElement('div', _extends({
								className: className,
								style: appliedStyle
							}, divProps /* expand user provided props first so event handlers are never overridden */, {
								onClick: this.onClick,
								onDragStart: this.onDragStart,
								onDragEnter: this.onDragEnter,
								onDragOver: this.onDragOver,
								onDragLeave: this.onDragLeave,
								onDrop: this.onDrop
							}), Dropzone.renderChildren(children, isDragActive, isDragReject), _react2.default.createElement('input', _extends({}, inputProps /* expand user provided inputProps first so inputAttributes override them */, inputAttributes)));
						}
					}]);
	
					return Dropzone;
				}(_react2.default.Component);
	
				Dropzone.defaultProps = {
					disablePreview: false,
					disableClick: false,
					multiple: true,
					maxSize: Infinity,
					minSize: 0
				};
	
				Dropzone.propTypes = {
					onClick: _react2.default.PropTypes.func,
					onDrop: _react2.default.PropTypes.func,
					onDropAccepted: _react2.default.PropTypes.func,
					onDropRejected: _react2.default.PropTypes.func,
					onDragStart: _react2.default.PropTypes.func,
					onDragEnter: _react2.default.PropTypes.func,
					onDragOver: _react2.default.PropTypes.func,
					onDragLeave: _react2.default.PropTypes.func,
	
					// Contents of the dropzone
					children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.node, _react2.default.PropTypes.func]),
	
					// CSS styles to apply
					style: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.object, 'Prop style is deprecated. Use function as children to style dropzone and its contents.'),
	
					// CSS styles to apply when drop will be accepted
					activeStyle: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.object, 'Prop activeStyle is deprecated. Use function as children to style dropzone and its contents.'),
	
					// CSS styles to apply when drop will be rejected
					rejectStyle: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.object, 'Prop rejectStyle is deprecated. Use function as children to style dropzone and its contents.'),
	
					// Optional className
					className: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.string, 'Prop className is deprecated. Use function as children to style dropzone and its contents.'),
	
					// className for accepted state
					activeClassName: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.string, 'Prop activeClassName is deprecated. Use function as children to style dropzone and its contents.'),
	
					// className for rejected state
					rejectClassName: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.string, 'Prop rejectClassName is deprecated. Use function as children to style dropzone and its contents.'),
	
					disablePreview: _react2.default.PropTypes.bool, // Enable/disable preview generation
					disableClick: _react2.default.PropTypes.bool, // Disallow clicking on the dropzone container to open file dialog
					onFileDialogCancel: _react2.default.PropTypes.func, // Provide a callback on clicking the cancel button of the file dialog
	
					inputProps: _react2.default.PropTypes.object, // Pass additional attributes to the <input type="file"/> tag
					multiple: _react2.default.PropTypes.bool, // Allow dropping multiple files
					accept: _react2.default.PropTypes.string, // Allow specific types of files. See https://github.com/okonet/attr-accept for more information
					name: _react2.default.PropTypes.string, // name attribute for the input tag
					maxSize: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.number, 'Prop maxSize is deprecated and will be removed in the next major release'),
					minSize: (0, _reactIsDeprecated.deprecate)(_react2.default.PropTypes.number, 'Prop minSize is deprecated and will be removed in the next major release')
				};
	
				exports.default = Dropzone;
				module.exports = exports['default'];
	
				/***/
			},
			/* 1 */
			/***/function (module, exports) {
	
				module.exports = __WEBPACK_EXTERNAL_MODULE_1__;
	
				/***/
			},
			/* 2 */
			/***/function (module, exports) {
	
				module.exports = function (t) {
					function n(e) {
						if (r[e]) return r[e].exports;var o = r[e] = { exports: {}, id: e, loaded: !1 };return t[e].call(o.exports, o, o.exports, n), o.loaded = !0, o.exports;
					}var r = {};return n.m = t, n.c = r, n.p = "", n(0);
				}([function (t, n, r) {
					"use strict";
					n.__esModule = !0, r(8), r(9), n["default"] = function (t, n) {
						if (t && n) {
							var r = function () {
								var r = Array.isArray(n) ? n : n.split(","),
								    e = t.name || "",
								    o = t.type || "",
								    i = o.replace(/\/.*$/, "");return { v: r.some(function (t) {
										var n = t.trim();return "." === n.charAt(0) ? e.toLowerCase().endsWith(n.toLowerCase()) : /\/\*$/.test(n) ? i === n.replace(/\/.*$/, "") : o === n;
									}) };
							}();if ("object" == (typeof r === 'undefined' ? 'undefined' : _typeof(r))) return r.v;
						}return !0;
					}, t.exports = n["default"];
				}, function (t, n) {
					var r = t.exports = { version: "1.2.2" };"number" == typeof __e && (__e = r);
				}, function (t, n) {
					var r = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = r);
				}, function (t, n, r) {
					var e = r(2),
					    o = r(1),
					    i = r(4),
					    u = r(19),
					    c = "prototype",
					    f = function f(t, n) {
						return function () {
							return t.apply(n, arguments);
						};
					},
					    s = function s(t, n, r) {
						var a,
						    p,
						    l,
						    y,
						    d = t & s.G,
						    h = t & s.P,
						    v = d ? e : t & s.S ? e[n] || (e[n] = {}) : (e[n] || {})[c],
						    x = d ? o : o[n] || (o[n] = {});d && (r = n);for (a in r) {
							p = !(t & s.F) && v && a in v, l = (p ? v : r)[a], y = t & s.B && p ? f(l, e) : h && "function" == typeof l ? f(Function.call, l) : l, v && !p && u(v, a, l), x[a] != l && i(x, a, y), h && ((x[c] || (x[c] = {}))[a] = l);
						}
					};e.core = o, s.F = 1, s.G = 2, s.S = 4, s.P = 8, s.B = 16, s.W = 32, t.exports = s;
				}, function (t, n, r) {
					var e = r(5),
					    o = r(18);t.exports = r(22) ? function (t, n, r) {
						return e.setDesc(t, n, o(1, r));
					} : function (t, n, r) {
						return t[n] = r, t;
					};
				}, function (t, n) {
					var r = Object;t.exports = { create: r.create, getProto: r.getPrototypeOf, isEnum: {}.propertyIsEnumerable, getDesc: r.getOwnPropertyDescriptor, setDesc: r.defineProperty, setDescs: r.defineProperties, getKeys: r.keys, getNames: r.getOwnPropertyNames, getSymbols: r.getOwnPropertySymbols, each: [].forEach };
				}, function (t, n) {
					var r = 0,
					    e = Math.random();t.exports = function (t) {
						return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++r + e).toString(36));
					};
				}, function (t, n, r) {
					var e = r(20)("wks"),
					    o = r(2).Symbol;t.exports = function (t) {
						return e[t] || (e[t] = o && o[t] || (o || r(6))("Symbol." + t));
					};
				}, function (t, n, r) {
					r(26), t.exports = r(1).Array.some;
				}, function (t, n, r) {
					r(25), t.exports = r(1).String.endsWith;
				}, function (t, n) {
					t.exports = function (t) {
						if ("function" != typeof t) throw TypeError(t + " is not a function!");return t;
					};
				}, function (t, n) {
					var r = {}.toString;t.exports = function (t) {
						return r.call(t).slice(8, -1);
					};
				}, function (t, n, r) {
					var e = r(10);t.exports = function (t, n, r) {
						if (e(t), void 0 === n) return t;switch (r) {case 1:
								return function (r) {
									return t.call(n, r);
								};case 2:
								return function (r, e) {
									return t.call(n, r, e);
								};case 3:
								return function (r, e, o) {
									return t.call(n, r, e, o);
								};}return function () {
							return t.apply(n, arguments);
						};
					};
				}, function (t, n) {
					t.exports = function (t) {
						if (void 0 == t) throw TypeError("Can't call method on  " + t);return t;
					};
				}, function (t, n, r) {
					t.exports = function (t) {
						var n = /./;try {
							"/./"[t](n);
						} catch (e) {
							try {
								return n[r(7)("match")] = !1, !"/./"[t](n);
							} catch (o) {}
						}return !0;
					};
				}, function (t, n) {
					t.exports = function (t) {
						try {
							return !!t();
						} catch (n) {
							return !0;
						}
					};
				}, function (t, n) {
					t.exports = function (t) {
						return "object" == (typeof t === 'undefined' ? 'undefined' : _typeof(t)) ? null !== t : "function" == typeof t;
					};
				}, function (t, n, r) {
					var e = r(16),
					    o = r(11),
					    i = r(7)("match");t.exports = function (t) {
						var n;return e(t) && (void 0 !== (n = t[i]) ? !!n : "RegExp" == o(t));
					};
				}, function (t, n) {
					t.exports = function (t, n) {
						return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: n };
					};
				}, function (t, n, r) {
					var e = r(2),
					    o = r(4),
					    i = r(6)("src"),
					    u = "toString",
					    c = Function[u],
					    f = ("" + c).split(u);r(1).inspectSource = function (t) {
						return c.call(t);
					}, (t.exports = function (t, n, r, u) {
						"function" == typeof r && (o(r, i, t[n] ? "" + t[n] : f.join(String(n))), "name" in r || (r.name = n)), t === e ? t[n] = r : (u || delete t[n], o(t, n, r));
					})(Function.prototype, u, function () {
						return "function" == typeof this && this[i] || c.call(this);
					});
				}, function (t, n, r) {
					var e = r(2),
					    o = "__core-js_shared__",
					    i = e[o] || (e[o] = {});t.exports = function (t) {
						return i[t] || (i[t] = {});
					};
				}, function (t, n, r) {
					var e = r(17),
					    o = r(13);t.exports = function (t, n, r) {
						if (e(n)) throw TypeError("String#" + r + " doesn't accept regex!");return String(o(t));
					};
				}, function (t, n, r) {
					t.exports = !r(15)(function () {
						return 7 != Object.defineProperty({}, "a", { get: function get() {
								return 7;
							} }).a;
					});
				}, function (t, n) {
					var r = Math.ceil,
					    e = Math.floor;t.exports = function (t) {
						return isNaN(t = +t) ? 0 : (t > 0 ? e : r)(t);
					};
				}, function (t, n, r) {
					var e = r(23),
					    o = Math.min;t.exports = function (t) {
						return t > 0 ? o(e(t), 9007199254740991) : 0;
					};
				}, function (t, n, r) {
					"use strict";
					var e = r(3),
					    o = r(24),
					    i = r(21),
					    u = "endsWith",
					    c = ""[u];e(e.P + e.F * r(14)(u), "String", { endsWith: function endsWith(t) {
							var n = i(this, t, u),
							    r = arguments,
							    e = r.length > 1 ? r[1] : void 0,
							    f = o(n.length),
							    s = void 0 === e ? f : Math.min(o(e), f),
							    a = String(t);return c ? c.call(n, a, s) : n.slice(s - a.length, s) === a;
						} });
				}, function (t, n, r) {
					var e = r(5),
					    o = r(3),
					    i = r(1).Array || Array,
					    u = {},
					    c = function c(t, n) {
						e.each.call(t.split(","), function (t) {
							void 0 == n && t in i ? u[t] = i[t] : t in [] && (u[t] = r(12)(Function.call, [][t], n));
						});
					};c("pop,reverse,shift,keys,values,entries", 1), c("indexOf,every,some,forEach,map,filter,find,findIndex,includes", 3), c("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill"), o(o.S, "Array", u);
				}]);
	
				/***/
			},
			/* 3 */
			/***/function (module, exports) {
	
				"use strict";
	
				Object.defineProperty(exports, "__esModule", {
					value: true
				});
	
				var _extends = Object.assign || function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}return target;
				};
	
				exports.deprecate = deprecate;
				exports.addIsDeprecated = addIsDeprecated;
	
				/**
	    * Wraps a singular React.PropTypes.[type] with
	    * a console.warn call that is only called if the
	    * prop is not undefined/null and is only called
	    * once.
	    * @param  {Object} propType React.PropType type
	    * @param  {String} message  Deprecation message
	    * @return {Function}        ReactPropTypes checkType
	    */
				function deprecate(propType, message) {
					var warned = false;
					return function () {
						for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
							args[_key] = arguments[_key];
						}
	
						var props = args[0];
						var propName = args[1];
	
						var prop = props[propName];
						if (prop !== undefined && prop !== null && !warned) {
							warned = true;
							console.warn(message);
						}
						return propType.call.apply(propType, [this].concat(args));
					};
				}
	
				/**
	    * Returns a copy of `PropTypes` with an `isDeprecated`
	    * method available on all top-level propType options.
	    * @param {React.PropTypes}  PropTypes
	    * @return {React.PropTypes} newPropTypes
	    */
				function addIsDeprecated(PropTypes) {
					var newPropTypes = _extends({}, PropTypes);
					for (var type in newPropTypes) {
						if (newPropTypes.hasOwnProperty(type)) {
							var propType = newPropTypes[type];
							propType = propType.bind(newPropTypes);
							propType.isDeprecated = deprecate.bind(newPropTypes, propType);
							newPropTypes[type] = propType;
						}
					}
					return newPropTypes;
				}
	
				/***/
			},
			/* 4 */
			/***/function (module, exports) {
	
				"use strict";
	
				Object.defineProperty(exports, "__esModule", {
					value: true
				});
				exports.default = getDataTransferFiles;
				function getDataTransferFiles(event) {
					var isMultipleAllowed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
					var dataTransferItemsList = [];
					if (event.dataTransfer) {
						var dt = event.dataTransfer;
						if (dt.files && dt.files.length) {
							dataTransferItemsList = dt.files;
						} else if (dt.items && dt.items.length) {
							// During the drag even the dataTransfer.files is null
							// but Chrome implements some drag store, which is accesible via dataTransfer.items
							dataTransferItemsList = dt.items;
						}
					} else if (event.target && event.target.files) {
						dataTransferItemsList = event.target.files;
					}
	
					if (dataTransferItemsList.length > 0) {
						dataTransferItemsList = isMultipleAllowed ? dataTransferItemsList : [dataTransferItemsList[0]];
					}
	
					// Convert from DataTransferItemsList to the native Array
					return Array.prototype.slice.call(dataTransferItemsList);
				}
				module.exports = exports["default"];

				/***/
			}
			/******/])
		);
	});
	;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(952)(module)))

/***/ },
/* 2333 */,
/* 2334 */,
/* 2335 */,
/* 2336 */,
/* 2337 */,
/* 2338 */,
/* 2339 */,
/* 2340 */,
/* 2341 */,
/* 2342 */,
/* 2343 */,
/* 2344 */,
/* 2345 */,
/* 2346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _Message = __webpack_require__(2347);
	
	var _Message2 = _interopRequireDefault(_Message);
	
	var _reactNative = __webpack_require__(300);
	
	var _shallowequal = __webpack_require__(2351);
	
	var _shallowequal2 = _interopRequireDefault(_shallowequal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-gifted-messenger/GiftedMessenger.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	// var GiftedSpinner = require('react-native-gifted-spinner');
	
	
	var PULLDOWN_DISTANCE = _reactNative.Platform.OS === 'ios' ? -40 : 0;
	
	var moment = __webpack_require__(2126);
	
	var Button = __webpack_require__(2356);
	
	var GiftedMessenger = _wrapComponent('_component')(_react3.default.createClass({
	  displayName: 'GiftedMessenger',
	
	
	  firstDisplay: true,
	  listHeight: 0,
	  footerY: 0,
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      displayNames: true,
	      placeholder: 'Type a message...',
	      styles: {},
	      autoFocus: true,
	      onErrorButtonPress: function onErrorButtonPress(message, rowID) {},
	      loadEarlierMessagesButton: false,
	      loadEarlierMessagesButtonText: 'Load earlier messages',
	      onLoadEarlierMessages: function onLoadEarlierMessages(oldestMessage, callback) {},
	      parseText: false,
	      handleUrlPress: function handleUrlPress(url) {},
	      handlePhonePress: function handlePhonePress(phone) {},
	      handleEmailPress: function handleEmailPress(email) {},
	      initialMessages: [],
	      messages: [],
	      handleSend: function handleSend(message, rowID) {},
	      maxHeight: _reactNative.Dimensions.get('window').height,
	      senderName: 'Sender',
	      senderImage: null,
	      sendButtonText: 'Send',
	      onImagePress: null,
	      hideTextInput: false,
	      submitOnReturn: false,
	      underlineColorAndroid: 'transparent',
	      forceRenderImage: false,
	      onChangeText: function onChangeText(text) {},
	      initialListSize: 10,
	      pageSize: 10
	    };
	  },
	
	
	  propTypes: {
	    displayNames: _react3.default.PropTypes.bool,
	    placeholder: _react3.default.PropTypes.string,
	    styles: _react3.default.PropTypes.object,
	    autoFocus: _react3.default.PropTypes.bool,
	    onErrorButtonPress: _react3.default.PropTypes.func,
	    loadEarlierMessagesButton: _react3.default.PropTypes.bool,
	    loadEarlierMessagesButtonText: _react3.default.PropTypes.string,
	    onLoadEarlierMessages: _react3.default.PropTypes.func,
	    parseText: _react3.default.PropTypes.bool,
	    handleUrlPress: _react3.default.PropTypes.func,
	    handlePhonePress: _react3.default.PropTypes.func,
	    handleEmailPress: _react3.default.PropTypes.func,
	    initialMessages: _react3.default.PropTypes.array,
	    messages: _react3.default.PropTypes.array,
	    handleSend: _react3.default.PropTypes.func,
	    onCustomSend: _react3.default.PropTypes.func,
	    renderCustomText: _react3.default.PropTypes.func,
	    renderCustomMessage: _react3.default.PropTypes.func,
	    maxHeight: _react3.default.PropTypes.number,
	    senderName: _react3.default.PropTypes.string,
	    senderImage: _react3.default.PropTypes.object,
	    sendButtonText: _react3.default.PropTypes.string,
	    onImagePress: _react3.default.PropTypes.func,
	    hideTextInput: _react3.default.PropTypes.bool,
	    underlineColorAndroid: _react3.default.PropTypes.string,
	    forceRenderImage: _react3.default.PropTypes.bool,
	    onChangeText: _react3.default.PropTypes.func,
	    menu: _react3.default.PropTypes.func
	  },
	
	  getInitialState: function getInitialState() {
	    var _this = this;
	
	    this._data = [];
	    this._rowIds = [];
	
	    var textInputHeight = 0;
	    if (this.props.hideTextInput === false) {
	      textInputHeight = 45;
	    }
	
	    this.listViewMaxHeight = this.props.maxHeight - textInputHeight;
	
	    var ds = new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
	        // if (typeof r1.status !== 'undefined') {
	        //   return true;
	        // }
	        if (r1 === r2 && _this.props.messageSent && r1 === _this.props.messageSent) return true;
	        // HACK to force update of the rows in chat when formRequest was added to eliminate FR with the same form
	        if (_this.props.addedItem) return true;
	        return r1 !== r2;
	      } });
	    return {
	      dataSource: ds.cloneWithRows([]),
	      text: '',
	      disabled: true,
	      height: new _reactNative.Animated.Value(this.listViewMaxHeight),
	      isLoadingEarlierMessages: false,
	      allLoaded: false,
	      appearAnim: new _reactNative.Animated.Value(0),
	      menuButtonShow: true
	    };
	  },
	
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	    // Case when the 'no network' banner is displayed
	    if (this.props.maxHeight !== nextProps.maxHeight) {
	      var textInputHeight = 0;
	      if (this.props.hideTextInput === false) textInputHeight = 45;
	
	      this.listViewMaxHeight = nextProps.maxHeight - textInputHeight;
	      nextState.height = new _reactNative.Animated.Value(this.listViewMaxHeight);
	    }
	    if (!(0, _shallowequal2.default)(this.props, nextProps)) return true;
	
	    if (!(0, _shallowequal2.default)(this.state, nextState)) return true;
	
	    return false;
	  },
	  getMessage: function getMessage(rowID) {
	    if (typeof this._rowIds[this._rowIds.indexOf(rowID)] !== 'undefined') {
	      if (typeof this._data[this._rowIds[this._rowIds.indexOf(rowID)]] !== 'undefined') {
	        return this._data[this._rowIds[this._rowIds.indexOf(rowID)]];
	      }
	    }
	    return null;
	  },
	  getPreviousMessage: function getPreviousMessage(rowID) {
	    if (typeof this._rowIds[this._rowIds.indexOf(rowID - 1)] !== 'undefined') {
	      if (typeof this._data[this._rowIds[this._rowIds.indexOf(rowID - 1)]] !== 'undefined') {
	        return this._data[this._rowIds[this._rowIds.indexOf(rowID - 1)]];
	      }
	    }
	    return null;
	  },
	  getNextMessage: function getNextMessage(rowID) {
	    if (typeof this._rowIds[this._rowIds.indexOf(rowID + 1)] !== 'undefined') {
	      if (typeof this._data[this._rowIds[this._rowIds.indexOf(rowID + 1)]] !== 'undefined') {
	        return this._data[this._rowIds[this._rowIds.indexOf(rowID + 1)]];
	      }
	    }
	    return null;
	  },
	  renderDate: function renderDate() {
	    var rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var rowID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	    var diffMessage = null;
	    if (rowData.isOld === true) {
	      diffMessage = this.getPreviousMessage(rowID);
	    } else {
	      diffMessage = this.getNextMessage(rowID);
	    }
	    if (rowData.date instanceof Date) {
	      if (diffMessage === null) {
	        return _react3.default.createElement(
	          _reactNative.Text,
	          { style: [this.styles.date] },
	          moment(rowData.date).calendar()
	        );
	      } else if (diffMessage.date instanceof Date) {
	        var diff = moment(rowData.date).diff(moment(diffMessage.date), 'minutes');
	        if (diff > 5) {
	          return _react3.default.createElement(
	            _reactNative.Text,
	            { style: [this.styles.date] },
	            moment(rowData.date).calendar()
	          );
	        }
	      }
	    }
	    return null;
	  },
	  renderRow: function renderRow() {
	    var rowData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var sectionID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    var rowID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	
	    if (this.props.renderCustomMessage) {
	      return this.props.renderCustomMessage(rowData, sectionID, rowID);
	    }
	
	    var diffMessage = null;
	    if (rowData.isOld === true) {
	      diffMessage = this.getPreviousMessage(rowID);
	    } else {
	      diffMessage = this.getNextMessage(rowID);
	    }
	
	    return _react3.default.createElement(
	      _reactNative.View,
	      null,
	      this.renderDate(rowData, rowID),
	      _react3.default.createElement(_Message2.default, {
	        rowData: rowData,
	        rowID: rowID,
	        onErrorButtonPress: this.props.onErrorButtonPress,
	        displayNames: this.props.displayNames,
	        diffMessage: diffMessage,
	        position: rowData.position,
	        forceRenderImage: this.props.forceRenderImage,
	        onImagePress: this.props.onImagePress,
	        renderCustomText: this.props.renderCustomText,
	
	        styles: this.styles
	      })
	    );
	  },
	  onChangeText: function onChangeText(text) {
	    this.setState({
	      text: text
	    });
	    if (text.trim().length > 0) {
	      this.setState({
	        disabled: false
	      });
	    } else {
	      this.setState({
	        disabled: true
	      });
	    }
	
	    this.props.onChangeText(text);
	  },
	  componentDidMount: function componentDidMount() {
	    this.scrollResponder = this.refs.listView.getScrollResponder();
	
	    if (this.props.messages.length > 0) {
	      this.appendMessages(this.props.messages);
	    } else if (this.props.initialMessages.length > 0) {
	      this.appendMessages(this.props.initialMessages);
	    } else {
	      this.setState({
	        allLoaded: true
	      });
	    }
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    this._data = [];
	    this._rowIds = [];
	    this.appendMessages(nextProps.messages);
	  },
	  onKeyboardWillHide: function onKeyboardWillHide(e) {
	    _reactNative.Animated.timing(this.state.height, {
	      toValue: this.listViewMaxHeight,
	      duration: 150
	    }).start();
	  },
	  onKeyboardWillShow: function onKeyboardWillShow(e) {
	    _reactNative.Animated.timing(this.state.height, {
	      toValue: this.listViewMaxHeight - (e.endCoordinates ? e.endCoordinates.height : e.end.height),
	      duration: 200
	    }).start();
	  },
	
	  // For android
	  onKeyboardDidShow: function onKeyboardDidShow(e) {
	    this.scrollToBottom();
	    this.setState({ menuButtonShow: false });
	    if (_reactNative.Platform.OS === 'android') this.onKeyboardWillShow(e);
	  },
	  onKeyboardDidHide: function onKeyboardDidHide(e) {
	    this.scrollToBottom();
	    this.setState({ menuButtonShow: true });
	    if (_reactNative.Platform.OS === 'android') this.onKeyboardWillHide(e);
	  },
	
	  // onKeyboardDidShow(e) {
	  //   this.scrollToBottom();
	  // },
	  // onKeyboardDidHide(e) {
	  //   this.scrollToBottom();
	  // },
	
	  scrollToBottom: function scrollToBottom() {
	    if (this.listHeight && this.footerY && this.footerY > this.listHeight) {
	      var scrollDistance = this.listHeight - this.footerY;
	      this.scrollResponder.scrollTo({ y: -scrollDistance, animated: true });
	    }
	  },
	  scrollWithoutAnimationToBottom: function scrollWithoutAnimationToBottom() {
	    if (this.listHeight && this.footerY && this.footerY > this.listHeight) {
	      var scrollDistance = this.listHeight - this.footerY;
	      this.scrollResponder.scrollTo({ y: -scrollDistance, animated: false });
	    }
	  },
	  onSend: function onSend() {
	    // var message = {
	    //   text: this.state.text.trim(),
	    //   name: this.props.senderName,
	    //   image: this.props.senderImage,
	    //   position: 'right',
	    //   date: new Date(),
	    // };
	    // if (this.props.onCustomSend) {
	    //   this.props.onCustomSend(message);
	    // } else {
	    //   var rowID = this.appendMessage(message);
	    // this.props.handleSend(message, rowID);
	    this.props.handleSend(this.state.text.trim());
	    this.onChangeText('');
	    this.scrollWithoutAnimationToBottom();
	    // }
	  },
	  postLoadEarlierMessages: function postLoadEarlierMessages() {
	    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    var allLoaded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	    this.prependMessages(messages);
	    this.setState({
	      isLoadingEarlierMessages: false
	    });
	    if (allLoaded === true) {
	      this.setState({
	        allLoaded: true
	      });
	    }
	  },
	  preLoadEarlierMessages: function preLoadEarlierMessages() {
	    this.setState({
	      isLoadingEarlierMessages: true
	    });
	    this.props.onLoadEarlierMessages(this._data[this._rowIds[this._rowIds.length - 1]], this.postLoadEarlierMessages);
	  },
	  renderLoadEarlierMessages: function renderLoadEarlierMessages() {
	    if (this.props.loadEarlierMessagesButton === true) {
	      if (this.state.allLoaded === false) {
	        if (this.state.isLoadingEarlierMessages === true) {
	          return _react3.default.createElement(
	            _reactNative.View,
	            { style: this.styles.loadEarlierMessages },
	            _react3.default.createElement(_reactNative.ActivityIndicator, null)
	          );
	        }
	      }
	    }
	    return null;
	  },
	
	  // return (
	  //   <View style={this.styles.loadEarlierMessages}>
	  //     <Button
	  //       style={this.styles.loadEarlierMessagesButton}
	  //       onPress={() => {this.preLoadEarlierMessages()}}
	  //     >
	  //       {this.props.loadEarlierMessagesButtonText}
	  //     </Button>
	  //     <ActivityIndicator/>
	  //   </View>
	  // );
	
	  prependMessages: function prependMessages() {
	    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    var rowID = null;
	    for (var i = 0; i < messages.length; i++) {
	      this._data.push(messages[i]);
	      this._rowIds.unshift(this._data.length - 1);
	      rowID = this._data.length - 1;
	    }
	    this.setState({
	      dataSource: this.state.dataSource.cloneWithRows(this._data, this._rowIds)
	    });
	    return rowID;
	  },
	  prependMessage: function prependMessage() {
	    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    var rowID = this.prependMessages([message]);
	    return rowID;
	  },
	  appendMessages: function appendMessages() {
	    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	    var rowID = null;
	    for (var i = 0; i < messages.length; i++) {
	      messages[i].isOld = true;
	      this._data.push(messages[i]);
	      this._rowIds.push(this._data.length - 1);
	      rowID = this._data.length - 1;
	    }
	
	    this.setState({
	      dataSource: this.state.dataSource.cloneWithRows(this._data, this._rowIds)
	    });
	
	    return rowID;
	  },
	  appendMessage: function appendMessage() {
	    var _this2 = this;
	
	    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var scrollToBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	
	    var rowID = this.appendMessages([message]);
	
	    if (scrollToBottom === true) {
	      setTimeout(function () {
	        // inspired by http://stackoverflow.com/a/34838513/1385109
	        _this2.scrollToBottom();
	      }, _reactNative.Platform.OS === 'android' ? 200 : 100);
	    }
	
	    return rowID;
	  },
	  refreshRows: function refreshRows() {
	    this.setState({
	      dataSource: this.state.dataSource.cloneWithRows(this._data, this._rowIds)
	    });
	  },
	  setMessageStatus: function setMessageStatus() {
	    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var rowID = arguments[1];
	
	    if (status === 'ErrorButton') {
	      if (this._data[rowID].position === 'right') {
	        this._data[rowID].status = 'ErrorButton';
	        this.refreshRows();
	      }
	    } else {
	      if (this._data[rowID].position === 'right') {
	        this._data[rowID].status = status;
	
	        // only 1 message can have a status
	        for (var i = 0; i < this._data.length; i++) {
	          if (i !== rowID && this._data[i].status !== 'ErrorButton') {
	            this._data[i].status = '';
	          }
	        }
	        this.refreshRows();
	      }
	    }
	  },
	  renderAnimatedView: function renderAnimatedView() {
	    var _this3 = this;
	
	    return _react3.default.createElement(
	      _reactNative.Animated.View,
	      {
	        style: {
	          height: this.state.height
	        }
	
	      },
	      _react3.default.createElement(_reactNative.ListView, _extends({
	        ref: 'listView',
	        dataSource: this.state.dataSource,
	        renderRow: this.renderRow,
	        renderHeader: this.renderLoadEarlierMessages,
	        onLayout: function onLayout(event) {
	          var layout = event.nativeEvent.layout;
	          _this3.listHeight = layout.height;
	          if (_this3.firstDisplay === true) {
	            requestAnimationFrame(function () {
	              _this3.firstDisplay = false;
	              _this3.scrollWithoutAnimationToBottom();
	            });
	          }
	        },
	        removeClippedSubviews: false,
	        renderFooter: function renderFooter() {
	          return _react3.default.createElement(_reactNative.View, { onLayout: function onLayout(event) {
	              var layout = event.nativeEvent.layout;
	              var isNull = !_this3.footerY;
	              _this3.footerY = layout.y;
	              if (isNull) _this3.scrollToBottom();
	            } });
	        },
	
	        style: this.styles.listView
	
	        // not working android RN 0.14.2
	        , onKeyboardWillShow: this.onKeyboardWillShow,
	        onKeyboardWillHide: this.onKeyboardWillHide,
	
	        onKeyboardDidShow: this.onKeyboardDidShow,
	        onKeyboardDidHide: this.onKeyboardDidHide
	
	        /*
	          keyboardShouldPersistTaps={false} // @issue keyboardShouldPersistTaps={false} + textInput focused = 2 taps are needed to trigger the ParsedText links
	          keyboardDismissMode='interactive'
	        */
	        , onScroll: this.handleScroll,
	        keyboardShouldPersistTaps: typeof this.props.keyboardShouldPersistTaps === 'undefined' ? true : this.props.keyboardShouldPersistTaps,
	        keyboardDismissMode: this.props.keyboardDismissMode || 'interactive',
	
	        initialListSize: this.props.initialListSize,
	        pageSize: this.props.pageSize
	
	      }, this.props))
	    );
	  },
	  handleScroll: function handleScroll(e) {
	    if (this.refs.listView.scrollProperties.offset <= PULLDOWN_DISTANCE && !this.state.isLoadingEarlierMessages) {
	      this.preLoadEarlierMessages();
	    }
	  },
	  render: function render() {
	    return _react3.default.createElement(
	      _reactNative.View,
	      {
	        style: this.styles.container,
	        ref: 'container'
	      },
	      this.renderAnimatedView(),
	      this.renderTextInput()
	    );
	  },
	  renderTextInput: function renderTextInput() {
	    if (this.props.hideTextInput === false) {
	      return _react3.default.createElement(
	        _reactNative.View,
	        { style: this.styles.textInputContainer },
	        _react3.default.createElement(_reactNative.TextInput, {
	          style: this.styles.textInput,
	          placeholder: this.props.placeholder,
	          ref: 'textInput',
	          onChangeText: this.onChangeText,
	          value: this.state.text,
	          underlineColorAndroid: this.props.underlineColorAndroid,
	          autoFocus: this.props.autoFocus,
	          returnKeyType: this.props.submitOnReturn ? 'send' : 'default',
	          onSubmitEditing: this.props.submitOnReturn ? this.onSend : null,
	          blurOnSubmit: false
	        }),
	        this.props.menu(this.state.menuButtonShow)
	      );
	    }
	    // <Button
	    //   style={this.styles.sendButton}
	    //   onPress={this.onSend}
	    //   disabled={this.state.disabled}
	    // >
	    //   {this.props.sendButtonText}
	    // </Button>
	    return null;
	  },
	  componentWillMount: function componentWillMount() {
	    this.styles = {
	      container: {
	        flex: 1
	      },
	      listView: {
	        flex: 1
	      },
	      textInputContainer: {
	        height: 45,
	        borderTopWidth: _reactNative.Platform.OS === 'android' ? 1 : 1 / _reactNative.PixelRatio.get(),
	        borderColor: '#b2b2b2',
	        flexDirection: 'row',
	        paddingLeft: 10,
	        paddingRight: 10
	      },
	      textInput: {
	        alignSelf: 'center',
	        height: 30,
	        width: 100,
	        backgroundColor: 'transparent',
	        flex: 1,
	        padding: 0,
	        margin: 0,
	        marginTop: -5,
	        fontSize: 17
	      },
	      sendButton: {
	        marginTop: 11,
	        marginLeft: 10
	      },
	      date: {
	        color: '#aaaaaa',
	        fontSize: 12,
	        textAlign: 'center',
	        fontWeight: 'bold',
	        marginBottom: 8
	      },
	      link: {
	        // color: '#007aff',
	        textDecorationLine: 'underline'
	      },
	      linkLeft: {
	        color: '#000'
	      },
	      linkRight: {
	        color: '#fff'
	      },
	      loadEarlierMessages: {
	        height: 44,
	        justifyContent: 'center',
	        alignItems: 'center',
	        backgroundColor: '#eeeeee'
	      },
	      loadEarlierMessagesButton: {
	        fontSize: 14
	      }
	    };
	
	    Object.assign(this.styles, this.props.styles);
	  }
	}));
	
	module.exports = GiftedMessenger;

/***/ },
/* 2347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	var _Bubble = __webpack_require__(2348);
	
	var _Bubble2 = _interopRequireDefault(_Bubble);
	
	var _ErrorButton = __webpack_require__(2349);
	
	var _ErrorButton2 = _interopRequireDefault(_ErrorButton);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Message: {
	    displayName: 'Message'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-gifted-messenger/Message.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var styles = _reactNative.StyleSheet.create({
	  rowContainer: {
	    flexDirection: 'row',
	    marginBottom: 10
	  },
	  name: {
	    color: '#aaaaaa',
	    fontSize: 12,
	    marginLeft: 55,
	    marginBottom: 5
	  },
	  imagePosition: {
	    height: 30,
	    width: 30,
	    alignSelf: 'flex-end',
	    marginLeft: 8,
	    marginRight: 8
	  },
	  image: {
	    alignSelf: 'center',
	    borderRadius: 15
	  },
	  imageLeft: {},
	  imageRight: {},
	  spacer: {
	    width: 10
	  },
	  status: {
	    color: '#aaaaaa',
	    fontSize: 12,
	    textAlign: 'right',
	    marginRight: 15,
	    marginBottom: 10,
	    marginTop: -5
	  }
	});
	
	var Message = _wrapComponent('Message')(function (_React$Component) {
	  _inherits(Message, _React$Component);
	
	  function Message(props) {
	    _classCallCheck(this, Message);
	
	    return _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).call(this, props));
	  }
	
	  _createClass(Message, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      Object.assign(styles, this.props.styles);
	    }
	  }, {
	    key: 'renderName',
	    value: function renderName(name, displayNames, diffMessage) {
	      if (displayNames === true) {
	        if (diffMessage === null || name !== diffMessage.name) {
	          return _react3.default.createElement(
	            _reactNative.Text,
	            { style: [styles.name] },
	            name
	          );
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'renderImage',
	    value: function renderImage(rowData, rowID, diffMessage, forceRenderImage, onImagePress) {
	      if (rowData.image !== null) {
	        if (forceRenderImage === true) {
	          diffMessage = null; // force rendering
	        }
	
	        if (diffMessage === null || diffMessage != null && (rowData.name !== diffMessage.name || rowData.id !== diffMessage.id)) {
	          if (typeof onImagePress === 'function') {
	            return _react3.default.createElement(
	              _reactNative.TouchableHighlight,
	              {
	                underlayColor: 'transparent',
	                onPress: function onPress() {
	                  return onImagePress(rowData, rowID);
	                },
	                style: styles.imagePosition
	              },
	              _react3.default.createElement(_reactNative.Image, { source: rowData.image, style: [styles.imagePosition, styles.image, rowData.position === 'left' ? styles.imageLeft : styles.imageRight] })
	            );
	          } else {
	            return _react3.default.createElement(_reactNative.Image, { source: rowData.image, style: [styles.imagePosition, styles.image, rowData.position === 'left' ? styles.imageLeft : styles.imageRight] });
	          }
	        } else {
	          return _react3.default.createElement(_reactNative.View, { style: styles.imagePosition });
	        }
	      }
	      return _react3.default.createElement(_reactNative.View, { style: styles.spacer });
	    }
	  }, {
	    key: 'renderErrorButton',
	    value: function renderErrorButton(rowData, rowID, onErrorButtonPress) {
	      if (rowData.status === 'ErrorButton') {
	        return _react3.default.createElement(_ErrorButton2.default, {
	          onErrorButtonPress: onErrorButtonPress,
	          rowData: rowData,
	          rowID: rowID,
	          styles: styles
	        });
	      }
	      return null;
	    }
	  }, {
	    key: 'renderStatus',
	    value: function renderStatus(status) {
	      if (status !== 'ErrorButton' && typeof status === 'string') {
	        if (status.length > 0) {
	          return _react3.default.createElement(
	            _reactNative.View,
	            null,
	            _react3.default.createElement(
	              _reactNative.Text,
	              { style: styles.status },
	              status
	            )
	          );
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          rowData = _props.rowData,
	          rowID = _props.rowID,
	          onErrorButtonPress = _props.onErrorButtonPress,
	          position = _props.position,
	          displayNames = _props.displayNames,
	          diffMessage = _props.diffMessage,
	          forceRenderImage = _props.forceRenderImage,
	          onImagePress = _props.onImagePress;
	
	
	      var flexStyle = {};
	      if (rowData.text.length > 40) {
	        flexStyle.flex = 1;
	      }
	
	      return _react3.default.createElement(
	        _reactNative.View,
	        null,
	        position === 'left' ? this.renderName(rowData.name, displayNames, diffMessage) : null,
	        _react3.default.createElement(
	          _reactNative.View,
	          { style: [styles.rowContainer, {
	              justifyContent: position === 'left' ? "flex-start" : "flex-end"
	            }] },
	          position === 'left' ? this.renderImage(rowData, rowID, diffMessage, forceRenderImage, onImagePress) : null,
	          position === 'right' ? this.renderErrorButton(rowData, rowID, onErrorButtonPress) : null,
	          _react3.default.createElement(_Bubble2.default, {
	            position: rowData.position,
	            status: rowData.status,
	            text: rowData.text,
	            renderCustomText: this.props.renderCustomText,
	
	            styles: styles
	          }),
	          rowData.position === 'right' ? this.renderImage(rowData, rowID, diffMessage, forceRenderImage, onImagePress) : null
	        ),
	        rowData.position === 'right' ? this.renderStatus(rowData.status) : null
	      );
	    }
	  }]);
	
	  return Message;
	}(_react3.default.Component));
	
	exports.default = Message;

/***/ },
/* 2348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Bubble: {
	    displayName: 'Bubble'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-gifted-messenger/Bubble.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var styles = _reactNative.StyleSheet.create({
	  bubble: {
	    borderRadius: 15,
	    paddingLeft: 14,
	    paddingRight: 14,
	    paddingBottom: 10,
	    paddingTop: 8
	  },
	  text: {
	    color: '#000'
	  },
	  textLeft: {},
	  textRight: {
	    color: '#fff'
	  },
	  bubbleLeft: {
	    marginRight: 70,
	    backgroundColor: '#e6e6eb',
	    alignSelf: "flex-start"
	  },
	  bubbleRight: {
	    marginLeft: 70,
	    backgroundColor: '#007aff',
	    alignSelf: "flex-end"
	  },
	  bubbleError: {
	    backgroundColor: '#e01717'
	  }
	
	});
	
	var Bubble = _wrapComponent('Bubble')(function (_React$Component) {
	  _inherits(Bubble, _React$Component);
	
	  function Bubble(props) {
	    _classCallCheck(this, Bubble);
	
	    return _possibleConstructorReturn(this, (Bubble.__proto__ || Object.getPrototypeOf(Bubble)).call(this, props));
	  }
	
	  _createClass(Bubble, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      Object.assign(styles, this.props.styles);
	    }
	  }, {
	    key: 'renderText',
	    value: function renderText() {
	      var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
	      var position = arguments[1];
	
	
	      if (this.props.renderCustomText) {
	        return this.props.renderCustomText(rowData, rowID);
	      }
	      return _react3.default.createElement(
	        _reactNative.Text,
	        { style: [styles.text, position === 'left' ? styles.textLeft : styles.textRight] },
	        text
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var flexStyle = {};
	      if (this.props.text.length > 40) {
	        flexStyle.flex = 1;
	      }
	
	      return _react3.default.createElement(
	        _reactNative.View,
	        { style: [styles.bubble, this.props.position === 'left' ? styles.bubbleLeft : styles.bubbleRight, this.props.status === 'ErrorButton' ? styles.bubbleError : null, flexStyle] },
	        this.renderText(this.props.text, this.props.position)
	      );
	    }
	  }]);
	
	  return Bubble;
	}(_react3.default.Component));
	
	exports.default = Bubble;
	
	
	Bubble.propTypes = {
	  position: _react3.default.PropTypes.oneOf(['left', 'right']),
	  status: _react3.default.PropTypes.string,
	  text: _react3.default.PropTypes.string,
	  renderCustomText: _react3.default.PropTypes.func
	};

/***/ },
/* 2349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactNative = __webpack_require__(300);
	
	var _reactNativeGiftedSpinner = __webpack_require__(2350);
	
	var _reactNativeGiftedSpinner2 = _interopRequireDefault(_reactNativeGiftedSpinner);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  ErrorButton: {
	    displayName: 'ErrorButton'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-gifted-messenger/ErrorButton.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var styles = _reactNative.StyleSheet.create({
	  errorButtonContainer: {
	    marginLeft: 8,
	    alignSelf: 'center',
	    justifyContent: 'center',
	    backgroundColor: '#e6e6eb',
	    borderRadius: 15,
	    width: 30,
	    height: 30
	  },
	  errorButton: {
	    fontSize: 22,
	    textAlign: 'center'
	  }
	});
	
	var ErrorButton = _wrapComponent('ErrorButton')(function (_React$Component) {
	  _inherits(ErrorButton, _React$Component);
	
	  function ErrorButton(props) {
	    _classCallCheck(this, ErrorButton);
	
	    var _this = _possibleConstructorReturn(this, (ErrorButton.__proto__ || Object.getPrototypeOf(ErrorButton)).call(this, props));
	
	    _this.state = {
	      isLoading: false
	    };
	    return _this;
	  }
	
	  _createClass(ErrorButton, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      Object.assign(styles, this.props.styles);
	    }
	  }, {
	    key: 'onPress',
	    value: function onPress() {
	      this.setState({
	        isLoading: true
	      });
	
	      this.props.onErrorButtonPress(this.props.rowData, this.props.rowID);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.state.isLoading === true) {
	        return _react3.default.createElement(
	          _reactNative.View,
	          { style: [styles.errorButtonContainer, {
	              backgroundColor: 'transparent',
	              borderRadius: 0
	            }] },
	          _react3.default.createElement(_reactNativeGiftedSpinner2.default, null)
	        );
	      }
	      return _react3.default.createElement(
	        _reactNative.View,
	        { style: styles.errorButtonContainer },
	        _react3.default.createElement(
	          _reactNative.TouchableHighlight,
	          {
	            underlayColor: 'transparent',
	            onPress: this.onPress.bind(this)
	          },
	          _react3.default.createElement(
	            _reactNative.Text,
	            { style: styles.errorButton },
	            '\u21BB'
	          )
	        )
	      );
	    }
	  }]);
	
	  return ErrorButton;
	}(_react3.default.Component));
	
	exports.default = ErrorButton;
	
	
	ErrorButton.defaultProps = {
	  onErrorButtonPress: function onErrorButtonPress() {},
	  rowData: {},
	  rowID: null,
	  styles: {}
	};

/***/ },
/* 2350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-gifted-spinner/GiftedSpinner.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    ActivityIndicatorIOS = _require.ActivityIndicatorIOS,
	    ProgressBarAndroid = _require.ProgressBarAndroid,
	    Platform = _require.Platform;
	
	var GiftedSpinner = _wrapComponent('_component')(React.createClass({
	  displayName: 'GiftedSpinner',
	  _getSpinner: function _getSpinner() {
	    if (Platform.OS === 'android') {
	      return React.createElement(ProgressBarAndroid, _extends({
	        style: {
	          height: 20
	        },
	        styleAttr: 'Inverse'
	      }, this.props));
	    } else {
	      return React.createElement(ActivityIndicatorIOS, _extends({
	        animating: true,
	        size: 'small'
	      }, this.props));
	    }
	  },
	  render: function render() {
	    return React.createElement(
	      View,
	      null,
	      this._getSpinner()
	    );
	  }
	}));
	
	module.exports = GiftedSpinner;

/***/ },
/* 2351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var fetchKeys = __webpack_require__(2352);
	
	module.exports = function shallowEqual(objA, objB, compare, compareContext) {
	
	    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
	
	    if (ret !== void 0) {
	        return !!ret;
	    }
	
	    if (objA === objB) {
	        return true;
	    }
	
	    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	        return false;
	    }
	
	    var keysA = fetchKeys(objA);
	    var keysB = fetchKeys(objB);
	
	    var len = keysA.length;
	    if (len !== keysB.length) {
	        return false;
	    }
	
	    compareContext = compareContext || null;
	
	    // Test for A's keys different from B.
	    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	    for (var i = 0; i < len; i++) {
	        var key = keysA[i];
	        if (!bHasOwnProperty(key)) {
	            return false;
	        }
	        var valueA = objA[key];
	        var valueB = objB[key];
	
	        var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
	        if (_ret === false || _ret === void 0 && valueA !== valueB) {
	            return false;
	        }
	    }
	
	    return true;
	};

/***/ },
/* 2352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(2353),
	    isArguments = __webpack_require__(2354),
	    isArray = __webpack_require__(2355);
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');
	
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}
	
	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');
	
	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;
	
	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));
	
	  var index = -1,
	      result = [];
	
	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};
	
	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;
	
	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;
	
	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = keys;


/***/ },
/* 2353 */
/***/ function(module, exports) {

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]';
	
	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}
	
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}
	
	module.exports = getNative;


/***/ },
/* 2354 */
/***/ function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	module.exports = isArguments;


/***/ },
/* 2355 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	
	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    funcTag = '[object Function]';
	
	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');
	
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}
	
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}
	
	module.exports = isArray;


/***/ },
/* 2356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class, _temp;
	
	var _reactNative = __webpack_require__(300);
	
	var _coalesceNonElementChildren = __webpack_require__(2357);
	
	var _coalesceNonElementChildren2 = _interopRequireDefault(_coalesceNonElementChildren);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Button: {
	    displayName: 'Button'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-button/Button.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var systemButtonOpacity = 0.2;
	
	var Button = _wrapComponent('Button')((_temp = _class = function (_Component) {
	  _inherits(Button, _Component);
	
	  function Button() {
	    _classCallCheck(this, Button);
	
	    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
	  }
	
	  _createClass(Button, [{
	    key: 'render',
	    value: function render() {
	      var touchableProps = {
	        activeOpacity: this._computeActiveOpacity()
	      };
	      if (!this.props.disabled) {
	        touchableProps.onPress = this.props.onPress;
	        touchableProps.onPressIn = this.props.onPressIn;
	        touchableProps.onPressOut = this.props.onPressOut;
	        touchableProps.onLongPress = this.props.onLongPress;
	      }
	
	      return _react3.default.createElement(
	        _reactNative.TouchableOpacity,
	        _extends({}, touchableProps, {
	          testID: this.props.testID,
	          style: this.props.containerStyle,
	          accessibilityTraits: 'button',
	          accessibilityComponentType: 'button' }),
	        this._renderGroupedChildren()
	      );
	    }
	  }, {
	    key: '_renderGroupedChildren',
	    value: function _renderGroupedChildren() {
	      var _this2 = this;
	
	      var disabled = this.props.disabled;
	
	      var style = [styles.text, disabled ? styles.disabledText : null, this.props.style, disabled ? this.props.styleDisabled : null];
	
	      var children = (0, _coalesceNonElementChildren2.default)(this.props.children, function (children, index) {
	        return _react3.default.createElement(
	          _reactNative.Text,
	          { key: index, style: style, allowFontScaling: _this2.props.allowFontScaling },
	          children
	        );
	      });
	
	      switch (children.length) {
	        case 0:
	          return null;
	        case 1:
	          return children[0];
	        default:
	          return _react3.default.createElement(
	            _reactNative.View,
	            { style: styles.group },
	            children
	          );
	      }
	    }
	  }, {
	    key: '_computeActiveOpacity',
	    value: function _computeActiveOpacity() {
	      if (this.props.disabled) {
	        return 1;
	      }
	      return this.props.activeOpacity != null ? this.props.activeOpacity : systemButtonOpacity;
	    }
	  }]);
	
	  return Button;
	}(_react2.Component), _class.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
	  allowFontScaling: _reactNative.Text.propTypes.allowFontScaling,
	  containerStyle: _reactNative.View.propTypes.style,
	  disabled: _react2.PropTypes.bool,
	  style: _reactNative.Text.propTypes.style,
	  styleDisabled: _reactNative.Text.propTypes.style
	}), _temp));
	
	exports.default = Button;
	;
	
	var styles = _reactNative.StyleSheet.create({
	  text: {
	    color: '#007aff',
	    fontSize: 17,
	    fontWeight: '500',
	    textAlign: 'center'
	  },
	  disabledText: {
	    color: '#dcdcdc'
	  },
	  group: {
	    flexDirection: 'row',
	    justifyContent: 'space-between',
	    alignItems: 'center'
	  }
	});

/***/ },
/* 2357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = coalesceNonElementChildren;
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function coalesceNonElementChildren(children, coalesceNodes) {
	  var coalescedChildren = [];
	
	  var contiguousNonElements = [];
	  _react.Children.forEach(children, function (child) {
	    if (!_react2.default.isValidElement(child)) {
	      contiguousNonElements.push(child);
	      return;
	    }
	
	    if (contiguousNonElements.length) {
	      coalescedChildren.push(coalesceNodes(contiguousNonElements, coalescedChildren.length));
	      contiguousNonElements = [];
	    }
	
	    coalescedChildren.push(child);
	  });
	
	  if (contiguousNonElements.length) {
	    coalescedChildren.push(coalesceNodes(contiguousNonElements, coalescedChildren.length));
	  }
	
	  return coalescedChildren;
	}

/***/ },
/* 2358 */,
/* 2359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _class, _temp;
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  ProgressBar: {
	    displayName: 'ProgressBar'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-progress/Bar.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var INDETERMINATE_WIDTH_FACTOR = 0.3;
	var BAR_WIDTH_ZERO_POSITION = INDETERMINATE_WIDTH_FACTOR / (1 + INDETERMINATE_WIDTH_FACTOR);
	
	var ProgressBar = _wrapComponent('ProgressBar')((_temp = _class = function (_Component) {
	  _inherits(ProgressBar, _Component);
	
	  function ProgressBar(props) {
	    _classCallCheck(this, ProgressBar);
	
	    var _this = _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).call(this, props));
	
	    var progress = Math.min(Math.max(props.progress, 0), 1);
	    _this.state = {
	      progress: new _reactNative.Animated.Value(props.indeterminate ? INDETERMINATE_WIDTH_FACTOR : progress),
	      animationValue: new _reactNative.Animated.Value(BAR_WIDTH_ZERO_POSITION)
	    };
	    return _this;
	  }
	
	  _createClass(ProgressBar, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.indeterminate) {
	        this.animate();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.indeterminate !== this.props.indeterminate) {
	        if (props.indeterminate) {
	          this.animate();
	        } else {
	          _reactNative.Animated.spring(this.state.animationValue, {
	            toValue: BAR_WIDTH_ZERO_POSITION
	          }).start();
	        }
	      }
	      if (props.indeterminate !== this.props.indeterminate || props.progress !== this.props.progress) {
	        var progress = props.indeterminate ? INDETERMINATE_WIDTH_FACTOR : Math.min(Math.max(props.progress, 0), 1);
	
	        if (props.animated) {
	          _reactNative.Animated.spring(this.state.progress, {
	            toValue: progress,
	            bounciness: 0
	          }).start();
	        } else {
	          this.state.progress.setValue(progress);
	        }
	      }
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      var _this2 = this;
	
	      this.state.animationValue.setValue(0);
	      _reactNative.Animated.timing(this.state.animationValue, {
	        toValue: 1,
	        duration: 1000,
	        easing: _reactNative.Easing.linear,
	        isInteraction: false
	      }).start(function (endState) {
	        if (endState.finished) {
	          _this2.animate();
	        }
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          borderColor = _props.borderColor,
	          borderRadius = _props.borderRadius,
	          borderWidth = _props.borderWidth,
	          children = _props.children,
	          color = _props.color,
	          height = _props.height,
	          style = _props.style,
	          unfilledColor = _props.unfilledColor,
	          width = _props.width,
	          restProps = _objectWithoutProperties(_props, ['borderColor', 'borderRadius', 'borderWidth', 'children', 'color', 'height', 'style', 'unfilledColor', 'width']);
	
	      var innerWidth = width - borderWidth * 2;
	      var containerStyle = {
	        width: width,
	        borderWidth: borderWidth,
	        borderColor: borderColor || color,
	        borderRadius: borderRadius,
	        overflow: 'hidden',
	        backgroundColor: unfilledColor
	      };
	      var progressStyle = {
	        backgroundColor: color,
	        height: height,
	        width: innerWidth,
	        transform: [{
	          translateX: this.state.animationValue.interpolate({
	            inputRange: [0, 1],
	            outputRange: [innerWidth * -INDETERMINATE_WIDTH_FACTOR, innerWidth]
	          })
	        }, {
	          translateX: this.state.progress.interpolate({
	            inputRange: [0, 1],
	            outputRange: [innerWidth / -2, 0]
	          })
	        }, {
	          scaleX: this.state.progress
	        }]
	      };
	
	      return _react3.default.createElement(
	        _reactNative.View,
	        _extends({ style: [containerStyle, style] }, restProps),
	        _react3.default.createElement(_reactNative.Animated.View, { style: progressStyle }),
	        children
	      );
	    }
	  }]);
	
	  return ProgressBar;
	}(_react2.Component), _class.propTypes = {
	  animated: _react2.PropTypes.bool,
	  borderColor: _react2.PropTypes.string,
	  borderRadius: _react2.PropTypes.number,
	  borderWidth: _react2.PropTypes.number,
	  children: _react2.PropTypes.node,
	  color: _react2.PropTypes.string,
	  height: _react2.PropTypes.number,
	  indeterminate: _react2.PropTypes.bool,
	  progress: _react2.PropTypes.number,
	  style: _reactNative.View.propTypes.style,
	  unfilledColor: _react2.PropTypes.string,
	  width: _react2.PropTypes.number
	}, _class.defaultProps = {
	  animated: true,
	  borderRadius: 4,
	  borderWidth: 1,
	  color: 'rgba(0, 122, 255, 1)',
	  height: 6,
	  indeterminate: false,
	  progress: 0,
	  width: 150
	}, _temp));
	
	exports.default = ProgressBar;

/***/ },
/* 2360 */,
/* 2361 */,
/* 2362 */,
/* 2363 */,
/* 2364 */,
/* 2365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2366);

/***/ },
/* 2366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	    _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	    filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-qrcode/lib/QRCode.js',
	    components: _components,
	    locals: [],
	    imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	    return function (Component) {
	        return _reactTransformCatchErrors2(Component, id);
	    };
	}
	
	var React = __webpack_require__(301);
	var Canvas = __webpack_require__(2367);
	var qr = __webpack_require__(2368);
	
	var _require = __webpack_require__(300),
	    View = _require.View;
	
	function renderCanvas(canvas) {
	    var ctx = canvas.getContext('2d');
	    var size = this.size;
	    var fgColor = this.fgColor;
	    var bgColor = this.bgColor;
	    canvas.width = size;
	    canvas.height = size;
	    canvas.style.left = (window.innerWidth - size) / 2 + 'px';
	    if (window.innerHeight > size) canvas.style.top = (window.innerHeight - size) / 2 + 'px';
	    ctx.fillRect(0, 0, size, size);
	    var cells = this.cells;
	    var cellWidth = this.size / cells.length;
	    var cellHeight = this.size / cells.length;
	    var nRoundedWidth = Math.round(cellWidth);
	    var nRoundedHeight = Math.round(cellHeight);
	    cells.forEach(function (row, rowIndex) {
	        row.forEach(function (column, columnIndex) {
	            var nLeft = columnIndex * cellWidth;
	            var nTop = rowIndex * cellHeight;
	            ctx.fillStyle = ctx.strokeStyle = column ? bgColor : fgColor;
	            ctx.lineWidth = 1;
	            ctx.fillRect(nLeft, nTop, cellWidth, cellHeight);
	            ctx.strokeRect(Math.floor(nLeft) + 0.5, Math.floor(nTop) + 0.5, nRoundedWidth, nRoundedHeight);
	            ctx.strokeRect(Math.ceil(nLeft) - 0.5, Math.ceil(nTop) - 0.5, nRoundedWidth, nRoundedHeight);
	        });
	    });
	}
	
	var QRCode = _wrapComponent('_component')(React.createClass({
	    displayName: 'QRCode',
	
	    PropTypes: {
	        value: React.PropTypes.string,
	        size: React.PropTypes.number,
	        bgColor: React.PropTypes.string,
	        fgColor: React.PropTypes.string
	    },
	
	    getDefaultProps: function getDefaultProps() {
	        return {
	            value: 'https://github.com/cssivision',
	            fgColor: 'white',
	            bgColor: 'black',
	            size: 128
	        };
	    },
	
	    utf16to8: function utf16to8(str) {
	        var out, i, len, c;
	        out = "";
	        len = str.length;
	        for (i = 0; i < len; i++) {
	            c = str.charCodeAt(i);
	            if (c >= 0x0001 && c <= 0x007F) {
	                out += str.charAt(i);
	            } else if (c > 0x07FF) {
	                out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);
	                out += String.fromCharCode(0x80 | c >> 6 & 0x3F);
	                out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
	            } else {
	                out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);
	                out += String.fromCharCode(0x80 | c >> 0 & 0x3F);
	            }
	        }
	        return out;
	    },
	
	    render: function render() {
	        var size = this.props.size;
	        var value = this.utf16to8(this.props.value);
	        return React.createElement(
	            View,
	            null,
	            React.createElement(Canvas, {
	                context: {
	                    size: size,
	                    value: this.props.value,
	                    bgColor: this.props.bgColor,
	                    fgColor: this.props.fgColor,
	                    cells: qr(value).modules
	                },
	                render: renderCanvas,
	                style: { height: size, width: size }
	            })
	        );
	    }
	}));
	
	module.exports = QRCode;

/***/ },
/* 2367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	    _component: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	    filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-qrcode/lib/Canvas.js',
	    components: _components,
	    locals: [],
	    imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	    return function (Component) {
	        return _reactTransformCatchErrors2(Component, id);
	    };
	}
	
	var React = __webpack_require__(301);
	
	var _require = __webpack_require__(300),
	    View = _require.View,
	    WebView = _require.WebView;
	
	var Canvas = _wrapComponent('_component')(React.createClass({
	    displayName: 'Canvas',
	
	    propTypes: {
	        style: React.PropTypes.object,
	        context: React.PropTypes.object,
	        render: React.PropTypes.func.isRequired
	    },
	
	    render: function render() {
	        var contextString = JSON.stringify(this.props.context);
	        var renderString = this.props.render.toString();
	        return React.createElement(
	            View,
	            null,
	            React.createElement(WebView, {
	                automaticallyAdjustContentInsets: false,
	                contentInset: { top: 0, right: 0, bottom: 0, left: 0 },
	                source: { html: "<style>*{margin:0;padding:0;}canvas{transform:translateZ(0);}</style><canvas></canvas><script>var canvas = document.querySelector('canvas');(" + renderString + ").call(" + contextString + ", canvas);</script>" },
	                opaque: false,
	                underlayColor: 'transparent',
	                style: this.props.style,
	                javaScriptEnabled: true,
	                scrollEnabled: false
	            })
	        );
	    }
	}));
	
	module.exports = Canvas;

/***/ },
/* 2368 */
/***/ function(module, exports, __webpack_require__) {

	var QRCode = __webpack_require__(2369);
	var ErrorCorrectLevel = __webpack_require__(2373);
	
	var qrcode = function(data, opt) {
		opt = opt || {};
		var qr = new QRCode(opt.typeNumber || -1,
							opt.errorCorrectLevel || ErrorCorrectLevel.H);
		qr.addData(data);
		qr.make();
	
		return qr;
	};
	
	qrcode.ErrorCorrectLevel = ErrorCorrectLevel;
	
	module.exports = qrcode;
	


/***/ },
/* 2369 */
/***/ function(module, exports, __webpack_require__) {

	var BitByte = __webpack_require__(2370);
	var RSBlock = __webpack_require__(2372);
	var BitBuffer = __webpack_require__(2374);
	var util = __webpack_require__(2375);
	var Polynomial = __webpack_require__(2376);
	
	function QRCode(typeNumber, errorCorrectLevel) {
		this.typeNumber = typeNumber;
		this.errorCorrectLevel = errorCorrectLevel;
		this.modules = null;
		this.moduleCount = 0;
		this.dataCache = null;
		this.dataList = [];
	}
	
	// for client side minification
	var proto = QRCode.prototype;
	
	proto.addData = function(data) {
		var newData = new BitByte(data);
		this.dataList.push(newData);
		this.dataCache = null;
	};
	
	proto.isDark = function(row, col) {
		if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
			throw new Error(row + "," + col);
		}
		return this.modules[row][col];
	};
	
	proto.getModuleCount = function() {
		return this.moduleCount;
	};
	
	proto.make = function() {
		// Calculate automatically typeNumber if provided is < 1
		if (this.typeNumber < 1 ){
			var typeNumber = 1;
			for (typeNumber = 1; typeNumber < 40; typeNumber++) {
				var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
	
				var buffer = new BitBuffer();
				var totalDataCount = 0;
				for (var i = 0; i < rsBlocks.length; i++) {
					totalDataCount += rsBlocks[i].dataCount;
				}
	
				for (var i = 0; i < this.dataList.length; i++) {
					var data = this.dataList[i];
					buffer.put(data.mode, 4);
					buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );
					data.write(buffer);
				}
				if (buffer.getLengthInBits() <= totalDataCount * 8)
					break;
			}
			this.typeNumber = typeNumber;
		}
		this.makeImpl(false, this.getBestMaskPattern() );
	};
	
	proto.makeImpl = function(test, maskPattern) {
		
		this.moduleCount = this.typeNumber * 4 + 17;
		this.modules = new Array(this.moduleCount);
		
		for (var row = 0; row < this.moduleCount; row++) {
			
			this.modules[row] = new Array(this.moduleCount);
			
			for (var col = 0; col < this.moduleCount; col++) {
				this.modules[row][col] = null;//(col + row) % 3;
			}
		}
	
		this.setupPositionProbePattern(0, 0);
		this.setupPositionProbePattern(this.moduleCount - 7, 0);
		this.setupPositionProbePattern(0, this.moduleCount - 7);
		this.setupPositionAdjustPattern();
		this.setupTimingPattern();
		this.setupTypeInfo(test, maskPattern);
		
		if (this.typeNumber >= 7) {
			this.setupTypeNumber(test);
		}
	
		if (this.dataCache == null) {
			this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
		}
	
		this.mapData(this.dataCache, maskPattern);
	};
	
	proto.setupPositionProbePattern = function(row, col)  {
		
		for (var r = -1; r <= 7; r++) {
			
			if (row + r <= -1 || this.moduleCount <= row + r) continue;
			
			for (var c = -1; c <= 7; c++) {
				
				if (col + c <= -1 || this.moduleCount <= col + c) continue;
				
				if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )
						|| (0 <= c && c <= 6 && (r == 0 || r == 6) )
						|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {
					this.modules[row + r][col + c] = true;
				} else {
					this.modules[row + r][col + c] = false;
				}
			}		
		}		
	};
	
	proto.getBestMaskPattern = function() {
	
		var minLostPoint = 0;
		var pattern = 0;
	
		for (var i = 0; i < 8; i++) {
			
			this.makeImpl(true, i);
	
			var lostPoint = util.getLostPoint(this);
	
			if (i == 0 || minLostPoint >  lostPoint) {
				minLostPoint = lostPoint;
				pattern = i;
			}
		}
	
		return pattern;
	};
	
	proto.createMovieClip = function(target_mc, instance_name, depth) {
	
		var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
		var cs = 1;
	
		this.make();
	
		for (var row = 0; row < this.modules.length; row++) {
			
			var y = row * cs;
			
			for (var col = 0; col < this.modules[row].length; col++) {
	
				var x = col * cs;
				var dark = this.modules[row][col];
			
				if (dark) {
					qr_mc.beginFill(0, 100);
					qr_mc.moveTo(x, y);
					qr_mc.lineTo(x + cs, y);
					qr_mc.lineTo(x + cs, y + cs);
					qr_mc.lineTo(x, y + cs);
					qr_mc.endFill();
				}
			}
		}
		
		return qr_mc;
	};
	
	proto.setupTimingPattern = function() {
		
		for (var r = 8; r < this.moduleCount - 8; r++) {
			if (this.modules[r][6] != null) {
				continue;
			}
			this.modules[r][6] = (r % 2 == 0);
		}
	
		for (var c = 8; c < this.moduleCount - 8; c++) {
			if (this.modules[6][c] != null) {
				continue;
			}
			this.modules[6][c] = (c % 2 == 0);
		}
	};
	
	proto.setupPositionAdjustPattern = function() {
	
		var pos = util.getPatternPosition(this.typeNumber);
		
		for (var i = 0; i < pos.length; i++) {
		
			for (var j = 0; j < pos.length; j++) {
			
				var row = pos[i];
				var col = pos[j];
				
				if (this.modules[row][col] != null) {
					continue;
				}
				
				for (var r = -2; r <= 2; r++) {
				
					for (var c = -2; c <= 2; c++) {
					
						if (r == -2 || r == 2 || c == -2 || c == 2
								|| (r == 0 && c == 0) ) {
							this.modules[row + r][col + c] = true;
						} else {
							this.modules[row + r][col + c] = false;
						}
					}
				}
			}
		}
	};
	
	proto.setupTypeNumber = function(test) {
	
		var bits = util.getBCHTypeNumber(this.typeNumber);
	
		for (var i = 0; i < 18; i++) {
			var mod = (!test && ( (bits >> i) & 1) == 1);
			this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
		}
	
		for (var i = 0; i < 18; i++) {
			var mod = (!test && ( (bits >> i) & 1) == 1);
			this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
		}
	};
	
	proto.setupTypeInfo = function(test, maskPattern) {
	
		var data = (this.errorCorrectLevel << 3) | maskPattern;
		var bits = util.getBCHTypeInfo(data);
	
		// vertical		
		for (var i = 0; i < 15; i++) {
	
			var mod = (!test && ( (bits >> i) & 1) == 1);
	
			if (i < 6) {
				this.modules[i][8] = mod;
			} else if (i < 8) {
				this.modules[i + 1][8] = mod;
			} else {
				this.modules[this.moduleCount - 15 + i][8] = mod;
			}
		}
	
		// horizontal
		for (var i = 0; i < 15; i++) {
	
			var mod = (!test && ( (bits >> i) & 1) == 1);
			
			if (i < 8) {
				this.modules[8][this.moduleCount - i - 1] = mod;
			} else if (i < 9) {
				this.modules[8][15 - i - 1 + 1] = mod;
			} else {
				this.modules[8][15 - i - 1] = mod;
			}
		}
	
		// fixed module
		this.modules[this.moduleCount - 8][8] = (!test);
	};
	
	proto.mapData = function(data, maskPattern) {
		
		var inc = -1;
		var row = this.moduleCount - 1;
		var bitIndex = 7;
		var byteIndex = 0;
		
		for (var col = this.moduleCount - 1; col > 0; col -= 2) {
	
			if (col == 6) col--;
	
			while (true) {
	
				for (var c = 0; c < 2; c++) {
					
					if (this.modules[row][col - c] == null) {
						
						var dark = false;
	
						if (byteIndex < data.length) {
							dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);
						}
	
						var mask = util.getMask(maskPattern, row, col - c);
	
						if (mask) {
							dark = !dark;
						}
						
						this.modules[row][col - c] = dark;
						bitIndex--;
	
						if (bitIndex == -1) {
							byteIndex++;
							bitIndex = 7;
						}
					}
				}
								
				row += inc;
	
				if (row < 0 || this.moduleCount <= row) {
					row -= inc;
					inc = -inc;
					break;
				}
			}
		}
	};
	
	QRCode.PAD0 = 0xEC;
	QRCode.PAD1 = 0x11;
	
	QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {
		
		var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
		
		var buffer = new BitBuffer();
		
		for (var i = 0; i < dataList.length; i++) {
			var data = dataList[i];
			buffer.put(data.mode, 4);
			buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );
			data.write(buffer);
		}
	
		// calc num max data.
		var totalDataCount = 0;
		for (var i = 0; i < rsBlocks.length; i++) {
			totalDataCount += rsBlocks[i].dataCount;
		}
	
		if (buffer.getLengthInBits() > totalDataCount * 8) {
			throw new Error("code length overflow. ("
				+ buffer.getLengthInBits()
				+ ">"
				+  totalDataCount * 8
				+ ")");
		}
	
		// end code
		if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
			buffer.put(0, 4);
		}
	
		// padding
		while (buffer.getLengthInBits() % 8 != 0) {
			buffer.putBit(false);
		}
	
		// padding
		while (true) {
			
			if (buffer.getLengthInBits() >= totalDataCount * 8) {
				break;
			}
			buffer.put(QRCode.PAD0, 8);
			
			if (buffer.getLengthInBits() >= totalDataCount * 8) {
				break;
			}
			buffer.put(QRCode.PAD1, 8);
		}
	
		return QRCode.createBytes(buffer, rsBlocks);
	};
	
	QRCode.createBytes = function(buffer, rsBlocks) {
	
		var offset = 0;
		
		var maxDcCount = 0;
		var maxEcCount = 0;
		
		var dcdata = new Array(rsBlocks.length);
		var ecdata = new Array(rsBlocks.length);
		
		for (var r = 0; r < rsBlocks.length; r++) {
	
			var dcCount = rsBlocks[r].dataCount;
			var ecCount = rsBlocks[r].totalCount - dcCount;
	
			maxDcCount = Math.max(maxDcCount, dcCount);
			maxEcCount = Math.max(maxEcCount, ecCount);
			
			dcdata[r] = new Array(dcCount);
			
			for (var i = 0; i < dcdata[r].length; i++) {
				dcdata[r][i] = 0xff & buffer.buffer[i + offset];
			}
			offset += dcCount;
			
			var rsPoly = util.getErrorCorrectPolynomial(ecCount);
			var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);
	
			var modPoly = rawPoly.mod(rsPoly);
			ecdata[r] = new Array(rsPoly.getLength() - 1);
			for (var i = 0; i < ecdata[r].length; i++) {
	            var modIndex = i + modPoly.getLength() - ecdata[r].length;
				ecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;
			}
	
		}
		
		var totalCodeCount = 0;
		for (var i = 0; i < rsBlocks.length; i++) {
			totalCodeCount += rsBlocks[i].totalCount;
		}
	
		var data = new Array(totalCodeCount);
		var index = 0;
	
		for (var i = 0; i < maxDcCount; i++) {
			for (var r = 0; r < rsBlocks.length; r++) {
				if (i < dcdata[r].length) {
					data[index++] = dcdata[r][i];
				}
			}
		}
	
		for (var i = 0; i < maxEcCount; i++) {
			for (var r = 0; r < rsBlocks.length; r++) {
				if (i < ecdata[r].length) {
					data[index++] = ecdata[r][i];
				}
			}
		}
	
		return data;
	};
	
	module.exports = QRCode;
	


/***/ },
/* 2370 */
/***/ function(module, exports, __webpack_require__) {

	var mode = __webpack_require__(2371);
	
	function QR8bitByte(data) {
		this.mode = mode.MODE_8BIT_BYTE;
		this.data = data;
	}
	
	QR8bitByte.prototype = {
	
		getLength : function(buffer) {
			return this.data.length;
		},
		
		write : function(buffer) {
			for (var i = 0; i < this.data.length; i++) {
				// not JIS ...
				buffer.put(this.data.charCodeAt(i), 8);
			}
		}
	};
	
	module.exports = QR8bitByte;
	


/***/ },
/* 2371 */
/***/ function(module, exports) {

	module.exports = {
		MODE_NUMBER :		1 << 0,
		MODE_ALPHA_NUM : 	1 << 1,
		MODE_8BIT_BYTE : 	1 << 2,
		MODE_KANJI :		1 << 3
	};


/***/ },
/* 2372 */
/***/ function(module, exports, __webpack_require__) {

	// ErrorCorrectLevel
	var ECL = __webpack_require__(2373);
	
	function QRRSBlock(totalCount, dataCount) {
		this.totalCount = totalCount;
		this.dataCount  = dataCount;
	}
	
	QRRSBlock.RS_BLOCK_TABLE = [
	
		// L
		// M
		// Q
		// H
	
		// 1
		[1, 26, 19],
		[1, 26, 16],
		[1, 26, 13],
		[1, 26, 9],
		
		// 2
		[1, 44, 34],
		[1, 44, 28],
		[1, 44, 22],
		[1, 44, 16],
	
		// 3
		[1, 70, 55],
		[1, 70, 44],
		[2, 35, 17],
		[2, 35, 13],
	
		// 4		
		[1, 100, 80],
		[2, 50, 32],
		[2, 50, 24],
		[4, 25, 9],
		
		// 5
		[1, 134, 108],
		[2, 67, 43],
		[2, 33, 15, 2, 34, 16],
		[2, 33, 11, 2, 34, 12],
		
		// 6
		[2, 86, 68],
		[4, 43, 27],
		[4, 43, 19],
		[4, 43, 15],
		
		// 7		
		[2, 98, 78],
		[4, 49, 31],
		[2, 32, 14, 4, 33, 15],
		[4, 39, 13, 1, 40, 14],
		
		// 8
		[2, 121, 97],
		[2, 60, 38, 2, 61, 39],
		[4, 40, 18, 2, 41, 19],
		[4, 40, 14, 2, 41, 15],
		
		// 9
		[2, 146, 116],
		[3, 58, 36, 2, 59, 37],
		[4, 36, 16, 4, 37, 17],
		[4, 36, 12, 4, 37, 13],
		
		// 10		
		[2, 86, 68, 2, 87, 69],
		[4, 69, 43, 1, 70, 44],
		[6, 43, 19, 2, 44, 20],
		[6, 43, 15, 2, 44, 16],
	
		// 11
		[4, 101, 81],
		[1, 80, 50, 4, 81, 51],
		[4, 50, 22, 4, 51, 23],
		[3, 36, 12, 8, 37, 13],
	
		// 12
		[2, 116, 92, 2, 117, 93],
		[6, 58, 36, 2, 59, 37],
		[4, 46, 20, 6, 47, 21],
		[7, 42, 14, 4, 43, 15],
	
		// 13
		[4, 133, 107],
		[8, 59, 37, 1, 60, 38],
		[8, 44, 20, 4, 45, 21],
		[12, 33, 11, 4, 34, 12],
	
		// 14
		[3, 145, 115, 1, 146, 116],
		[4, 64, 40, 5, 65, 41],
		[11, 36, 16, 5, 37, 17],
		[11, 36, 12, 5, 37, 13],
	
		// 15
		[5, 109, 87, 1, 110, 88],
		[5, 65, 41, 5, 66, 42],
		[5, 54, 24, 7, 55, 25],
		[11, 36, 12],
	
		// 16
		[5, 122, 98, 1, 123, 99],
		[7, 73, 45, 3, 74, 46],
		[15, 43, 19, 2, 44, 20],
		[3, 45, 15, 13, 46, 16],
	
		// 17
		[1, 135, 107, 5, 136, 108],
		[10, 74, 46, 1, 75, 47],
		[1, 50, 22, 15, 51, 23],
		[2, 42, 14, 17, 43, 15],
	
		// 18
		[5, 150, 120, 1, 151, 121],
		[9, 69, 43, 4, 70, 44],
		[17, 50, 22, 1, 51, 23],
		[2, 42, 14, 19, 43, 15],
	
		// 19
		[3, 141, 113, 4, 142, 114],
		[3, 70, 44, 11, 71, 45],
		[17, 47, 21, 4, 48, 22],
		[9, 39, 13, 16, 40, 14],
	
		// 20
		[3, 135, 107, 5, 136, 108],
		[3, 67, 41, 13, 68, 42],
		[15, 54, 24, 5, 55, 25],
		[15, 43, 15, 10, 44, 16],
	
		// 21
		[4, 144, 116, 4, 145, 117],
		[17, 68, 42],
		[17, 50, 22, 6, 51, 23],
		[19, 46, 16, 6, 47, 17],
	
		// 22
		[2, 139, 111, 7, 140, 112],
		[17, 74, 46],
		[7, 54, 24, 16, 55, 25],
		[34, 37, 13],
	
		// 23
		[4, 151, 121, 5, 152, 122],
		[4, 75, 47, 14, 76, 48],
		[11, 54, 24, 14, 55, 25],
		[16, 45, 15, 14, 46, 16],
	
		// 24
		[6, 147, 117, 4, 148, 118],
		[6, 73, 45, 14, 74, 46],
		[11, 54, 24, 16, 55, 25],
		[30, 46, 16, 2, 47, 17],
	
		// 25
		[8, 132, 106, 4, 133, 107],
		[8, 75, 47, 13, 76, 48],
		[7, 54, 24, 22, 55, 25],
		[22, 45, 15, 13, 46, 16],
	
		// 26
		[10, 142, 114, 2, 143, 115],
		[19, 74, 46, 4, 75, 47],
		[28, 50, 22, 6, 51, 23],
		[33, 46, 16, 4, 47, 17],
	
		// 27
		[8, 152, 122, 4, 153, 123],
		[22, 73, 45, 3, 74, 46],
		[8, 53, 23, 26, 54, 24],
		[12, 45, 15, 28, 46, 16],
	
		// 28
		[3, 147, 117, 10, 148, 118],
		[3, 73, 45, 23, 74, 46],
		[4, 54, 24, 31, 55, 25],
		[11, 45, 15, 31, 46, 16],
	
		// 29
		[7, 146, 116, 7, 147, 117],
		[21, 73, 45, 7, 74, 46],
		[1, 53, 23, 37, 54, 24],
		[19, 45, 15, 26, 46, 16],
	
		// 30
		[5, 145, 115, 10, 146, 116],
		[19, 75, 47, 10, 76, 48],
		[15, 54, 24, 25, 55, 25],
		[23, 45, 15, 25, 46, 16],
	
		// 31
		[13, 145, 115, 3, 146, 116],
		[2, 74, 46, 29, 75, 47],
		[42, 54, 24, 1, 55, 25],
		[23, 45, 15, 28, 46, 16],
	
		// 32
		[17, 145, 115],
		[10, 74, 46, 23, 75, 47],
		[10, 54, 24, 35, 55, 25],
		[19, 45, 15, 35, 46, 16],
	
		// 33
		[17, 145, 115, 1, 146, 116],
		[14, 74, 46, 21, 75, 47],
		[29, 54, 24, 19, 55, 25],
		[11, 45, 15, 46, 46, 16],
	
		// 34
		[13, 145, 115, 6, 146, 116],
		[14, 74, 46, 23, 75, 47],
		[44, 54, 24, 7, 55, 25],
		[59, 46, 16, 1, 47, 17],
	
		// 35
		[12, 151, 121, 7, 152, 122],
		[12, 75, 47, 26, 76, 48],
		[39, 54, 24, 14, 55, 25],
		[22, 45, 15, 41, 46, 16],
	
		// 36
		[6, 151, 121, 14, 152, 122],
		[6, 75, 47, 34, 76, 48],
		[46, 54, 24, 10, 55, 25],
		[2, 45, 15, 64, 46, 16],
	
		// 37
		[17, 152, 122, 4, 153, 123],
		[29, 74, 46, 14, 75, 47],
		[49, 54, 24, 10, 55, 25],
		[24, 45, 15, 46, 46, 16],
	
		// 38
		[4, 152, 122, 18, 153, 123],
		[13, 74, 46, 32, 75, 47],
		[48, 54, 24, 14, 55, 25],
		[42, 45, 15, 32, 46, 16],
	
		// 39
		[20, 147, 117, 4, 148, 118],
		[40, 75, 47, 7, 76, 48],
		[43, 54, 24, 22, 55, 25],
		[10, 45, 15, 67, 46, 16],
	
		// 40
		[19, 148, 118, 6, 149, 119],
		[18, 75, 47, 31, 76, 48],
		[34, 54, 24, 34, 55, 25],
		[20, 45, 15, 61, 46, 16]
	];
	
	QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
		
		var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
		
		if (rsBlock == undefined) {
			throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
		}
	
		var length = rsBlock.length / 3;
		
		var list = new Array();
		
		for (var i = 0; i < length; i++) {
	
			var count = rsBlock[i * 3 + 0];
			var totalCount = rsBlock[i * 3 + 1];
			var dataCount  = rsBlock[i * 3 + 2];
	
			for (var j = 0; j < count; j++) {
				list.push(new QRRSBlock(totalCount, dataCount) );	
			}
		}
		
		return list;
	}
	
	QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {
	
		switch(errorCorrectLevel) {
		case ECL.L :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
		case ECL.M :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
		case ECL.Q :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
		case ECL.H :
			return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
		default :
			return undefined;
		}
	}
	
	module.exports = QRRSBlock;


/***/ },
/* 2373 */
/***/ function(module, exports) {

	module.exports = {
		L : 1,
		M : 0,
		Q : 3,
		H : 2
	};
	


/***/ },
/* 2374 */
/***/ function(module, exports) {

	function QRBitBuffer() {
		this.buffer = new Array();
		this.length = 0;
	}
	
	QRBitBuffer.prototype = {
	
		get : function(index) {
			var bufIndex = Math.floor(index / 8);
			return ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;
		},
		
		put : function(num, length) {
			for (var i = 0; i < length; i++) {
				this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);
			}
		},
		
		getLengthInBits : function() {
			return this.length;
		},
		
		putBit : function(bit) {
		
			var bufIndex = Math.floor(this.length / 8);
			if (this.buffer.length <= bufIndex) {
				this.buffer.push(0);
			}
		
			if (bit) {
				this.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );
			}
		
			this.length++;
		}
	};
	
	module.exports = QRBitBuffer;


/***/ },
/* 2375 */
/***/ function(module, exports, __webpack_require__) {

	var Mode = __webpack_require__(2371);
	var Polynomial = __webpack_require__(2376);
	var math = __webpack_require__(2377);
	
	var QRMaskPattern = {
		PATTERN000 : 0,
		PATTERN001 : 1,
		PATTERN010 : 2,
		PATTERN011 : 3,
		PATTERN100 : 4,
		PATTERN101 : 5,
		PATTERN110 : 6,
		PATTERN111 : 7
	};
	
	var QRUtil = {
	
	    PATTERN_POSITION_TABLE : [
		    [],
		    [6, 18],
		    [6, 22],
		    [6, 26],
		    [6, 30],
		    [6, 34],
		    [6, 22, 38],
		    [6, 24, 42],
		    [6, 26, 46],
		    [6, 28, 50],
		    [6, 30, 54],		
		    [6, 32, 58],
		    [6, 34, 62],
		    [6, 26, 46, 66],
		    [6, 26, 48, 70],
		    [6, 26, 50, 74],
		    [6, 30, 54, 78],
		    [6, 30, 56, 82],
		    [6, 30, 58, 86],
		    [6, 34, 62, 90],
		    [6, 28, 50, 72, 94],
		    [6, 26, 50, 74, 98],
		    [6, 30, 54, 78, 102],
		    [6, 28, 54, 80, 106],
		    [6, 32, 58, 84, 110],
		    [6, 30, 58, 86, 114],
		    [6, 34, 62, 90, 118],
		    [6, 26, 50, 74, 98, 122],
		    [6, 30, 54, 78, 102, 126],
		    [6, 26, 52, 78, 104, 130],
		    [6, 30, 56, 82, 108, 134],
		    [6, 34, 60, 86, 112, 138],
		    [6, 30, 58, 86, 114, 142],
		    [6, 34, 62, 90, 118, 146],
		    [6, 30, 54, 78, 102, 126, 150],
		    [6, 24, 50, 76, 102, 128, 154],
		    [6, 28, 54, 80, 106, 132, 158],
		    [6, 32, 58, 84, 110, 136, 162],
		    [6, 26, 54, 82, 110, 138, 166],
		    [6, 30, 58, 86, 114, 142, 170]
	    ],
	
	    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),
	    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),
	    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)	| (1 << 4) | (1 << 1),
	
	    getBCHTypeInfo : function(data) {
		    var d = data << 10;
		    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
			    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); 	
		    }
		    return ( (data << 10) | d) ^ QRUtil.G15_MASK;
	    },
	
	    getBCHTypeNumber : function(data) {
		    var d = data << 12;
		    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
			    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); 	
		    }
		    return (data << 12) | d;
	    },
	
	    getBCHDigit : function(data) {
	
		    var digit = 0;
	
		    while (data != 0) {
			    digit++;
			    data >>>= 1;
		    }
	
		    return digit;
	    },
	
	    getPatternPosition : function(typeNumber) {
		    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
	    },
	
	    getMask : function(maskPattern, i, j) {
		    
		    switch (maskPattern) {
			    
		    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;
		    case QRMaskPattern.PATTERN001 : return i % 2 == 0;
		    case QRMaskPattern.PATTERN010 : return j % 3 == 0;
		    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;
		    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;
		    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;
		    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;
		    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;
	
		    default :
			    throw new Error("bad maskPattern:" + maskPattern);
		    }
	    },
	
	    getErrorCorrectPolynomial : function(errorCorrectLength) {
	
		    var a = new Polynomial([1], 0);
	
		    for (var i = 0; i < errorCorrectLength; i++) {
			    a = a.multiply(new Polynomial([1, math.gexp(i)], 0) );
		    }
	
		    return a;
	    },
	
	    getLengthInBits : function(mode, type) {
	
		    if (1 <= type && type < 10) {
	
			    // 1 - 9
	
			    switch(mode) {
			    case Mode.MODE_NUMBER 	: return 10;
			    case Mode.MODE_ALPHA_NUM 	: return 9;
			    case Mode.MODE_8BIT_BYTE	: return 8;
			    case Mode.MODE_KANJI  	: return 8;
			    default :
				    throw new Error("mode:" + mode);
			    }
	
		    } else if (type < 27) {
	
			    // 10 - 26
	
			    switch(mode) {
			    case Mode.MODE_NUMBER 	: return 12;
			    case Mode.MODE_ALPHA_NUM 	: return 11;
			    case Mode.MODE_8BIT_BYTE	: return 16;
			    case Mode.MODE_KANJI  	: return 10;
			    default :
				    throw new Error("mode:" + mode);
			    }
	
		    } else if (type < 41) {
	
			    // 27 - 40
	
			    switch(mode) {
			    case Mode.MODE_NUMBER 	: return 14;
			    case Mode.MODE_ALPHA_NUM	: return 13;
			    case Mode.MODE_8BIT_BYTE	: return 16;
			    case Mode.MODE_KANJI  	: return 12;
			    default :
				    throw new Error("mode:" + mode);
			    }
	
		    } else {
			    throw new Error("type:" + type);
		    }
	    },
	
	    getLostPoint : function(qrCode) {
		    
		    var moduleCount = qrCode.getModuleCount();
		    
		    var lostPoint = 0;
		    
		    // LEVEL1
		    
		    for (var row = 0; row < moduleCount; row++) {
	
			    for (var col = 0; col < moduleCount; col++) {
	
				    var sameCount = 0;
				    var dark = qrCode.isDark(row, col);
	
					for (var r = -1; r <= 1; r++) {
	
					    if (row + r < 0 || moduleCount <= row + r) {
						    continue;
					    }
	
					    for (var c = -1; c <= 1; c++) {
	
						    if (col + c < 0 || moduleCount <= col + c) {
							    continue;
						    }
	
						    if (r == 0 && c == 0) {
							    continue;
						    }
	
						    if (dark == qrCode.isDark(row + r, col + c) ) {
							    sameCount++;
						    }
					    }
				    }
	
				    if (sameCount > 5) {
					    lostPoint += (3 + sameCount - 5);
				    }
			    }
		    }
	
		    // LEVEL2
	
		    for (var row = 0; row < moduleCount - 1; row++) {
			    for (var col = 0; col < moduleCount - 1; col++) {
				    var count = 0;
				    if (qrCode.isDark(row,     col    ) ) count++;
				    if (qrCode.isDark(row + 1, col    ) ) count++;
				    if (qrCode.isDark(row,     col + 1) ) count++;
				    if (qrCode.isDark(row + 1, col + 1) ) count++;
				    if (count == 0 || count == 4) {
					    lostPoint += 3;
				    }
			    }
		    }
	
		    // LEVEL3
	
		    for (var row = 0; row < moduleCount; row++) {
			    for (var col = 0; col < moduleCount - 6; col++) {
				    if (qrCode.isDark(row, col)
						    && !qrCode.isDark(row, col + 1)
						    &&  qrCode.isDark(row, col + 2)
						    &&  qrCode.isDark(row, col + 3)
						    &&  qrCode.isDark(row, col + 4)
						    && !qrCode.isDark(row, col + 5)
						    &&  qrCode.isDark(row, col + 6) ) {
					    lostPoint += 40;
				    }
			    }
		    }
	
		    for (var col = 0; col < moduleCount; col++) {
			    for (var row = 0; row < moduleCount - 6; row++) {
				    if (qrCode.isDark(row, col)
						    && !qrCode.isDark(row + 1, col)
						    &&  qrCode.isDark(row + 2, col)
						    &&  qrCode.isDark(row + 3, col)
						    &&  qrCode.isDark(row + 4, col)
						    && !qrCode.isDark(row + 5, col)
						    &&  qrCode.isDark(row + 6, col) ) {
					    lostPoint += 40;
				    }
			    }
		    }
	
		    // LEVEL4
		    
		    var darkCount = 0;
	
		    for (var col = 0; col < moduleCount; col++) {
			    for (var row = 0; row < moduleCount; row++) {
				    if (qrCode.isDark(row, col) ) {
					    darkCount++;
				    }
			    }
		    }
		    
		    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
		    lostPoint += ratio * 10;
	
		    return lostPoint;		
	    }
	};
	
	module.exports = QRUtil;


/***/ },
/* 2376 */
/***/ function(module, exports, __webpack_require__) {

	var math = __webpack_require__(2377);
	
	function QRPolynomial(num, shift) {
	
		if (num.length == undefined) {
			throw new Error(num.length + "/" + shift);
		}
	
		var offset = 0;
	
		while (offset < num.length && num[offset] == 0) {
			offset++;
		}
	
		this.num = new Array(num.length - offset + shift);
		for (var i = 0; i < num.length - offset; i++) {
			this.num[i] = num[i + offset];
		}
	}
	
	QRPolynomial.prototype = {
	
		get : function(index) {
			return this.num[index];
		},
		
		getLength : function() {
			return this.num.length;
		},
		
		multiply : function(e) {
		
			var num = new Array(this.getLength() + e.getLength() - 1);
		
			for (var i = 0; i < this.getLength(); i++) {
				for (var j = 0; j < e.getLength(); j++) {
					num[i + j] ^= math.gexp(math.glog(this.get(i) ) + math.glog(e.get(j) ) );
				}
			}
		
			return new QRPolynomial(num, 0);
		},
		
		mod : function(e) {
		
			if (this.getLength() - e.getLength() < 0) {
				return this;
			}
		
			var ratio = math.glog(this.get(0) ) - math.glog(e.get(0) );
		
			var num = new Array(this.getLength() );
			
			for (var i = 0; i < this.getLength(); i++) {
				num[i] = this.get(i);
			}
			
			for (var i = 0; i < e.getLength(); i++) {
				num[i] ^= math.gexp(math.glog(e.get(i) ) + ratio);
			}
		
			// recursive call
			return new QRPolynomial(num, 0).mod(e);
		}
	};
	
	module.exports = QRPolynomial;


/***/ },
/* 2377 */
/***/ function(module, exports) {

	var QRMath = {
	
		glog : function(n) {
		
			if (n < 1) {
				throw new Error("glog(" + n + ")");
			}
			
			return QRMath.LOG_TABLE[n];
		},
		
		gexp : function(n) {
		
			while (n < 0) {
				n += 255;
			}
		
			while (n >= 256) {
				n -= 255;
			}
		
			return QRMath.EXP_TABLE[n];
		},
		
		EXP_TABLE : new Array(256),
		
		LOG_TABLE : new Array(256)
	
	};
		
	for (var i = 0; i < 8; i++) {
		QRMath.EXP_TABLE[i] = 1 << i;
	}
	for (var i = 8; i < 256; i++) {
		QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]
			^ QRMath.EXP_TABLE[i - 5]
			^ QRMath.EXP_TABLE[i - 6]
			^ QRMath.EXP_TABLE[i - 8];
	}
	for (var i = 0; i < 255; i++) {
		QRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;
	}
	
	module.exports = QRMath;


/***/ },
/* 2378 */,
/* 2379 */,
/* 2380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _components = {
	  _component: {},
	  _component2: {}
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-swipeout/index.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var React = __webpack_require__(301);
	var tweenState = __webpack_require__(2381);
	
	var _require = __webpack_require__(300),
	    PanResponder = _require.PanResponder,
	    TouchableHighlight = _require.TouchableHighlight,
	    StyleSheet = _require.StyleSheet,
	    Text = _require.Text,
	    View = _require.View;
	
	var styles = __webpack_require__(2382);
	
	var SwipeoutBtn = _wrapComponent('_component')(React.createClass({
	  displayName: 'SwipeoutBtn',
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      backgroundColor: null,
	      color: null,
	      component: null,
	      underlayColor: null,
	      height: 0,
	      key: null,
	      onPress: null,
	      text: 'Click me',
	      type: '',
	      width: 0
	    };
	  },
	  render: function render() {
	    var btn = this.props;
	
	    var styleSwipeoutBtn = [styles.swipeoutBtn];
	
	    //  apply "type" styles (delete || primary || secondary)
	    if (btn.type === 'delete') styleSwipeoutBtn.push(styles.colorDelete);else if (btn.type === 'primary') styleSwipeoutBtn.push(styles.colorPrimary);else if (btn.type === 'secondary') styleSwipeoutBtn.push(styles.colorSecondary);
	
	    //  apply background color
	    if (btn.backgroundColor) styleSwipeoutBtn.push([{ backgroundColor: btn.backgroundColor }]);
	
	    styleSwipeoutBtn.push([{
	      height: btn.height,
	      width: btn.width
	    }]);
	
	    var styleSwipeoutBtnComponent = [];
	
	    //  set button dimensions
	    styleSwipeoutBtnComponent.push([{
	      height: btn.height,
	      width: btn.width
	    }]);
	
	    var styleSwipeoutBtnText = [styles.swipeoutBtnText];
	
	    //  apply text color
	    if (btn.color) styleSwipeoutBtnText.push([{ color: btn.color }]);
	
	    return React.createElement(
	      TouchableHighlight,
	      {
	        onPress: this.props.onPress,
	        style: styles.swipeoutBtnTouchable,
	        underlayColor: this.props.underlayColor
	      },
	      React.createElement(
	        View,
	        { style: styleSwipeoutBtn },
	        btn.component ? React.createElement(
	          View,
	          { style: styleSwipeoutBtnComponent },
	          btn.component
	        ) : React.createElement(
	          Text,
	          { style: styleSwipeoutBtnText },
	          btn.text
	        )
	      )
	    );
	  }
	}));
	
	var Swipeout = _wrapComponent('_component2')(React.createClass({
	  displayName: 'Swipeout',
	
	  mixins: [tweenState.Mixin],
	  getDefaultProps: function getDefaultProps() {
	    return {
	      rowID: -1,
	      sectionID: -1
	    };
	  },
	  getInitialState: function getInitialState() {
	    return {
	      autoClose: this.props.autoClose || false,
	      btnWidth: 0,
	      btnsLeftWidth: 0,
	      btnsRightWidth: 0,
	      contentHeight: 0,
	      contentPos: 0,
	      contentWidth: 0,
	      openedRight: false,
	      swiping: false,
	      tweenDuration: 160,
	      timeStart: null
	    };
	  },
	  componentWillMount: function componentWillMount() {
	    this._panResponder = PanResponder.create({
	      onStartShouldSetPanResponder: function onStartShouldSetPanResponder(event, gestureState) {
	        return true;
	      },
	      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gestureState) {
	        return !(gestureState.dx === 0 || gestureState.dy === 0);
	      },
	      onPanResponderGrant: this._handlePanResponderGrant,
	      onPanResponderMove: this._handlePanResponderMove,
	      onPanResponderRelease: this._handlePanResponderEnd,
	      onPanResponderTerminate: this._handlePanResponderEnd,
	      onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
	        return true;
	      }
	    });
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.close) this._close();
	  },
	  _handlePanResponderGrant: function _handlePanResponderGrant(e, gestureState) {
	    var _this = this;
	
	    if (this.props.onOpen) {
	      this.props.onOpen(this.props.sectionID, this.props.rowID);
	    }
	    this.refs.swipeoutContent.measure(function (ox, oy, width, height) {
	      _this.setState({
	        btnWidth: width / 5,
	        btnsLeftWidth: _this.props.left ? width / 5 * _this.props.left.length : 0,
	        btnsRightWidth: _this.props.right ? width / 5 * _this.props.right.length : 0,
	        swiping: true,
	        timeStart: new Date().getTime()
	      });
	    });
	  },
	  _handlePanResponderMove: function _handlePanResponderMove(e, gestureState) {
	    var posX = gestureState.dx;
	    var posY = gestureState.dy;
	    var leftWidth = this.state.btnsLeftWidth;
	    var rightWidth = this.state.btnsRightWidth;
	    if (this.state.openedRight) var posX = gestureState.dx - rightWidth;else if (this.state.openedLeft) var posX = gestureState.dx + leftWidth;
	
	    //  prevent scroll if moveX is true
	    var moveX = Math.abs(posX) > Math.abs(posY);
	    if (this.props.scroll) {
	      if (moveX) this.props.scroll(false);else this.props.scroll(true);
	    }
	    if (this.state.swiping) {
	      //  move content to reveal swipeout
	      if (posX < 0 && this.props.right) this.setState({ contentPos: Math.min(posX, 0) });else if (posX > 0 && this.props.left) this.setState({ contentPos: Math.max(posX, 0) });
	    }
	  },
	  _handlePanResponderEnd: function _handlePanResponderEnd(e, gestureState) {
	    var posX = gestureState.dx;
	    var contentPos = this.state.contentPos;
	    var contentWidth = this.state.contentWidth;
	    var btnsLeftWidth = this.state.btnsLeftWidth;
	    var btnsRightWidth = this.state.btnsRightWidth;
	
	    //  minimum threshold to open swipeout
	    var openX = contentWidth * 0.33;
	
	    //  should open swipeout
	    var openLeft = posX > openX || posX > btnsLeftWidth / 2;
	    var openRight = posX < -openX || posX < -btnsRightWidth / 2;
	
	    //  account for open swipeouts
	    if (this.state.openedRight) var openRight = posX - openX < -openX;
	    if (this.state.openedLeft) var openLeft = posX + openX > openX;
	
	    //  reveal swipeout on quick swipe
	    var timeDiff = new Date().getTime() - this.state.timeStart < 200;
	    if (timeDiff) {
	      var openRight = posX < -openX / 10 && !this.state.openedLeft;
	      var openLeft = posX > openX / 10 && !this.state.openedRight;
	    }
	
	    if (this.state.swiping) {
	      if (openRight && contentPos < 0 && posX < 0) {
	        // open swipeout right
	        this._tweenContent('contentPos', -btnsRightWidth);
	        this.setState({ contentPos: -btnsRightWidth, openedLeft: false, openedRight: true });
	      } else if (openLeft && contentPos > 0 && posX > 0) {
	        // open swipeout left
	        this._tweenContent('contentPos', btnsLeftWidth);
	        this.setState({ contentPos: btnsLeftWidth, openedLeft: true, openedRight: false });
	      } else {
	        // close swipeout
	        this._tweenContent('contentPos', 0);
	        this.setState({ contentPos: 0, openedLeft: false, openedRight: false });
	      }
	    }
	
	    //  Allow scroll
	    if (this.props.scroll) this.props.scroll(true);
	  },
	  _tweenContent: function _tweenContent(state, endValue) {
	    this.tweenState(state, {
	      easing: tweenState.easingTypes.easeInOutQuad,
	      duration: endValue === 0 ? this.state.tweenDuration * 1.5 : this.state.tweenDuration,
	      endValue: endValue
	    });
	  },
	  _rubberBandEasing: function _rubberBandEasing(value, limit) {
	    if (value < 0 && value < limit) return limit - Math.pow(limit - value, 0.85);else if (value > 0 && value > limit) return limit + Math.pow(value - limit, 0.85);
	    return value;
	  }
	
	  //  close swipeout on button press
	  , _autoClose: function _autoClose(btn) {
	    if (this.state.autoClose) this._close();
	    var onPress = btn.onPress;
	    if (onPress) onPress();
	  },
	  _close: function _close() {
	    this._tweenContent('contentPos', 0);
	    this.setState({
	      openedRight: false,
	      openedLeft: false
	    });
	  },
	  render: function render() {
	    var contentWidth = this.state.contentWidth;
	    var posX = this.getTweeningValue('contentPos');
	
	    var styleSwipeout = [styles.swipeout];
	    if (this.props.backgroundColor) {
	      styleSwipeout.push([{ backgroundColor: this.props.backgroundColor }]);
	    }
	
	    var limit = -this.state.btnsRightWidth;
	    if (posX > 0) var limit = this.state.btnsLeftWidth;
	
	    var styleLeftPos = {
	      left: {
	        left: 0,
	        overflow: 'hidden',
	        width: Math.min(limit * (posX / limit), limit)
	      }
	    };
	    var styleRightPos = {
	      right: {
	        left: Math.abs(contentWidth + Math.max(limit, posX)),
	        right: 0
	      }
	    };
	    var styleContentPos = {
	      content: {
	        left: this._rubberBandEasing(posX, limit)
	      }
	    };
	
	    var styleContent = [styles.swipeoutContent];
	    styleContent.push(styleContentPos.content);
	
	    var styleRight = [styles.swipeoutBtns];
	    styleRight.push(styleRightPos.right);
	
	    var styleLeft = [styles.swipeoutBtns];
	    styleLeft.push(styleLeftPos.left);
	
	    var isRightVisible = posX < 0;
	    var isLeftVisible = posX > 0;
	
	    return React.createElement(
	      View,
	      { style: styleSwipeout },
	      React.createElement(
	        View,
	        _extends({
	          ref: 'swipeoutContent',
	          style: styleContent,
	          onLayout: this._onLayout
	        }, this._panResponder.panHandlers),
	        this.props.children
	      ),
	      this._renderButtons(this.props.right, isRightVisible, styleRight),
	      this._renderButtons(this.props.left, isLeftVisible, styleLeft)
	    );
	  },
	
	  _onLayout: function _onLayout(event) {
	    var _event$nativeEvent$la = event.nativeEvent.layout,
	        width = _event$nativeEvent$la.width,
	        height = _event$nativeEvent$la.height;
	
	    this.setState({
	      contentWidth: width,
	      contentHeight: height
	    });
	  },
	
	  _renderButtons: function _renderButtons(buttons, isVisible, style) {
	    if (buttons && isVisible) {
	      return React.createElement(
	        View,
	        { style: style },
	        buttons.map(this._renderButton)
	      );
	    } else {
	      return React.createElement(View, null);
	    }
	  },
	
	  _renderButton: function _renderButton(btn, i) {
	    var _this2 = this;
	
	    return React.createElement(SwipeoutBtn, {
	      backgroundColor: btn.backgroundColor,
	      color: btn.color,
	      component: btn.component,
	      height: this.state.contentHeight,
	      key: i,
	      onPress: function onPress() {
	        return _this2._autoClose(btn);
	      },
	      text: btn.text,
	      type: btn.type,
	      underlayColor: btn.underlayColor,
	      width: this.state.btnWidth });
	  }
	}));
	
	module.exports = Swipeout;

/***/ },
/* 2381 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	!function (e, n) {
	  "object" == ( false ? "undefined" : _typeof(exports)) && "object" == ( false ? "undefined" : _typeof(module)) ? module.exports = n() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (n), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.tweenState = n() : e.tweenState = n();
	}(undefined, function () {
	  return function (e) {
	    function n(r) {
	      if (t[r]) return t[r].exports;var a = t[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(a.exports, a, a.exports, n), a.loaded = !0, a.exports;
	    }var t = {};return n.m = e, n.c = t, n.p = "", n(0);
	  }({ 0: function _(e, n, t) {
	      e.exports = t(90);
	    }, 1: function _(e, n) {
	      function t() {
	        c = !1, o.length ? s = o.concat(s) : f = -1, s.length && r();
	      }function r() {
	        if (!c) {
	          var e = setTimeout(t);c = !0;for (var n = s.length; n;) {
	            for (o = s, s = []; ++f < n;) {
	              o && o[f].run();
	            }f = -1, n = s.length;
	          }o = null, c = !1, clearTimeout(e);
	        }
	      }function a(e, n) {
	        this.fun = e, this.array = n;
	      }function u() {}var o,
	          i = e.exports = {},
	          s = [],
	          c = !1,
	          f = -1;i.nextTick = function (e) {
	        var n = new Array(arguments.length - 1);if (arguments.length > 1) for (var t = 1; t < arguments.length; t++) {
	          n[t - 1] = arguments[t];
	        }s.push(new a(e, n)), 1 !== s.length || c || setTimeout(r, 0);
	      }, a.prototype.run = function () {
	        this.fun.apply(null, this.array);
	      }, i.title = "browser", i.browser = !0, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = u, i.addListener = u, i.once = u, i.off = u, i.removeListener = u, i.removeAllListeners = u, i.emit = u, i.binding = function (e) {
	        throw new Error("process.binding is not supported");
	      }, i.cwd = function () {
	        return "/";
	      }, i.chdir = function (e) {
	        throw new Error("process.chdir is not supported");
	      }, i.umask = function () {
	        return 0;
	      };
	    }, 90: function _(e, n, t) {
	      "use strict";
	      function r(e) {
	        return e && e.__esModule ? e : { "default": e };
	      }Object.defineProperty(n, "__esModule", { value: !0 });var a = t(165),
	          u = r(a),
	          o = t(91),
	          i = r(o),
	          s = "ADDITIVE",
	          c = a.easeInOutQuad,
	          f = 300,
	          l = 0,
	          h = { ADDITIVE: "ADDITIVE", DESTRUCTIVE: "DESTRUCTIVE" },
	          v = { _rafID: null, getInitialState: function getInitialState() {
	          return { tweenQueue: [] };
	        }, componentWillUnmount: function componentWillUnmount() {
	          i["default"].cancel(this._rafID), this._rafID = -1;
	        }, tweenState: function tweenState(e, n) {
	          var t = this,
	              r = n.easing,
	              a = n.duration,
	              u = n.delay,
	              o = n.beginValue,
	              v = n.endValue,
	              d = n.onEnd,
	              p = n.stackBehavior;this.setState(function (n) {
	            var I = n,
	                w = void 0,
	                g = void 0;if ("string" == typeof e) w = e, g = e;else {
	              for (var M = 0; M < e.length - 1; M++) {
	                I = I[e[M]];
	              }w = e[e.length - 1], g = e.join("|");
	            }var m = { easing: r || c, duration: null == a ? f : a, delay: null == u ? l : u, beginValue: null == o ? I[w] : o, endValue: v, onEnd: d, stackBehavior: p || s },
	                x = n.tweenQueue;return m.stackBehavior === h.DESTRUCTIVE && (x = n.tweenQueue.filter(function (e) {
	              return e.pathHash !== g;
	            })), x.push({ pathHash: g, config: m, initTime: Date.now() + m.delay }), I[w] = m.endValue, 1 === x.length && (t._rafID = (0, i["default"])(t._rafCb)), { tweenQueue: x };
	          });
	        }, getTweeningValue: function getTweeningValue(e) {
	          var n = this.state,
	              t = void 0,
	              r = void 0;if ("string" == typeof e) t = n[e], r = e;else {
	            t = n;for (var a = 0; a < e.length; a++) {
	              t = t[e[a]];
	            }r = e.join("|");
	          }for (var u = Date.now(), a = 0; a < n.tweenQueue.length; a++) {
	            var o = n.tweenQueue[a],
	                i = o.pathHash,
	                s = o.initTime,
	                c = o.config;if (i === r) {
	              var f = u - s > c.duration ? c.duration : Math.max(0, u - s),
	                  l = 0 === c.duration ? c.endValue : c.easing(f, c.beginValue, c.endValue, c.duration),
	                  h = l - c.endValue;t += h;
	            }
	          }return t;
	        }, _rafCb: function _rafCb() {
	          var e = this.state;if (0 !== e.tweenQueue.length) {
	            for (var n = Date.now(), t = [], r = 0; r < e.tweenQueue.length; r++) {
	              var a = e.tweenQueue[r],
	                  u = a.initTime,
	                  o = a.config;n - u < o.duration ? t.push(a) : o.onEnd && o.onEnd();
	            }-1 !== this._rafID && (this.setState({ tweenQueue: t }), this._rafID = (0, i["default"])(this._rafCb));
	          }
	        } };n["default"] = { Mixin: v, easingTypes: u["default"], stackBehavior: h }, e.exports = n["default"];
	    }, 91: function _(e, n, t) {
	      for (var r = t(92), a = "undefined" == typeof window ? {} : window, u = ["moz", "webkit"], o = "AnimationFrame", i = a["request" + o], s = a["cancel" + o] || a["cancelRequest" + o], c = 0; c < u.length && !i; c++) {
	        i = a[u[c] + "Request" + o], s = a[u[c] + "Cancel" + o] || a[u[c] + "CancelRequest" + o];
	      }if (!i || !s) {
	        var f = 0,
	            l = 0,
	            h = [],
	            v = 1e3 / 60;i = function i(e) {
	          if (0 === h.length) {
	            var n = r(),
	                t = Math.max(0, v - (n - f));f = t + n, setTimeout(function () {
	              var e = h.slice(0);h.length = 0;for (var n = 0; n < e.length; n++) {
	                if (!e[n].cancelled) try {
	                  e[n].callback(f);
	                } catch (t) {
	                  setTimeout(function () {
	                    throw t;
	                  }, 0);
	                }
	              }
	            }, Math.round(t));
	          }return h.push({ handle: ++l, callback: e, cancelled: !1 }), l;
	        }, s = function s(e) {
	          for (var n = 0; n < h.length; n++) {
	            h[n].handle === e && (h[n].cancelled = !0);
	          }
	        };
	      }e.exports = function (e) {
	        return i.call(a, e);
	      }, e.exports.cancel = function () {
	        s.apply(a, arguments);
	      };
	    }, 92: function _(e, n, t) {
	      (function (n) {
	        (function () {
	          var t, r, a;"undefined" != typeof performance && null !== performance && performance.now ? e.exports = function () {
	            return performance.now();
	          } : "undefined" != typeof n && null !== n && n.hrtime ? (e.exports = function () {
	            return (t() - a) / 1e6;
	          }, r = n.hrtime, t = function t() {
	            var e;return e = r(), 1e9 * e[0] + e[1];
	          }, a = t()) : Date.now ? (e.exports = function () {
	            return Date.now() - a;
	          }, a = Date.now()) : (e.exports = function () {
	            return new Date().getTime() - a;
	          }, a = new Date().getTime());
	        }).call(this);
	      }).call(n, t(1));
	    }, 165: function _(e, n) {
	      "use strict";
	      var t = { linear: function linear(e, n, t, r) {
	          var a = t - n;return a * e / r + n;
	        }, easeInQuad: function easeInQuad(e, n, t, r) {
	          var a = t - n;return a * (e /= r) * e + n;
	        }, easeOutQuad: function easeOutQuad(e, n, t, r) {
	          var a = t - n;return -a * (e /= r) * (e - 2) + n;
	        }, easeInOutQuad: function easeInOutQuad(e, n, t, r) {
	          var a = t - n;return (e /= r / 2) < 1 ? a / 2 * e * e + n : -a / 2 * (--e * (e - 2) - 1) + n;
	        }, easeInCubic: function easeInCubic(e, n, t, r) {
	          var a = t - n;return a * (e /= r) * e * e + n;
	        }, easeOutCubic: function easeOutCubic(e, n, t, r) {
	          var a = t - n;return a * ((e = e / r - 1) * e * e + 1) + n;
	        }, easeInOutCubic: function easeInOutCubic(e, n, t, r) {
	          var a = t - n;return (e /= r / 2) < 1 ? a / 2 * e * e * e + n : a / 2 * ((e -= 2) * e * e + 2) + n;
	        }, easeInQuart: function easeInQuart(e, n, t, r) {
	          var a = t - n;return a * (e /= r) * e * e * e + n;
	        }, easeOutQuart: function easeOutQuart(e, n, t, r) {
	          var a = t - n;return -a * ((e = e / r - 1) * e * e * e - 1) + n;
	        }, easeInOutQuart: function easeInOutQuart(e, n, t, r) {
	          var a = t - n;return (e /= r / 2) < 1 ? a / 2 * e * e * e * e + n : -a / 2 * ((e -= 2) * e * e * e - 2) + n;
	        }, easeInQuint: function easeInQuint(e, n, t, r) {
	          var a = t - n;return a * (e /= r) * e * e * e * e + n;
	        }, easeOutQuint: function easeOutQuint(e, n, t, r) {
	          var a = t - n;return a * ((e = e / r - 1) * e * e * e * e + 1) + n;
	        }, easeInOutQuint: function easeInOutQuint(e, n, t, r) {
	          var a = t - n;return (e /= r / 2) < 1 ? a / 2 * e * e * e * e * e + n : a / 2 * ((e -= 2) * e * e * e * e + 2) + n;
	        }, easeInSine: function easeInSine(e, n, t, r) {
	          var a = t - n;return -a * Math.cos(e / r * (Math.PI / 2)) + a + n;
	        }, easeOutSine: function easeOutSine(e, n, t, r) {
	          var a = t - n;return a * Math.sin(e / r * (Math.PI / 2)) + n;
	        }, easeInOutSine: function easeInOutSine(e, n, t, r) {
	          var a = t - n;return -a / 2 * (Math.cos(Math.PI * e / r) - 1) + n;
	        }, easeInExpo: function easeInExpo(e, n, t, r) {
	          var a = t - n;return 0 == e ? n : a * Math.pow(2, 10 * (e / r - 1)) + n;
	        }, easeOutExpo: function easeOutExpo(e, n, t, r) {
	          var a = t - n;return e == r ? n + a : a * (-Math.pow(2, -10 * e / r) + 1) + n;
	        }, easeInOutExpo: function easeInOutExpo(e, n, t, r) {
	          var a = t - n;return 0 === e ? n : e === r ? n + a : (e /= r / 2) < 1 ? a / 2 * Math.pow(2, 10 * (e - 1)) + n : a / 2 * (-Math.pow(2, -10 * --e) + 2) + n;
	        }, easeInCirc: function easeInCirc(e, n, t, r) {
	          var a = t - n;return -a * (Math.sqrt(1 - (e /= r) * e) - 1) + n;
	        }, easeOutCirc: function easeOutCirc(e, n, t, r) {
	          var a = t - n;return a * Math.sqrt(1 - (e = e / r - 1) * e) + n;
	        }, easeInOutCirc: function easeInOutCirc(e, n, t, r) {
	          var a = t - n;return (e /= r / 2) < 1 ? -a / 2 * (Math.sqrt(1 - e * e) - 1) + n : a / 2 * (Math.sqrt(1 - (e -= 2) * e) + 1) + n;
	        }, easeInElastic: function easeInElastic(e, n, t, r) {
	          var a,
	              u,
	              o,
	              i = t - n;return o = 1.70158, u = 0, a = i, 0 === e ? n : 1 === (e /= r) ? n + i : (u || (u = .3 * r), a < Math.abs(i) ? (a = i, o = u / 4) : o = u / (2 * Math.PI) * Math.asin(i / a), -(a * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / u)) + n);
	        }, easeOutElastic: function easeOutElastic(e, n, t, r) {
	          var a,
	              u,
	              o,
	              i = t - n;return o = 1.70158, u = 0, a = i, 0 === e ? n : 1 === (e /= r) ? n + i : (u || (u = .3 * r), a < Math.abs(i) ? (a = i, o = u / 4) : o = u / (2 * Math.PI) * Math.asin(i / a), a * Math.pow(2, -10 * e) * Math.sin((e * r - o) * (2 * Math.PI) / u) + i + n);
	        }, easeInOutElastic: function easeInOutElastic(e, n, t, r) {
	          var a,
	              u,
	              o,
	              i = t - n;return o = 1.70158, u = 0, a = i, 0 === e ? n : 2 === (e /= r / 2) ? n + i : (u || (u = r * (.3 * 1.5)), a < Math.abs(i) ? (a = i, o = u / 4) : o = u / (2 * Math.PI) * Math.asin(i / a), 1 > e ? -.5 * (a * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / u)) + n : a * Math.pow(2, -10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / u) * .5 + i + n);
	        }, easeInBack: function easeInBack(e, n, t, r, a) {
	          var u = t - n;return void 0 === a && (a = 1.70158), u * (e /= r) * e * ((a + 1) * e - a) + n;
	        }, easeOutBack: function easeOutBack(e, n, t, r, a) {
	          var u = t - n;return void 0 === a && (a = 1.70158), u * ((e = e / r - 1) * e * ((a + 1) * e + a) + 1) + n;
	        }, easeInOutBack: function easeInOutBack(e, n, t, r, a) {
	          var u = t - n;return void 0 === a && (a = 1.70158), (e /= r / 2) < 1 ? u / 2 * (e * e * (((a *= 1.525) + 1) * e - a)) + n : u / 2 * ((e -= 2) * e * (((a *= 1.525) + 1) * e + a) + 2) + n;
	        }, easeInBounce: function easeInBounce(e, n, r, a) {
	          var u,
	              o = r - n;return u = t.easeOutBounce(a - e, 0, o, a), o - u + n;
	        }, easeOutBounce: function easeOutBounce(e, n, t, r) {
	          var a = t - n;return (e /= r) < 1 / 2.75 ? a * (7.5625 * e * e) + n : 2 / 2.75 > e ? a * (7.5625 * (e -= 1.5 / 2.75) * e + .75) + n : 2.5 / 2.75 > e ? a * (7.5625 * (e -= 2.25 / 2.75) * e + .9375) + n : a * (7.5625 * (e -= 2.625 / 2.75) * e + .984375) + n;
	        }, easeInOutBounce: function easeInOutBounce(e, n, r, a) {
	          var u,
	              o = r - n;return a / 2 > e ? (u = t.easeInBounce(2 * e, 0, o, a), .5 * u + n) : (u = t.easeOutBounce(2 * e - a, 0, o, a), .5 * u + .5 * o + n);
	        } };e.exports = t;
	    } });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(952)(module)))

/***/ },
/* 2382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(300);
	var StyleSheet = React.StyleSheet;
	
	
	var styles = StyleSheet.create({
	  swipeout: {
	    backgroundColor: '#dbddde',
	    flex: 1,
	    overflow: 'hidden'
	  },
	  swipeoutBtnTouchable: {
	    flex: 1
	  },
	  swipeoutBtn: {
	    alignItems: 'center',
	    backgroundColor: '#b6bec0',
	    flex: 1,
	    justifyContent: 'center',
	    overflow: 'hidden'
	  },
	  swipeoutBtnText: {
	    color: '#fff',
	    textAlign: 'center'
	  },
	  swipeoutBtns: {
	    bottom: 0,
	    flex: 1,
	    flexDirection: 'row',
	    position: 'absolute',
	    right: 0,
	    top: 0
	  },
	  swipeoutContent: {
	    flex: 1
	  },
	  colorDelete: {
	    backgroundColor: '#fb3d38'
	  },
	  colorPrimary: {
	    backgroundColor: '#006fff'
	  },
	  colorSecondary: {
	    backgroundColor: '#fd9427'
	  }
	});
	
	module.exports = styles;

/***/ },
/* 2383 */,
/* 2384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Row = __webpack_require__(2385);
	
	Object.defineProperty(exports, 'Row', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Row).default;
	  }
	});
	
	var _Column = __webpack_require__(2388);
	
	Object.defineProperty(exports, 'Column', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Column).default;
	  }
	});
	
	var _ScreenSize = __webpack_require__(2386);
	
	Object.defineProperty(exports, 'SCREEN_SIZE', {
	  enumerable: true,
	  get: function get() {
	    return _ScreenSize.screenSize;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 2385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ScreenSize = __webpack_require__(2386);
	
	var _helpers = __webpack_require__(2387);
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Row: {
	    displayName: 'Row'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-flexbox-grid/src/components/Row.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var Row = _wrapComponent('Row')(function (_Component) {
	  _inherits(Row, _Component);
	
	  function Row(props) {
	    _classCallCheck(this, Row);
	
	    var _this = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, props));
	
	    _this.state = {
	      width: 0
	    };
	    return _this;
	  }
	
	  _createClass(Row, [{
	    key: '_getWidth',
	    value: function _getWidth(res) {
	      this.setState({ width: res.nativeEvent.layout.width });
	    }
	  }, {
	    key: '_cloneElements',
	    value: function _cloneElements() {
	      var _this2 = this;
	
	      // Check if state is updated before cloning. Causes layout to rerender less.
	      if (this.state.width > 0) {
	        //if size doesn't exist or is 0 default to 12
	        var rowSize = this.props.size > 0 ? this.props.size : 12;
	
	        return _react3.default.Children.map(this.props.children, function (element) {
	          return _react3.default.cloneElement(element, { parentWidth: _this2.state.width, rowSize: rowSize });
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if ((0, _helpers.isHidden)(_ScreenSize.screenSize, this.props)) {
	        return null;
	      } else {
	        return _react3.default.createElement(
	          _reactNative.View,
	          _extends({}, this.props, {
	            onLayout: this._getWidth.bind(this),
	            style: [this.props.style, { flexDirection: 'row',
	              flexWrap: this.props.nowrap ? 'nowrap' : 'wrap',
	              alignItems: this.props.alignItems,
	              justifyContent: this.props.justifyContent }] }),
	          this._cloneElements()
	        );
	      }
	    }
	  }]);
	
	  return Row;
	}(_react2.Component));
	
	exports.default = Row;
	
	
	Row.propTypes = {
	  size: _react2.PropTypes.number,
	  nowrap: _react2.PropTypes.bool,
	  smHidden: _react2.PropTypes.bool,
	  mdHidden: _react2.PropTypes.bool,
	  lgHidden: _react2.PropTypes.bool
	};

/***/ },
/* 2386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.screenSize = undefined;
	
	var _react = __webpack_require__(301);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function setScreenSize() {
	  var SCREEN_WIDTH = _reactNative.Dimensions.get('window').width;
	  var IPAD_WIDTH = 768;
	  var IPAD_PRO_WIDTH = 1024;
	
	  if (SCREEN_WIDTH < IPAD_WIDTH) {
	    return 'small';
	  }
	  if (SCREEN_WIDTH >= IPAD_WIDTH && SCREEN_WIDTH < IPAD_PRO_WIDTH) {
	    return 'medium';
	  }
	  if (SCREEN_WIDTH >= IPAD_PRO_WIDTH) {
	    return 'large';
	  }
	}
	
	var screenSize = exports.screenSize = setScreenSize();

/***/ },
/* 2387 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports.isHidden = function (screenSize, props) {
	  switch (screenSize) {
	    case 'small':
	      return props.smHidden ? true : false;
	    case 'medium':
	      return props.mdHidden ? true : false;
	    case 'large':
	      return props.lgHidden ? true : false;
	    default:
	      return false;
	  }
	};
	
	module.exports.getComponentWidth = function (screenSize, props) {
	  switch (screenSize) {
	    case 'small':
	      if (props.sm) {
	        return props.parentWidth * props.sm / props.rowSize;
	      } else {
	        return props.parentWidth;
	      }
	      break;
	    case 'medium':
	      if (props.md) {
	        return props.parentWidth * props.md / props.rowSize;
	      } else if (props.sm) {
	        return props.parentWidth * props.sm / props.rowSize;
	      } else {
	        return props.parentWidth;
	      }
	      break;
	    case 'large':
	      if (props.lg) {
	        return props.parentWidth * props.lg / props.rowSize;
	      } else if (props.md) {
	        return props.parentWidth * props.md / props.rowSize;
	      } else if (props.sm) {
	        return props.parentWidth * props.sm / props.rowSize;
	      } else {
	        return props.parentWidth;
	      }
	      break;
	    default:
	      return props.parentWidth;
	  }
	};
	
	module.exports.getComponentOffset = function (screenSize, props) {
	  switch (screenSize) {
	    case 'small':
	      if (props.smOffset) {
	        return props.parentWidth * props.smOffset / props.rowSize;
	      } else {
	        return 0;
	      }
	      break;
	    case 'medium':
	      if (props.mdOffset) {
	        return props.parentWidth * props.mdOffset / props.rowSize;
	      } else if (props.smOffset) {
	        return props.parentWidth * props.smOffset / props.rowSize;
	      } else {
	        return 0;
	      }
	      break;
	    case 'large':
	      if (props.lgOffset) {
	        return props.parentWidth * props.lgOffset / props.rowSize;
	      } else if (props.mdOffset) {
	        return props.parentWidth * props.mdOffset / props.rowSize;
	      } else if (props.smOffset) {
	        return props.parentWidth * props.smOffset / props.rowSize;
	      } else {
	        return 0;
	      }
	      break;
	    default:
	      return 0;
	  }
	};

/***/ },
/* 2388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redboxReact2 = __webpack_require__(778);
	
	var _redboxReact3 = _interopRequireDefault(_redboxReact2);
	
	var _react2 = __webpack_require__(301);
	
	var _react3 = _interopRequireDefault(_react2);
	
	var _reactTransformCatchErrors3 = __webpack_require__(783);
	
	var _reactTransformCatchErrors4 = _interopRequireDefault(_reactTransformCatchErrors3);
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ScreenSize = __webpack_require__(2386);
	
	var _helpers = __webpack_require__(2387);
	
	var _reactNative = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _components = {
	  Column: {
	    displayName: 'Column'
	  }
	};
	
	var _reactTransformCatchErrors2 = (0, _reactTransformCatchErrors4.default)({
	  filename: '/Users/tenaciousmv/Code/tradle-app-web/node_modules/react-native-flexbox-grid/src/components/Column.js',
	  components: _components,
	  locals: [],
	  imports: [_react3.default, _redboxReact3.default]
	});
	
	function _wrapComponent(id) {
	  return function (Component) {
	    return _reactTransformCatchErrors2(Component, id);
	  };
	}
	
	var Column = _wrapComponent('Column')(function (_Component) {
	  _inherits(Column, _Component);
	
	  function Column() {
	    _classCallCheck(this, Column);
	
	    return _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).apply(this, arguments));
	  }
	
	  _createClass(Column, [{
	    key: 'render',
	    value: function render() {
	      if ((0, _helpers.isHidden)(_ScreenSize.screenSize, this.props)) {
	        return null;
	      } else {
	        return _react3.default.createElement(
	          _reactNative.View,
	          _extends({}, this.props, {
	            style: [this.props.style, { width: (0, _helpers.getComponentWidth)(_ScreenSize.screenSize, this.props), flexDirection: 'column', marginLeft: (0, _helpers.getComponentOffset)(_ScreenSize.screenSize, this.props) }] }),
	          this.props.children
	        );
	      }
	    }
	  }]);
	
	  return Column;
	}(_react2.Component));
	
	exports.default = Column;
	
	
	Column.propTypes = {
	  sm: _react2.PropTypes.number,
	  smOffset: _react2.PropTypes.number,
	  smHidden: _react2.PropTypes.bool,
	  md: _react2.PropTypes.number,
	  mdOffset: _react2.PropTypes.number,
	  mdHidden: _react2.PropTypes.bool,
	  lg: _react2.PropTypes.number,
	  lgOffset: _react2.PropTypes.number,
	  lgHidden: _react2.PropTypes.bool,
	  width: _react2.PropTypes.number
	};

/***/ },
/* 2389 */,
/* 2390 */,
/* 2391 */,
/* 2392 */,
/* 2393 */,
/* 2394 */,
/* 2395 */,
/* 2396 */,
/* 2397 */,
/* 2398 */,
/* 2399 */,
/* 2400 */,
/* 2401 */,
/* 2402 */,
/* 2403 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2404);

/***/ }
]));
//# sourceMappingURL=vendor.1540a16e22497c2f241a.js.map